{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/auth.config.ts"],"sourcesContent":["\nimport type { NextAuthConfig } from 'next-auth';\n\nexport const authConfig = {\n  pages: {\n    signIn: '/login',\n  },\n  session: {\n    strategy: 'jwt',\n  },\n  callbacks: {\n    // JWT callback to add role and id to the token\n    // This callback itself should be Edge-safe if it only manipulates the token\n    async jwt({ token, user, trigger, session }) {\n      if (user) { // user object is available during sign-in\n        token.id = user.id;\n        // @ts-expect-error role is custom\n        token.role = user.role;\n      }\n      // If session is updated (e.g. via update() function with new role)\n      if (trigger === \"update\" && session?.user?.role) {\n        token.role = session.user.role;\n      }\n      return token;\n    },\n    // Session callback to add role and id to the session object from the token\n    async session({ session, token }) {\n      if (token && session.user) {\n        session.user.id = token.id as string;\n        session.user.role = token.role as string;\n      }\n      return session;\n    },\n  },\n  providers: [], // Providers are added in the main src/auth.ts for Node.js runtime\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAGO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;IACV;IACA,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,+CAA+C;QAC/C,4EAA4E;QAC5E,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;YACzC,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,kCAAkC;gBAClC,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,mEAAmE;YACnE,IAAI,YAAY,YAAY,SAAS,MAAM,MAAM;gBAC/C,MAAM,IAAI,GAAG,QAAQ,IAAI,CAAC,IAAI;YAChC;YACA,OAAO;QACT;QACA,2EAA2E;QAC3E,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IACF;IACA,WAAW,EAAE;AACf","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/auth.ts"],"sourcesContent":["\nimport NextAuth from 'next-auth';\nimport { Pool } from 'pg';\nimport PostgresAdapter from '@auth/pg-adapter';\nimport Credentials from 'next-auth/providers/credentials';\nimport bcrypt from 'bcryptjs';\nimport { authConfig } from './auth.config'; // Import Edge-safe config\n\nconst pool = new Pool({\n  connectionString: process.env.POSTGRES_URL,\n});\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  ...authConfig, // Spread the Edge-safe config\n  adapter: PostgresAdapter(pool),\n  providers: [\n    Credentials({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n        const email = credentials.email as string;\n        const password = credentials.password as string;\n\n        try {\n          const userResult = await pool.query('SELECT * FROM users WHERE email = $1', [email]);\n          if (userResult.rows.length === 0) {\n            return null;\n          }\n          const userAuthData = userResult.rows[0];\n\n          if (!userAuthData.hashedPassword) {\n            return null;\n          }\n\n          const passwordMatch = await bcrypt.compare(password, userAuthData.hashedPassword);\n          if (!passwordMatch) {\n            return null;\n          }\n\n          // Fetch role and potentially more accurate name from profiles table\n          const profileResult = await pool.query('SELECT role, name FROM profiles WHERE \"userId\" = $1', [userAuthData.id]);\n          \n          let role = 'siswa'; // Default role if not found in profiles\n          let name = userAuthData.name; // Default name from users table\n\n          if (profileResult.rows.length > 0) {\n            role = profileResult.rows[0].role;\n            // Prefer name from profiles table if it exists and is not null/empty\n            if (profileResult.rows[0].name && profileResult.rows[0].name.trim() !== '') {\n              name = profileResult.rows[0].name;\n            }\n          }\n          \n          return {\n            id: userAuthData.id,\n            email: userAuthData.email,\n            name: name, \n            role: role,\n            // emailVerified: userAuthData.emailVerified, // Ensure this is correctly handled if needed by your app\n          };\n        } catch (error) {\n          console.error('Authorize error:', error);\n          return null;\n        }\n      },\n    }),\n    // Add other Node.js specific providers here if any\n  ],\n});\n"],"names":[],"mappings":";;;;;;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA,gNAA4C,0BAA0B;;;;;;;;;;;AAEtE,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAEO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D,GAAG,uHAAA,CAAA,aAAU;IACb,SAAS,CAAA,GAAA,kJAAA,CAAA,UAAe,AAAD,EAAE;IACzB,WAAW;QACT,CAAA,GAAA,4JAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBACA,MAAM,QAAQ,YAAY,KAAK;gBAC/B,MAAM,WAAW,YAAY,QAAQ;gBAErC,IAAI;oBACF,MAAM,aAAa,MAAM,KAAK,KAAK,CAAC,wCAAwC;wBAAC;qBAAM;oBACnF,IAAI,WAAW,IAAI,CAAC,MAAM,KAAK,GAAG;wBAChC,OAAO;oBACT;oBACA,MAAM,eAAe,WAAW,IAAI,CAAC,EAAE;oBAEvC,IAAI,CAAC,aAAa,cAAc,EAAE;wBAChC,OAAO;oBACT;oBAEA,MAAM,gBAAgB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,aAAa,cAAc;oBAChF,IAAI,CAAC,eAAe;wBAClB,OAAO;oBACT;oBAEA,oEAAoE;oBACpE,MAAM,gBAAgB,MAAM,KAAK,KAAK,CAAC,uDAAuD;wBAAC,aAAa,EAAE;qBAAC;oBAE/G,IAAI,OAAO,SAAS,wCAAwC;oBAC5D,IAAI,OAAO,aAAa,IAAI,EAAE,gCAAgC;oBAE9D,IAAI,cAAc,IAAI,CAAC,MAAM,GAAG,GAAG;wBACjC,OAAO,cAAc,IAAI,CAAC,EAAE,CAAC,IAAI;wBACjC,qEAAqE;wBACrE,IAAI,cAAc,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,cAAc,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,OAAO,IAAI;4BAC1E,OAAO,cAAc,IAAI,CAAC,EAAE,CAAC,IAAI;wBACnC;oBACF;oBAEA,OAAO;wBACL,IAAI,aAAa,EAAE;wBACnB,OAAO,aAAa,KAAK;wBACzB,MAAM;wBACN,MAAM;oBAER;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,oBAAoB;oBAClC,OAAO;gBACT;YACF;QACF;KAED;AACH","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\nexport { GET, POST } from \"@/auth\";\nexport const runtime = \"nodejs\"; // Explicitly set to Node.js runtime\n"],"names":[],"mappings":";;;AACA;;;;;;AACO,MAAM,UAAU,UAAU,oCAAoC","debugId":null}}]
}