{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/entities/account.entity.ts"],"sourcesContent":["\nimport { Entity, PrimaryColumn, Column, ManyToOne, JoinColumn } from \"typeorm\";\nimport type { AdapterAccount } from \"@auth/core/adapters\";\nimport { UserEntity } from \"./user.entity\"; // Correctly import UserEntity\n\n@Entity({ name: \"accounts\" })\nexport class AccountEntity implements AdapterAccount {\n  @PrimaryColumn({ type: \"uuid\", default: () => \"uuid_generate_v4()\" }) // Or let TypeORM handle it if not using uuid extension manually\n  id!: string;\n\n  @Column({ type: \"uuid\" })\n  userId!: string;\n\n  @Column()\n  type!: string; // \"oauth\", \"email\", \"credentials\", etc.\n\n  @Column()\n  provider!: string;\n\n  @Column()\n  providerAccountId!: string;\n\n  @Column({ type: \"varchar\", nullable: true })\n  refresh_token?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  access_token?: string | null;\n\n  @Column({ type: \"bigint\", nullable: true })\n  expires_at?: number | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  token_type?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  scope?: string | null;\n\n  @Column({ type: \"text\", nullable: true })\n  id_token?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  session_state?: string | null;\n\n  // Foreign key to UserEntity\n  @ManyToOne(() => UserEntity, (user) => user.accounts, {\n    onDelete: \"CASCADE\", // If user is deleted, delete their accounts\n  })\n  @JoinColumn({ name: \"userId\" }) // Specify the foreign key column name\n  user!: UserEntity;\n}\n"],"names":[],"mappings":";;;;;AACA;AAEA,qOAA4C,8BAA8B;;;;;;;AAGnE,MAAM;IAEX,GAAY;IAGZ,OAAgB;IAGhB,KAAc;IAGd,SAAkB;IAGlB,kBAA2B;IAG3B,cAA8B;IAG9B,aAA6B;IAG7B,WAA2B;IAG3B,WAA2B;IAG3B,MAAsB;IAGtB,SAAyB;IAGzB,cAA8B;IAE9B,4BAA4B;IAK5B,KAAkB;AACpB;;;QA1CmB,MAAM;QAAQ,SAAS,IAAM;;;;;;QAGpC,MAAM;;;;;;;;;;;;;;;;;;QAYN,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAU,UAAU;;;;;;QAG1B,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAQ,UAAU;;;;;;QAGxB,MAAM;QAAW,UAAU;;;;;8JAIpB,mIAAA,CAAA,aAAU,GAAG,OAAS,KAAK,QAAQ;QAClD,UAAU;;;QAEE,MAAM;;;;;;QA1CZ,MAAM","debugId":null}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/entities/session.entity.ts"],"sourcesContent":["\nimport { Entity, PrimaryColumn, Column, ManyToOne, JoinColumn, Index } from \"typeorm\";\nimport type { AdapterSession } from \"@auth/core/adapters\";\nimport { UserEntity } from \"./user.entity\";\n\n@Entity({ name: \"sessions\" })\nexport class SessionEntity implements AdapterSession {\n  @PrimaryColumn({ type: \"uuid\", default: () => \"uuid_generate_v4()\" })\n  id!: string;\n\n  @Column()\n  sessionToken!: string;\n\n  @Column({ type: \"uuid\" })\n  userId!: string;\n\n  @Column({ type: \"timestamp\" })\n  expires!: Date;\n\n  @ManyToOne(() => UserEntity, { onDelete: \"CASCADE\" })\n  @JoinColumn({ name: \"userId\" })\n  user!: UserEntity;\n}\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;;;;AAGO,MAAM;IAEX,GAAY;IAGZ,aAAsB;IAGtB,OAAgB;IAGhB,QAAe;IAIf,KAAkB;AACpB;;;QAfmB,MAAM;QAAQ,SAAS,IAAM;;;;;;;;;;QAMpC,MAAM;;;;;;QAGN,MAAM;;;;;8JAGC,mIAAA,CAAA,aAAU;QAAI,UAAU;;;QAC3B,MAAM;;;;;;QAfZ,MAAM","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/entities/user.entity.ts"],"sourcesContent":["\nimport type { AdapterUser } from \"@auth/core/adapters\";\nimport { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, OneToMany } from \"typeorm\";\nimport type { Role } from \"@/types\";\nimport { AccountEntity } from \"./account.entity\";\nimport { SessionEntity } from \"./session.entity\"; // Added for completeness if needed for user relations\n\n@Entity({ name: \"users\" })\nexport class UserEntity implements AdapterUser {\n  @PrimaryGeneratedColumn(\"uuid\")\n  id!: string;\n\n  @Column({ type: \"varchar\", nullable: true })\n  name?: string | null; \n\n  @Column({ type: \"varchar\", unique: true })\n  email!: string;\n\n  @Column({ type: \"timestamp\", nullable: true })\n  emailVerified?: Date | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  image?: string | null; \n\n  @Column({ type: \"varchar\", nullable: true }) // For storing hashed password\n  passwordHash?: string | null;\n\n  @Column({\n    type: \"enum\",\n    enum: ['admin', 'guru', 'siswa', 'pimpinan', 'superadmin'],\n    default: 'siswa'\n  })\n  role!: Role;\n\n  @Column({ type: \"boolean\", default: false })\n  isVerified!: boolean; \n\n  @Column({ type: \"varchar\", nullable: true })\n  fullName?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  phone?: string | null;\n\n  @Column({ type: \"text\", nullable: true })\n  address?: string | null;\n\n  @Column({ type: \"date\", nullable: true })\n  birthDate?: string | null; \n\n  @Column({ type: \"text\", nullable: true })\n  bio?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  nis?: string | null; \n\n  @Column({ type: \"varchar\", nullable: true })\n  nip?: string | null; \n\n  @Column({ type: \"date\", nullable: true })\n  joinDate?: string | null; \n\n  @Column({ type: \"varchar\", nullable: true })\n  kelasId?: string | null; \n\n  @Column(\"simple-array\", { nullable: true })\n  mataPelajaran?: string[] | null; \n\n  @Column({ type: \"varchar\", nullable: true })\n  resetPasswordToken?: string | null;\n\n  @Column({ type: \"timestamp with time zone\", nullable: true })\n  resetPasswordExpires?: Date | null;\n\n  @CreateDateColumn({ type: \"timestamp with time zone\" })\n  createdAt!: Date;\n\n  @UpdateDateColumn({ type: \"timestamp with time zone\" })\n  updatedAt!: Date;\n\n  @OneToMany(() => AccountEntity, (account) => account.user)\n  accounts?: AccountEntity[];\n\n  @OneToMany(() => SessionEntity, (session) => session.user)\n  sessions?: SessionEntity[];\n}\n\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AACA,2OAAkD,sDAAsD;;;;;;;;AAGjG,MAAM;IAEX,GAAY;IAGZ,KAAqB;IAGrB,MAAe;IAGf,cAA4B;IAG5B,MAAsB;IAGtB,aAA6B;IAO7B,KAAY;IAGZ,WAAqB;IAGrB,SAAyB;IAGzB,MAAsB;IAGtB,QAAwB;IAGxB,UAA0B;IAG1B,IAAoB;IAGpB,IAAoB;IAGpB,IAAoB;IAGpB,SAAyB;IAGzB,QAAwB;IAGxB,cAAgC;IAGhC,mBAAmC;IAGnC,qBAAmC;IAGnC,UAAiB;IAGjB,UAAiB;IAGjB,SAA2B;IAG3B,SAA2B;AAC7B;;;;;;;QAxEY,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAW,QAAQ;;;;;;QAGzB,MAAM;QAAa,UAAU;;;;;;QAG7B,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAW,UAAU;;;;;;QAInC,MAAM;QACN,MAAM;YAAC;YAAS;YAAQ;YAAS;YAAY;SAAa;QAC1D,SAAS;;;;;;QAID,MAAM;QAAW,SAAS;;;;;;QAG1B,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAQ,UAAU;;;;;;QAGxB,MAAM;QAAQ,UAAU;;;;;;QAGxB,MAAM;QAAQ,UAAU;;;;;;QAGxB,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAAQ,UAAU;;;;;;QAGxB,MAAM;QAAW,UAAU;;;;;;QAGX,UAAU;;;;;;QAG1B,MAAM;QAAW,UAAU;;;;;;QAG3B,MAAM;QAA4B,UAAU;;;;;;QAGlC,MAAM;;;;;;QAGN,MAAM;;;;;8JAGT,sIAAA,CAAA,gBAAa,GAAG,UAAY,QAAQ,IAAI;;;;8JAGxC,sIAAA,CAAA,gBAAa,GAAG,UAAY,QAAQ,IAAI;;;;;QA3EjD,MAAM","debugId":null}},
    {"offset": {"line": 629, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/entities/verification-token.entity.ts"],"sourcesContent":["\nimport { Entity, PrimaryColumn, Column } from \"typeorm\";\nimport type { VerificationToken } from \"@auth/core/adapters\";\n\n@Entity({ name: \"verification_tokens\" })\nexport class VerificationTokenEntity implements VerificationToken {\n  @PrimaryColumn() // identifier + token is a composite primary key\n  identifier!: string;\n\n  @PrimaryColumn()\n  token!: string;\n\n  @Column({ type: \"timestamp\" })\n  expires!: Date;\n}\n"],"names":[],"mappings":";;;;;AACA;;;;;;AAIO,MAAM;IAEX,WAAoB;IAGpB,MAAe;IAGf,QAAe;AACjB;;;;;;;;;;;QAFY,MAAM;;;;;;QARR,MAAM","debugId":null}},
    {"offset": {"line": 670, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/constants.ts"],"sourcesContent":["\nimport type { Role } from '@/types';\nimport { LayoutDashboard, Users, BarChart3, Settings, LogOut, BookOpenText, BookOpenCheck, CalendarDays, ClipboardList, Presentation, FilePlus2, UserCheck, UploadCloud, ScrollText, GraduationCap, ClipboardCheck, BookOpen, FileText, Award, CalendarClock, CheckSquare } from 'lucide-react';\n\nexport const APP_NAME = 'EduCentral SMA Az-Bail';\n\nexport const ROLES: Record<Role, string> = {\n  admin: 'Admin',\n  guru: 'Guru',\n  siswa: 'Siswa',\n  pimpinan: 'Pimpinan',\n  superadmin: 'Super Admin',\n};\n\nexport const ROUTES = {\n  HOME: '/',\n  LOGIN: '/login',\n  REGISTER: '/register',\n  VERIFY_EMAIL: '/verify-email',\n  FORGOT_PASSWORD: '/forgot-password',\n  RESET_PASSWORD: '/reset-password',\n  \n  ADMIN_DASHBOARD: '/admin/dashboard',\n  ADMIN_USERS: '/admin/users',\n  ADMIN_KURIKULUM: '/admin/kurikulum',\n  ADMIN_MATA_PELAJARAN: '/admin/mata-pelajaran',\n  ADMIN_JADWAL: '/admin/jadwal',\n  \n  GURU_DASHBOARD: '/guru/dashboard',\n  GURU_PENGAJARAN: '/guru/pengajaran',\n  GURU_TUGAS: '/guru/tugas',\n  GURU_ABSENSI: '/guru/absensi',\n  GURU_MATERI: '/guru/materi',\n  GURU_TEST: '/guru/test',\n  GURU_PENILAIAN: '/guru/penilaian',\n\n  SISWA_DASHBOARD: '/siswa/dashboard',\n  SISWA_JADWAL: '/siswa/jadwal',\n  SISWA_TUGAS: '/siswa/tugas',\n  SISWA_MATERI: '/siswa/materi',\n  SISWA_TEST: '/siswa/test',\n  SISWA_NILAI: '/siswa/nilai',\n\n  PIMPINAN_DASHBOARD: '/pimpinan/dashboard',\n  \n  DATA_VISUALIZATION: '/data-visualization',\n  NOTIFICATIONS: '/notifications', \n  SETTINGS: '/settings', \n};\n\nexport const NAV_LINKS_CONFIG = [\n  { href: ROUTES.ADMIN_DASHBOARD, label: 'Dasbor', icon: LayoutDashboard, roles: ['admin', 'superadmin'] as Role[] },\n  { href: ROUTES.GURU_DASHBOARD, label: 'Dasbor', icon: LayoutDashboard, roles: ['guru'] as Role[] },\n  { href: ROUTES.SISWA_DASHBOARD, label: 'Dasbor', icon: LayoutDashboard, roles: ['siswa'] as Role[] },\n  { href: ROUTES.PIMPINAN_DASHBOARD, label: 'Dasbor', icon: LayoutDashboard, roles: ['pimpinan'] as Role[] },\n  \n  // Admin Links\n  { href: ROUTES.ADMIN_USERS, label: 'Manajemen Pengguna', icon: Users, roles: ['admin', 'superadmin'] as Role[] },\n  { href: ROUTES.ADMIN_KURIKULUM, label: 'Manajemen Kurikulum', icon: BookOpenCheck, roles: ['admin', 'superadmin'] as Role[] },\n  { href: ROUTES.ADMIN_MATA_PELAJARAN, label: 'Manajemen Mapel', icon: ClipboardList, roles: ['admin', 'superadmin'] as Role[] },\n  { href: ROUTES.ADMIN_JADWAL, label: 'Manajemen Jadwal', icon: CalendarDays, roles: ['admin', 'superadmin'] as Role[] },\n\n  // Guru Links\n  { href: ROUTES.GURU_PENGAJARAN, label: 'Pengajaran', icon: Presentation, roles: ['guru', 'superadmin'] as Role[] },\n  { href: ROUTES.GURU_TUGAS, label: 'Manajemen Tugas', icon: FilePlus2, roles: ['guru', 'superadmin'] as Role[] },\n  { href: ROUTES.GURU_ABSENSI, label: 'Absensi Siswa', icon: UserCheck, roles: ['guru', 'superadmin'] as Role[] },\n  { href: ROUTES.GURU_MATERI, label: 'Upload Materi', icon: UploadCloud, roles: ['guru', 'superadmin'] as Role[] },\n  { href: ROUTES.GURU_TEST, label: 'Manajemen Test', icon: ScrollText, roles: ['guru', 'superadmin'] as Role[] },\n  { href: ROUTES.GURU_PENILAIAN, label: 'Penilaian Siswa', icon: GraduationCap, roles: ['guru', 'superadmin'] as Role[] },\n\n  // Siswa Links\n  { href: ROUTES.SISWA_JADWAL, label: 'Jadwal Pelajaran', icon: CalendarDays, roles: ['siswa', 'superadmin'] as Role[] },\n  { href: ROUTES.SISWA_TUGAS, label: 'Tugas Saya', icon: ClipboardCheck, roles: ['siswa', 'superadmin'] as Role[] },\n  { href: ROUTES.SISWA_MATERI, label: 'Materi Pelajaran', icon: BookOpen, roles: ['siswa', 'superadmin'] as Role[] },\n  { href: ROUTES.SISWA_TEST, label: 'Test & Ujian', icon: FileText, roles: ['siswa', 'superadmin'] as Role[] },\n  { href: ROUTES.SISWA_NILAI, label: 'Nilai & Rapor', icon: Award, roles: ['siswa', 'superadmin'] as Role[] },\n  \n  // Common Links\n  { href: ROUTES.DATA_VISUALIZATION, label: 'Visualisasi Data', icon: BarChart3, roles: ['admin', 'guru', 'siswa', 'pimpinan', 'superadmin'] as Role[] },\n];\n\nexport const USER_NAV_ITEMS = [\n    { href: ROUTES.SETTINGS, label: 'Pengaturan Profil', icon: Settings },\n    { href: ROUTES.LOGIN, label: 'Keluar', icon: LogOut, action: 'logout' },\n];\n\nexport const DEFAULT_USERS_STORAGE_KEY = 'sma_azbail_users_mock';\nexport const AUTH_USER_STORAGE_KEY = 'sma_azbail_auth_user_mock';\n\nexport const SCHOOL_MAJORS = [\"IPA\", \"IPS\"];\nexport const SCHOOL_GRADE_LEVELS = [\"X\", \"XI\", \"XII\"];\nexport const SCHOOL_CLASSES_PER_MAJOR_GRADE = 5;\n\nexport const MOCK_SUBJECTS = [\n  \"Matematika Wajib\", \"Bahasa Indonesia\", \"Bahasa Inggris\", \"Pendidikan Agama\", \"PPKn\", \"Sejarah Indonesia\",\n  \"Fisika\", \"Kimia\", \"Biologi\", \"Matematika Peminatan\", // IPA\n  \"Geografi\", \"Sosiologi\", \"Ekonomi\", \"Sejarah Peminatan\" // IPS\n];\n\nexport const KATEGORI_MAPEL = [\n  \"Wajib Umum\",\n  \"Wajib Peminatan IPA\",\n  \"Wajib Peminatan IPS\",\n  \"Pilihan Lintas Minat\",\n  \"Muatan Lokal\",\n] as const; // `as const` makes it a tuple of string literals, good for enum-like usage\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 981, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/entities/mata-pelajaran.entity.ts"],"sourcesContent":["\nimport { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, Index } from \"typeorm\";\nimport { KATEGORI_MAPEL } from \"@/lib/constants\"; // Pastikan ini diimpor jika digunakan untuk enum\n\n// Menggunakan tipe string untuk kategori agar lebih fleksibel jika nilai berubah,\n// namun validasi bisa dilakukan di level aplikasi atau dengan check constraint di DB jika perlu.\n// Jika KATEGORI_MAPEL adalah enum string, Anda bisa menggunakannya langsung.\nexport type KategoriMapelType = typeof KATEGORI_MAPEL[number];\n\n@Entity({ name: \"mata_pelajaran\" })\nexport class MataPelajaranEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  id!: string;\n\n  @Index({ unique: true })\n  @Column({ type: \"varchar\", length: 50 })\n  kode!: string;\n\n  @Column({ type: \"varchar\", length: 255 })\n  nama!: string;\n\n  @Column({ type: \"text\", nullable: true })\n  deskripsi?: string | null;\n\n  @Column({\n    type: \"enum\",\n    enum: KATEGORI_MAPEL, // Menggunakan konstanta sebagai enum\n  })\n  kategori!: KategoriMapelType;\n\n  @CreateDateColumn({ type: \"timestamp with time zone\" })\n  createdAt!: Date;\n\n  @UpdateDateColumn({ type: \"timestamp with time zone\" })\n  updatedAt!: Date;\n}\n"],"names":[],"mappings":";;;;;AACA;AACA,oNAAkD,iDAAiD;;;;;;;AAQ5F,MAAM;IAEX,GAAY;IAIZ,KAAc;IAGd,KAAc;IAGd,UAA0B;IAM1B,SAA6B;IAG7B,UAAiB;IAGjB,UAAiB;AACnB;;;;;;;QArBW,QAAQ;;;QACP,MAAM;QAAW,QAAQ;;;;;;QAGzB,MAAM;QAAW,QAAQ;;;;;;QAGzB,MAAM;QAAQ,UAAU;;;;;;QAIhC,MAAM;QACN,MAAM,yHAAA,CAAA,iBAAc;;;;;;QAIF,MAAM;;;;;;QAGN,MAAM;;;;;;QAxBlB,MAAM","debugId":null}},
    {"offset": {"line": 1061, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data-source.ts"],"sourcesContent":["\nimport \"reflect-metadata\"; // Ensure this is the very first import\nimport { DataSource, type DataSourceOptions } from \"typeorm\";\nimport { UserEntity } from \"@/entities/user.entity\";\nimport { AccountEntity } from \"@/entities/account.entity\";\nimport { SessionEntity } from \"@/entities/session.entity\";\nimport { VerificationTokenEntity } from \"@/entities/verification-token.entity\";\nimport { MataPelajaranEntity } from \"@/entities/mata-pelajaran.entity\";\n\n// Import other application-specific entities here as they are created\n// e.g., import { KelasEntity } from \"@/entities/kelas.entity\";\n\nconst dataSourceOptions: DataSourceOptions = {\n  type: \"postgres\",\n  host: process.env.POSTGRES_HOST || \"localhost\",\n  port: Number(process.env.POSTGRES_PORT) || 5432,\n  username: process.env.POSTGRES_USER || \"postgres\",\n  password: process.env.POSTGRES_PASSWORD || \"password\",\n  database: process.env.POSTGRES_DB || \"educentral\",\n  synchronize: process.env.NODE_ENV === \"development\", // true for dev, false for prod (use migrations)\n  logging: process.env.NODE_ENV === \"development\" ? [\"query\", \"error\"] : [\"error\"],\n  entities: [\n    UserEntity,\n    AccountEntity,\n    SessionEntity,\n    VerificationTokenEntity,\n    MataPelajaranEntity,\n    // Add other entities here:\n    // KelasEntity,\n  ],\n  migrations: [], // Add path to migration files for production\n  subscribers: [],\n};\n\nexport const AppDataSource = new DataSource(dataSourceOptions);\n\n// Initialize DataSource\n// It's often better to initialize it once and export the initialized instance\n// or handle initialization carefully at the application's entry point.\n// For Next.js API routes, you might need to ensure it's initialized before use.\n\nlet _isDataSourceInitialized = false; \n\nexport async function getInitializedDataSource(): Promise<DataSource> {\n  if (!AppDataSource.isInitialized && !_isDataSourceInitialized) { \n    try {\n      await AppDataSource.initialize();\n      _isDataSourceInitialized = true; \n      console.log(\"DataSource has been initialized successfully.\");\n    } catch (err) {\n      console.error(\"Error during DataSource initialization:\", err);\n      throw err; // Re-throw error to handle it further up the call stack if needed\n    }\n  }\n  return AppDataSource;\n}\n"],"names":[],"mappings":";;;;AACA,+PAA2B,uCAAuC;AAClE;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,sEAAsE;AACtE,+DAA+D;AAE/D,MAAM,oBAAuC;IAC3C,MAAM;IACN,MAAM,QAAQ,GAAG,CAAC,aAAa,IAAI;IACnC,MAAM,OAAO,QAAQ,GAAG,CAAC,aAAa,KAAK;IAC3C,UAAU,QAAQ,GAAG,CAAC,aAAa,IAAI;IACvC,UAAU,QAAQ,GAAG,CAAC,iBAAiB,IAAI;IAC3C,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,aAAa,oDAAyB;IACtC,SAAS,uCAAyC;QAAC;QAAS;KAAQ;IACpE,UAAU;QACR,mIAAA,CAAA,aAAU;QACV,sIAAA,CAAA,gBAAa;QACb,sIAAA,CAAA,gBAAa;QACb,oJAAA,CAAA,0BAAuB;QACvB,gJAAA,CAAA,sBAAmB;KAGpB;IACD,YAAY,EAAE;IACd,aAAa,EAAE;AACjB;AAEO,MAAM,gBAAgB,IAAI,mIAAA,CAAA,aAAU,CAAC;AAE5C,wBAAwB;AACxB,8EAA8E;AAC9E,uEAAuE;AACvE,gFAAgF;AAEhF,IAAI,2BAA2B;AAExB,eAAe;IACpB,IAAI,CAAC,cAAc,aAAa,IAAI,CAAC,0BAA0B;QAC7D,IAAI;YACF,MAAM,cAAc,UAAU;YAC9B,2BAA2B;YAC3B,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,2CAA2C;YACzD,MAAM,KAAK,kEAAkE;QAC/E;IACF;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1128, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\nimport \"reflect-metadata\"; // Ensure this is the very first import\nimport NextAuth, { type NextAuthOptions, type User as NextAuthUser } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { TypeORMAdapter } from \"@auth/typeorm-adapter\";\nimport { AppDataSource, getInitializedDataSource } from \"@/lib/data-source\";\nimport { UserEntity } from \"@/entities/user.entity\";\nimport bcrypt from \"bcryptjs\";\nimport type { Role } from \"@/types\";\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      id: string;\n      role: Role;\n      isVerified: boolean;\n      fullName?: string | null;\n      // name and email are already part of NextAuthUser\n      // Add other custom fields that you want in the session.user object\n      phone?: string | null;\n      address?: string | null;\n      birthDate?: string | null; // Store as string for session if needed\n      bio?: string | null;\n      nis?: string | null;\n      nip?: string | null;\n      joinDate?: string | null; // Store as string\n      kelasId?: string | null; // Changed from `kelas` to match UserEntity for consistency\n      mataPelajaran?: string[] | null; // Changed from `mataPelajaran` (string) to match UserEntity\n    } & NextAuthUser; \n  }\n\n  interface User extends NextAuthUser {\n    role: Role;\n    isVerified: boolean;\n    fullName?: string | null;\n    passwordHash?: string | null; \n    // Add fields from UserEntity that authorize and jwt callbacks might need\n    phone?: string | null;\n    address?: string | null;\n    birthDate?: string | null;\n    bio?: string | null;\n    nis?: string | null;\n    nip?: string | null;\n    joinDate?: string | null;\n    kelasId?: string | null;\n    mataPelajaran?: string[] | null;\n  }\n}\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    id: string;\n    role: Role;\n    isVerified: boolean;\n    picture?: string | null; \n    name?: string | null;\n    fullName?: string | null;\n    // Add other custom fields from UserEntity that you want in the JWT\n    phone?: string | null;\n    address?: string | null;\n    birthDate?: string | null;\n    bio?: string | null;\n    nis?: string | null;\n    nip?: string | null;\n    joinDate?: string | null;\n    kelasId?: string | null;\n    mataPelajaran?: string[] | null;\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  adapter: TypeORMAdapter(AppDataSource),\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\", placeholder: \"jsmith@example.com\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials, req) {\n        if (!credentials?.email || !credentials.password) {\n          console.log(\"Authorize: Missing credentials\");\n          return null;\n        }\n        \n        const dataSource = await getInitializedDataSource();\n        const userRepo = dataSource.getRepository(UserEntity);\n        \n        console.log(\"Authorize: Attempting to find user by email:\", credentials.email);\n        const user = await userRepo.findOne({ where: { email: credentials.email } });\n\n        if (!user) {\n          console.log(\"Authorize: No user found with email:\", credentials.email);\n          return null;\n        }\n\n        if (!user.passwordHash) {\n          console.log(\"Authorize: User found but has no passwordHash:\", user.email);\n          return null; \n        }\n        \n        console.log(\"Authorize: User found, comparing password for:\", user.email);\n        const isValidPassword = await bcrypt.compare(credentials.password, user.passwordHash);\n\n        if (!isValidPassword) {\n          console.log(\"Authorize: Invalid password for user:\", user.email);\n          return null;\n        }\n        \n        console.log(\"Authorize: Credentials valid for user:\", user.email);\n        // Return the user object that NextAuth expects, including custom fields\n        // This user object is passed to the jwt callback\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name, \n          image: user.image,\n          role: user.role,\n          isVerified: user.isVerified,\n          fullName: user.fullName,\n          phone: user.phone,\n          address: user.address,\n          birthDate: user.birthDate,\n          bio: user.bio,\n          nis: user.nis,\n          nip: user.nip,\n          joinDate: user.joinDate,\n          kelasId: user.kelasId,\n          mataPelajaran: user.mataPelajaran,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    async jwt({ token, user, trigger, session: newSessionData }) { \n      if (user) { // User object is available on initial sign in (from authorize)\n        token.id = user.id;\n        token.role = user.role;\n        token.isVerified = user.isVerified;\n        token.name = user.name; \n        token.picture = user.image;\n        token.fullName = user.fullName;\n        token.phone = user.phone;\n        token.address = user.address;\n        token.birthDate = user.birthDate;\n        token.bio = user.bio;\n        token.nis = user.nis;\n        token.nip = user.nip;\n        token.joinDate = user.joinDate;\n        token.kelasId = user.kelasId;\n        token.mataPelajaran = user.mataPelajaran;\n      }\n      if (trigger === \"update\" && newSessionData?.user) {\n        // When session is updated (e.g. user profile update), reflect changes in token\n        // Ensure newSessionData.user is typed correctly if it comes from update()\n        const updatedUser = newSessionData.user as User; // Cast if necessary\n        token.name = updatedUser.name; \n        token.picture = updatedUser.image;\n        token.fullName = updatedUser.fullName;\n        token.phone = updatedUser.phone;\n        token.address = updatedUser.address;\n        token.birthDate = updatedUser.birthDate;\n        token.bio = updatedUser.bio;\n        // Note: Role, isVerified, nis, nip, joinDate, kelasId, mataPelajaran are less likely to be updated via client-side session update.\n        // If they are, ensure they are included here.\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n        session.user.role = token.role;\n        session.user.isVerified = token.isVerified;\n        session.user.name = token.name; \n        session.user.image = token.picture;\n        session.user.fullName = token.fullName;\n        session.user.phone = token.phone;\n        session.user.address = token.address;\n        session.user.birthDate = token.birthDate;\n        session.user.bio = token.bio;\n        session.user.nis = token.nis;\n        session.user.nip = token.nip;\n        session.user.joinDate = token.joinDate;\n        session.user.kelasId = token.kelasId;\n        session.user.mataPelajaran = token.mataPelajaran;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"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","debugId":null}}]
}