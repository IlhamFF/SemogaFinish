{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient, type SupabaseClient } from '@supabase/supabase-js';\nimport type { Database } from '@/types/supabase';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl) {\n  throw new Error(\"Missing env.NEXT_PUBLIC_SUPABASE_URL. Please ensure it's set in your .env.local file.\");\n}\nif (!supabaseAnonKey) {\n  throw new Error(\"Missing env.NEXT_PUBLIC_SUPABASE_ANON_KEY. Please ensure it's set in your .env.local file.\");\n}\n\nexport const supabase: SupabaseClient<Database> = createClient<Database>(supabaseUrl, supabaseAnonKey);\n"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM;AACN,MAAM;AAEN,uCAAkB;;AAElB;AACA,uCAAsB;;AAEtB;AAEO,MAAM,WAAqC,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAY,aAAa","debugId":null}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/hooks/use-auth.tsx"],"sourcesContent":["\n\"use client\";\n\nimport React, { useState, useEffect, createContext, useContext, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport type { User, Role } from '@/types';\nimport { supabase } from '@/lib/supabaseClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { ROUTES, APP_NAME } from '@/lib/constants';\nimport type { AuthError, Session, User as SupabaseAuthUser } from '@supabase/supabase-js';\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, passwordAttempt: string) => Promise<{ success: boolean; error?: AuthError | null; user?: User | null }>;\n  register: (email: string, passwordAttempt: string, fullName?: string) => Promise<{ success: boolean; error?: AuthError | null; requiresConfirmation?: boolean; user?: SupabaseAuthUser | null }>;\n  logout: () => Promise<void>;\n  isLoading: boolean;\n  session: Session | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const router = useRouter();\n  const { toast } = useToast();\n\n  const fetchUserProfile = useCallback(async (supabaseUser: SupabaseAuthUser): Promise<User | null> => {\n    try {\n      const { data: profile, error } = await supabase\n        .from('profiles')\n        .select('id, name, role, avatar_url')\n        .eq('id', supabaseUser.id)\n        .single();\n\n      if (error) {\n        console.error('Error fetching profile:', error.message);\n        // Don't toast here as it might be too frequent during initial load/redirects.\n        // Fallback user object if profile fetch fails or doesn't exist (e.g. trigger delay)\n        return {\n          id: supabaseUser.id,\n          email: supabaseUser.email,\n          role: 'siswa', // Default role\n          isVerified: !!supabaseUser.email_confirmed_at,\n          name: supabaseUser.email?.split('@')[0] || 'User',\n          avatarUrl: null,\n        };\n      }\n\n      if (profile) {\n        return {\n          id: profile.id,\n          email: supabaseUser.email,\n          name: profile.name,\n          role: (profile.role as Role) || 'siswa', // Ensure 'role' in profiles table matches Role type, default to 'siswa'\n          avatarUrl: profile.avatar_url,\n          isVerified: !!supabaseUser.email_confirmed_at,\n        };\n      }\n      // If profile is null but no error, means it might not exist yet.\n      // This can happen if the DB trigger is slow or hasn't run.\n      return {\n        id: supabaseUser.id,\n        email: supabaseUser.email,\n        role: 'siswa', // Default role\n        isVerified: !!supabaseUser.email_confirmed_at,\n        name: supabaseUser.email?.split('@')[0] || 'User',\n        avatarUrl: null,\n      };\n    } catch (e: any) {\n      console.error('Exception fetching profile:', e.message);\n      return null;\n    }\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const { data: authListener } = supabase.auth.onAuthStateChange(async (_event, newSession) => {\n      setSession(newSession);\n      if (newSession?.user) {\n        const profile = await fetchUserProfile(newSession.user);\n        setUser(profile);\n      } else {\n        setUser(null);\n      }\n      setIsLoading(false);\n    });\n\n    // Check initial session\n    supabase.auth.getSession().then(async ({ data: { session: initialSession } }) => {\n      setSession(initialSession);\n      if (initialSession?.user) {\n        const profile = await fetchUserProfile(initialSession.user);\n        setUser(profile);\n      }\n      setIsLoading(false);\n    });\n    \n    return () => {\n      authListener?.subscription.unsubscribe();\n    };\n  }, [fetchUserProfile]);\n\n  const login = async (email: string, passwordAttempt: string): Promise<{ success: boolean; error?: AuthError | null; user?: User | null }> => {\n    setIsLoading(true);\n    const { data, error } = await supabase.auth.signInWithPassword({ email, password: passwordAttempt });\n    setIsLoading(false);\n\n    if (error) {\n      // toast({ title: \"Login Failed\", description: error.message, variant: \"destructive\" });\n      return { success: false, error };\n    }\n    if (data.user) {\n       const appUser = await fetchUserProfile(data.user);\n       setUser(appUser); // Set user immediately for faster UI update\n      if (appUser) {\n        // toast({ title: \"Login Successful\", description: `Welcome back, ${appUser.name || appUser.email}!` });\n        return { success: true, user: appUser };\n      } else {\n        // toast({ title: \"Login Succeeded, Profile Error\", description: \"Could not load full user profile.\", variant: \"destructive\" });\n        return { success: true, user: null }; // Still a success in terms of auth\n      }\n    }\n    return { success: false, error: { name: \"LoginError\", message: \"An unknown error occurred during login.\"} };\n  };\n\n  const register = async (email: string, passwordAttempt: string, fullName?: string): Promise<{ success: boolean; error?: AuthError | null; requiresConfirmation?: boolean; user?: SupabaseAuthUser | null }> => {\n    setIsLoading(true);\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password: passwordAttempt,\n      options: {\n        data: {\n          name: fullName, // Will be used by the handle_new_user trigger\n          full_name: fullName, // common alternative used in some supabase triggers\n        }\n      }\n    });\n    setIsLoading(false);\n\n    if (error) {\n      // toast({ title: \"Registration Failed\", description: error.message, variant: \"destructive\" });\n      return { success: false, error };\n    }\n\n    if (data.user) {\n      const requiresConfirmation = !data.session; \n      // if (requiresConfirmation) {\n        // toast({ title: \"Registration Successful!\", description: \"Please check your email to verify your account.\" });\n      // } else {\n        // const appUser = await fetchUserProfile(data.user);\n        // setUser(appUser);\n        // toast({ title: \"Registration Successful!\", description: `Welcome to ${APP_NAME}!` });\n      // }\n      return { success: true, requiresConfirmation, user: data.user };\n    }\n    \n    return { success: false, error: { name: \"RegistrationError\", message: \"An unknown error occurred during registration.\"} };\n  };\n\n  const logout = async () => {\n    setIsLoading(true);\n    await supabase.auth.signOut();\n    setUser(null);\n    setSession(null);\n    // router.push(ROUTES.LOGIN); // Let pages handle redirect after logout to avoid premature navigation\n    toast({ title: \"Logged Out\", description: \"You have been successfully logged out.\" });\n    setIsLoading(false);\n  };\n  \n  const authContextValue: AuthContextType = { \n    user, \n    login, \n    register, \n    logout, \n    isLoading,\n    session\n  };\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 494, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/constants.ts"],"sourcesContent":["import type { Role } from '@/types';\nimport { LayoutDashboard, Users, BarChart3 } from 'lucide-react'; // Removed unused icons, add back if needed\n\nexport const APP_NAME = 'EduCentral';\n\nexport const ROLES: Record<Role, string> = {\n  admin: 'Admin',\n  guru: 'Guru',\n  siswa: 'Siswa',\n  pimpinan: 'Pimpinan',\n  superadmin: 'Super Admin',\n};\n\nexport const ROUTES = {\n  HOME: '/',\n  LOGIN: '/login',\n  REGISTER: '/register',\n  VERIFY_EMAIL: '/verify-email', // Page for users to check their email for verification link\n  ADMIN_DASHBOARD: '/admin/dashboard',\n  ADMIN_USERS: '/admin/users',\n  GURU_DASHBOARD: '/guru/dashboard',\n  SISWA_DASHBOARD: '/siswa/dashboard',\n  PIMPINAN_DASHBOARD: '/pimpinan/dashboard',\n  DATA_VISUALIZATION: '/data-visualization',\n  // NOTIFICATIONS: '/notifications', // Example, if you add it\n  // SETTINGS: '/settings', // Example\n};\n\nexport const NAV_LINKS_CONFIG = [\n  { href: ROUTES.ADMIN_DASHBOARD, label: 'Dashboard', icon: LayoutDashboard, roles: ['admin', 'superadmin'] as Role[] },\n  { href: ROUTES.GURU_DASHBOARD, label: 'Dashboard', icon: LayoutDashboard, roles: ['guru'] as Role[] },\n  { href: ROUTES.SISWA_DASHBOARD, label: 'Dashboard', icon: LayoutDashboard, roles: ['siswa'] as Role[] },\n  { href: ROUTES.PIMPINAN_DASHBOARD, label: 'Dashboard', icon: LayoutDashboard, roles: ['pimpinan'] as Role[] },\n  \n  { href: ROUTES.ADMIN_USERS, label: 'User Management', icon: Users, roles: ['admin', 'superadmin'] as Role[] },\n  { href: ROUTES.DATA_VISUALIZATION, label: 'Data Visualization', icon: BarChart3, roles: ['admin', 'guru', 'siswa', 'pimpinan', 'superadmin'] as Role[] },\n];\n\nexport const USER_NAV_ITEMS = [\n    // { href: ROUTES.SETTINGS, label: 'Settings', icon: Settings }, // Example\n    // Note: Logout is handled by useAuth().logout() and is typically in AppHeader or SidebarFooter\n];\n\n// Local storage keys are no longer primary for auth data with Supabase\n// export const DEFAULT_USERS_STORAGE_KEY = 'educentral_users_mock'; // If needed for other non-auth mock data\n// export const AUTH_USER_STORAGE_KEY = 'educentral_auth_user_mock';\n"],"names":[],"mappings":";;;;;;;AACA,iYAAkE,2CAA2C;AAA7G;AAAA;;AAEO,MAAM,WAAW;AAEjB,MAAM,QAA8B;IACzC,OAAO;IACP,MAAM;IACN,OAAO;IACP,UAAU;IACV,YAAY;AACd;AAEO,MAAM,SAAS;IACpB,MAAM;IACN,OAAO;IACP,UAAU;IACV,cAAc;IACd,iBAAiB;IACjB,aAAa;IACb,gBAAgB;IAChB,iBAAiB;IACjB,oBAAoB;IACpB,oBAAoB;AAGtB;AAEO,MAAM,mBAAmB;IAC9B;QAAE,MAAM,OAAO,eAAe;QAAE,OAAO;QAAa,MAAM,4NAAA,CAAA,kBAAe;QAAE,OAAO;YAAC;YAAS;SAAa;IAAW;IACpH;QAAE,MAAM,OAAO,cAAc;QAAE,OAAO;QAAa,MAAM,4NAAA,CAAA,kBAAe;QAAE,OAAO;YAAC;SAAO;IAAW;IACpG;QAAE,MAAM,OAAO,eAAe;QAAE,OAAO;QAAa,MAAM,4NAAA,CAAA,kBAAe;QAAE,OAAO;YAAC;SAAQ;IAAW;IACtG;QAAE,MAAM,OAAO,kBAAkB;QAAE,OAAO;QAAa,MAAM,4NAAA,CAAA,kBAAe;QAAE,OAAO;YAAC;SAAW;IAAW;IAE5G;QAAE,MAAM,OAAO,WAAW;QAAE,OAAO;QAAmB,MAAM,oMAAA,CAAA,QAAK;QAAE,OAAO;YAAC;YAAS;SAAa;IAAW;IAC5G;QAAE,MAAM,OAAO,kBAAkB;QAAE,OAAO;QAAsB,MAAM,kNAAA,CAAA,YAAS;QAAE,OAAO;YAAC;YAAS;YAAQ;YAAS;YAAY;SAAa;IAAW;CACxJ;AAEM,MAAM,iBAAiB,EAG7B,EAED,uEAAuE;CACvE,8GAA8G;CAC9G,oEAAoE","debugId":null}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/verify-email/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useEffect } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { ROUTES, APP_NAME } from \"@/lib/constants\";\nimport { MailCheck, Loader2, AlertTriangle } from \"lucide-react\";\nimport { supabase } from \"@/lib/supabaseClient\"; // For handling email change verification\nimport { useToast } from \"@/hooks/use-toast\";\n\nfunction VerifyEmailContent() {\n  const { user, isLoading, logout, session } = useAuth();\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { toast } = useToast();\n\n  const token = searchParams.get('token');\n  const type = searchParams.get('type');\n\n  useEffect(() => {\n    // Handle email change verification if token and type=email_change are present\n    if (token && type === 'email_change') {\n      const verifyEmailChange = async () => {\n        const { error } = await supabase.auth.verifyOtp({ token_hash: token, type: 'email_change' });\n        if (error) {\n          toast({ title: \"Email Change Error\", description: `Failed to verify email change: ${error.message}`, variant: \"destructive\"});\n        } else {\n          toast({ title: \"Email Changed\", description: \"Your email address has been successfully updated.\"});\n          // User's email in session/profile should update automatically via onAuthStateChange\n        }\n        // Redirect to login or dashboard regardless, as token is consumed\n        router.replace(ROUTES.LOGIN); \n      };\n      verifyEmailChange();\n      return; // Don't proceed with other logic if handling email change\n    }\n\n\n    // Regular email verification flow\n    if (!isLoading) {\n      if (user && user.isVerified && session) {\n        // User is already verified and has a session, redirect to their dashboard\n        toast({ title: \"Account Verified\", description: \"Redirecting to your dashboard...\"});\n        switch (user.role) {\n          case 'admin': router.replace(ROUTES.ADMIN_DASHBOARD); break;\n          case 'guru': router.replace(ROUTES.GURU_DASHBOARD); break;\n          case 'siswa': router.replace(ROUTES.SISWA_DASHBOARD); break;\n          case 'pimpinan': router.replace(ROUTES.PIMPINAN_DASHBOARD); break;\n          case 'superadmin': router.replace(ROUTES.ADMIN_DASHBOARD); break;\n          default: router.replace(ROUTES.LOGIN);\n        }\n      } else if (!session && !user && !token) { \n        // No session, no user, and not an email verification link click - probably navigated here directly without being logged in\n        router.replace(ROUTES.LOGIN);\n      }\n      // If user exists but is not verified, or if it's an email verification link (token present, type not email_change), they should see this page's content.\n      // Supabase handles email verification links by redirecting here after successful OTP verification.\n      // The onAuthStateChange listener in useAuth will update user's isVerified status.\n    }\n  }, [user, isLoading, session, router, toast, token, type]);\n\n\n  if (isLoading || (token && type === 'email_change') /* Show loader while verifying email change */) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-background\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n      </div>\n    );\n  }\n  \n  // If user is present and verified, they would have been redirected by useEffect.\n  // This content is for users who need to check their email, or have just clicked a verification link.\n  \n  const emailAddress = user?.email || \"your email address\";\n  const message = token && type !== 'recovery' // Type could be 'signup', 'invite', etc. for email verification\n    ? \"Your email has been verified! Redirecting you shortly...\" \n    : `A verification link has been sent to ${emailAddress}. Please click the link in that email to complete your registration and activate your account.`;\n\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardHeader className=\"text-center\">\n           <div className=\"mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 text-primary mb-4\">\n            {token && type !== 'recovery' ? <VerifiedIcon className=\"h-8 w-8\" /> : <MailCheck className=\"h-8 w-8\" />}\n          </div>\n          <CardTitle className=\"text-3xl font-headline text-primary\">{APP_NAME}</CardTitle>\n          <CardDescription className=\"text-muted-foreground\">\n            {token && type !== 'recovery' ? \"Email Verified!\" : \"Check Your Email\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6 text-center\">\n          <p>\n            {token && type !== 'recovery' ? \"\" : `Thanks for registering with ${APP_NAME}!`}\n          </p>\n          <p>\n            {message}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            If you don&apos;t see the email, please check your spam or junk folder. It might take a few minutes to arrive.\n          </p>\n          \n          <Button onClick={() => router.push(ROUTES.LOGIN)} className=\"w-full\">\n            Go to Login\n          </Button>\n          {user && (\n            <Button variant=\"link\" onClick={logout} className=\"text-sm text-muted-foreground\">\n              Log out\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function VerifyEmailPage() {\n  return (\n    <AuthProvider>\n      <VerifyEmailContent />\n    </AuthProvider>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}