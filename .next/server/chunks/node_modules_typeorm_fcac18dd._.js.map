{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"file":"MetadataUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata-builder/MetadataUtils.ts"],"sourcesContent":["/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n    /**\n     * Gets given's entity all inherited classes.\n     * Gives in order from parents to children.\n     * For example Post extends ContentModel which extends Unit it will give\n     * [Unit, ContentModel, Post]\n     */\n    static getInheritanceTree(entity: Function): Function[] {\n        const tree: Function[] = [entity]\n        const getPrototypeOf = (object: Function): void => {\n            const proto = Object.getPrototypeOf(object)\n            if (proto && proto.name) {\n                tree.push(proto)\n                getPrototypeOf(proto)\n            }\n        }\n        getPrototypeOf(entity)\n        return tree\n    }\n\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    static isInherited(target1: Function, target2: Function) {\n        return target1.prototype instanceof target2\n    }\n\n    /**\n     * Filters given array of targets by a given classes.\n     * If classes are not given, then it returns array itself.\n     */\n    static filterByTarget<T extends { target?: any }>(\n        array: T[],\n        classes?: any[],\n    ): T[] {\n        if (!classes) return array\n        return array.filter(\n            (item) => item.target && classes.indexOf(item.target) !== -1,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA;;GAEG,CACH,MAAa,aAAa;IACtB;;;;;OAKG,CACH,MAAM,CAAC,kBAAkB,CAAC,MAAgB,EAAA;QACtC,MAAM,IAAI,GAAe;YAAC,MAAM;SAAC,CAAA;QACjC,MAAM,cAAc,GAAG,CAAC,MAAgB,EAAQ,EAAE;YAC9C,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;YAC3C,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAChB,cAAc,CAAC,KAAK,CAAC,CAAA;YACzB,CAAC;QACL,CAAC,CAAA;QACD,cAAc,CAAC,MAAM,CAAC,CAAA;QACtB,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG,CACH,MAAM,CAAC,WAAW,CAAC,OAAiB,EAAE,OAAiB,EAAA;QACnD,OAAO,OAAO,CAAC,SAAS,YAAY,OAAO,CAAA;IAC/C,CAAC;IAED;;;OAGG,CACH,MAAM,CAAC,cAAc,CACjB,KAAU,EACV,OAAe,EAAA;QAEf,IAAI,CAAC,OAAO,EAAE,OAAO,KAAK,CAAA;QAC1B,OAAO,KAAK,CAAC,MAAM,CACf,CAAC,IAAI,EAAE,CAAG,CAAD,GAAK,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAC/D,CAAA;IACL,CAAC;CACJ;AAxCD,QAAA,aAAA,GAAA,cAwCC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"file":"EntityMetadataValidator.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata-builder/EntityMetadataValidator.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { MissingPrimaryColumnError } from \"../error/MissingPrimaryColumnError\"\nimport { CircularRelationsError } from \"../error/CircularRelationsError\"\nimport { DepGraph } from \"../util/DepGraph\"\nimport { Driver } from \"../driver/Driver\"\nimport { DataTypeNotSupportedError } from \"../error/DataTypeNotSupportedError\"\nimport { ColumnType } from \"../driver/types/ColumnTypes\"\nimport { NoConnectionOptionError } from \"../error/NoConnectionOptionError\"\nimport { InitializedRelationError } from \"../error/InitializedRelationError\"\nimport { TypeORMError } from \"../error\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\n\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas: EntityMetadata[], driver: Driver) {\n        entityMetadatas.forEach((entityMetadata) =>\n            this.validate(entityMetadata, entityMetadatas, driver),\n        )\n        this.validateDependencies(entityMetadatas)\n        this.validateEagerRelations(entityMetadatas)\n    }\n\n    /**\n     * Validates given entity metadata.\n     */\n    validate(\n        entityMetadata: EntityMetadata,\n        allEntityMetadatas: EntityMetadata[],\n        driver: Driver,\n    ) {\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError(entityMetadata)\n\n        // if entity has multiple primary keys and uses custom constraint name,\n        // then all primary keys should have the same constraint name\n        if (entityMetadata.primaryColumns.length > 1) {\n            const areConstraintNamesEqual = entityMetadata.primaryColumns.every(\n                (columnMetadata, i, columnMetadatas) =>\n                    columnMetadata.primaryKeyConstraintName ===\n                    columnMetadatas[0].primaryKeyConstraintName,\n            )\n            if (!areConstraintNamesEqual) {\n                throw new TypeORMError(\n                    `Entity ${entityMetadata.name} has multiple primary columns with different constraint names. Constraint names should be the equal.`,\n                )\n            }\n        }\n\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (\n            entityMetadata.inheritancePattern === \"STI\" ||\n            entityMetadata.tableType === \"entity-child\"\n        ) {\n            if (!entityMetadata.discriminatorColumn)\n                throw new TypeORMError(\n                    `Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`,\n                )\n\n            if (typeof entityMetadata.discriminatorValue === \"undefined\")\n                throw new TypeORMError(\n                    `Entity ${entityMetadata.name} has an undefined discriminator value. Discriminator value should be defined.`,\n                )\n\n            const sameDiscriminatorValueEntityMetadata =\n                allEntityMetadatas.find((metadata) => {\n                    return (\n                        metadata !== entityMetadata &&\n                        (metadata.inheritancePattern === \"STI\" ||\n                            metadata.tableType === \"entity-child\") &&\n                        metadata.tableName === entityMetadata.tableName &&\n                        metadata.discriminatorValue ===\n                            entityMetadata.discriminatorValue &&\n                        metadata.inheritanceTree.some(\n                            (parent) =>\n                                entityMetadata.inheritanceTree.indexOf(\n                                    parent,\n                                ) !== -1,\n                        )\n                    )\n                })\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new TypeORMError(\n                    `Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} have the same discriminator values. Make sure they are different while using the @ChildEntity decorator.`,\n                )\n        }\n\n        entityMetadata.relationCounts.forEach((relationCount) => {\n            if (\n                relationCount.relation.isManyToOne ||\n                relationCount.relation.isOneToOne\n            )\n                throw new TypeORMError(\n                    `Relation count can not be implemented on ManyToOne or OneToOne relations.`,\n                )\n        })\n\n        if (!(driver.options.type === \"mongodb\")) {\n            entityMetadata.columns\n                .filter((column) => !column.isVirtualProperty)\n                .forEach((column) => {\n                    const normalizedColumn = driver.normalizeType(\n                        column,\n                    ) as ColumnType\n                    if (\n                        driver.supportedDataTypes.indexOf(normalizedColumn) ===\n                        -1\n                    )\n                        throw new DataTypeNotSupportedError(\n                            column,\n                            normalizedColumn,\n                            driver.options.type,\n                        )\n                    if (\n                        column.length &&\n                        driver.withLengthColumnTypes.indexOf(\n                            normalizedColumn,\n                        ) === -1\n                    )\n                        throw new TypeORMError(\n                            `Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`,\n                        )\n                    if (\n                        column.type === \"enum\" &&\n                        !column.enum &&\n                        !column.enumName\n                    )\n                        throw new TypeORMError(\n                            `Column \"${column.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as enum, but missing \"enum\" or \"enumName\" properties.`,\n                        )\n                })\n        }\n\n        if (\n            DriverUtils.isMySQLFamily(driver) ||\n            driver.options.type === \"aurora-mysql\"\n        ) {\n            const generatedColumns = entityMetadata.columns.filter(\n                (column) =>\n                    column.isGenerated && column.generationStrategy !== \"uuid\",\n            )\n            if (generatedColumns.length > 1)\n                throw new TypeORMError(\n                    `Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`,\n                )\n        }\n\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (DriverUtils.isMySQLFamily(driver)) {\n            const metadatasWithDatabase = allEntityMetadatas.filter(\n                (metadata) => metadata.database,\n            )\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError(\"database\")\n        }\n\n        if (driver.options.type === \"mssql\") {\n            const charsetColumns = entityMetadata.columns.filter(\n                (column) => column.charset,\n            )\n            if (charsetColumns.length > 1)\n                throw new TypeORMError(\n                    `Character set specifying is not supported in Sql Server`,\n                )\n        }\n\n        // Postgres supports only STORED generated columns.\n        if (driver.options.type === \"postgres\") {\n            const virtualColumn = entityMetadata.columns.find(\n                (column) =>\n                    column.asExpression &&\n                    (!column.generatedType ||\n                        column.generatedType === \"VIRTUAL\"),\n            )\n            if (virtualColumn)\n                throw new TypeORMError(\n                    `Column \"${virtualColumn.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as VIRTUAL, but Postgres supports only STORED generated columns.`,\n                )\n        }\n\n        // check if relations are all without initialized properties\n        const entityInstance = entityMetadata.create(undefined, {\n            fromDeserializer: true,\n        })\n        entityMetadata.relations.forEach((relation) => {\n            if (relation.isManyToMany || relation.isOneToMany) {\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false) return\n\n                // get entity relation value and check if its an array\n                const relationInitializedValue =\n                    relation.getEntityValue(entityInstance)\n                if (Array.isArray(relationInitializedValue))\n                    throw new InitializedRelationError(relation)\n            }\n        })\n\n        // validate relations\n        entityMetadata.relations.forEach((relation) => {\n            // check OnDeleteTypes\n            if (\n                driver.supportedOnDeleteTypes &&\n                relation.onDelete &&\n                !driver.supportedOnDeleteTypes.includes(relation.onDelete)\n            ) {\n                throw new TypeORMError(\n                    `OnDeleteType \"${relation.onDelete}\" is not supported for ${driver.options.type}!`,\n                )\n            }\n\n            // check OnUpdateTypes\n            if (\n                driver.supportedOnUpdateTypes &&\n                relation.onUpdate &&\n                !driver.supportedOnUpdateTypes.includes(relation.onUpdate)\n            ) {\n                throw new TypeORMError(\n                    `OnUpdateType \"${relation.onUpdate}\" is not valid for ${driver.options.type}!`,\n                )\n            }\n\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new TypeORMError(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new TypeORMError(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n        })\n\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach((relation) => {\n            const isCircularCascadeRemove =\n                relation.isCascadeRemove &&\n                relation.inverseRelation &&\n                relation.inverseRelation!.isCascadeRemove\n            if (isCircularCascadeRemove)\n                throw new TypeORMError(\n                    `Relation ${entityMetadata.name}#${\n                        relation.propertyName\n                    } and ${relation.inverseRelation!.entityMetadata.name}#${\n                        relation.inverseRelation!.propertyName\n                    } both has cascade remove set. ` +\n                        `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`,\n                )\n        }) // todo: maybe better just deny removal from one to one relation without join column?\n\n        entityMetadata.eagerRelations.forEach((relation) => {})\n    }\n\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\n        const graph = new DepGraph()\n        entityMetadatas.forEach((entityMetadata) => {\n            graph.addNode(entityMetadata.name)\n        })\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.relationsWithJoinColumns\n                .filter((relation) => !relation.isNullable)\n                .forEach((relation) => {\n                    graph.addDependency(\n                        entityMetadata.name,\n                        relation.inverseEntityMetadata.name,\n                    )\n                })\n        })\n        try {\n            graph.overallOrder()\n        } catch (err) {\n            throw new CircularRelationsError(\n                err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"),\n            )\n        }\n    }\n\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    protected validateEagerRelations(entityMetadatas: EntityMetadata[]) {\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.eagerRelations.forEach((relation) => {\n                if (\n                    relation.inverseRelation &&\n                    relation.inverseRelation.isEager\n                )\n                    throw new TypeORMError(\n                        `Circular eager relations are disallowed. ` +\n                            `${entityMetadata.targetName}#${relation.propertyPath} contains \"eager: true\", and its inverse side ` +\n                            `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains \"eager: true\" as well.` +\n                            ` Remove \"eager: true\" from one side of the relation.`,\n                    )\n            })\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"file":"JunctionEntityMetadataBuilder.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata-builder/JunctionEntityMetadataBuilder.ts"],"sourcesContent":["import { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\"\nimport { IndexMetadata } from \"../metadata/IndexMetadata\"\nimport { JoinTableMetadataArgs } from \"../metadata-args/JoinTableMetadataArgs\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"../error\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\n\n/**\n * Creates EntityMetadata for junction tables.\n * Junction tables are tables generated by many-to-many relations.\n */\nexport class JunctionEntityMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the junction of the given many-to-many relation.\n     */\n    build(\n        relation: RelationMetadata,\n        joinTable: JoinTableMetadataArgs,\n    ): EntityMetadata {\n        const referencedColumns = this.collectReferencedColumns(\n            relation,\n            joinTable,\n        )\n        const inverseReferencedColumns = this.collectInverseReferencedColumns(\n            relation,\n            joinTable,\n        )\n\n        const joinTableName =\n            joinTable.name ||\n            this.connection.namingStrategy.joinTableName(\n                relation.entityMetadata.tableNameWithoutPrefix,\n                relation.inverseEntityMetadata.tableNameWithoutPrefix,\n                relation.propertyPath,\n                relation.inverseRelation\n                    ? relation.inverseRelation.propertyName\n                    : \"\",\n            )\n\n        const entityMetadata = new EntityMetadata({\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: joinTableName,\n                type: \"junction\",\n                database:\n                    joinTable.database || relation.entityMetadata.database,\n                schema: joinTable.schema || relation.entityMetadata.schema,\n                synchronize: joinTable.synchronize,\n            },\n        })\n        entityMetadata.build()\n\n        // create original side junction columns\n        const junctionColumns = referencedColumns.map((referencedColumn) => {\n            const joinColumn = joinTable.joinColumns\n                ? joinTable.joinColumns.find((joinColumnArgs) => {\n                      return (\n                          (!joinColumnArgs.referencedColumnName ||\n                              joinColumnArgs.referencedColumnName ===\n                                  referencedColumn.propertyName) &&\n                          !!joinColumnArgs.name\n                      )\n                  })\n                : undefined\n            const columnName =\n                joinColumn && joinColumn.name\n                    ? joinColumn.name\n                    : this.connection.namingStrategy.joinTableColumnName(\n                          relation.entityMetadata.tableNameWithoutPrefix,\n                          referencedColumn.propertyName,\n                          referencedColumn.databaseName,\n                      )\n\n            return new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: referencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        name: columnName,\n                        length:\n                            !referencedColumn.length &&\n                            (DriverUtils.isMySQLFamily(\n                                this.connection.driver,\n                            ) ||\n                                this.connection.driver.options.type ===\n                                    \"aurora-mysql\") &&\n                            // some versions of mariadb support the column type and should not try to provide the length property\n                            this.connection.driver.normalizeType(\n                                referencedColumn,\n                            ) !== \"uuid\" &&\n                            (referencedColumn.generationStrategy === \"uuid\" ||\n                                referencedColumn.type === \"uuid\")\n                                ? \"36\"\n                                : referencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                        width: referencedColumn.width,\n                        type: referencedColumn.type,\n                        precision: referencedColumn.precision,\n                        scale: referencedColumn.scale,\n                        charset: referencedColumn.charset,\n                        collation: referencedColumn.collation,\n                        zerofill: referencedColumn.zerofill,\n                        unsigned: referencedColumn.zerofill\n                            ? true\n                            : referencedColumn.unsigned,\n                        enum: referencedColumn.enum,\n                        enumName: referencedColumn.enumName,\n                        foreignKeyConstraintName:\n                            joinColumn?.foreignKeyConstraintName,\n                        nullable: false,\n                        primary: true,\n                    },\n                },\n            })\n        })\n\n        // create inverse side junction columns\n        const inverseJunctionColumns = inverseReferencedColumns.map(\n            (inverseReferencedColumn) => {\n                const joinColumn = joinTable.inverseJoinColumns\n                    ? joinTable.inverseJoinColumns.find((joinColumnArgs) => {\n                          return (\n                              (!joinColumnArgs.referencedColumnName ||\n                                  joinColumnArgs.referencedColumnName ===\n                                      inverseReferencedColumn.propertyName) &&\n                              !!joinColumnArgs.name\n                          )\n                      })\n                    : undefined\n                const columnName =\n                    joinColumn && joinColumn.name\n                        ? joinColumn.name\n                        : this.connection.namingStrategy.joinTableInverseColumnName(\n                              relation.inverseEntityMetadata\n                                  .tableNameWithoutPrefix,\n                              inverseReferencedColumn.propertyName,\n                              inverseReferencedColumn.databaseName,\n                          )\n\n                return new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    referencedColumn: inverseReferencedColumn,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: columnName,\n                        options: {\n                            length:\n                                !inverseReferencedColumn.length &&\n                                (DriverUtils.isMySQLFamily(\n                                    this.connection.driver,\n                                ) ||\n                                    this.connection.driver.options.type ===\n                                        \"aurora-mysql\") &&\n                                // some versions of mariadb support the column type and should not try to provide the length property\n                                this.connection.driver.normalizeType(\n                                    inverseReferencedColumn,\n                                ) !== \"uuid\" &&\n                                (inverseReferencedColumn.generationStrategy ===\n                                    \"uuid\" ||\n                                    inverseReferencedColumn.type === \"uuid\")\n                                    ? \"36\"\n                                    : inverseReferencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                            width: inverseReferencedColumn.width, // fix https://github.com/typeorm/typeorm/issues/6442\n                            type: inverseReferencedColumn.type,\n                            precision: inverseReferencedColumn.precision,\n                            scale: inverseReferencedColumn.scale,\n                            charset: inverseReferencedColumn.charset,\n                            collation: inverseReferencedColumn.collation,\n                            zerofill: inverseReferencedColumn.zerofill,\n                            unsigned: inverseReferencedColumn.zerofill\n                                ? true\n                                : inverseReferencedColumn.unsigned,\n                            enum: inverseReferencedColumn.enum,\n                            enumName: inverseReferencedColumn.enumName,\n                            foreignKeyConstraintName:\n                                joinColumn?.foreignKeyConstraintName,\n                            name: columnName,\n                            nullable: false,\n                            primary: true,\n                        },\n                    },\n                })\n            },\n        )\n\n        this.changeDuplicatedColumnNames(\n            junctionColumns,\n            inverseJunctionColumns,\n        )\n\n        // set junction table columns\n        entityMetadata.ownerColumns = junctionColumns\n        entityMetadata.inverseColumns = inverseJunctionColumns\n        entityMetadata.ownColumns = [\n            ...junctionColumns,\n            ...inverseJunctionColumns,\n        ]\n        entityMetadata.ownColumns.forEach(\n            (column) => (column.relationMetadata = relation),\n        )\n\n        // create junction table foreign keys\n        // Note: UPDATE CASCADE clause is not supported in Oracle.\n        // Note: UPDATE/DELETE CASCADE clauses are not supported in Spanner.\n        entityMetadata.foreignKeys = relation.createForeignKeyConstraints\n            ? [\n                  new ForeignKeyMetadata({\n                      entityMetadata: entityMetadata,\n                      referencedEntityMetadata: relation.entityMetadata,\n                      columns: junctionColumns,\n                      referencedColumns: referencedColumns,\n                      name: junctionColumns[0]?.foreignKeyConstraintName,\n                      onDelete:\n                          this.connection.driver.options.type === \"spanner\"\n                              ? \"NO ACTION\"\n                              : relation.onDelete || \"CASCADE\",\n                      onUpdate:\n                          this.connection.driver.options.type === \"oracle\" ||\n                          this.connection.driver.options.type === \"spanner\"\n                              ? \"NO ACTION\"\n                              : relation.onUpdate || \"CASCADE\",\n                  }),\n                  new ForeignKeyMetadata({\n                      entityMetadata: entityMetadata,\n                      referencedEntityMetadata: relation.inverseEntityMetadata,\n                      columns: inverseJunctionColumns,\n                      referencedColumns: inverseReferencedColumns,\n                      name: inverseJunctionColumns[0]?.foreignKeyConstraintName,\n                      onDelete:\n                          this.connection.driver.options.type === \"spanner\"\n                              ? \"NO ACTION\"\n                              : relation.inverseRelation\n                              ? relation.inverseRelation.onDelete\n                              : \"CASCADE\",\n                      onUpdate:\n                          this.connection.driver.options.type === \"oracle\" ||\n                          this.connection.driver.options.type === \"spanner\"\n                              ? \"NO ACTION\"\n                              : relation.inverseRelation\n                              ? relation.inverseRelation.onUpdate\n                              : \"CASCADE\",\n                  }),\n              ]\n            : []\n\n        // create junction table indices\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: junctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true,\n                },\n            }),\n\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: inverseJunctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true,\n                },\n            }),\n        ]\n\n        // finally return entity metadata\n        return entityMetadata\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    protected collectReferencedColumns(\n        relation: RelationMetadata,\n        joinTable: JoinTableMetadataArgs,\n    ): ColumnMetadata[] {\n        const hasAnyReferencedColumnName = joinTable.joinColumns\n            ? joinTable.joinColumns.find(\n                  (joinColumn) => !!joinColumn.referencedColumnName,\n              )\n            : false\n        if (\n            !joinTable.joinColumns ||\n            (joinTable.joinColumns && !hasAnyReferencedColumnName)\n        ) {\n            return relation.entityMetadata.columns.filter(\n                (column) => column.isPrimary,\n            )\n        } else {\n            return joinTable.joinColumns.map((joinColumn) => {\n                const referencedColumn = relation.entityMetadata.columns.find(\n                    (column) =>\n                        column.propertyName === joinColumn.referencedColumnName,\n                )\n                if (!referencedColumn)\n                    throw new TypeORMError(\n                        `Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.entityMetadata.name}`,\n                    )\n\n                return referencedColumn\n            })\n        }\n    }\n\n    /**\n     * Collects inverse referenced columns from the given join column args.\n     */\n    protected collectInverseReferencedColumns(\n        relation: RelationMetadata,\n        joinTable: JoinTableMetadataArgs,\n    ): ColumnMetadata[] {\n        const hasInverseJoinColumns = !!joinTable.inverseJoinColumns\n        const hasAnyInverseReferencedColumnName = hasInverseJoinColumns\n            ? joinTable.inverseJoinColumns!.find(\n                  (joinColumn) => !!joinColumn.referencedColumnName,\n              )\n            : false\n        if (\n            !hasInverseJoinColumns ||\n            (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)\n        ) {\n            return relation.inverseEntityMetadata.primaryColumns\n        } else {\n            return joinTable.inverseJoinColumns!.map((joinColumn) => {\n                const referencedColumn =\n                    relation.inverseEntityMetadata.ownColumns.find(\n                        (column) =>\n                            column.propertyName ===\n                            joinColumn.referencedColumnName,\n                    )\n                if (!referencedColumn)\n                    throw new TypeORMError(\n                        `Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`,\n                    )\n\n                return referencedColumn\n            })\n        }\n    }\n\n    protected changeDuplicatedColumnNames(\n        junctionColumns: ColumnMetadata[],\n        inverseJunctionColumns: ColumnMetadata[],\n    ) {\n        junctionColumns.forEach((junctionColumn) => {\n            inverseJunctionColumns.forEach((inverseJunctionColumn) => {\n                if (\n                    junctionColumn.givenDatabaseName ===\n                    inverseJunctionColumn.givenDatabaseName\n                ) {\n                    const junctionColumnName =\n                        this.connection.namingStrategy.joinTableColumnDuplicationPrefix(\n                            junctionColumn.propertyName,\n                            1,\n                        )\n                    junctionColumn.propertyName = junctionColumnName\n                    junctionColumn.givenDatabaseName = junctionColumnName\n\n                    const inverseJunctionColumnName =\n                        this.connection.namingStrategy.joinTableColumnDuplicationPrefix(\n                            inverseJunctionColumn.propertyName,\n                            2,\n                        )\n                    inverseJunctionColumn.propertyName =\n                        inverseJunctionColumnName\n                    inverseJunctionColumn.givenDatabaseName =\n                        inverseJunctionColumnName\n                }\n            })\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"file":"ClosureJunctionEntityMetadataBuilder.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { IndexMetadata } from \"../metadata/IndexMetadata\"\n\n/**\n * Creates EntityMetadata for junction tables of the closure entities.\n * Closure junction tables are tables generated by closure entities.\n */\nexport class ClosureJunctionEntityMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the closure junction of the given closure entity.\n     */\n    build(parentClosureEntityMetadata: EntityMetadata) {\n        // create entity metadata itself\n        const entityMetadata = new EntityMetadata({\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name:\n                    parentClosureEntityMetadata.treeOptions &&\n                    parentClosureEntityMetadata.treeOptions.closureTableName\n                        ? parentClosureEntityMetadata.treeOptions\n                              .closureTableName\n                        : parentClosureEntityMetadata.tableNameWithoutPrefix,\n                type: \"closure-junction\",\n            },\n        })\n        entityMetadata.build()\n\n        // create ancestor and descendant columns for new closure junction table\n        parentClosureEntityMetadata.primaryColumns.forEach((primaryColumn) => {\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    closureType: \"ancestor\",\n                    referencedColumn: primaryColumn,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName:\n                            parentClosureEntityMetadata.treeOptions &&\n                            parentClosureEntityMetadata.treeOptions\n                                .ancestorColumnName\n                                ? parentClosureEntityMetadata.treeOptions.ancestorColumnName(\n                                      primaryColumn,\n                                  )\n                                : primaryColumn.propertyName + \"_ancestor\",\n                        options: {\n                            primary: true,\n                            length: primaryColumn.length,\n                            type: primaryColumn.type,\n                        },\n                    },\n                }),\n            )\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    closureType: \"descendant\",\n                    referencedColumn: primaryColumn,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName:\n                            parentClosureEntityMetadata.treeOptions &&\n                            parentClosureEntityMetadata.treeOptions\n                                .descendantColumnName\n                                ? parentClosureEntityMetadata.treeOptions.descendantColumnName(\n                                      primaryColumn,\n                                  )\n                                : primaryColumn.propertyName + \"_descendant\",\n                        options: {\n                            primary: true,\n                            length: primaryColumn.length,\n                            type: primaryColumn.type,\n                        },\n                    },\n                }),\n            )\n        })\n\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true,\n                },\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true,\n                },\n            }),\n        ]\n\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\n        if (parentClosureEntityMetadata.treeLevelColumn) {\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: \"level\",\n                        options: {\n                            type: this.connection.driver.mappedDataTypes\n                                .treeLevel,\n                        },\n                    },\n                }),\n            )\n        }\n\n        // create junction table foreign keys\n        // Note: CASCADE is not applied to mssql because it does not support multi cascade paths\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                onDelete:\n                    this.connection.driver.options.type === \"mssql\"\n                        ? \"NO ACTION\"\n                        : \"CASCADE\",\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                onDelete:\n                    this.connection.driver.options.type === \"mssql\"\n                        ? \"NO ACTION\"\n                        : \"CASCADE\",\n            }),\n        ]\n\n        return entityMetadata\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"file":"RelationJoinColumnBuilder.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata-builder/RelationJoinColumnBuilder.ts"],"sourcesContent":["import { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\"\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { JoinColumnMetadataArgs } from \"../metadata-args/JoinColumnMetadataArgs\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { TypeORMError } from \"../error\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\n\n/**\n * Builds join column for the many-to-one and one-to-one owner relations.\n *\n * Cases it should cover:\n * 1. when join column is set with custom name and without referenced column name\n * we need automatically set referenced column name - primary ids by default\n * @JoinColumn({ name: \"custom_name\" })\n *\n * 2. when join column is set with only referenced column name\n * we need automatically set join column name - relation name + referenced column name\n * @JoinColumn({ referencedColumnName: \"title\" })\n *\n * 3. when join column is set without both referenced column name and join column name\n * we need to automatically set both of them\n * @JoinColumn()\n *\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\n * we need to create join column for it with proper referenced column name and join column name\n *\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\n * both options are required\n * @JoinColumn([\n *      { name: \"category_title\", referencedColumnName: \"type\" },\n *      { name: \"category_title\", referencedColumnName: \"name\" },\n * ])\n *\n * Since for many-to-one relations having JoinColumn decorator is not required,\n * we need to go through each many-to-one relation without join column decorator set\n * and create join column metadata args for them.\n */\nexport class RelationJoinColumnBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\n     */\n    build(\n        joinColumns: JoinColumnMetadataArgs[],\n        relation: RelationMetadata,\n    ): {\n        foreignKey: ForeignKeyMetadata | undefined\n        columns: ColumnMetadata[]\n        uniqueConstraint: UniqueMetadata | undefined\n    } {\n        const referencedColumns = this.collectReferencedColumns(\n            joinColumns,\n            relation,\n        )\n        const columns = this.collectColumns(\n            joinColumns,\n            relation,\n            referencedColumns,\n        )\n        if (!referencedColumns.length || !relation.createForeignKeyConstraints)\n            return {\n                foreignKey: undefined,\n                columns,\n                uniqueConstraint: undefined,\n            } // this case is possible for one-to-one non owning side and relations with createForeignKeyConstraints = false\n\n        const foreignKey = new ForeignKeyMetadata({\n            name: joinColumns[0]?.foreignKeyConstraintName,\n            entityMetadata: relation.entityMetadata,\n            referencedEntityMetadata: relation.inverseEntityMetadata,\n            namingStrategy: this.connection.namingStrategy,\n            columns,\n            referencedColumns,\n            onDelete: relation.onDelete,\n            onUpdate: relation.onUpdate,\n            deferrable: relation.deferrable,\n        })\n\n        // SQL requires UNIQUE/PK constraints on columns referenced by a FK\n        // Skip creating the unique constraint for the referenced columns if\n        // they are already contained in the PK of the referenced entity\n        if (\n            columns.every((column) => column.isPrimary) ||\n            !relation.isOneToOne\n        ) {\n            return { foreignKey, columns, uniqueConstraint: undefined }\n        }\n\n        const uniqueConstraint = new UniqueMetadata({\n            entityMetadata: relation.entityMetadata,\n            columns: foreignKey.columns,\n            args: {\n                name: this.connection.namingStrategy.relationConstraintName(\n                    relation.entityMetadata.tableName,\n                    foreignKey.columns.map((column) => column.databaseName),\n                ),\n                target: relation.entityMetadata.target,\n            },\n        })\n        uniqueConstraint.build(this.connection.namingStrategy)\n\n        return { foreignKey, columns, uniqueConstraint }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    protected collectReferencedColumns(\n        joinColumns: JoinColumnMetadataArgs[],\n        relation: RelationMetadata,\n    ): ColumnMetadata[] {\n        const hasAnyReferencedColumnName = joinColumns.find(\n            (joinColumnArgs) => !!joinColumnArgs.referencedColumnName,\n        )\n        const manyToOneWithoutJoinColumn =\n            joinColumns.length === 0 && relation.isManyToOne\n        const hasJoinColumnWithoutAnyReferencedColumnName =\n            joinColumns.length > 0 && !hasAnyReferencedColumnName\n\n        if (\n            manyToOneWithoutJoinColumn ||\n            hasJoinColumnWithoutAnyReferencedColumnName\n        ) {\n            // covers case3 and case1\n            return relation.inverseEntityMetadata.primaryColumns\n        } else {\n            // cases with referenced columns defined\n            return joinColumns.map((joinColumn) => {\n                const referencedColumn =\n                    relation.inverseEntityMetadata.ownColumns.find(\n                        (column) =>\n                            column.propertyName ===\n                            joinColumn.referencedColumnName,\n                    ) // todo: can we also search in relations?\n                if (!referencedColumn)\n                    throw new TypeORMError(\n                        `Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`,\n                    )\n\n                return referencedColumn\n            })\n        }\n    }\n\n    /**\n     * Collects columns from the given join column args.\n     */\n    private collectColumns(\n        joinColumns: JoinColumnMetadataArgs[],\n        relation: RelationMetadata,\n        referencedColumns: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return referencedColumns.map((referencedColumn) => {\n            // in the case if relation has join column with only name set we need this check\n            const joinColumnMetadataArg = joinColumns.find((joinColumn) => {\n                return (\n                    (!joinColumn.referencedColumnName ||\n                        joinColumn.referencedColumnName ===\n                            referencedColumn.propertyName) &&\n                    !!joinColumn.name\n                )\n            })\n            const joinColumnName = joinColumnMetadataArg\n                ? joinColumnMetadataArg.name\n                : this.connection.namingStrategy.joinColumnName(\n                      relation.propertyName,\n                      referencedColumn.propertyName,\n                  )\n\n            const relationalColumns = relation.embeddedMetadata\n                ? relation.embeddedMetadata.columns\n                : relation.entityMetadata.ownColumns\n            let relationalColumn = relationalColumns.find(\n                (column) =>\n                    column.databaseNameWithoutPrefixes === joinColumnName,\n            )\n            if (!relationalColumn) {\n                relationalColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: relation.entityMetadata,\n                    embeddedMetadata: relation.embeddedMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: relation.propertyName,\n                        options: {\n                            name: joinColumnName,\n                            type: referencedColumn.type,\n                            length:\n                                !referencedColumn.length &&\n                                (DriverUtils.isMySQLFamily(\n                                    this.connection.driver,\n                                ) ||\n                                    this.connection.driver.options.type ===\n                                        \"aurora-mysql\") &&\n                                // some versions of mariadb support the column type and should not try to provide the length property\n                                this.connection.driver.normalizeType(\n                                    referencedColumn,\n                                ) !== \"uuid\" &&\n                                (referencedColumn.generationStrategy ===\n                                    \"uuid\" ||\n                                    referencedColumn.type === \"uuid\")\n                                    ? \"36\"\n                                    : referencedColumn.length, // fix https://github.com/typeorm/typeorm/issues/3604\n                            width: referencedColumn.width,\n                            charset: referencedColumn.charset,\n                            collation: referencedColumn.collation,\n                            precision: referencedColumn.precision,\n                            scale: referencedColumn.scale,\n                            zerofill: referencedColumn.zerofill,\n                            unsigned: referencedColumn.unsigned,\n                            comment: referencedColumn.comment,\n                            enum: referencedColumn.enum,\n                            enumName: referencedColumn.enumName,\n                            primary: relation.isPrimary,\n                            nullable: relation.isNullable,\n                        },\n                    },\n                })\n                relation.entityMetadata.registerColumn(relationalColumn)\n            }\n            relationalColumn.referencedColumn = referencedColumn // its important to set it here because we need to set referenced column for user defined join column\n            relationalColumn.type = referencedColumn.type // also since types of relational column and join column must be equal we override user defined column type\n            relationalColumn.relationMetadata = relation\n            relationalColumn.build(this.connection)\n            return relationalColumn\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 791, "column": 0}, "map": {"version":3,"file":"EntityMetadataBuilder.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata-builder/EntityMetadataBuilder.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { IndexMetadata } from \"../metadata/IndexMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { EmbeddedMetadata } from \"../metadata/EmbeddedMetadata\"\nimport { MetadataArgsStorage } from \"../metadata-args/MetadataArgsStorage\"\nimport { EmbeddedMetadataArgs } from \"../metadata-args/EmbeddedMetadataArgs\"\nimport { RelationIdMetadata } from \"../metadata/RelationIdMetadata\"\nimport { RelationCountMetadata } from \"../metadata/RelationCountMetadata\"\nimport { EventListenerTypes } from \"../metadata/types/EventListenerTypes\"\nimport { MetadataUtils } from \"./MetadataUtils\"\nimport { TableMetadataArgs } from \"../metadata-args/TableMetadataArgs\"\nimport { JunctionEntityMetadataBuilder } from \"./JunctionEntityMetadataBuilder\"\nimport { ClosureJunctionEntityMetadataBuilder } from \"./ClosureJunctionEntityMetadataBuilder\"\nimport { RelationJoinColumnBuilder } from \"./RelationJoinColumnBuilder\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { EntityListenerMetadata } from \"../metadata/EntityListenerMetadata\"\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\"\nimport { CheckMetadata } from \"../metadata/CheckMetadata\"\nimport { ExclusionMetadata } from \"../metadata/ExclusionMetadata\"\nimport { TypeORMError } from \"../error\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nexport class EntityMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to build entity metadatas of the junction entities.\n     */\n    protected junctionEntityMetadataBuilder: JunctionEntityMetadataBuilder\n\n    /**\n     * Used to build entity metadatas of the closure junction entities.\n     */\n    protected closureJunctionEntityMetadataBuilder: ClosureJunctionEntityMetadataBuilder\n\n    /**\n     * Used to build join columns of the relations.\n     */\n    protected relationJoinColumnBuilder: RelationJoinColumnBuilder\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        private connection: DataSource,\n        private metadataArgsStorage: MetadataArgsStorage,\n    ) {\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(\n            connection,\n        )\n        this.closureJunctionEntityMetadataBuilder =\n            new ClosureJunctionEntityMetadataBuilder(connection)\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(\n            connection,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    build(entityClasses?: Function[]): EntityMetadata[] {\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        const allTables = entityClasses\n            ? this.metadataArgsStorage.filterTables(entityClasses)\n            : this.metadataArgsStorage.tables\n\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        const realTables = allTables.filter(\n            (table) =>\n                table.type === \"regular\" ||\n                table.type === \"closure\" ||\n                table.type === \"entity-child\" ||\n                table.type === \"view\",\n        )\n\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        const entityMetadatas = realTables.map((tableArgs) =>\n            this.createEntityMetadata(tableArgs),\n        )\n\n        // compute parent entity metadatas for table inheritance\n        entityMetadatas.forEach((entityMetadata) =>\n            this.computeParentEntityMetadata(entityMetadatas, entityMetadata),\n        )\n\n        // after all metadatas created we set child entity metadatas for table inheritance\n        entityMetadatas.forEach((metadata) => {\n            metadata.childEntityMetadatas = entityMetadatas.filter(\n                (childMetadata) => {\n                    return (\n                        typeof metadata.target === \"function\" &&\n                        typeof childMetadata.target === \"function\" &&\n                        MetadataUtils.isInherited(\n                            childMetadata.target,\n                            metadata.target,\n                        )\n                    )\n                },\n            )\n        })\n\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\n            )\n            .forEach((entityMetadata) => entityMetadata.build())\n\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType === \"entity-child\",\n            )\n            .forEach((entityMetadata) => entityMetadata.build())\n\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\n            )\n            .forEach((entityMetadata) =>\n                this.computeEntityMetadataStep1(\n                    entityMetadatas,\n                    entityMetadata,\n                ),\n            )\n\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType === \"entity-child\",\n            )\n            .forEach((entityMetadata) =>\n                this.computeEntityMetadataStep1(\n                    entityMetadatas,\n                    entityMetadata,\n                ),\n            )\n\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach((entityMetadata) =>\n            this.computeEntityMetadataStep2(entityMetadata),\n        )\n\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach((entityMetadata) =>\n            this.computeInverseProperties(entityMetadata, entityMetadatas),\n        )\n\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\n            )\n            .forEach((entityMetadata) => {\n                // create entity's relations join columns (for many-to-one and one-to-one owner)\n                entityMetadata.relations\n                    .filter(\n                        (relation) =>\n                            relation.isOneToOne || relation.isManyToOne,\n                    )\n                    .forEach((relation) => {\n                        const joinColumns =\n                            this.metadataArgsStorage.filterJoinColumns(\n                                relation.target,\n                                relation.propertyName,\n                            )\n                        const { foreignKey, columns, uniqueConstraint } =\n                            this.relationJoinColumnBuilder.build(\n                                joinColumns,\n                                relation,\n                            ) // create a foreign key based on its metadata args\n                        if (foreignKey) {\n                            relation.registerForeignKeys(foreignKey) // push it to the relation and thus register there a join column\n                            entityMetadata.foreignKeys.push(foreignKey)\n                        }\n                        if (columns) {\n                            relation.registerJoinColumns(columns)\n                        }\n                        if (uniqueConstraint) {\n                            if (\n                                DriverUtils.isMySQLFamily(\n                                    this.connection.driver,\n                                ) ||\n                                this.connection.driver.options.type ===\n                                    \"aurora-mysql\" ||\n                                this.connection.driver.options.type ===\n                                    \"mssql\" ||\n                                this.connection.driver.options.type === \"sap\" ||\n                                this.connection.driver.options.type ===\n                                    \"spanner\"\n                            ) {\n                                const index = new IndexMetadata({\n                                    entityMetadata:\n                                        uniqueConstraint.entityMetadata,\n                                    columns: uniqueConstraint.columns,\n                                    args: {\n                                        target: uniqueConstraint.target!,\n                                        name: uniqueConstraint.name,\n                                        unique: true,\n                                        synchronize: true,\n                                    },\n                                })\n\n                                if (\n                                    this.connection.driver.options.type ===\n                                    \"mssql\"\n                                ) {\n                                    index.where = index.columns\n                                        .map((column) => {\n                                            return `${this.connection.driver.escape(\n                                                column.databaseName,\n                                            )} IS NOT NULL`\n                                        })\n                                        .join(\" AND \")\n                                }\n\n                                if (\n                                    this.connection.driver.options.type ===\n                                    \"spanner\"\n                                ) {\n                                    index.isNullFiltered = true\n                                }\n\n                                if (relation.embeddedMetadata) {\n                                    relation.embeddedMetadata.indices.push(\n                                        index,\n                                    )\n                                } else {\n                                    relation.entityMetadata.ownIndices.push(\n                                        index,\n                                    )\n                                }\n                                this.computeEntityMetadataStep2(entityMetadata)\n                            } else {\n                                if (relation.embeddedMetadata) {\n                                    relation.embeddedMetadata.uniques.push(\n                                        uniqueConstraint,\n                                    )\n                                } else {\n                                    relation.entityMetadata.ownUniques.push(\n                                        uniqueConstraint,\n                                    )\n                                }\n                                this.computeEntityMetadataStep2(entityMetadata)\n                            }\n                        }\n\n                        if (\n                            foreignKey &&\n                            this.connection.driver.options.type ===\n                                \"cockroachdb\"\n                        ) {\n                            const index = new IndexMetadata({\n                                entityMetadata: relation.entityMetadata,\n                                columns: foreignKey.columns,\n                                args: {\n                                    target: relation.entityMetadata.target!,\n                                    synchronize: true,\n                                },\n                            })\n                            if (relation.embeddedMetadata) {\n                                relation.embeddedMetadata.indices.push(index)\n                            } else {\n                                relation.entityMetadata.ownIndices.push(index)\n                            }\n                            this.computeEntityMetadataStep2(entityMetadata)\n                        }\n                    })\n\n                // create junction entity metadatas for entity many-to-many relations\n                entityMetadata.relations\n                    .filter((relation) => relation.isManyToMany)\n                    .forEach((relation) => {\n                        const joinTable =\n                            this.metadataArgsStorage.findJoinTable(\n                                relation.target,\n                                relation.propertyName,\n                            )!\n                        if (!joinTable) return // no join table set - no need to do anything (it means this is many-to-many inverse side)\n\n                        // here we create a junction entity metadata for a new junction table of many-to-many relation\n                        const junctionEntityMetadata =\n                            this.junctionEntityMetadataBuilder.build(\n                                relation,\n                                joinTable,\n                            )\n                        relation.registerForeignKeys(\n                            ...junctionEntityMetadata.foreignKeys,\n                        )\n                        relation.registerJoinColumns(\n                            junctionEntityMetadata.ownIndices[0].columns,\n                            junctionEntityMetadata.ownIndices[1].columns,\n                        )\n                        relation.registerJunctionEntityMetadata(\n                            junctionEntityMetadata,\n                        )\n\n                        // compute new entity metadata properties and push it to entity metadatas pool\n                        this.computeEntityMetadataStep2(junctionEntityMetadata)\n                        this.computeInverseProperties(\n                            junctionEntityMetadata,\n                            entityMetadatas,\n                        )\n                        entityMetadatas.push(junctionEntityMetadata)\n                    })\n            })\n\n        // update entity metadata depend properties\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.relationsWithJoinColumns =\n                entityMetadata.relations.filter(\n                    (relation) => relation.isWithJoinColumn,\n                )\n            entityMetadata.hasNonNullableRelations =\n                entityMetadata.relationsWithJoinColumns.some(\n                    (relation) => !relation.isNullable || relation.isPrimary,\n                )\n        })\n\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter((metadata) => metadata.treeType === \"closure-table\")\n            .forEach((entityMetadata) => {\n                const closureJunctionEntityMetadata =\n                    this.closureJunctionEntityMetadataBuilder.build(\n                        entityMetadata,\n                    )\n                entityMetadata.closureJunctionTable =\n                    closureJunctionEntityMetadata\n                this.computeEntityMetadataStep2(closureJunctionEntityMetadata)\n                this.computeInverseProperties(\n                    closureJunctionEntityMetadata,\n                    entityMetadatas,\n                )\n                entityMetadatas.push(closureJunctionEntityMetadata)\n            })\n\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(\n                (metadata) =>\n                    metadata.inheritancePattern === \"STI\" &&\n                    metadata.discriminatorColumn,\n            )\n            .forEach((entityMetadata) =>\n                this.createKeysForTableInheritance(entityMetadata),\n            )\n\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.indices.forEach((index) =>\n                index.build(this.connection.namingStrategy),\n            )\n        })\n\n        // build all unique constraints (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.uniques.forEach((unique) =>\n                unique.build(this.connection.namingStrategy),\n            )\n        })\n\n        // build all check constraints\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.checks.forEach((check) =>\n                check.build(this.connection.namingStrategy),\n            )\n        })\n\n        // build all exclusion constraints\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.exclusions.forEach((exclusion) =>\n                exclusion.build(this.connection.namingStrategy),\n            )\n        })\n\n        // generate foreign keys for tables\n        entityMetadatas.forEach((entityMetadata) =>\n            this.createForeignKeys(entityMetadata, entityMetadatas),\n        )\n\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter((metadata) => typeof metadata.target === \"function\")\n            .forEach((entityMetadata) => {\n                entityMetadata.relations\n                    .filter((relation) => relation.isLazy)\n                    .forEach((relation) => {\n                        this.connection.relationLoader.enableLazyLoad(\n                            relation,\n                            (entityMetadata.target as Function).prototype,\n                        )\n                    })\n            })\n\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.columns.forEach((column) => {\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n                const generated = this.metadataArgsStorage.findGenerated(\n                    column.target,\n                    column.propertyName,\n                )\n                if (generated) {\n                    column.isGenerated = true\n                    column.generationStrategy = generated.strategy\n                    if (generated.strategy === \"uuid\") {\n                        column.type = \"uuid\"\n                    } else if (generated.strategy === \"rowid\") {\n                        column.type = \"int\"\n                    } else {\n                        column.type = column.type || Number\n                    }\n                    column.build(this.connection)\n                    this.computeEntityMetadataStep2(entityMetadata)\n                }\n            })\n        })\n\n        return entityMetadatas\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    protected createEntityMetadata(\n        tableArgs: TableMetadataArgs,\n    ): EntityMetadata {\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        const inheritanceTree: any[] =\n            typeof tableArgs.target === \"function\"\n                ? MetadataUtils.getInheritanceTree(tableArgs.target)\n                : [tableArgs.target] // todo: implement later here inheritance for string-targets\n\n        const tableInheritance = this.metadataArgsStorage.findInheritanceType(\n            tableArgs.target,\n        )\n        const tableTree = this.metadataArgsStorage.findTree(tableArgs.target)\n\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        let singleTableChildrenTargets: any[]\n        if (\n            (tableInheritance && tableInheritance.pattern === \"STI\") ||\n            tableArgs.type === \"entity-child\"\n        ) {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map((args) => args.target)\n                .filter((target) => typeof target === \"function\")\n\n            inheritanceTree.push(...singleTableChildrenTargets)\n        }\n\n        return new EntityMetadata({\n            connection: this.connection,\n            args: tableArgs,\n            inheritanceTree: inheritanceTree,\n            tableTree: tableTree,\n            inheritancePattern: tableInheritance\n                ? tableInheritance.pattern\n                : undefined,\n        })\n    }\n\n    protected computeParentEntityMetadata(\n        allEntityMetadatas: EntityMetadata[],\n        entityMetadata: EntityMetadata,\n    ) {\n        // after all metadatas created we set parent entity metadata for table inheritance\n        if (entityMetadata.tableType === \"entity-child\") {\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find(\n                (allEntityMetadata) => {\n                    return (\n                        allEntityMetadata.inheritanceTree.indexOf(\n                            entityMetadata.target as Function,\n                        ) !== -1 &&\n                        allEntityMetadata.inheritancePattern === \"STI\"\n                    )\n                },\n            )!\n        }\n    }\n\n    protected computeEntityMetadataStep1(\n        allEntityMetadatas: EntityMetadata[],\n        entityMetadata: EntityMetadata,\n    ) {\n        const entityInheritance = this.metadataArgsStorage.findInheritanceType(\n            entityMetadata.target,\n        )\n\n        const discriminatorValue =\n            this.metadataArgsStorage.findDiscriminatorValue(\n                entityMetadata.target,\n            )\n\n        if (typeof discriminatorValue !== \"undefined\") {\n            entityMetadata.discriminatorValue = discriminatorValue.value\n        } else {\n            entityMetadata.discriminatorValue = (\n                entityMetadata.target as any\n            ).name\n        }\n\n        // if single table inheritance is used, we need to mark all embedded columns as nullable\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(\n            entityMetadata,\n            this.metadataArgsStorage.filterEmbeddeds(\n                entityMetadata.inheritanceTree,\n            ),\n        ).map((embedded: EmbeddedMetadata): EmbeddedMetadata => {\n            if (entityMetadata.inheritancePattern === \"STI\") {\n                embedded.columns = embedded.columns.map(\n                    (column: ColumnMetadata): ColumnMetadata => {\n                        column.isNullable = true\n                        return column\n                    },\n                )\n            }\n            return embedded\n        })\n\n        entityMetadata.ownColumns = this.metadataArgsStorage\n            .filterColumns(entityMetadata.inheritanceTree)\n            .map((args) => {\n                // for single table children we reuse columns created for their parents\n                if (entityMetadata.tableType === \"entity-child\")\n                    return entityMetadata.parentEntityMetadata.ownColumns.find(\n                        (column) => column.propertyName === args.propertyName,\n                    )!\n\n                // for multiple table inheritance we can override default column values\n                if (\n                    entityMetadata.tableType === \"regular\" &&\n                    args.target !== entityMetadata.target\n                ) {\n                    const childArgs = this.metadataArgsStorage.columns.find(\n                        (c) =>\n                            c.propertyName === args.propertyName &&\n                            c.target === entityMetadata.target,\n                    )\n                    if (childArgs && childArgs.options.default) {\n                        args.options.default = childArgs.options.default\n                    }\n                }\n\n                const column = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata,\n                    args,\n                })\n\n                // if single table inheritance used, we need to mark all inherit table columns as nullable\n                const columnInSingleTableInheritedChild =\n                    allEntityMetadatas.find(\n                        (otherEntityMetadata) =>\n                            otherEntityMetadata.tableType === \"entity-child\" &&\n                            otherEntityMetadata.target === args.target,\n                    )\n                if (columnInSingleTableInheritedChild) column.isNullable = true\n                return column\n            })\n\n        // for table inheritance we need to add a discriminator column\n        //\n        if (entityInheritance && entityInheritance.column) {\n            const discriminatorColumnName =\n                entityInheritance.column && entityInheritance.column.name\n                    ? entityInheritance.column.name\n                    : \"type\"\n            let discriminatorColumn = entityMetadata.ownColumns.find(\n                (column) => column.propertyName === discriminatorColumnName,\n            )\n            if (!discriminatorColumn) {\n                discriminatorColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: discriminatorColumnName,\n                        options: entityInheritance.column || {\n                            name: discriminatorColumnName,\n                            type: \"varchar\",\n                            nullable: false,\n                        },\n                    },\n                })\n                discriminatorColumn.isVirtual = true\n                discriminatorColumn.isDiscriminator = true\n                entityMetadata.ownColumns.push(discriminatorColumn)\n            } else {\n                discriminatorColumn.isDiscriminator = true\n            }\n        }\n\n        // add discriminator column to the child entity metadatas\n        // discriminator column will not be there automatically since we are creating it in the code above\n        if (entityMetadata.tableType === \"entity-child\") {\n            const discriminatorColumn =\n                entityMetadata.parentEntityMetadata.ownColumns.find(\n                    (column) => column.isDiscriminator,\n                )\n            if (\n                discriminatorColumn &&\n                !entityMetadata.ownColumns.find(\n                    (column) => column === discriminatorColumn,\n                )\n            ) {\n                entityMetadata.ownColumns.push(discriminatorColumn)\n            }\n            // also copy the inheritance pattern & tree metadata\n            // this comes in handy when inheritance and trees are used together\n            entityMetadata.inheritancePattern =\n                entityMetadata.parentEntityMetadata.inheritancePattern\n            if (\n                !entityMetadata.treeType &&\n                !!entityMetadata.parentEntityMetadata.treeType\n            ) {\n                entityMetadata.treeType =\n                    entityMetadata.parentEntityMetadata.treeType\n                entityMetadata.treeOptions =\n                    entityMetadata.parentEntityMetadata.treeOptions\n                entityMetadata.treeParentRelation =\n                    entityMetadata.parentEntityMetadata.treeParentRelation\n                entityMetadata.treeLevelColumn =\n                    entityMetadata.parentEntityMetadata.treeLevelColumn\n            }\n        }\n\n        const { namingStrategy } = this.connection\n\n        // check if tree is used then we need to add extra columns for specific tree types\n        if (entityMetadata.treeType === \"materialized-path\") {\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    materializedPath: true,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: \"mpath\",\n                        options: /*tree.column || */ {\n                            name: namingStrategy.materializedPathColumnName,\n                            type: String,\n                            nullable: true,\n                            default: \"\",\n                        },\n                    },\n                }),\n            )\n        } else if (entityMetadata.treeType === \"nested-set\") {\n            const { left, right } = namingStrategy.nestedSetColumnNames\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    nestedSetLeft: true,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: left,\n                        options: /*tree.column || */ {\n                            name: left,\n                            type: Number,\n                            nullable: false,\n                            default: 1,\n                        },\n                    },\n                }),\n            )\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    nestedSetRight: true,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: right,\n                        options: /*tree.column || */ {\n                            name: right,\n                            type: Number,\n                            nullable: false,\n                            default: 2,\n                        },\n                    },\n                }),\n            )\n        }\n\n        entityMetadata.ownRelations = this.metadataArgsStorage\n            .filterRelations(entityMetadata.inheritanceTree)\n            .map((args) => {\n                // for single table children we reuse relations created for their parents\n                if (entityMetadata.tableType === \"entity-child\") {\n                    const parentRelation =\n                        entityMetadata.parentEntityMetadata.ownRelations.find(\n                            (relation) =>\n                                relation.propertyName === args.propertyName,\n                        )!\n                    const type =\n                        typeof args.type === \"function\"\n                            ? (args.type as () => any)()\n                            : args.type\n                    if (parentRelation.type !== type) {\n                        const clone = Object.create(parentRelation)\n                        clone.type = type\n                        return clone\n                    }\n\n                    return parentRelation\n                }\n\n                return new RelationMetadata({ entityMetadata, args })\n            })\n        entityMetadata.relationIds = this.metadataArgsStorage\n            .filterRelationIds(entityMetadata.inheritanceTree)\n            .map((args) => {\n                // for single table children we reuse relation ids created for their parents\n                if (entityMetadata.tableType === \"entity-child\")\n                    return entityMetadata.parentEntityMetadata.relationIds.find(\n                        (relationId) =>\n                            relationId.propertyName === args.propertyName,\n                    )!\n\n                return new RelationIdMetadata({ entityMetadata, args })\n            })\n        entityMetadata.relationCounts = this.metadataArgsStorage\n            .filterRelationCounts(entityMetadata.inheritanceTree)\n            .map((args) => {\n                // for single table children we reuse relation counts created for their parents\n                if (entityMetadata.tableType === \"entity-child\")\n                    return entityMetadata.parentEntityMetadata.relationCounts.find(\n                        (relationCount) =>\n                            relationCount.propertyName === args.propertyName,\n                    )!\n\n                return new RelationCountMetadata({ entityMetadata, args })\n            })\n        entityMetadata.ownListeners = this.metadataArgsStorage\n            .filterListeners(entityMetadata.inheritanceTree)\n            .map((args) => {\n                return new EntityListenerMetadata({\n                    entityMetadata: entityMetadata,\n                    args: args,\n                })\n            })\n        entityMetadata.checks = this.metadataArgsStorage\n            .filterChecks(entityMetadata.inheritanceTree)\n            .map((args) => {\n                return new CheckMetadata({ entityMetadata, args })\n            })\n\n        // Only PostgreSQL supports exclusion constraints.\n        if (this.connection.driver.options.type === \"postgres\") {\n            entityMetadata.exclusions = this.metadataArgsStorage\n                .filterExclusions(entityMetadata.inheritanceTree)\n                .map((args) => {\n                    return new ExclusionMetadata({ entityMetadata, args })\n                })\n        }\n\n        if (this.connection.driver.options.type === \"cockroachdb\") {\n            entityMetadata.ownIndices = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .filter((args) => !args.unique)\n                .map((args) => {\n                    return new IndexMetadata({ entityMetadata, args })\n                })\n\n            const uniques = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .filter((args) => args.unique)\n                .map((args) => {\n                    return new UniqueMetadata({\n                        entityMetadata: entityMetadata,\n                        args: {\n                            target: args.target,\n                            name: args.name,\n                            columns: args.columns,\n                        },\n                    })\n                })\n            entityMetadata.ownUniques.push(...uniques)\n        } else {\n            entityMetadata.ownIndices = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .map((args) => {\n                    return new IndexMetadata({ entityMetadata, args })\n                })\n        }\n\n        // This drivers stores unique constraints as unique indices.\n        if (\n            DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\" ||\n            this.connection.driver.options.type === \"sap\" ||\n            this.connection.driver.options.type === \"spanner\"\n        ) {\n            const indices = this.metadataArgsStorage\n                .filterUniques(entityMetadata.inheritanceTree)\n                .map((args) => {\n                    return new IndexMetadata({\n                        entityMetadata: entityMetadata,\n                        args: {\n                            target: args.target,\n                            name: args.name,\n                            columns: args.columns,\n                            unique: true,\n                            synchronize: true,\n                        },\n                    })\n                })\n            entityMetadata.ownIndices.push(...indices)\n        } else {\n            const uniques = this.metadataArgsStorage\n                .filterUniques(entityMetadata.inheritanceTree)\n                .map((args) => {\n                    return new UniqueMetadata({ entityMetadata, args })\n                })\n            entityMetadata.ownUniques.push(...uniques)\n        }\n    }\n\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    protected createEmbeddedsRecursively(\n        entityMetadata: EntityMetadata,\n        embeddedArgs: EmbeddedMetadataArgs[],\n    ): EmbeddedMetadata[] {\n        return embeddedArgs.map((embeddedArgs) => {\n            const embeddedMetadata = new EmbeddedMetadata({\n                entityMetadata: entityMetadata,\n                args: embeddedArgs,\n            })\n            const targets: any[] =\n                typeof embeddedMetadata.type === \"function\"\n                    ? MetadataUtils.getInheritanceTree(embeddedMetadata.type)\n                    : [embeddedMetadata.type] // todo: implement later here inheritance for string-targets\n\n            embeddedMetadata.columns = this.metadataArgsStorage\n                .filterColumns(targets)\n                .map((args) => {\n                    return new ColumnMetadata({\n                        connection: this.connection,\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.relations = this.metadataArgsStorage\n                .filterRelations(targets)\n                .map((args) => {\n                    return new RelationMetadata({\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.listeners = this.metadataArgsStorage\n                .filterListeners(targets)\n                .map((args) => {\n                    return new EntityListenerMetadata({\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.indices = this.metadataArgsStorage\n                .filterIndices(targets)\n                .map((args) => {\n                    return new IndexMetadata({\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.uniques = this.metadataArgsStorage\n                .filterUniques(targets)\n                .map((args) => {\n                    return new UniqueMetadata({\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.relationIds = this.metadataArgsStorage\n                .filterRelationIds(targets)\n                .map((args) => {\n                    return new RelationIdMetadata({ entityMetadata, args })\n                })\n            embeddedMetadata.relationCounts = this.metadataArgsStorage\n                .filterRelationCounts(targets)\n                .map((args) => {\n                    return new RelationCountMetadata({ entityMetadata, args })\n                })\n            embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(\n                entityMetadata,\n                this.metadataArgsStorage.filterEmbeddeds(targets),\n            )\n            embeddedMetadata.embeddeds.forEach(\n                (subEmbedded) =>\n                    (subEmbedded.parentEmbeddedMetadata = embeddedMetadata),\n            )\n            entityMetadata.allEmbeddeds.push(embeddedMetadata)\n            return embeddedMetadata\n        })\n    }\n\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    protected computeEntityMetadataStep2(entityMetadata: EntityMetadata) {\n        entityMetadata.embeddeds.forEach((embedded) =>\n            embedded.build(this.connection),\n        )\n        entityMetadata.embeddeds.forEach((embedded) => {\n            embedded.columnsFromTree.forEach((column) =>\n                column.build(this.connection),\n            )\n            embedded.relationsFromTree.forEach((relation) => relation.build())\n        })\n        entityMetadata.ownColumns.forEach((column) =>\n            column.build(this.connection),\n        )\n        entityMetadata.ownRelations.forEach((relation) => relation.build())\n        entityMetadata.relations = entityMetadata.embeddeds.reduce(\n            (relations, embedded) =>\n                relations.concat(embedded.relationsFromTree),\n            entityMetadata.ownRelations,\n        )\n        entityMetadata.eagerRelations = entityMetadata.relations.filter(\n            (relation) => relation.isEager,\n        )\n        entityMetadata.lazyRelations = entityMetadata.relations.filter(\n            (relation) => relation.isLazy,\n        )\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(\n            (relation) => relation.isOneToOne,\n        )\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(\n            (relation) => relation.isOneToMany,\n        )\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(\n            (relation) => relation.isManyToOne,\n        )\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(\n            (relation) => relation.isManyToMany,\n        )\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(\n            (relation) => relation.isOneToOneOwner,\n        )\n        entityMetadata.ownerManyToManyRelations =\n            entityMetadata.relations.filter(\n                (relation) => relation.isManyToManyOwner,\n            )\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(\n            (relation) => relation.isTreeParent,\n        )\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(\n            (relation) => relation.isTreeChildren,\n        )\n        entityMetadata.columns = entityMetadata.embeddeds.reduce(\n            (columns, embedded) => columns.concat(embedded.columnsFromTree),\n            entityMetadata.ownColumns,\n        )\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce(\n            (listeners, embedded) =>\n                listeners.concat(embedded.listenersFromTree),\n            entityMetadata.ownListeners,\n        )\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_LOAD,\n        )\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_INSERT,\n        )\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_UPDATE,\n        )\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_REMOVE,\n        )\n        entityMetadata.afterSoftRemoveListeners =\n            entityMetadata.listeners.filter(\n                (listener) =>\n                    listener.type === EventListenerTypes.AFTER_SOFT_REMOVE,\n            )\n        entityMetadata.afterRecoverListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_RECOVER,\n        )\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.BEFORE_INSERT,\n        )\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.BEFORE_UPDATE,\n        )\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.BEFORE_REMOVE,\n        )\n        entityMetadata.beforeSoftRemoveListeners =\n            entityMetadata.listeners.filter(\n                (listener) =>\n                    listener.type === EventListenerTypes.BEFORE_SOFT_REMOVE,\n            )\n        entityMetadata.beforeRecoverListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.BEFORE_RECOVER,\n        )\n        entityMetadata.indices = entityMetadata.embeddeds.reduce(\n            (indices, embedded) => indices.concat(embedded.indicesFromTree),\n            entityMetadata.ownIndices,\n        )\n        entityMetadata.uniques = entityMetadata.embeddeds.reduce(\n            (uniques, embedded) => uniques.concat(embedded.uniquesFromTree),\n            entityMetadata.ownUniques,\n        )\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(\n            (column) => column.isPrimary,\n        )\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(\n            (column) => !column.isVirtual,\n        )\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter(\n            (column) => column.closureType === \"ancestor\",\n        )\n        entityMetadata.descendantColumns = entityMetadata.columns.filter(\n            (column) => column.closureType === \"descendant\",\n        )\n        entityMetadata.hasMultiplePrimaryKeys =\n            entityMetadata.primaryColumns.length > 1\n        entityMetadata.generatedColumns = entityMetadata.columns.filter(\n            (column) => column.isGenerated || column.isObjectId,\n        )\n        entityMetadata.hasUUIDGeneratedColumns =\n            entityMetadata.columns.filter(\n                (column) =>\n                    column.isGenerated || column.generationStrategy === \"uuid\",\n            ).length > 0\n        entityMetadata.createDateColumn = entityMetadata.columns.find(\n            (column) => column.isCreateDate,\n        )\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(\n            (column) => column.isUpdateDate,\n        )\n        entityMetadata.deleteDateColumn = entityMetadata.columns.find(\n            (column) => column.isDeleteDate,\n        )\n        entityMetadata.versionColumn = entityMetadata.columns.find(\n            (column) => column.isVersion,\n        )\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(\n            (column) => column.isDiscriminator,\n        )\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(\n            (column) => column.isTreeLevel,\n        )\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(\n            (column) => column.isNestedSetLeft,\n        )\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(\n            (column) => column.isNestedSetRight,\n        )\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find(\n            (column) => column.isMaterializedPath,\n        )\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(\n            (column) => column.isObjectId,\n        )\n        entityMetadata.foreignKeys.forEach((foreignKey) =>\n            foreignKey.build(this.connection.namingStrategy),\n        )\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap()\n        entityMetadata.relationIds.forEach((relationId) => relationId.build())\n        entityMetadata.relationCounts.forEach((relationCount) =>\n            relationCount.build(),\n        )\n        entityMetadata.embeddeds.forEach((embedded) => {\n            embedded.relationIdsFromTree.forEach((relationId) =>\n                relationId.build(),\n            )\n            embedded.relationCountsFromTree.forEach((relationCount) =>\n                relationCount.build(),\n            )\n        })\n    }\n\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    protected computeInverseProperties(\n        entityMetadata: EntityMetadata,\n        entityMetadatas: EntityMetadata[],\n    ) {\n        entityMetadata.relations.forEach((relation) => {\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            const inverseEntityMetadata = entityMetadatas.find(\n                (m) =>\n                    m.target === relation.type ||\n                    (typeof relation.type === \"string\" &&\n                        (m.targetName === relation.type ||\n                            m.givenTableName === relation.type)),\n            )\n            if (!inverseEntityMetadata)\n                throw new TypeORMError(\n                    \"Entity metadata for \" +\n                        entityMetadata.name +\n                        \"#\" +\n                        relation.propertyPath +\n                        \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\",\n                )\n\n            relation.inverseEntityMetadata = inverseEntityMetadata\n            relation.inverseSidePropertyPath =\n                relation.buildInverseSidePropertyPath()\n\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find(\n                (foundRelation) =>\n                    foundRelation.propertyPath ===\n                    relation.inverseSidePropertyPath,\n            )\n        })\n    }\n\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    protected createKeysForTableInheritance(entityMetadata: EntityMetadata) {\n        const isDiscriminatorColumnAlreadyIndexed = entityMetadata.indices.some(\n            ({ givenColumnNames }) =>\n                !!givenColumnNames &&\n                Array.isArray(givenColumnNames) &&\n                givenColumnNames.length === 1 &&\n                givenColumnNames[0] ===\n                    entityMetadata.discriminatorColumn?.databaseName,\n        )\n\n        // If the discriminator column is already indexed, there is no need to\n        // add another index on top of it.\n        if (isDiscriminatorColumnAlreadyIndexed) {\n            return\n        }\n\n        entityMetadata.indices.push(\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.discriminatorColumn!],\n                args: {\n                    target: entityMetadata.target,\n                    unique: false,\n                },\n            }),\n        )\n    }\n\n    /**\n     * Creates from the given foreign key metadata args real foreign key metadatas.\n     */\n    protected createForeignKeys(\n        entityMetadata: EntityMetadata,\n        entityMetadatas: EntityMetadata[],\n    ) {\n        this.metadataArgsStorage\n            .filterForeignKeys(entityMetadata.inheritanceTree)\n            .forEach((foreignKeyArgs) => {\n                const foreignKeyType =\n                    typeof foreignKeyArgs.type === \"function\"\n                        ? (foreignKeyArgs.type as () => any)()\n                        : foreignKeyArgs.type\n\n                const referencedEntityMetadata = entityMetadatas.find((m) =>\n                    typeof foreignKeyType === \"string\"\n                        ? m.targetName === foreignKeyType ||\n                          m.givenTableName === foreignKeyType\n                        : InstanceChecker.isEntitySchema(foreignKeyType)\n                        ? m.target === foreignKeyType.options.name ||\n                          m.target === foreignKeyType.options.target\n                        : m.target === foreignKeyType,\n                )\n\n                if (!referencedEntityMetadata) {\n                    throw new TypeORMError(\n                        \"Entity metadata for \" +\n                            entityMetadata.name +\n                            (foreignKeyArgs.propertyName\n                                ? \"#\" + foreignKeyArgs.propertyName\n                                : \"\") +\n                            \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\",\n                    )\n                }\n\n                const columnNames = foreignKeyArgs.columnNames ?? []\n                const referencedColumnNames =\n                    foreignKeyArgs.referencedColumnNames ?? []\n\n                const columns: ColumnMetadata[] = []\n                const referencedColumns: ColumnMetadata[] = []\n\n                if (foreignKeyArgs.propertyName) {\n                    columnNames.push(foreignKeyArgs.propertyName)\n\n                    if (foreignKeyArgs.inverseSide) {\n                        if (typeof foreignKeyArgs.inverseSide === \"function\") {\n                            referencedColumnNames.push(\n                                foreignKeyArgs.inverseSide(\n                                    referencedEntityMetadata.propertiesMap,\n                                ),\n                            )\n                        } else {\n                            referencedColumnNames.push(\n                                foreignKeyArgs.inverseSide,\n                            )\n                        }\n                    }\n                }\n\n                if (!referencedColumnNames.length) {\n                    referencedColumns.push(\n                        ...referencedEntityMetadata.primaryColumns,\n                    )\n                }\n\n                const columnNameToColumn = (\n                    columnName: string,\n                    entityMetadata: EntityMetadata,\n                ): ColumnMetadata => {\n                    const column = entityMetadata.columns.find(\n                        (column) =>\n                            column.propertyName === columnName ||\n                            column.databaseName === columnName,\n                    )\n\n                    if (column) return column\n\n                    const foreignKeyName = foreignKeyArgs.name\n                        ? '\"' + foreignKeyArgs.name + '\" '\n                        : \"\"\n                    const entityName = entityMetadata.targetName\n                    throw new TypeORMError(\n                        `Foreign key constraint ${foreignKeyName}contains column that is missing in the entity (${entityName}): ${columnName}`,\n                    )\n                }\n\n                columns.push(\n                    ...columnNames.map((columnName) =>\n                        columnNameToColumn(columnName, entityMetadata),\n                    ),\n                )\n\n                referencedColumns.push(\n                    ...referencedColumnNames.map((columnName) =>\n                        columnNameToColumn(\n                            columnName,\n                            referencedEntityMetadata,\n                        ),\n                    ),\n                )\n\n                entityMetadata.foreignKeys.push(\n                    new ForeignKeyMetadata({\n                        entityMetadata,\n                        referencedEntityMetadata,\n                        namingStrategy: this.connection.namingStrategy,\n                        columns,\n                        referencedColumns,\n                        ...foreignKeyArgs,\n                    }),\n                )\n            })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1492, "column": 0}, "map": {"version":3,"file":"MetadataArgsStorage.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata-args/MetadataArgsStorage.ts"],"sourcesContent":["import { RelationMetadataArgs } from \"./RelationMetadataArgs\"\nimport { ColumnMetadataArgs } from \"./ColumnMetadataArgs\"\nimport { RelationCountMetadataArgs } from \"./RelationCountMetadataArgs\"\nimport { IndexMetadataArgs } from \"./IndexMetadataArgs\"\nimport { EntityListenerMetadataArgs } from \"./EntityListenerMetadataArgs\"\nimport { TableMetadataArgs } from \"./TableMetadataArgs\"\nimport { NamingStrategyMetadataArgs } from \"./NamingStrategyMetadataArgs\"\nimport { JoinTableMetadataArgs } from \"./JoinTableMetadataArgs\"\nimport { JoinColumnMetadataArgs } from \"./JoinColumnMetadataArgs\"\nimport { EmbeddedMetadataArgs } from \"./EmbeddedMetadataArgs\"\nimport { EntitySubscriberMetadataArgs } from \"./EntitySubscriberMetadataArgs\"\nimport { RelationIdMetadataArgs } from \"./RelationIdMetadataArgs\"\nimport { InheritanceMetadataArgs } from \"./InheritanceMetadataArgs\"\nimport { DiscriminatorValueMetadataArgs } from \"./DiscriminatorValueMetadataArgs\"\nimport { EntityRepositoryMetadataArgs } from \"./EntityRepositoryMetadataArgs\"\nimport { TransactionEntityMetadataArgs } from \"./TransactionEntityMetadataArgs\"\nimport { TransactionRepositoryMetadataArgs } from \"./TransactionRepositoryMetadataArgs\"\nimport { MetadataUtils } from \"../metadata-builder/MetadataUtils\"\nimport { GeneratedMetadataArgs } from \"./GeneratedMetadataArgs\"\nimport { TreeMetadataArgs } from \"./TreeMetadataArgs\"\nimport { UniqueMetadataArgs } from \"./UniqueMetadataArgs\"\nimport { CheckMetadataArgs } from \"./CheckMetadataArgs\"\nimport { ExclusionMetadataArgs } from \"./ExclusionMetadataArgs\"\nimport { ForeignKeyMetadataArgs } from \"./ForeignKeyMetadataArgs\"\n\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    readonly tables: TableMetadataArgs[] = []\n    readonly trees: TreeMetadataArgs[] = []\n    readonly entityRepositories: EntityRepositoryMetadataArgs[] = []\n    readonly transactionEntityManagers: TransactionEntityMetadataArgs[] = []\n    readonly transactionRepositories: TransactionRepositoryMetadataArgs[] = []\n    readonly namingStrategies: NamingStrategyMetadataArgs[] = []\n    readonly entitySubscribers: EntitySubscriberMetadataArgs[] = []\n    readonly indices: IndexMetadataArgs[] = []\n    readonly foreignKeys: ForeignKeyMetadataArgs[] = []\n    readonly uniques: UniqueMetadataArgs[] = []\n    readonly checks: CheckMetadataArgs[] = []\n    readonly exclusions: ExclusionMetadataArgs[] = []\n    readonly columns: ColumnMetadataArgs[] = []\n    readonly generations: GeneratedMetadataArgs[] = []\n    readonly relations: RelationMetadataArgs[] = []\n    readonly joinColumns: JoinColumnMetadataArgs[] = []\n    readonly joinTables: JoinTableMetadataArgs[] = []\n    readonly entityListeners: EntityListenerMetadataArgs[] = []\n    readonly relationCounts: RelationCountMetadataArgs[] = []\n    readonly relationIds: RelationIdMetadataArgs[] = []\n    readonly embeddeds: EmbeddedMetadataArgs[] = []\n    readonly inheritances: InheritanceMetadataArgs[] = []\n    readonly discriminatorValues: DiscriminatorValueMetadataArgs[] = []\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    filterTables(target: Function | string): TableMetadataArgs[]\n    filterTables(target: (Function | string)[]): TableMetadataArgs[]\n    filterTables(\n        target: (Function | string) | (Function | string)[],\n    ): TableMetadataArgs[] {\n        return this.filterByTarget(this.tables, target)\n    }\n\n    filterColumns(target: Function | string): ColumnMetadataArgs[]\n    filterColumns(target: (Function | string)[]): ColumnMetadataArgs[]\n    filterColumns(\n        target: (Function | string) | (Function | string)[],\n    ): ColumnMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(\n            this.columns,\n            target,\n        )\n    }\n\n    findGenerated(\n        target: Function | string,\n        propertyName: string,\n    ): GeneratedMetadataArgs | undefined\n    findGenerated(\n        target: (Function | string)[],\n        propertyName: string,\n    ): GeneratedMetadataArgs | undefined\n    findGenerated(\n        target: (Function | string) | (Function | string)[],\n        propertyName: string,\n    ): GeneratedMetadataArgs | undefined {\n        return this.generations.find((generated) => {\n            return (\n                (Array.isArray(target)\n                    ? target.indexOf(generated.target) !== -1\n                    : generated.target === target) &&\n                generated.propertyName === propertyName\n            )\n        })\n    }\n\n    findTree(\n        target: (Function | string) | (Function | string)[],\n    ): TreeMetadataArgs | undefined {\n        return this.trees.find((tree) => {\n            return Array.isArray(target)\n                ? target.indexOf(tree.target) !== -1\n                : tree.target === target\n        })\n    }\n\n    filterRelations(target: Function | string): RelationMetadataArgs[]\n    filterRelations(target: (Function | string)[]): RelationMetadataArgs[]\n    filterRelations(\n        target: (Function | string) | (Function | string)[],\n    ): RelationMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateRelationProperties(\n            this.relations,\n            target,\n        )\n    }\n\n    filterRelationIds(target: Function | string): RelationIdMetadataArgs[]\n    filterRelationIds(target: (Function | string)[]): RelationIdMetadataArgs[]\n    filterRelationIds(\n        target: (Function | string) | (Function | string)[],\n    ): RelationIdMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(\n            this.relationIds,\n            target,\n        )\n    }\n\n    filterRelationCounts(target: Function | string): RelationCountMetadataArgs[]\n    filterRelationCounts(\n        target: (Function | string)[],\n    ): RelationCountMetadataArgs[]\n    filterRelationCounts(\n        target: (Function | string) | (Function | string)[],\n    ): RelationCountMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(\n            this.relationCounts,\n            target,\n        )\n    }\n\n    filterIndices(target: Function | string): IndexMetadataArgs[]\n    filterIndices(target: (Function | string)[]): IndexMetadataArgs[]\n    filterIndices(\n        target: (Function | string) | (Function | string)[],\n    ): IndexMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.indices.filter((index) => {\n            return Array.isArray(target)\n                ? target.indexOf(index.target) !== -1\n                : index.target === target\n        })\n    }\n\n    filterForeignKeys(target: Function | string): ForeignKeyMetadataArgs[]\n    filterForeignKeys(target: (Function | string)[]): ForeignKeyMetadataArgs[]\n    filterForeignKeys(\n        target: (Function | string) | (Function | string)[],\n    ): ForeignKeyMetadataArgs[] {\n        return this.foreignKeys.filter((foreignKey) => {\n            return Array.isArray(target)\n                ? target.indexOf(foreignKey.target) !== -1\n                : foreignKey.target === target\n        })\n    }\n\n    filterUniques(target: Function | string): UniqueMetadataArgs[]\n    filterUniques(target: (Function | string)[]): UniqueMetadataArgs[]\n    filterUniques(\n        target: (Function | string) | (Function | string)[],\n    ): UniqueMetadataArgs[] {\n        return this.uniques.filter((unique) => {\n            return Array.isArray(target)\n                ? target.indexOf(unique.target) !== -1\n                : unique.target === target\n        })\n    }\n\n    filterChecks(target: Function | string): CheckMetadataArgs[]\n    filterChecks(target: (Function | string)[]): CheckMetadataArgs[]\n    filterChecks(\n        target: (Function | string) | (Function | string)[],\n    ): CheckMetadataArgs[] {\n        return this.checks.filter((check) => {\n            return Array.isArray(target)\n                ? target.indexOf(check.target) !== -1\n                : check.target === target\n        })\n    }\n\n    filterExclusions(target: Function | string): ExclusionMetadataArgs[]\n    filterExclusions(target: (Function | string)[]): ExclusionMetadataArgs[]\n    filterExclusions(\n        target: (Function | string) | (Function | string)[],\n    ): ExclusionMetadataArgs[] {\n        return this.exclusions.filter((exclusion) => {\n            return Array.isArray(target)\n                ? target.indexOf(exclusion.target) !== -1\n                : exclusion.target === target\n        })\n    }\n\n    filterListeners(target: Function | string): EntityListenerMetadataArgs[]\n    filterListeners(target: (Function | string)[]): EntityListenerMetadataArgs[]\n    filterListeners(\n        target: (Function | string) | (Function | string)[],\n    ): EntityListenerMetadataArgs[] {\n        return this.filterByTarget(this.entityListeners, target)\n    }\n\n    filterEmbeddeds(target: Function | string): EmbeddedMetadataArgs[]\n    filterEmbeddeds(target: (Function | string)[]): EmbeddedMetadataArgs[]\n    filterEmbeddeds(\n        target: (Function | string) | (Function | string)[],\n    ): EmbeddedMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(\n            this.embeddeds,\n            target,\n        )\n    }\n\n    findJoinTable(\n        target: Function | string,\n        propertyName: string,\n    ): JoinTableMetadataArgs | undefined {\n        return this.joinTables.find((joinTable) => {\n            return (\n                joinTable.target === target &&\n                joinTable.propertyName === propertyName\n            )\n        })\n    }\n\n    filterJoinColumns(\n        target: Function | string,\n        propertyName: string,\n    ): JoinColumnMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.joinColumns.filter((joinColumn) => {\n            return (\n                joinColumn.target === target &&\n                joinColumn.propertyName === propertyName\n            )\n        })\n    }\n\n    filterSubscribers(target: Function | string): EntitySubscriberMetadataArgs[]\n    filterSubscribers(\n        target: (Function | string)[],\n    ): EntitySubscriberMetadataArgs[]\n    filterSubscribers(\n        target: (Function | string) | (Function | string)[],\n    ): EntitySubscriberMetadataArgs[] {\n        return this.filterByTarget(this.entitySubscribers, target)\n    }\n\n    filterNamingStrategies(\n        target: Function | string,\n    ): NamingStrategyMetadataArgs[]\n    filterNamingStrategies(\n        target: (Function | string)[],\n    ): NamingStrategyMetadataArgs[]\n    filterNamingStrategies(\n        target: (Function | string) | (Function | string)[],\n    ): NamingStrategyMetadataArgs[] {\n        return this.filterByTarget(this.namingStrategies, target)\n    }\n\n    filterTransactionEntityManagers(\n        target: Function | string,\n        propertyName: string,\n    ): TransactionEntityMetadataArgs[] {\n        return this.transactionEntityManagers.filter((transactionEm) => {\n            return (\n                (Array.isArray(target)\n                    ? target.indexOf(transactionEm.target) !== -1\n                    : transactionEm.target === target) &&\n                transactionEm.methodName === propertyName\n            )\n        })\n    }\n\n    filterTransactionRepository(\n        target: Function | string,\n        propertyName: string,\n    ): TransactionRepositoryMetadataArgs[] {\n        return this.transactionRepositories.filter((transactionEm) => {\n            return (\n                (Array.isArray(target)\n                    ? target.indexOf(transactionEm.target) !== -1\n                    : transactionEm.target === target) &&\n                transactionEm.methodName === propertyName\n            )\n        })\n    }\n\n    filterSingleTableChildren(target: Function | string): TableMetadataArgs[] {\n        return this.tables.filter((table) => {\n            return (\n                typeof table.target === \"function\" &&\n                typeof target === \"function\" &&\n                MetadataUtils.isInherited(table.target, target) &&\n                table.type === \"entity-child\"\n            )\n        })\n    }\n\n    findInheritanceType(\n        target: Function | string,\n    ): InheritanceMetadataArgs | undefined {\n        return this.inheritances.find(\n            (inheritance) => inheritance.target === target,\n        )\n    }\n\n    findDiscriminatorValue(\n        target: Function | string,\n    ): DiscriminatorValueMetadataArgs | undefined {\n        return this.discriminatorValues.find(\n            (discriminatorValue) => discriminatorValue.target === target,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Filters given array by a given target or targets.\n     */\n    protected filterByTarget<T extends { target: Function | string }>(\n        array: T[],\n        target: (Function | string) | (Function | string)[],\n    ): T[] {\n        return array.filter((table) => {\n            return Array.isArray(target)\n                ? target.indexOf(table.target) !== -1\n                : table.target === target\n        })\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate property names.\n     */\n    protected filterByTargetAndWithoutDuplicateProperties<\n        T extends { target: Function | string; propertyName: string },\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\n        const newArray: T[] = []\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target\n            if (sameTarget) {\n                if (\n                    !newArray.find(\n                        (newItem) => newItem.propertyName === item.propertyName,\n                    )\n                )\n                    newArray.push(item)\n            }\n        })\n        return newArray\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate relation property names.\n     */\n    protected filterByTargetAndWithoutDuplicateRelationProperties<\n        T extends RelationMetadataArgs,\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\n        const newArray: T[] = []\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target\n            if (sameTarget) {\n                const existingIndex = newArray.findIndex(\n                    (newItem) => newItem.propertyName === item.propertyName,\n                )\n                if (\n                    Array.isArray(target) &&\n                    existingIndex !== -1 &&\n                    target.indexOf(item.target) <\n                        target.indexOf(newArray[existingIndex].target)\n                ) {\n                    const clone = Object.create(newArray[existingIndex])\n                    clone.type = item.type\n                    newArray[existingIndex] = clone\n                } else if (existingIndex === -1) {\n                    newArray.push(item)\n                }\n            }\n        })\n        return newArray\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\n     */\n    protected filterByTargetAndWithoutDuplicateEmbeddedProperties<\n        T extends EmbeddedMetadataArgs,\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\n        const newArray: T[] = []\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target\n            if (sameTarget) {\n                const isDuplicateEmbeddedProperty = newArray.find(\n                    (newItem: EmbeddedMetadataArgs): boolean =>\n                        newItem.prefix === item.prefix &&\n                        newItem.propertyName === item.propertyName,\n                )\n                if (!isDuplicateEmbeddedProperty) newArray.push(item)\n            }\n        })\n        return newArray\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1687, "column": 0}, "map": {"version":3,"file":"PlatformTools.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/platform/PlatformTools.ts"],"sourcesContent":["import ansi from \"ansis\"\nimport dotenv from \"dotenv\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport { highlight } from \"sql-highlight\"\nimport { format as sqlFormat } from \"@sqltools/formatter\"\nimport { type Config as SqlFormatterConfig } from \"@sqltools/formatter/lib/core/types\"\nimport { type DatabaseType } from \"../driver/types/DatabaseType\"\n\nexport { EventEmitter } from \"events\"\nexport { ReadStream } from \"fs\"\nexport { Readable, Writable } from \"stream\"\n\n/**\n * Platform-specific tools.\n */\nexport class PlatformTools {\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\" | \"node\" = \"node\"\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        return global\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in\n        // this is useful when we are using typeorm package globally installed and it accesses drivers\n        // that are not installed globally\n\n        try {\n            // switch case to explicit require statements for webpack compatibility.\n            switch (name) {\n                /**\n                 * spanner\n                 */\n                case \"spanner\":\n                    return require(\"@google-cloud/spanner\")\n\n                /**\n                 * mongodb\n                 */\n                case \"mongodb\":\n                    return require(\"mongodb\")\n\n                /**\n                 * hana\n                 */\n                case \"@sap/hana-client\":\n                    return require(\"@sap/hana-client\")\n\n                case \"@sap/hana-client/extension/Stream\":\n                    return require(\"@sap/hana-client/extension/Stream\")\n\n                case \"hdb-pool\":\n                    return require(\"hdb-pool\")\n\n                /**\n                 * mysql\n                 */\n                case \"mysql\":\n                    return require(\"mysql\")\n\n                case \"mysql2\":\n                    return require(\"mysql2\")\n\n                /**\n                 * oracle\n                 */\n                case \"oracledb\":\n                    return require(\"oracledb\")\n\n                /**\n                 * postgres\n                 */\n                case \"pg\":\n                    return require(\"pg\")\n\n                case \"pg-native\":\n                    return require(\"pg-native\")\n\n                case \"pg-query-stream\":\n                    return require(\"pg-query-stream\")\n\n                case \"typeorm-aurora-data-api-driver\":\n                    return require(\"typeorm-aurora-data-api-driver\")\n\n                /**\n                 * redis\n                 */\n                case \"redis\":\n                    return require(\"redis\")\n\n                case \"ioredis\":\n                    return require(\"ioredis\")\n\n                /**\n                 * better-sqlite3\n                 */\n                case \"better-sqlite3\":\n                    return require(\"better-sqlite3\")\n\n                /**\n                 * sqlite\n                 */\n                case \"sqlite3\":\n                    return require(\"sqlite3\")\n\n                /**\n                 * sql.js\n                 */\n                case \"sql.js\":\n                    return require(\"sql.js\")\n\n                /**\n                 * sqlserver\n                 */\n                case \"mssql\":\n                    return require(\"mssql\")\n\n                /**\n                 * react-native-sqlite\n                 */\n                case \"react-native-sqlite-storage\":\n                    return require(\"react-native-sqlite-storage\")\n            }\n        } catch (err) {\n            return require(path.resolve(\n                process.cwd() + \"/node_modules/\" + name,\n            ))\n        }\n\n        // If nothing above matched and we get here, the package was not listed within PlatformTools\n        // and is an Invalid Package.  To make it explicit that this is NOT the intended use case for\n        // PlatformTools.load - it's not just a way to replace `require` all willy-nilly - let's throw\n        // an error.\n        throw new TypeError(`Invalid Package for PlatformTools.load: ${name}`)\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\" and replaces backslashes with forward slashes on Windows.\n     */\n    static pathNormalize(pathStr: string): string {\n        let normalizedPath = path.normalize(pathStr)\n        if (process.platform === \"win32\")\n            normalizedPath = normalizedPath.replace(/\\\\/g, \"/\")\n        return normalizedPath\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        return path.extname(pathStr)\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        return path.resolve(pathStr)\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        return fs.existsSync(pathStr)\n    }\n\n    static readFileSync(filename: string): Buffer {\n        return fs.readFileSync(filename)\n    }\n\n    static appendFileSync(filename: string, data: any): void {\n        fs.appendFileSync(filename, data)\n    }\n\n    static async writeFile(path: string, data: any): Promise<void> {\n        return fs.promises.writeFile(path, data)\n    }\n\n    /**\n     * Loads a dotenv file into the environment variables.\n     *\n     * @param path The file to load as a dotenv configuration\n     */\n    static dotenv(pathStr: string): void {\n        dotenv.config({ path: pathStr })\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        return process.env[name]\n    }\n\n    /**\n     * Highlights sql string to be printed in the console.\n     */\n    static highlightSql(sql: string) {\n        return highlight(sql, {\n            colors: {\n                keyword: ansi.blueBright.open,\n                function: ansi.magentaBright.open,\n                number: ansi.green.open,\n                string: ansi.white.open,\n                identifier: ansi.white.open,\n                special: ansi.white.open,\n                bracket: ansi.white.open,\n                comment: ansi.gray.open,\n                clear: ansi.reset.open,\n            },\n        })\n    }\n\n    /**\n     * Pretty-print sql string to be print in the console.\n     */\n    static formatSql(sql: string, dataSourceType?: DatabaseType): string {\n        const databaseLanguageMap: Record<\n            string,\n            SqlFormatterConfig[\"language\"]\n        > = {\n            oracle: \"pl/sql\",\n        }\n\n        const databaseLanguage = dataSourceType\n            ? databaseLanguageMap[dataSourceType] || \"sql\"\n            : \"sql\"\n\n        return sqlFormat(sql, {\n            language: databaseLanguage,\n            indent: \"    \",\n        })\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger\n     */\n    static logInfo(prefix: string, info: any) {\n        console.log(ansi.gray.underline(prefix), info)\n    }\n\n    static logError(prefix: string, error: any) {\n        console.log(ansi.underline.red(prefix), error)\n    }\n\n    static logWarn(prefix: string, warning: any) {\n        console.log(ansi.underline.yellow(prefix), warning)\n    }\n\n    static log(message: string) {\n        console.log(ansi.underline(message))\n    }\n\n    static info(info: any) {\n        return ansi.gray(info)\n    }\n\n    static error(error: any) {\n        return ansi.red(error)\n    }\n\n    static warn(message: string) {\n        return ansi.yellow(message)\n    }\n\n    static logCmdErr(prefix: string, err?: any) {\n        console.log(ansi.black.bgRed(prefix))\n        if (err) console.error(err)\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2005, "column": 0}, "map": {"version":3,"file":"TypeORMError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/TypeORMError.ts"],"sourcesContent":["export class TypeORMError extends Error {\n    get name() {\n        return this.constructor.name\n    }\n\n    constructor(message?: string) {\n        super(message)\n\n        // restore prototype chain because the base `Error` type\n        // will break the prototype chain a little\n        if (Object.setPrototypeOf) {\n            Object.setPrototypeOf(this, new.target.prototype)\n        } else {\n            ;(this as any).__proto__ = new.target.prototype\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAa,YAAa,SAAQ,KAAK;IACnC,IAAI,IAAI,GAAA;QACJ,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAA;IAChC,CAAC;IAED,YAAY,OAAgB,CAAA;QACxB,KAAK,CAAC,OAAO,CAAC,CAAA;QAEd,wDAAwD;QACxD,0CAA0C;QAC1C,IAAI,MAAM,CAAC,cAAc,EAAE,CAAC;YACxB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;QACrD,CAAC,MAAM,CAAC;;YACF,IAAY,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAA;QACnD,CAAC;IACL,CAAC;CACJ;AAhBD,QAAA,YAAA,GAAA,aAgBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2032, "column": 0}, "map": {"version":3,"file":"CannotReflectMethodParameterTypeError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CannotReflectMethodParameterTypeError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when ORM cannot get method parameter's type.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class CannotReflectMethodParameterTypeError extends TypeORMError {\n    constructor(target: Function, methodName: string) {\n        super(\n            `Cannot get reflected type for a \"${methodName}\" method's parameter of \"${target.name}\" class. ` +\n                `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n                `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;;GAGG,CACH,MAAa,qCAAsC,SAAQ,eAAA,YAAY;IACnE,YAAY,MAAgB,EAAE,UAAkB,CAAA;QAC5C,KAAK,CACD,CAAA,iCAAA,EAAoC,UAAU,CAAA,yBAAA,EAA4B,MAAM,CAAC,IAAI,CAAA,SAAA,CAAW,GAC5F,CAAA,uFAAA,CAAyF,GACzF,CAAA,sGAAA,CAAwG,CAC/G,CAAA;IACL,CAAC;CACJ;AARD,QAAA,qCAAA,GAAA,sCAQC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2052, "column": 0}, "map": {"version":3,"file":"AlreadyHasActiveConnectionError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/AlreadyHasActiveConnectionError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.\n */\nexport class AlreadyHasActiveConnectionError extends TypeORMError {\n    constructor(connectionName: string) {\n        super(\n            `Cannot create a new connection named \"${connectionName}\", because connection with such name ` +\n                `already exist and it now has an active connection session.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,+BAAgC,SAAQ,eAAA,YAAY;IAC7D,YAAY,cAAsB,CAAA;QAC9B,KAAK,CACD,CAAA,sCAAA,EAAyC,cAAc,CAAA,qCAAA,CAAuC,GAC1F,CAAA,0DAAA,CAA4D,CACnE,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,+BAAA,GAAA,gCAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2071, "column": 0}, "map": {"version":3,"file":"SubjectWithoutIdentifierError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/SubjectWithoutIdentifierError.ts"],"sourcesContent":["import { Subject } from \"../persistence/Subject\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when operation is going to be executed on a subject without identifier.\n * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.\n * If this error occurs still, it most probably is an ORM internal problem which must be reported and fixed.\n */\nexport class SubjectWithoutIdentifierError extends TypeORMError {\n    constructor(subject: Subject) {\n        super(\n            `Internal error. Subject ${subject.metadata.targetName} must have an identifier to perform operation.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAE7C;;;;GAIG,CACH,MAAa,6BAA8B,SAAQ,eAAA,YAAY;IAC3D,YAAY,OAAgB,CAAA;QACxB,KAAK,CACD,CAAA,wBAAA,EAA2B,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAA,8CAAA,CAAgD,CACzG,CAAA;IACL,CAAC;CACJ;AAND,QAAA,6BAAA,GAAA,8BAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2092, "column": 0}, "map": {"version":3,"file":"CannotConnectAlreadyConnectedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CannotConnectAlreadyConnectedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer tries to connect when he already connected.\n */\nexport class CannotConnectAlreadyConnectedError extends TypeORMError {\n    constructor(connectionName: string) {\n        super(\n            `Cannot create a \"${connectionName}\" connection because connection to the database already established.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,kCAAmC,SAAQ,eAAA,YAAY;IAChE,YAAY,cAAsB,CAAA;QAC9B,KAAK,CACD,CAAA,iBAAA,EAAoB,cAAc,CAAA,oEAAA,CAAsE,CAC3G,CAAA;IACL,CAAC;CACJ;AAND,QAAA,kCAAA,GAAA,mCAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2111, "column": 0}, "map": {"version":3,"file":"LockNotSupportedOnGivenDriverError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/LockNotSupportedOnGivenDriverError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when selected sql driver does not supports locking.\n */\nexport class LockNotSupportedOnGivenDriverError extends TypeORMError {\n    constructor() {\n        super(`Locking not supported on given driver.`)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,kCAAmC,SAAQ,eAAA,YAAY;IAChE,aAAA;QACI,KAAK,CAAC,CAAA,sCAAA,CAAwC,CAAC,CAAA;IACnD,CAAC;CACJ;AAJD,QAAA,kCAAA,GAAA,mCAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2130, "column": 0}, "map": {"version":3,"file":"ConnectionIsNotSetError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/ConnectionIsNotSetError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when user tries to execute operation that requires connection to be established.\n */\nexport class ConnectionIsNotSetError extends TypeORMError {\n    constructor(dbType: string) {\n        super(\n            `Connection with ${dbType} database is not established. Check connection configuration.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,uBAAwB,SAAQ,eAAA,YAAY;IACrD,YAAY,MAAc,CAAA;QACtB,KAAK,CACD,CAAA,gBAAA,EAAmB,MAAM,CAAA,6DAAA,CAA+D,CAC3F,CAAA;IACL,CAAC;CACJ;AAND,QAAA,uBAAA,GAAA,wBAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2149, "column": 0}, "map": {"version":3,"file":"CannotCreateEntityIdMapError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CannotCreateEntityIdMapError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when user tries to create entity id map from the mixed id value,\n * but id value is a single value when entity requires multiple values.\n */\nexport class CannotCreateEntityIdMapError extends TypeORMError {\n    constructor(metadata: EntityMetadata, id: any) {\n        super()\n\n        const objectExample = metadata.primaryColumns.reduce(\n            (object, column, index) => {\n                column.setEntityValue(object, index + 1)\n                return object\n            },\n            {} as ObjectLiteral,\n        )\n        this.message = `Cannot use given entity id \"${id}\" because \"${\n            metadata.targetName\n        }\" contains multiple primary columns, you must provide object in following form: ${JSON.stringify(\n            objectExample,\n        )} as an id.`\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,2CAA6C;AAE7C;;;GAGG,CACH,MAAa,4BAA6B,SAAQ,eAAA,YAAY;IAC1D,YAAY,QAAwB,EAAE,EAAO,CAAA;QACzC,KAAK,EAAE,CAAA;QAEP,MAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAChD,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE;YACtB,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAA;YACxC,OAAO,MAAM,CAAA;QACjB,CAAC,EACD,CAAA,CAAmB,CACtB,CAAA;QACD,IAAI,CAAC,OAAO,GAAG,CAAA,4BAAA,EAA+B,EAAE,CAAA,WAAA,EAC5C,QAAQ,CAAC,UACb,CAAA,gFAAA,EAAmF,IAAI,CAAC,SAAS,CAC7F,aAAa,CAChB,CAAA,UAAA,CAAY,CAAA;IACjB,CAAC;CACJ;AAjBD,QAAA,4BAAA,GAAA,6BAiBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2174, "column": 0}, "map": {"version":3,"file":"MetadataAlreadyExistsError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/MetadataAlreadyExistsError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\nexport class MetadataAlreadyExistsError extends TypeORMError {\n    constructor(\n        metadataType: string,\n        constructor: Function,\n        propertyName?: string,\n    ) {\n        super(\n            metadataType +\n                \" metadata already exists for the class constructor \" +\n                JSON.stringify(constructor) +\n                (propertyName\n                    ? \" on property \" + propertyName\n                    : \". If you previously renamed or moved entity class, make sure\" +\n                      \" that compiled version of old entity class source wasn't left in the compiler output directory.\"),\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C,MAAa,0BAA2B,SAAQ,eAAA,YAAY;IACxD,YACI,YAAoB,EACpB,WAAqB,EACrB,YAAqB,CAAA;QAErB,KAAK,CACD,YAAY,GACR,qDAAqD,GACrD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAC3B,CAAC,YAAY,GACP,eAAe,GAAG,YAAY,GAC9B,8DAA8D,GAC9D,iGAAiG,CAAC,CAC/G,CAAA;IACL,CAAC;CACJ;AAhBD,QAAA,0BAAA,GAAA,2BAgBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2191, "column": 0}, "map": {"version":3,"file":"CannotDetermineEntityError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CannotDetermineEntityError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.\n */\nexport class CannotDetermineEntityError extends TypeORMError {\n    constructor(operation: string) {\n        super(\n            `Cannot ${operation}, given value must be instance of entity class, ` +\n                `instead object literal is given. Or you must specify an entity target to method call.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,0BAA2B,SAAQ,eAAA,YAAY;IACxD,YAAY,SAAiB,CAAA;QACzB,KAAK,CACD,CAAA,OAAA,EAAU,SAAS,CAAA,gDAAA,CAAkD,GACjE,CAAA,qFAAA,CAAuF,CAC9F,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,0BAAA,GAAA,2BAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2210, "column": 0}, "map": {"version":3,"file":"UpdateValuesMissingError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/UpdateValuesMissingError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\nexport class UpdateValuesMissingError extends TypeORMError {\n    constructor() {\n        super(\n            `Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify updated values.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C,MAAa,wBAAyB,SAAQ,eAAA,YAAY;IACtD,aAAA;QACI,KAAK,CACD,CAAA,uHAAA,CAAyH,CAC5H,CAAA;IACL,CAAC;CACJ;AAND,QAAA,wBAAA,GAAA,yBAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2227, "column": 0}, "map": {"version":3,"file":"TreeRepositoryNotSupportedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/TreeRepositoryNotSupportedError.ts"],"sourcesContent":["import { Driver } from \"../driver/Driver\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class TreeRepositoryNotSupportedError extends TypeORMError {\n    constructor(driver: Driver) {\n        super(\n            `Tree repositories are not supported in ${driver.options.type} driver.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAE7C,MAAa,+BAAgC,SAAQ,eAAA,YAAY;IAC7D,YAAY,MAAc,CAAA;QACtB,KAAK,CACD,CAAA,uCAAA,EAA0C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA,QAAA,CAAU,CAC1E,CAAA;IACL,CAAC;CACJ;AAND,QAAA,+BAAA,GAAA,gCAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2244, "column": 0}, "map": {"version":3,"file":"CustomRepositoryNotFoundError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CustomRepositoryNotFoundError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown if custom repository was not found.\n */\nexport class CustomRepositoryNotFoundError extends TypeORMError {\n    constructor(repository: any) {\n        super(\n            `Custom repository ${\n                typeof repository === \"function\"\n                    ? repository.name\n                    : repository.constructor.name\n            } was not found. ` +\n                `Did you forgot to put @EntityRepository decorator on it?`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,6BAA8B,SAAQ,eAAA,YAAY;IAC3D,YAAY,UAAe,CAAA;QACvB,KAAK,CACD,CAAA,kBAAA,EACI,OAAO,UAAU,KAAK,UAAU,GAC1B,UAAU,CAAC,IAAI,GACf,UAAU,CAAC,WAAW,CAAC,IACjC,CAAA,gBAAA,CAAkB,GACd,CAAA,wDAAA,CAA0D,CACjE,CAAA;IACL,CAAC;CACJ;AAXD,QAAA,6BAAA,GAAA,8BAWC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2263, "column": 0}, "map": {"version":3,"file":"TransactionNotStartedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/TransactionNotStartedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\n */\nexport class TransactionNotStartedError extends TypeORMError {\n    constructor() {\n        super(\n            `Transaction is not started yet, start transaction before committing or rolling it back.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,0BAA2B,SAAQ,eAAA,YAAY;IACxD,aAAA;QACI,KAAK,CACD,CAAA,uFAAA,CAAyF,CAC5F,CAAA;IACL,CAAC;CACJ;AAND,QAAA,0BAAA,GAAA,2BAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2282, "column": 0}, "map": {"version":3,"file":"TransactionAlreadyStartedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/TransactionAlreadyStartedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when transaction is already started and user tries to run it again.\n */\nexport class TransactionAlreadyStartedError extends TypeORMError {\n    constructor() {\n        super(\n            `Transaction already started for the given connection, commit current transaction before starting a new one.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,8BAA+B,SAAQ,eAAA,YAAY;IAC5D,aAAA;QACI,KAAK,CACD,CAAA,2GAAA,CAA6G,CAChH,CAAA;IACL,CAAC;CACJ;AAND,QAAA,8BAAA,GAAA,+BAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2301, "column": 0}, "map": {"version":3,"file":"EntityNotFoundError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/EntityNotFoundError.ts"],"sourcesContent":["import { EntityTarget } from \"../common/EntityTarget\"\nimport { TypeORMError } from \"./TypeORMError\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\nexport class EntityNotFoundError extends TypeORMError {\n    public readonly entityClass: EntityTarget<any>\n    public readonly criteria: any\n\n    constructor(entityClass: EntityTarget<any>, criteria: any) {\n        super()\n\n        this.entityClass = entityClass\n        this.criteria = criteria\n\n        this.message =\n            `Could not find any entity of type \"${this.stringifyTarget(\n                entityClass,\n            )}\" ` + `matching: ${this.stringifyCriteria(criteria)}`\n    }\n\n    private stringifyTarget(target: EntityTarget<any>): string {\n        if (InstanceChecker.isEntitySchema(target)) {\n            return target.options.name\n        } else if (typeof target === \"function\") {\n            return target.name\n        } else if (ObjectUtils.isObject(target) && \"name\" in (target as any)) {\n            return (target as any).name\n        } else {\n            return target as any\n        }\n    }\n\n    private stringifyCriteria(criteria: any): string {\n        try {\n            return JSON.stringify(criteria, null, 4)\n        } catch (e) {}\n        return \"\" + criteria\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAC7C,MAAA,+CAAiD;AACjD,MAAA,uDAAyD;AAEzD;;GAEG,CACH,MAAa,mBAAoB,SAAQ,eAAA,YAAY;IAIjD,YAAY,WAA8B,EAAE,QAAa,CAAA;QACrD,KAAK,EAAE,CAAA;QAEP,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QAExB,IAAI,CAAC,OAAO,GACR,CAAA,mCAAA,EAAsC,IAAI,CAAC,eAAe,CACtD,WAAW,CACd,CAAA,EAAA,CAAI,GAAG,CAAA,UAAA,EAAa,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAA;IAC/D,CAAC;IAEO,eAAe,CAAC,MAAyB,EAAA;QAC7C,IAAI,kBAAA,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;YACzC,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;QAC9B,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE,CAAC;YACtC,OAAO,MAAM,CAAC,IAAI,CAAA;QACtB,CAAC,MAAM,IAAI,cAAA,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,MAAM,IAAK,MAAc,EAAE,CAAC;YACnE,OAAQ,MAAc,CAAC,IAAI,CAAA;QAC/B,CAAC,MAAM,CAAC;YACJ,OAAO,MAAa,CAAA;QACxB,CAAC;IACL,CAAC;IAEO,iBAAiB,CAAC,QAAa,EAAA;QACnC,IAAI,CAAC;YACD,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;QAC5C,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACd,OAAO,EAAE,GAAG,QAAQ,CAAA;IACxB,CAAC;CACJ;AAlCD,QAAA,mBAAA,GAAA,oBAkCC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2342, "column": 0}, "map": {"version":3,"file":"EntityMetadataNotFoundError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/EntityMetadataNotFoundError.ts"],"sourcesContent":["import { EntityTarget } from \"../common/EntityTarget\"\nimport { TypeORMError } from \"./TypeORMError\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\nexport class EntityMetadataNotFoundError extends TypeORMError {\n    constructor(target: EntityTarget<any>) {\n        super()\n\n        this.message = `No metadata for \"${this.stringifyTarget(\n            target,\n        )}\" was found.`\n    }\n\n    private stringifyTarget(target: EntityTarget<any>): string {\n        if (InstanceChecker.isEntitySchema(target)) {\n            return target.options.name\n        } else if (typeof target === \"function\") {\n            return target.name\n        } else if (ObjectUtils.isObject(target) && \"name\" in (target as any)) {\n            return (target as any).name\n        } else {\n            return target as any\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAC7C,MAAA,+CAAiD;AACjD,MAAA,uDAAyD;AAEzD,MAAa,2BAA4B,SAAQ,eAAA,YAAY;IACzD,YAAY,MAAyB,CAAA;QACjC,KAAK,EAAE,CAAA;QAEP,IAAI,CAAC,OAAO,GAAG,CAAA,iBAAA,EAAoB,IAAI,CAAC,eAAe,CACnD,MAAM,CACT,CAAA,YAAA,CAAc,CAAA;IACnB,CAAC;IAEO,eAAe,CAAC,MAAyB,EAAA;QAC7C,IAAI,kBAAA,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;YACzC,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;QAC9B,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE,CAAC;YACtC,OAAO,MAAM,CAAC,IAAI,CAAA;QACtB,CAAC,MAAM,IAAI,cAAA,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,MAAM,IAAK,MAAc,EAAE,CAAC;YACnE,OAAQ,MAAc,CAAC,IAAI,CAAA;QAC/B,CAAC,MAAM,CAAC;YACJ,OAAO,MAAa,CAAA;QACxB,CAAC;IACL,CAAC;CACJ;AApBD,QAAA,2BAAA,GAAA,4BAoBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2373, "column": 0}, "map": {"version":3,"file":"MustBeEntityError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/MustBeEntityError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when method expects entity but instead something else is given.\n */\nexport class MustBeEntityError extends TypeORMError {\n    constructor(operation: string, wrongValue: any) {\n        super(\n            `Cannot ${operation}, given value must be an entity, instead \"${wrongValue}\" is given.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,iBAAkB,SAAQ,eAAA,YAAY;IAC/C,YAAY,SAAiB,EAAE,UAAe,CAAA;QAC1C,KAAK,CACD,CAAA,OAAA,EAAU,SAAS,CAAA,0CAAA,EAA6C,UAAU,CAAA,WAAA,CAAa,CAC1F,CAAA;IACL,CAAC;CACJ;AAND,QAAA,iBAAA,GAAA,kBAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2392, "column": 0}, "map": {"version":3,"file":"OptimisticLockVersionMismatchError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/OptimisticLockVersionMismatchError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\n */\nexport class OptimisticLockVersionMismatchError extends TypeORMError {\n    constructor(\n        entity: string,\n        expectedVersion: number | Date,\n        actualVersion: number | Date,\n    ) {\n        super(\n            `The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,kCAAmC,SAAQ,eAAA,YAAY;IAChE,YACI,MAAc,EACd,eAA8B,EAC9B,aAA4B,CAAA;QAE5B,KAAK,CACD,CAAA,8BAAA,EAAiC,MAAM,CAAA,iBAAA,EAAoB,eAAe,CAAA,+BAAA,EAAkC,aAAa,CAAA,CAAA,CAAG,CAC/H,CAAA;IACL,CAAC;CACJ;AAVD,QAAA,kCAAA,GAAA,mCAUC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2411, "column": 0}, "map": {"version":3,"file":"LimitOnUpdateNotSupportedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/LimitOnUpdateNotSupportedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.\n */\n\nexport class LimitOnUpdateNotSupportedError extends TypeORMError {\n    constructor() {\n        super(`Your database does not support LIMIT on UPDATE statements.`)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CAEH,MAAa,8BAA+B,SAAQ,eAAA,YAAY;IAC5D,aAAA;QACI,KAAK,CAAC,CAAA,0DAAA,CAA4D,CAAC,CAAA;IACvE,CAAC;CACJ;AAJD,QAAA,8BAAA,GAAA,+BAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2430, "column": 0}, "map": {"version":3,"file":"PrimaryColumnCannotBeNullableError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/PrimaryColumnCannotBeNullableError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\nexport class PrimaryColumnCannotBeNullableError extends TypeORMError {\n    constructor(object: Object, propertyName: string) {\n        super(\n            `Primary column ${\n                (<any>object.constructor).name\n            }#${propertyName} cannot be nullable. ` +\n                `Its not allowed for primary keys. Try to remove nullable option.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C,MAAa,kCAAmC,SAAQ,eAAA,YAAY;IAChE,YAAY,MAAc,EAAE,YAAoB,CAAA;QAC5C,KAAK,CACD,CAAA,eAAA,EACU,MAAM,CAAC,WAAY,CAAC,IAC9B,CAAA,CAAA,EAAI,YAAY,CAAA,qBAAA,CAAuB,GACnC,CAAA,gEAAA,CAAkE,CACzE,CAAA;IACL,CAAC;CACJ;AATD,QAAA,kCAAA,GAAA,mCASC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2447, "column": 0}, "map": {"version":3,"file":"CustomRepositoryCannotInheritRepositoryError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CustomRepositoryCannotInheritRepositoryError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\n */\nexport class CustomRepositoryCannotInheritRepositoryError extends TypeORMError {\n    constructor(repository: any) {\n        super(\n            `Custom entity repository ${\n                typeof repository === \"function\"\n                    ? repository.name\n                    : repository.constructor.name\n            } ` +\n                ` cannot inherit Repository class without entity being set in the @EntityRepository decorator.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,4CAA6C,SAAQ,eAAA,YAAY;IAC1E,YAAY,UAAe,CAAA;QACvB,KAAK,CACD,CAAA,yBAAA,EACI,OAAO,UAAU,KAAK,UAAU,GAC1B,UAAU,CAAC,IAAI,GACf,UAAU,CAAC,WAAW,CAAC,IACjC,CAAA,CAAA,CAAG,GACC,CAAA,6FAAA,CAA+F,CACtG,CAAA;IACL,CAAC;CACJ;AAXD,QAAA,4CAAA,GAAA,6CAWC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2466, "column": 0}, "map": {"version":3,"file":"QueryRunnerProviderAlreadyReleasedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/QueryRunnerProviderAlreadyReleasedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\n */\nexport class QueryRunnerProviderAlreadyReleasedError extends TypeORMError {\n    constructor() {\n        super(\n            `Database connection provided by a query runner was already ` +\n                `released, cannot continue to use its querying methods anymore.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,uCAAwC,SAAQ,eAAA,YAAY;IACrE,aAAA;QACI,KAAK,CACD,CAAA,2DAAA,CAA6D,GACzD,CAAA,8DAAA,CAAgE,CACvE,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,uCAAA,GAAA,wCAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2485, "column": 0}, "map": {"version":3,"file":"CannotAttachTreeChildrenEntityError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CannotAttachTreeChildrenEntityError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when user saves tree children entity but its parent is not saved yet.\n */\nexport class CannotAttachTreeChildrenEntityError extends TypeORMError {\n    constructor(entityName: string) {\n        super(\n            `Cannot attach entity \"${entityName}\" to its parent. Please make sure parent ` +\n                `is saved in the database before saving children nodes.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,mCAAoC,SAAQ,eAAA,YAAY;IACjE,YAAY,UAAkB,CAAA;QAC1B,KAAK,CACD,CAAA,sBAAA,EAAyB,UAAU,CAAA,yCAAA,CAA2C,GAC1E,CAAA,sDAAA,CAAwD,CAC/D,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,mCAAA,GAAA,oCAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2504, "column": 0}, "map": {"version":3,"file":"CustomRepositoryDoesNotHaveEntityError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CustomRepositoryDoesNotHaveEntityError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\n */\nexport class CustomRepositoryDoesNotHaveEntityError extends TypeORMError {\n    constructor(repository: any) {\n        super(\n            `Custom repository ${\n                typeof repository === \"function\"\n                    ? repository.name\n                    : repository.constructor.name\n            } does not have managed entity. ` +\n                `Did you forget to specify entity for it @EntityRepository(MyEntity)? `,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,sCAAuC,SAAQ,eAAA,YAAY;IACpE,YAAY,UAAe,CAAA;QACvB,KAAK,CACD,CAAA,kBAAA,EACI,OAAO,UAAU,KAAK,UAAU,GAC1B,UAAU,CAAC,IAAI,GACf,UAAU,CAAC,WAAW,CAAC,IACjC,CAAA,+BAAA,CAAiC,GAC7B,CAAA,qEAAA,CAAuE,CAC9E,CAAA;IACL,CAAC;CACJ;AAXD,QAAA,sCAAA,GAAA,uCAWC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2523, "column": 0}, "map": {"version":3,"file":"MissingDeleteDateColumnError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/MissingDeleteDateColumnError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class MissingDeleteDateColumnError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata) {\n        super(\n            `Entity \"${entityMetadata.name}\" does not have delete date columns.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAE7C,MAAa,4BAA6B,SAAQ,eAAA,YAAY;IAC1D,YAAY,cAA8B,CAAA;QACtC,KAAK,CACD,CAAA,QAAA,EAAW,cAAc,CAAC,IAAI,CAAA,oCAAA,CAAsC,CACvE,CAAA;IACL,CAAC;CACJ;AAND,QAAA,4BAAA,GAAA,6BAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2540, "column": 0}, "map": {"version":3,"file":"NoConnectionForRepositoryError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/NoConnectionForRepositoryError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer tries to access repository before connection is established.\n */\nexport class NoConnectionForRepositoryError extends TypeORMError {\n    constructor(connectionName: string) {\n        super(\n            `Cannot get a Repository for \"${connectionName} connection, because connection with the database ` +\n                `is not established yet. Call connection#connect method to establish connection.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,8BAA+B,SAAQ,eAAA,YAAY;IAC5D,YAAY,cAAsB,CAAA;QAC9B,KAAK,CACD,CAAA,6BAAA,EAAgC,cAAc,CAAA,kDAAA,CAAoD,GAC9F,CAAA,+EAAA,CAAiF,CACxF,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,8BAAA,GAAA,+BAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2559, "column": 0}, "map": {"version":3,"file":"CircularRelationsError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CircularRelationsError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when circular relations detected with nullable set to false.\n */\nexport class CircularRelationsError extends TypeORMError {\n    constructor(path: string) {\n        super(\n            `Circular relations detected: ${path}. To resolve this issue you need to ` +\n                `set nullable: true somewhere in this dependency structure.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,sBAAuB,SAAQ,eAAA,YAAY;IACpD,YAAY,IAAY,CAAA;QACpB,KAAK,CACD,CAAA,6BAAA,EAAgC,IAAI,CAAA,oCAAA,CAAsC,GACtE,CAAA,0DAAA,CAA4D,CACnE,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,sBAAA,GAAA,uBAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2578, "column": 0}, "map": {"version":3,"file":"ReturningStatementNotSupportedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/ReturningStatementNotSupportedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when user tries to build a query with RETURNING / OUTPUT statement,\n * but used database does not support it.\n */\nexport class ReturningStatementNotSupportedError extends TypeORMError {\n    constructor() {\n        super(\n            `OUTPUT or RETURNING clause only supported by PostgreSQL, MariaDB, Microsoft SqlServer or Google Spanner.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;;GAGG,CACH,MAAa,mCAAoC,SAAQ,eAAA,YAAY;IACjE,aAAA;QACI,KAAK,CACD,CAAA,wGAAA,CAA0G,CAC7G,CAAA;IACL,CAAC;CACJ;AAND,QAAA,mCAAA,GAAA,oCAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2598, "column": 0}, "map": {"version":3,"file":"UsingJoinTableIsNotAllowedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/UsingJoinTableIsNotAllowedError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class UsingJoinTableIsNotAllowedError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super(\n            `Using JoinTable on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\n                `${entityMetadata.name}#${relation.propertyName} has ${relation.relationType} relation, ` +\n                `however you can use JoinTable only on many-to-many relations.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,2CAA6C;AAE7C,MAAa,+BAAgC,SAAQ,eAAA,YAAY;IAC7D,YAAY,cAA8B,EAAE,QAA0B,CAAA;QAClE,KAAK,CACD,CAAA,mBAAA,EAAsB,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,WAAA,CAAa,GAC3E,GAAG,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,KAAA,EAAQ,QAAQ,CAAC,YAAY,CAAA,WAAA,CAAa,GACzF,CAAA,6DAAA,CAA+D,CACtE,CAAA;IACL,CAAC;CACJ;AARD,QAAA,+BAAA,GAAA,gCAQC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2615, "column": 0}, "map": {"version":3,"file":"MissingJoinColumnError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/MissingJoinColumnError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class MissingJoinColumnError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super()\n\n        if (relation.inverseRelation) {\n            this.message =\n                `JoinColumn is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} one-to-one relationship. ` +\n                `You need to put JoinColumn decorator on one of the sides.`\n        } else {\n            this.message =\n                `JoinColumn is missing on ${entityMetadata.name}#${relation.propertyName} one-to-one relationship. ` +\n                `You need to put JoinColumn decorator on it.`\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,2CAA6C;AAE7C,MAAa,sBAAuB,SAAQ,eAAA,YAAY;IACpD,YAAY,cAA8B,EAAE,QAA0B,CAAA;QAClE,KAAK,EAAE,CAAA;QAEP,IAAI,QAAQ,CAAC,eAAe,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,GACR,CAAA,uCAAA,EAA0C,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,KAAA,CAAO,GAC7F,GAAG,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAA,0BAAA,CAA4B,GAC3G,CAAA,yDAAA,CAA2D,CAAA;QACnE,CAAC,MAAM,CAAC;YACJ,IAAI,CAAC,OAAO,GACR,CAAA,yBAAA,EAA4B,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,0BAAA,CAA4B,GACpG,CAAA,2CAAA,CAA6C,CAAA;QACrD,CAAC;IACL,CAAC;CACJ;AAfD,QAAA,sBAAA,GAAA,uBAeC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2637, "column": 0}, "map": {"version":3,"file":"MissingPrimaryColumnError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/MissingPrimaryColumnError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class MissingPrimaryColumnError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata) {\n        super(\n            `Entity \"${entityMetadata.name}\" does not have a primary column. Primary column is required to ` +\n                `have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAE7C,MAAa,yBAA0B,SAAQ,eAAA,YAAY;IACvD,YAAY,cAA8B,CAAA;QACtC,KAAK,CACD,CAAA,QAAA,EAAW,cAAc,CAAC,IAAI,CAAA,gEAAA,CAAkE,GAC5F,CAAA,+FAAA,CAAiG,CACxG,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,yBAAA,GAAA,0BAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2654, "column": 0}, "map": {"version":3,"file":"EntityPropertyNotFoundError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/EntityPropertyNotFoundError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\n\n/**\n * Thrown when specified entity property was not found.\n */\nexport class EntityPropertyNotFoundError extends TypeORMError {\n    constructor(propertyPath: string, metadata: EntityMetadata) {\n        super(propertyPath)\n        Object.setPrototypeOf(this, EntityPropertyNotFoundError.prototype)\n        this.message = `Property \"${propertyPath}\" was not found in \"${metadata.targetName}\". Make sure your query is correct.`\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAG7C;;GAEG,CACH,MAAa,2BAA4B,SAAQ,eAAA,YAAY;IACzD,YAAY,YAAoB,EAAE,QAAwB,CAAA;QACtD,KAAK,CAAC,YAAY,CAAC,CAAA;QACnB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,2BAA2B,CAAC,SAAS,CAAC,CAAA;QAClE,IAAI,CAAC,OAAO,GAAG,CAAA,UAAA,EAAa,YAAY,CAAA,oBAAA,EAAuB,QAAQ,CAAC,UAAU,CAAA,mCAAA,CAAqC,CAAA;IAC3H,CAAC;CACJ;AAND,QAAA,2BAAA,GAAA,4BAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2675, "column": 0}, "map": {"version":3,"file":"MissingDriverError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/MissingDriverError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\nexport class MissingDriverError extends TypeORMError {\n    constructor(driverType: string, availableDrivers: string[] = []) {\n        super(\n            `Wrong driver: \"${driverType}\" given. Supported drivers are: ` +\n                `${availableDrivers.map((d) => `\"${d}\"`).join(\", \")}.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,kBAAmB,SAAQ,eAAA,YAAY;IAChD,YAAY,UAAkB,EAAE,mBAA6B,EAAE,CAAA;QAC3D,KAAK,CACD,CAAA,eAAA,EAAkB,UAAU,CAAA,gCAAA,CAAkC,GAC1D,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,CAAC,CAAA,CAAA,CAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAA,CAAG,CAC7D,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,kBAAA,GAAA,mBAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2694, "column": 0}, "map": {"version":3,"file":"DriverPackageNotInstalledError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/DriverPackageNotInstalledError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when required driver's package is not installed.\n */\nexport class DriverPackageNotInstalledError extends TypeORMError {\n    constructor(driverName: string, packageName: string) {\n        super(\n            `${driverName} package has not been found installed. ` +\n                `Try to install it: npm install ${packageName} --save`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,8BAA+B,SAAQ,eAAA,YAAY;IAC5D,YAAY,UAAkB,EAAE,WAAmB,CAAA;QAC/C,KAAK,CACD,GAAG,UAAU,CAAA,uCAAA,CAAyC,GAClD,CAAA,+BAAA,EAAkC,WAAW,CAAA,OAAA,CAAS,CAC7D,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,8BAAA,GAAA,+BAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2713, "column": 0}, "map": {"version":3,"file":"CannotGetEntityManagerNotConnectedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CannotGetEntityManagerNotConnectedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer tries to access entity manager before connection is established.\n */\nexport class CannotGetEntityManagerNotConnectedError extends TypeORMError {\n    constructor(connectionName: string) {\n        super(\n            `Cannot get entity manager for \"${connectionName}\" connection because connection is not yet established.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,uCAAwC,SAAQ,eAAA,YAAY;IACrE,YAAY,cAAsB,CAAA;QAC9B,KAAK,CACD,CAAA,+BAAA,EAAkC,cAAc,CAAA,uDAAA,CAAyD,CAC5G,CAAA;IACL,CAAC;CACJ;AAND,QAAA,uCAAA,GAAA,wCAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2732, "column": 0}, "map": {"version":3,"file":"ConnectionNotFoundError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/ConnectionNotFoundError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer tries to get connection that does not exist.\n */\nexport class ConnectionNotFoundError extends TypeORMError {\n    constructor(name: string) {\n        super(`Connection \"${name}\" was not found.`)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,uBAAwB,SAAQ,eAAA,YAAY;IACrD,YAAY,IAAY,CAAA;QACpB,KAAK,CAAC,CAAA,YAAA,EAAe,IAAI,CAAA,gBAAA,CAAkB,CAAC,CAAA;IAChD,CAAC;CACJ;AAJD,QAAA,uBAAA,GAAA,wBAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2751, "column": 0}, "map": {"version":3,"file":"NoVersionOrUpdateDateColumnError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/NoVersionOrUpdateDateColumnError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when an entity does not have no version and no update date column.\n */\nexport class NoVersionOrUpdateDateColumnError extends TypeORMError {\n    constructor(entity: string) {\n        super(`Entity ${entity} does not have version or update date columns.`)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,gCAAiC,SAAQ,eAAA,YAAY;IAC9D,YAAY,MAAc,CAAA;QACtB,KAAK,CAAC,CAAA,OAAA,EAAU,MAAM,CAAA,8CAAA,CAAgD,CAAC,CAAA;IAC3E,CAAC;CACJ;AAJD,QAAA,gCAAA,GAAA,iCAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2770, "column": 0}, "map": {"version":3,"file":"InsertValuesMissingError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/InsertValuesMissingError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.\n */\nexport class InsertValuesMissingError extends TypeORMError {\n    constructor() {\n        super(\n            `Cannot perform insert query because values are not defined. ` +\n                `Call \"qb.values(...)\" method to specify inserted values.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,wBAAyB,SAAQ,eAAA,YAAY;IACtD,aAAA;QACI,KAAK,CACD,CAAA,4DAAA,CAA8D,GAC1D,CAAA,wDAAA,CAA0D,CACjE,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,wBAAA,GAAA,yBAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2789, "column": 0}, "map": {"version":3,"file":"OptimisticLockCanNotBeUsedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/OptimisticLockCanNotBeUsedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when an optimistic lock cannot be used in query builder.\n */\nexport class OptimisticLockCanNotBeUsedError extends TypeORMError {\n    constructor() {\n        super(`The optimistic lock can be used only with getOne() method.`)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,+BAAgC,SAAQ,eAAA,YAAY;IAC7D,aAAA;QACI,KAAK,CAAC,CAAA,0DAAA,CAA4D,CAAC,CAAA;IACvE,CAAC;CACJ;AAJD,QAAA,+BAAA,GAAA,gCAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2808, "column": 0}, "map": {"version":3,"file":"MetadataWithSuchNameAlreadyExistsError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/MetadataWithSuchNameAlreadyExistsError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\nexport class MetadataWithSuchNameAlreadyExistsError extends TypeORMError {\n    constructor(metadataType: string, name: string) {\n        super(\n            metadataType +\n                \" metadata with such name \" +\n                name +\n                \" already exists. \" +\n                \"Do you apply decorator twice? Or maybe try to change a name?\",\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C,MAAa,sCAAuC,SAAQ,eAAA,YAAY;IACpE,YAAY,YAAoB,EAAE,IAAY,CAAA;QAC1C,KAAK,CACD,YAAY,GACR,2BAA2B,GAC3B,IAAI,GACJ,mBAAmB,GACnB,8DAA8D,CACrE,CAAA;IACL,CAAC;CACJ;AAVD,QAAA,sCAAA,GAAA,uCAUC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2825, "column": 0}, "map": {"version":3,"file":"DriverOptionNotSetError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/DriverOptionNotSetError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown if some required driver's option is not set.\n */\nexport class DriverOptionNotSetError extends TypeORMError {\n    constructor(optionName: string) {\n        super(\n            `Driver option (${optionName}) is not set. ` +\n                `Please set it to perform connection to the database.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,uBAAwB,SAAQ,eAAA,YAAY;IACrD,YAAY,UAAkB,CAAA;QAC1B,KAAK,CACD,CAAA,eAAA,EAAkB,UAAU,CAAA,cAAA,CAAgB,GACxC,CAAA,oDAAA,CAAsD,CAC7D,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,uBAAA,GAAA,wBAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2844, "column": 0}, "map": {"version":3,"file":"FindRelationsNotFoundError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/FindRelationsNotFoundError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when relations specified in the find options were not found in the entities.\n */\nexport class FindRelationsNotFoundError extends TypeORMError {\n    constructor(notFoundRelations: string[]) {\n        super()\n\n        if (notFoundRelations.length === 1) {\n            this.message = `Relation \"${notFoundRelations[0]}\" was not found; please check if it is correct and really exists in your entity.`\n        } else {\n            this.message = `Relations ${notFoundRelations\n                .map((relation) => `\"${relation}\"`)\n                .join(\n                    \", \",\n                )} were not found; please check if relations are correct and they exist in your entities.`\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,0BAA2B,SAAQ,eAAA,YAAY;IACxD,YAAY,iBAA2B,CAAA;QACnC,KAAK,EAAE,CAAA;QAEP,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjC,IAAI,CAAC,OAAO,GAAG,CAAA,UAAA,EAAa,iBAAiB,CAAC,CAAC,CAAC,CAAA,gFAAA,CAAkF,CAAA;QACtI,CAAC,MAAM,CAAC;YACJ,IAAI,CAAC,OAAO,GAAG,CAAA,UAAA,EAAa,iBAAiB,CACxC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,QAAQ,CAAA,CAAA,CAAG,CAAC,CAClC,IAAI,CACD,IAAI,CACP,CAAA,uFAAA,CAAyF,CAAA;QAClG,CAAC;IACL,CAAC;CACJ;AAdD,QAAA,0BAAA,GAAA,2BAcC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2868, "column": 0}, "map": {"version":3,"file":"PessimisticLockTransactionRequiredError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/PessimisticLockTransactionRequiredError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when a transaction is required for the current operation, but there is none open.\n */\nexport class PessimisticLockTransactionRequiredError extends TypeORMError {\n    constructor() {\n        super(`An open transaction is required for pessimistic lock.`)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,uCAAwC,SAAQ,eAAA,YAAY;IACrE,aAAA;QACI,KAAK,CAAC,CAAA,qDAAA,CAAuD,CAAC,CAAA;IAClE,CAAC;CACJ;AAJD,QAAA,uCAAA,GAAA,wCAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2887, "column": 0}, "map": {"version":3,"file":"RepositoryNotTreeError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/RepositoryNotTreeError.ts"],"sourcesContent":["import { EntityTarget } from \"../common/EntityTarget\"\nimport { TypeORMError } from \"./TypeORMError\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Thrown when repository for the given class is not found.\n */\nexport class RepositoryNotTreeError extends TypeORMError {\n    constructor(entityClass: EntityTarget<any>) {\n        super()\n\n        let targetName: string\n        if (InstanceChecker.isEntitySchema(entityClass)) {\n            targetName = entityClass.options.name\n        } else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name\n        } else if (\n            ObjectUtils.isObject(entityClass) &&\n            \"name\" in (entityClass as any)\n        ) {\n            targetName = (entityClass as any).name\n        } else {\n            targetName = entityClass as any\n        }\n        this.message = `Repository of the \"${targetName}\" class is not a TreeRepository. Try to apply @Tree decorator on your entity.`\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAC7C,MAAA,+CAAiD;AACjD,MAAA,uDAAyD;AAEzD;;GAEG,CACH,MAAa,sBAAuB,SAAQ,eAAA,YAAY;IACpD,YAAY,WAA8B,CAAA;QACtC,KAAK,EAAE,CAAA;QAEP,IAAI,UAAkB,CAAA;QACtB,IAAI,kBAAA,eAAe,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC;YAC9C,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAAA;QACzC,CAAC,MAAM,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE,CAAC;YAC3C,UAAU,GAAG,WAAW,CAAC,IAAI,CAAA;QACjC,CAAC,MAAM,IACH,cAAA,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,IACjC,MAAM,IAAK,WAAmB,EAChC,CAAC;YACC,UAAU,GAAI,WAAmB,CAAC,IAAI,CAAA;QAC1C,CAAC,MAAM,CAAC;YACJ,UAAU,GAAG,WAAkB,CAAA;QACnC,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,CAAA,mBAAA,EAAsB,UAAU,CAAA,6EAAA,CAA+E,CAAA;IAClI,CAAC;CACJ;AAnBD,QAAA,sBAAA,GAAA,uBAmBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2919, "column": 0}, "map": {"version":3,"file":"DataTypeNotSupportedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/DataTypeNotSupportedError.ts"],"sourcesContent":["import { ColumnType } from \"../driver/types/ColumnTypes\"\nimport { DatabaseType } from \"../driver/types/DatabaseType\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class DataTypeNotSupportedError extends TypeORMError {\n    constructor(\n        column: ColumnMetadata,\n        dataType: ColumnType,\n        database?: DatabaseType,\n    ) {\n        super()\n\n        const type =\n            typeof dataType === \"string\" ? dataType : (<any>dataType).name\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA,MAAA,2CAA6C;AAE7C,MAAa,yBAA0B,SAAQ,eAAA,YAAY;IACvD,YACI,MAAsB,EACtB,QAAoB,EACpB,QAAuB,CAAA;QAEvB,KAAK,EAAE,CAAA;QAEP,MAAM,IAAI,GACN,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAO,QAAS,CAAC,IAAI,CAAA;QAClE,IAAI,CAAC,OAAO,GAAG,CAAA,WAAA,EAAc,IAAI,CAAA,MAAA,EAAS,MAAM,CAAC,cAAc,CAAC,UAAU,CAAA,CAAA,EAAI,MAAM,CAAC,YAAY,CAAA,uBAAA,EAA0B,QAAQ,CAAA,WAAA,CAAa,CAAA;IACpJ,CAAC;CACJ;AAZD,QAAA,yBAAA,GAAA,0BAYC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2938, "column": 0}, "map": {"version":3,"file":"InitializedRelationError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/InitializedRelationError.ts"],"sourcesContent":["import { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when relation has array initialized which is forbidden my ORM.\n *\n * @see https://github.com/typeorm/typeorm/issues/1319\n * @see http://typeorm.io/#/relations-faq/avoid-relation-property-initializers\n */\nexport class InitializedRelationError extends TypeORMError {\n    constructor(relation: RelationMetadata) {\n        super(\n            `Array initializations are not allowed in entity relations. ` +\n                `Please remove array initialization (= []) from \"${relation.entityMetadata.targetName}#${relation.propertyPath}\". ` +\n                `This is ORM requirement to make relations to work properly. Refer docs for more information.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAE7C;;;;;GAKG,CACH,MAAa,wBAAyB,SAAQ,eAAA,YAAY;IACtD,YAAY,QAA0B,CAAA;QAClC,KAAK,CACD,CAAA,2DAAA,CAA6D,GACzD,CAAA,gDAAA,EAAmD,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,GAAA,CAAK,GACnH,CAAA,4FAAA,CAA8F,CACrG,CAAA;IACL,CAAC;CACJ;AARD,QAAA,wBAAA,GAAA,yBAQC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2960, "column": 0}, "map": {"version":3,"file":"MissingJoinTableError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/MissingJoinTableError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class MissingJoinTableError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super()\n\n        if (relation.inverseRelation) {\n            this.message =\n                `JoinTable is missing on both sides of ${entityMetadata.name}#${relation.propertyName} and ` +\n                `${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} many-to-many relationship. ` +\n                `You need to put decorator decorator on one of the sides.`\n        } else {\n            this.message =\n                `JoinTable is missing on ${entityMetadata.name}#${relation.propertyName} many-to-many relationship. ` +\n                `You need to put JoinTable decorator on it.`\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,2CAA6C;AAE7C,MAAa,qBAAsB,SAAQ,eAAA,YAAY;IACnD,YAAY,cAA8B,EAAE,QAA0B,CAAA;QAClE,KAAK,EAAE,CAAA;QAEP,IAAI,QAAQ,CAAC,eAAe,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,GACR,CAAA,sCAAA,EAAyC,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,KAAA,CAAO,GAC5F,GAAG,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAA,4BAAA,CAA8B,GAC7G,CAAA,wDAAA,CAA0D,CAAA;QAClE,CAAC,MAAM,CAAC;YACJ,IAAI,CAAC,OAAO,GACR,CAAA,wBAAA,EAA2B,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,4BAAA,CAA8B,GACrG,CAAA,0CAAA,CAA4C,CAAA;QACpD,CAAC;IACL,CAAC;CACJ;AAfD,QAAA,qBAAA,GAAA,sBAeC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2982, "column": 0}, "map": {"version":3,"file":"QueryFailedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/QueryFailedError.ts"],"sourcesContent":["import { ObjectUtils } from \"../util/ObjectUtils\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when query execution has failed.\n */\nexport class QueryFailedError<T extends Error = Error> extends TypeORMError {\n    constructor(\n        readonly query: string,\n        readonly parameters: any[] | undefined,\n        readonly driverError: T,\n    ) {\n        super(\n            driverError\n                .toString()\n                .replace(/^error: /, \"\")\n                .replace(/^Error: /, \"\")\n                .replace(/^Request/, \"\"),\n        )\n\n        if (driverError) {\n            const {\n                name: _, // eslint-disable-line\n                ...otherProperties\n            } = driverError\n\n            ObjectUtils.assign(this, {\n                ...otherProperties,\n            })\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,+CAAiD;AACjD,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,gBAA0C,SAAQ,eAAA,YAAY;IACvE,YACa,KAAa,EACb,UAA6B,EAC7B,WAAc,CAAA;QAEvB,KAAK,CACD,WAAW,CACN,QAAQ,EAAE,CACV,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAC/B,CAAA;QAVQ,IAAA,CAAA,KAAK,GAAL,KAAK,CAAQ;QACb,IAAA,CAAA,UAAU,GAAV,UAAU,CAAmB;QAC7B,IAAA,CAAA,WAAW,GAAX,WAAW,CAAG;QAUvB,IAAI,WAAW,EAAE,CAAC;YACd,MAAM,EACF,IAAI,EAAE,CAAC,EAAE,AACT,GAAG,eAAe,EACrB,EAFkC,CAE/B,WAAW,CAAA;YAEf,cAAA,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE;gBACrB,GAAG,eAAe;aACrB,CAAC,CAAA;QACN,CAAC;IACL,CAAC;CACJ;AAzBD,QAAA,gBAAA,GAAA,iBAyBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3011, "column": 0}, "map": {"version":3,"file":"NoNeedToReleaseEntityManagerError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/NoNeedToReleaseEntityManagerError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer tries to release entity manager that does not use single database connection.\n */\nexport class NoNeedToReleaseEntityManagerError extends TypeORMError {\n    constructor() {\n        super(\n            `Entity manager is not using single database connection and cannot be released. ` +\n                `Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection ` +\n                `methods have a single database connection and they should be released.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,iCAAkC,SAAQ,eAAA,YAAY;IAC/D,aAAA;QACI,KAAK,CACD,CAAA,+EAAA,CAAiF,GAC7E,CAAA,2FAAA,CAA6F,GAC7F,CAAA,sEAAA,CAAwE,CAC/E,CAAA;IACL,CAAC;CACJ;AARD,QAAA,iCAAA,GAAA,kCAQC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3030, "column": 0}, "map": {"version":3,"file":"UsingJoinColumnOnlyOnOneSideAllowedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/UsingJoinColumnOnlyOnOneSideAllowedError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super(\n            `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +\n                `Both ${entityMetadata.name}#${relation.propertyName} and ${\n                    relation.inverseEntityMetadata.name\n                }#${relation.inverseRelation!.propertyName} ` +\n                `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,2CAA6C;AAE7C,MAAa,wCAAyC,SAAQ,eAAA,YAAY;IACtE,YAAY,cAA8B,EAAE,QAA0B,CAAA;QAClE,KAAK,CACD,CAAA,6EAAA,CAA+E,GAC3E,CAAA,KAAA,EAAQ,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,KAAA,EAChD,QAAQ,CAAC,qBAAqB,CAAC,IACnC,CAAA,CAAA,EAAI,QAAQ,CAAC,eAAgB,CAAC,YAAY,CAAA,CAAA,CAAG,GAC7C,CAAA,qFAAA,CAAuF,CAC9F,CAAA;IACL,CAAC;CACJ;AAVD,QAAA,wCAAA,GAAA,yCAUC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3047, "column": 0}, "map": {"version":3,"file":"UsingJoinTableOnlyOnOneSideAllowedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/UsingJoinTableOnlyOnOneSideAllowedError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class UsingJoinTableOnlyOnOneSideAllowedError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super(\n            `Using JoinTable is allowed only on one side of the many-to-many relationship. ` +\n                `Both ${entityMetadata.name}#${relation.propertyName} and ${\n                    relation.inverseEntityMetadata.name\n                }#${relation.inverseRelation!.propertyName} ` +\n                `has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,2CAA6C;AAE7C,MAAa,uCAAwC,SAAQ,eAAA,YAAY;IACrE,YAAY,cAA8B,EAAE,QAA0B,CAAA;QAClE,KAAK,CACD,CAAA,8EAAA,CAAgF,GAC5E,CAAA,KAAA,EAAQ,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,KAAA,EAChD,QAAQ,CAAC,qBAAqB,CAAC,IACnC,CAAA,CAAA,EAAI,QAAQ,CAAC,eAAgB,CAAC,YAAY,CAAA,CAAA,CAAG,GAC7C,CAAA,sFAAA,CAAwF,CAC/F,CAAA;IACL,CAAC;CACJ;AAVD,QAAA,uCAAA,GAAA,wCAUC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3064, "column": 0}, "map": {"version":3,"file":"SubjectRemovedAndUpdatedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/SubjectRemovedAndUpdatedError.ts"],"sourcesContent":["import { Subject } from \"../persistence/Subject\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when same object is scheduled for remove and updation at the same time.\n */\nexport class SubjectRemovedAndUpdatedError extends TypeORMError {\n    constructor(subject: Subject) {\n        super(\n            `Removed entity \"${subject.metadata.name}\" is also scheduled for update operation. ` +\n                `Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,6BAA8B,SAAQ,eAAA,YAAY;IAC3D,YAAY,OAAgB,CAAA;QACxB,KAAK,CACD,CAAA,gBAAA,EAAmB,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAA,0CAAA,CAA4C,GAChF,CAAA,2HAAA,CAA6H,CACpI,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,6BAAA,GAAA,8BAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3083, "column": 0}, "map": {"version":3,"file":"PersistedEntityNotFoundError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/PersistedEntityNotFoundError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown . Theoretically can't be thrown.\n */\nexport class PersistedEntityNotFoundError extends TypeORMError {\n    constructor() {\n        super(\n            `Internal error. Persisted entity was not found in the list of prepared operated entities.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,4BAA6B,SAAQ,eAAA,YAAY;IAC1D,aAAA;QACI,KAAK,CACD,CAAA,yFAAA,CAA2F,CAC9F,CAAA;IACL,CAAC;CACJ;AAND,QAAA,4BAAA,GAAA,6BAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3102, "column": 0}, "map": {"version":3,"file":"UsingJoinColumnIsNotAllowedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/UsingJoinColumnIsNotAllowedError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class UsingJoinColumnIsNotAllowedError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super(\n            `Using JoinColumn on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\n                `You can use JoinColumn only on one-to-one and many-to-one relations.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,2CAA6C;AAE7C,MAAa,gCAAiC,SAAQ,eAAA,YAAY;IAC9D,YAAY,cAA8B,EAAE,QAA0B,CAAA;QAClE,KAAK,CACD,CAAA,oBAAA,EAAuB,cAAc,CAAC,IAAI,CAAA,CAAA,EAAI,QAAQ,CAAC,YAAY,CAAA,WAAA,CAAa,GAC5E,CAAA,oEAAA,CAAsE,CAC7E,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,gCAAA,GAAA,iCAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3119, "column": 0}, "map": {"version":3,"file":"ColumnTypeUndefinedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/ColumnTypeUndefinedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when ORM cannot get column's type automatically.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class ColumnTypeUndefinedError extends TypeORMError {\n    constructor(object: Object, propertyName: string) {\n        super(\n            `Column type for ${object.constructor.name}#${propertyName} is not defined and cannot be guessed. ` +\n                `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n                `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application (before any entity imported).` +\n                `If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;;GAGG,CACH,MAAa,wBAAyB,SAAQ,eAAA,YAAY;IACtD,YAAY,MAAc,EAAE,YAAoB,CAAA;QAC5C,KAAK,CACD,CAAA,gBAAA,EAAmB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAA,CAAA,EAAI,YAAY,CAAA,uCAAA,CAAyC,GAC/F,CAAA,uFAAA,CAAyF,GACzF,CAAA,mIAAA,CAAqI,GACrI,CAAA,4FAAA,CAA8F,CACrG,CAAA;IACL,CAAC;CACJ;AATD,QAAA,wBAAA,GAAA,yBASC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3139, "column": 0}, "map": {"version":3,"file":"QueryRunnerAlreadyReleasedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/QueryRunnerAlreadyReleasedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\nexport class QueryRunnerAlreadyReleasedError extends TypeORMError {\n    constructor() {\n        super(`Query runner already released. Cannot run queries anymore.`)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C,MAAa,+BAAgC,SAAQ,eAAA,YAAY;IAC7D,aAAA;QACI,KAAK,CAAC,CAAA,0DAAA,CAA4D,CAAC,CAAA;IACvE,CAAC;CACJ;AAJD,QAAA,+BAAA,GAAA,gCAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3156, "column": 0}, "map": {"version":3,"file":"OffsetWithoutLimitNotSupportedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/OffsetWithoutLimitNotSupportedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.\n */\nexport class OffsetWithoutLimitNotSupportedError extends TypeORMError {\n    constructor() {\n        super(\n            `RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in ` +\n                `conjunction with offset function (or take in conjunction with skip function if you are ` +\n                `using pagination).`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,mCAAoC,SAAQ,eAAA,YAAY;IACjE,aAAA;QACI,KAAK,CACD,CAAA,wFAAA,CAA0F,GACtF,CAAA,uFAAA,CAAyF,GACzF,CAAA,kBAAA,CAAoB,CAC3B,CAAA;IACL,CAAC;CACJ;AARD,QAAA,mCAAA,GAAA,oCAQC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3175, "column": 0}, "map": {"version":3,"file":"CannotExecuteNotConnectedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/CannotExecuteNotConnectedError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer tries to execute operation allowed only if connection is opened.\n */\nexport class CannotExecuteNotConnectedError extends TypeORMError {\n    constructor(connectionName: string) {\n        super(\n            `Cannot execute operation on \"${connectionName}\" connection because connection is not yet established.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,8BAA+B,SAAQ,eAAA,YAAY;IAC5D,YAAY,cAAsB,CAAA;QAC9B,KAAK,CACD,CAAA,6BAAA,EAAgC,cAAc,CAAA,uDAAA,CAAyD,CAC1G,CAAA;IACL,CAAC;CACJ;AAND,QAAA,8BAAA,GAAA,+BAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3194, "column": 0}, "map": {"version":3,"file":"NoConnectionOptionError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/NoConnectionOptionError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when some option is not set in the connection options.\n */\nexport class NoConnectionOptionError extends TypeORMError {\n    constructor(optionName: string) {\n        super(\n            `Option \"${optionName}\" is not set in your connection options, please ` +\n                `define \"${optionName}\" option in your connection options or ormconfig.json`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,uBAAwB,SAAQ,eAAA,YAAY;IACrD,YAAY,UAAkB,CAAA;QAC1B,KAAK,CACD,CAAA,QAAA,EAAW,UAAU,CAAA,gDAAA,CAAkD,GACnE,CAAA,QAAA,EAAW,UAAU,CAAA,qDAAA,CAAuD,CACnF,CAAA;IACL,CAAC;CACJ;AAPD,QAAA,uBAAA,GAAA,wBAOC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3213, "column": 0}, "map": {"version":3,"file":"ForbiddenTransactionModeOverrideError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/ForbiddenTransactionModeOverrideError.ts"],"sourcesContent":["import { Migration } from \"../migration/Migration\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when the per-migration transaction mode is overriden but the global transaction mode is set to \"all\".\n */\nexport class ForbiddenTransactionModeOverrideError extends TypeORMError {\n    constructor(migrationsOverridingTransactionMode: Migration[]) {\n        const migrationNames = migrationsOverridingTransactionMode.map(\n            (migration) => `\"${migration.name}\"`,\n        )\n\n        super(\n            `Migrations ${migrationNames.join(\n                \", \",\n            )} override the transaction mode, but the global transaction mode is \"all\"`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2CAA6C;AAE7C;;GAEG,CACH,MAAa,qCAAsC,SAAQ,eAAA,YAAY;IACnE,YAAY,mCAAgD,CAAA;QACxD,MAAM,cAAc,GAAG,mCAAmC,CAAC,GAAG,CAC1D,CAAC,SAAS,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,SAAS,CAAC,IAAI,CAAA,CAAA,CAAG,CACvC,CAAA;QAED,KAAK,CACD,CAAA,WAAA,EAAc,cAAc,CAAC,IAAI,CAC7B,IAAI,CACP,CAAA,wEAAA,CAA0E,CAC9E,CAAA;IACL,CAAC;CACJ;AAZD,QAAA,qCAAA,GAAA,sCAYC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3233, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/index.ts"],"sourcesContent":["export * from \"./CannotReflectMethodParameterTypeError\"\nexport * from \"./AlreadyHasActiveConnectionError\"\nexport * from \"./SubjectWithoutIdentifierError\"\nexport * from \"./CannotConnectAlreadyConnectedError\"\nexport * from \"./LockNotSupportedOnGivenDriverError\"\nexport * from \"./ConnectionIsNotSetError\"\nexport * from \"./CannotCreateEntityIdMapError\"\nexport * from \"./MetadataAlreadyExistsError\"\nexport * from \"./CannotDetermineEntityError\"\nexport * from \"./UpdateValuesMissingError\"\nexport * from \"./TreeRepositoryNotSupportedError\"\nexport * from \"./CustomRepositoryNotFoundError\"\nexport * from \"./TransactionNotStartedError\"\nexport * from \"./TransactionAlreadyStartedError\"\nexport * from \"./EntityNotFoundError\"\nexport * from \"./EntityMetadataNotFoundError\"\nexport * from \"./MustBeEntityError\"\nexport * from \"./OptimisticLockVersionMismatchError\"\nexport * from \"./LimitOnUpdateNotSupportedError\"\nexport * from \"./PrimaryColumnCannotBeNullableError\"\nexport * from \"./CustomRepositoryCannotInheritRepositoryError\"\nexport * from \"./QueryRunnerProviderAlreadyReleasedError\"\nexport * from \"./CannotAttachTreeChildrenEntityError\"\nexport * from \"./CustomRepositoryDoesNotHaveEntityError\"\nexport * from \"./MissingDeleteDateColumnError\"\nexport * from \"./NoConnectionForRepositoryError\"\nexport * from \"./CircularRelationsError\"\nexport * from \"./ReturningStatementNotSupportedError\"\nexport * from \"./UsingJoinTableIsNotAllowedError\"\nexport * from \"./MissingJoinColumnError\"\nexport * from \"./MissingPrimaryColumnError\"\nexport * from \"./EntityPropertyNotFoundError\"\nexport * from \"./MissingDriverError\"\nexport * from \"./DriverPackageNotInstalledError\"\nexport * from \"./CannotGetEntityManagerNotConnectedError\"\nexport * from \"./ConnectionNotFoundError\"\nexport * from \"./NoVersionOrUpdateDateColumnError\"\nexport * from \"./InsertValuesMissingError\"\nexport * from \"./OptimisticLockCanNotBeUsedError\"\nexport * from \"./MetadataWithSuchNameAlreadyExistsError\"\nexport * from \"./DriverOptionNotSetError\"\nexport * from \"./FindRelationsNotFoundError\"\nexport * from \"./PessimisticLockTransactionRequiredError\"\nexport * from \"./RepositoryNotTreeError\"\nexport * from \"./DataTypeNotSupportedError\"\nexport * from \"./InitializedRelationError\"\nexport * from \"./MissingJoinTableError\"\nexport * from \"./QueryFailedError\"\nexport * from \"./NoNeedToReleaseEntityManagerError\"\nexport * from \"./UsingJoinColumnOnlyOnOneSideAllowedError\"\nexport * from \"./UsingJoinTableOnlyOnOneSideAllowedError\"\nexport * from \"./SubjectRemovedAndUpdatedError\"\nexport * from \"./PersistedEntityNotFoundError\"\nexport * from \"./UsingJoinColumnIsNotAllowedError\"\nexport * from \"./ColumnTypeUndefinedError\"\nexport * from \"./QueryRunnerAlreadyReleasedError\"\nexport * from \"./OffsetWithoutLimitNotSupportedError\"\nexport * from \"./CannotExecuteNotConnectedError\"\nexport * from \"./NoConnectionOptionError\"\nexport * from \"./TypeORMError\"\nexport * from \"./ForbiddenTransactionModeOverrideError\"\n"],"names":[],"mappings":";;;;;AAAA,QAAA,YAAA,oIAAA,SAAuD;AACvD,QAAA,YAAA,8HAAA,SAAiD;AACjD,QAAA,YAAA,4HAAA,SAA+C;AAC/C,QAAA,YAAA,iIAAA,SAAoD;AACpD,QAAA,YAAA,iIAAA,SAAoD;AACpD,QAAA,YAAA,sHAAA,SAAyC;AACzC,QAAA,YAAA,2HAAA,SAA8C;AAC9C,QAAA,YAAA,yHAAA,SAA4C;AAC5C,QAAA,YAAA,yHAAA,SAA4C;AAC5C,QAAA,YAAA,uHAAA,SAA0C;AAC1C,QAAA,YAAA,8HAAA,SAAiD;AACjD,QAAA,YAAA,4HAAA,SAA+C;AAC/C,QAAA,YAAA,yHAAA,SAA4C;AAC5C,QAAA,YAAA,6HAAA,SAAgD;AAChD,QAAA,YAAA,kHAAA,SAAqC;AACrC,QAAA,YAAA,0HAAA,SAA6C;AAC7C,QAAA,YAAA,gHAAA,SAAmC;AACnC,QAAA,YAAA,iIAAA,SAAoD;AACpD,QAAA,YAAA,6HAAA,SAAgD;AAChD,QAAA,YAAA,iIAAA,SAAoD;AACpD,QAAA,YAAA,2IAAA,SAA8D;AAC9D,QAAA,YAAA,sIAAA,SAAyD;AACzD,QAAA,YAAA,kIAAA,SAAqD;AACrD,QAAA,YAAA,qIAAA,SAAwD;AACxD,QAAA,YAAA,2HAAA,SAA8C;AAC9C,QAAA,YAAA,6HAAA,SAAgD;AAChD,QAAA,YAAA,qHAAA,SAAwC;AACxC,QAAA,YAAA,kIAAA,SAAqD;AACrD,QAAA,YAAA,8HAAA,SAAiD;AACjD,QAAA,YAAA,qHAAA,SAAwC;AACxC,QAAA,YAAA,wHAAA,SAA2C;AAC3C,QAAA,YAAA,0HAAA,SAA6C;AAC7C,QAAA,YAAA,iHAAA,SAAoC;AACpC,QAAA,YAAA,6HAAA,SAAgD;AAChD,QAAA,YAAA,sIAAA,SAAyD;AACzD,QAAA,YAAA,sHAAA,SAAyC;AACzC,QAAA,YAAA,+HAAA,SAAkD;AAClD,QAAA,YAAA,uHAAA,SAA0C;AAC1C,QAAA,YAAA,8HAAA,SAAiD;AACjD,QAAA,YAAA,qIAAA,SAAwD;AACxD,QAAA,YAAA,sHAAA,SAAyC;AACzC,QAAA,YAAA,yHAAA,SAA4C;AAC5C,QAAA,YAAA,sIAAA,SAAyD;AACzD,QAAA,YAAA,qHAAA,SAAwC;AACxC,QAAA,YAAA,wHAAA,SAA2C;AAC3C,QAAA,YAAA,uHAAA,SAA0C;AAC1C,QAAA,YAAA,oHAAA,SAAuC;AACvC,QAAA,YAAA,+GAAA,SAAkC;AAClC,QAAA,YAAA,gIAAA,SAAmD;AACnD,QAAA,YAAA,uIAAA,SAA0D;AAC1D,QAAA,YAAA,sIAAA,SAAyD;AACzD,QAAA,YAAA,4HAAA,SAA+C;AAC/C,QAAA,YAAA,2HAAA,SAA8C;AAC9C,QAAA,YAAA,+HAAA,SAAkD;AAClD,QAAA,YAAA,uHAAA,SAA0C;AAC1C,QAAA,YAAA,8HAAA,SAAiD;AACjD,QAAA,YAAA,kIAAA,SAAqD;AACrD,QAAA,YAAA,6HAAA,SAAgD;AAChD,QAAA,YAAA,sHAAA,SAAyC;AACzC,QAAA,YAAA,2GAAA,SAA8B;AAC9B,QAAA,YAAA,oIAAA,SAAuD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3304, "column": 0}, "map": {"version":3,"file":"NestedSetMultipleRootError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/error/NestedSetMultipleRootError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\nexport class NestedSetMultipleRootError extends TypeORMError {\n    constructor() {\n        super(`Nested sets do not support multiple root entities.`)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C,MAAa,0BAA2B,SAAQ,eAAA,YAAY;IACxD,aAAA;QACI,KAAK,CAAC,CAAA,kDAAA,CAAoD,CAAC,CAAA;IAC/D,CAAC;CACJ;AAJD,QAAA,0BAAA,GAAA,2BAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3321, "column": 0}, "map": {"version":3,"file":"ObjectUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/ObjectUtils.ts"],"sourcesContent":["import { MixedList } from \"../common/MixedList\"\n\nexport class ObjectUtils {\n    /**\n     * Checks if given value is an object.\n     * We cannot use instanceof because it has problems when running on different contexts.\n     * And we don't simply use typeof because typeof null === \"object\".\n     */\n    static isObject(val: any): val is object {\n        return val !== null && typeof val === \"object\"\n    }\n\n    /**\n     * Checks if given value is an object.\n     * We cannot use instanceof because it has problems when running on different contexts.\n     * And we don't simply use typeof because typeof null === \"object\".\n     */\n    static isObjectWithName(val: any): val is object & { name: string } {\n        return (\n            val !== null && typeof val === \"object\" && val[\"name\"] !== undefined\n        )\n    }\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object.\n     * @param target The target object to copy to.\n     * @param source The source object from which to copy properties.\n     */\n    static assign<T, U>(target: T, source: U): void\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     */\n    static assign<T, U, V>(target: T, source1: U, source2: V): void\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     * @param source3 The third source object from which to copy properties.\n     */\n    static assign<T, U, V, W>(\n        target: T,\n        source1: U,\n        source2: V,\n        source3: W,\n    ): void\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object.\n     * @param target The target object to copy to.\n     * @param sources One or more source objects from which to copy properties\n     */\n    static assign(target: object, ...sources: any[]): void {\n        for (const source of sources) {\n            for (const prop of Object.getOwnPropertyNames(source)) {\n                ;(target as any)[prop] = source[prop]\n            }\n        }\n    }\n\n    /**\n     * Converts MixedList<T> to strictly an array of its T items.\n     */\n    static mixedListToArray<T>(list: MixedList<T>): T[] {\n        if (list !== null && typeof list === \"object\") {\n            return Object.keys(list).map(\n                (key) => (list as { [key: string]: T })[key],\n            )\n        } else {\n            return list\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAa,WAAW;IACpB;;;;OAIG,CACH,MAAM,CAAC,QAAQ,CAAC,GAAQ,EAAA;QACpB,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAA;IAClD,CAAC;IAED;;;;OAIG,CACH,MAAM,CAAC,gBAAgB,CAAC,GAAQ,EAAA;QAC5B,OAAO,AACH,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,MAAM,CAAC,KAAK,SAAS,CACvE,CAAA;IACL,CAAC;IAkCD;;;;;OAKG,CACH,MAAM,CAAC,MAAM,CAAC,MAAc,EAAE,GAAG,OAAc,EAAA;QAC3C,KAAK,MAAM,MAAM,IAAI,OAAO,CAAE,CAAC;YAC3B,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAE,CAAC;;gBAClD,MAAc,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAA;YACzC,CAAC;QACL,CAAC;IACL,CAAC;IAED;;OAEG,CACH,MAAM,CAAC,gBAAgB,CAAI,IAAkB,EAAA;QACzC,IAAI,IAAI,KAAK,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC5C,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CACxB,CAAC,GAAG,EAAE,CAAI,CAAF,GAA+B,CAAC,GAAG,CAAC,CAC/C,CAAA;QACL,CAAC,MAAM,CAAC;YACJ,OAAO,IAAI,CAAA;QACf,CAAC;IACL,CAAC;CACJ;AA/ED,QAAA,WAAA,GAAA,YA+EC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3370, "column": 0}, "map": {"version":3,"file":"InstanceChecker.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/InstanceChecker.ts"],"sourcesContent":["import type { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport type { SqljsEntityManager } from \"../entity-manager/SqljsEntityManager\"\nimport type { EntitySchema } from \"../entity-schema/EntitySchema\"\nimport type { FindOperator } from \"../find-options/FindOperator\"\nimport type { EqualOperator } from \"../find-options/EqualOperator\"\nimport type { Query } from \"../driver/Query\"\nimport type { RdbmsSchemaBuilder } from \"../schema-builder/RdbmsSchemaBuilder\"\nimport type { Subject } from \"../persistence/Subject\"\nimport type { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport type { UpdateQueryBuilder } from \"../query-builder/UpdateQueryBuilder\"\nimport type { DeleteQueryBuilder } from \"../query-builder/DeleteQueryBuilder\"\nimport type { SoftDeleteQueryBuilder } from \"../query-builder/SoftDeleteQueryBuilder\"\nimport type { InsertQueryBuilder } from \"../query-builder/InsertQueryBuilder\"\nimport type { RelationQueryBuilder } from \"../query-builder/RelationQueryBuilder\"\nimport type { Brackets } from \"../query-builder/Brackets\"\nimport type { Table } from \"../schema-builder/table/Table\"\nimport type { TableCheck } from \"../schema-builder/table/TableCheck\"\nimport type { TableColumn } from \"../schema-builder/table/TableColumn\"\nimport type { TableExclusion } from \"../schema-builder/table/TableExclusion\"\nimport type { TableForeignKey } from \"../schema-builder/table/TableForeignKey\"\nimport type { TableIndex } from \"../schema-builder/table/TableIndex\"\nimport type { TableUnique } from \"../schema-builder/table/TableUnique\"\nimport type { View } from \"../schema-builder/view/View\"\nimport type { NotBrackets } from \"../query-builder/NotBrackets\"\nimport type { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport type { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport type { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\"\nimport { DataSource } from \"../data-source\"\nimport { BaseEntity } from \"../repository/BaseEntity\"\n\nexport class InstanceChecker {\n    static isMssqlParameter(obj: unknown): obj is MssqlParameter {\n        return this.check(obj, \"MssqlParameter\")\n    }\n    static isEntityMetadata(obj: unknown): obj is EntityMetadata {\n        return this.check(obj, \"EntityMetadata\")\n    }\n    static isColumnMetadata(obj: unknown): obj is ColumnMetadata {\n        return this.check(obj, \"ColumnMetadata\")\n    }\n    static isSelectQueryBuilder(obj: unknown): obj is SelectQueryBuilder<any> {\n        return this.check(obj, \"SelectQueryBuilder\")\n    }\n    static isInsertQueryBuilder(obj: unknown): obj is InsertQueryBuilder<any> {\n        return this.check(obj, \"InsertQueryBuilder\")\n    }\n    static isDeleteQueryBuilder(obj: unknown): obj is DeleteQueryBuilder<any> {\n        return this.check(obj, \"DeleteQueryBuilder\")\n    }\n    static isUpdateQueryBuilder(obj: unknown): obj is UpdateQueryBuilder<any> {\n        return this.check(obj, \"UpdateQueryBuilder\")\n    }\n    static isSoftDeleteQueryBuilder(\n        obj: unknown,\n    ): obj is SoftDeleteQueryBuilder<any> {\n        return this.check(obj, \"SoftDeleteQueryBuilder\")\n    }\n    static isRelationQueryBuilder(\n        obj: unknown,\n    ): obj is RelationQueryBuilder<any> {\n        return this.check(obj, \"RelationQueryBuilder\")\n    }\n    static isBrackets(obj: unknown): obj is Brackets {\n        return this.check(obj, \"Brackets\") || this.check(obj, \"NotBrackets\")\n    }\n    static isNotBrackets(obj: unknown): obj is NotBrackets {\n        return this.check(obj, \"NotBrackets\")\n    }\n    static isSubject(obj: unknown): obj is Subject {\n        return this.check(obj, \"Subject\")\n    }\n    static isRdbmsSchemaBuilder(obj: unknown): obj is RdbmsSchemaBuilder {\n        return this.check(obj, \"RdbmsSchemaBuilder\")\n    }\n    static isMongoEntityManager(obj: unknown): obj is MongoEntityManager {\n        return this.check(obj, \"MongoEntityManager\")\n    }\n    static isSqljsEntityManager(obj: unknown): obj is SqljsEntityManager {\n        return this.check(obj, \"SqljsEntityManager\")\n    }\n    static isEntitySchema(obj: unknown): obj is EntitySchema {\n        return this.check(obj, \"EntitySchema\")\n    }\n    static isBaseEntityConstructor(obj: unknown): obj is typeof BaseEntity {\n        return (\n            typeof obj === \"function\" &&\n            typeof (obj as typeof BaseEntity).hasId === \"function\" &&\n            typeof (obj as typeof BaseEntity).save === \"function\" &&\n            typeof (obj as typeof BaseEntity).useDataSource === \"function\"\n        )\n    }\n    static isFindOperator(obj: unknown): obj is FindOperator<any> {\n        return (\n            this.check(obj, \"FindOperator\") || this.check(obj, \"EqualOperator\")\n        )\n    }\n    static isEqualOperator(obj: unknown): obj is EqualOperator<any> {\n        return this.check(obj, \"EqualOperator\")\n    }\n    static isQuery(obj: unknown): obj is Query {\n        return this.check(obj, \"Query\")\n    }\n    static isTable(obj: unknown): obj is Table {\n        return this.check(obj, \"Table\")\n    }\n    static isTableCheck(obj: unknown): obj is TableCheck {\n        return this.check(obj, \"TableCheck\")\n    }\n    static isTableColumn(obj: unknown): obj is TableColumn {\n        return this.check(obj, \"TableColumn\")\n    }\n    static isTableExclusion(obj: unknown): obj is TableExclusion {\n        return this.check(obj, \"TableExclusion\")\n    }\n    static isTableForeignKey(obj: unknown): obj is TableForeignKey {\n        return this.check(obj, \"TableForeignKey\")\n    }\n    static isTableIndex(obj: unknown): obj is TableIndex {\n        return this.check(obj, \"TableIndex\")\n    }\n    static isTableUnique(obj: unknown): obj is TableUnique {\n        return this.check(obj, \"TableUnique\")\n    }\n    static isView(obj: unknown): obj is View {\n        return this.check(obj, \"View\")\n    }\n    static isDataSource(obj: unknown): obj is DataSource {\n        return this.check(obj, \"DataSource\")\n    }\n\n    private static check(obj: unknown, name: string) {\n        return (\n            typeof obj === \"object\" &&\n            obj !== null &&\n            (obj as { \"@instanceof\": symbol })[\"@instanceof\"] ===\n                Symbol.for(name)\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3473, "column": 0}, "map": {"version":3,"file":"ImportUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/ImportUtils.ts"],"sourcesContent":["import fs from \"fs/promises\"\nimport path from \"path\"\nimport { pathToFileURL } from \"url\"\n\nexport async function importOrRequireFile(\n    filePath: string,\n): Promise<[result: any, moduleType: \"esm\" | \"commonjs\"]> {\n    const tryToImport = async (): Promise<[any, \"esm\"]> => {\n        // `Function` is required to make sure the `import` statement wil stay `import` after\n        // transpilation and won't be converted to `require`\n        return [\n            await Function(\"return filePath => import(filePath)\")()(\n                filePath.startsWith(\"file://\")\n                    ? filePath\n                    : pathToFileURL(filePath).toString(),\n            ),\n            \"esm\",\n        ]\n    }\n    const tryToRequire = async (): Promise<[any, \"commonjs\"]> => {\n        return [require(filePath), \"commonjs\"]\n    }\n\n    const extension = filePath.substring(filePath.lastIndexOf(\".\") + \".\".length)\n\n    if (extension === \"mjs\" || extension === \"mts\") return tryToImport()\n    else if (extension === \"cjs\" || extension === \"cts\") return tryToRequire()\n    else if (extension === \"js\" || extension === \"ts\") {\n        const packageJson = await getNearestPackageJson(filePath)\n\n        if (packageJson != null) {\n            const isModule = (packageJson as any)?.type === \"module\"\n\n            if (isModule) return tryToImport()\n            else return tryToRequire()\n        } else return tryToRequire()\n    }\n\n    return tryToRequire()\n}\n\nasync function getNearestPackageJson(filePath: string): Promise<object | null> {\n    let currentPath = filePath\n\n    while (currentPath !== path.dirname(currentPath)) {\n        currentPath = path.dirname(currentPath)\n        const potentialPackageJson = path.join(currentPath, \"package.json\")\n\n        try {\n            const stats = await fs.stat(potentialPackageJson)\n            if (!stats.isFile()) {\n                continue\n            }\n\n            try {\n                return JSON.parse(\n                    await fs.readFile(potentialPackageJson, \"utf8\"),\n                )\n            } catch {\n                return null\n            }\n        } catch {\n            continue\n        }\n    }\n\n    // the top of the file tree is reached\n    return null\n}\n"],"names":[],"mappings":";;;;AAIA,QAAA,mBAAA,GAAA,oBAmCC;;AAvCD,MAAA,aAAA,QAAA,eAAA,yBAA4B;AAC5B,MAAA,SAAA,QAAA,eAAA,kBAAuB;AACvB,MAAA,uBAAmC;AAE5B,KAAK,UAAU,mBAAmB,CACrC,QAAgB;IAEhB,MAAM,WAAW,GAAG,KAAK,IAA2B,EAAE;QAClD,qFAAqF;QACrF,oDAAoD;QACpD,OAAO;YACH,MAAM,QAAQ,CAAC,qCAAqC,CAAC,EAAE,CACnD,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,GACxB,QAAQ,GACR,CAAA,GAAA,MAAA,aAAa,EAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAC3C;YACD,KAAK;SACR,CAAA;IACL,CAAC,CAAA;IACD,MAAM,YAAY,GAAG,KAAK,IAAgC,EAAE;QACxD,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;;;;;;YAAE,UAAU;SAAC,CAAA;IAC1C,CAAC,CAAA;IAED,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAA;IAE5E,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK,EAAE,OAAO,WAAW,EAAE,CAAA;SAC/D,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK,EAAE,OAAO,YAAY,EAAE,CAAA;SACrE,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;QAChD,MAAM,WAAW,GAAG,MAAM,qBAAqB,CAAC,QAAQ,CAAC,CAAA;QAEzD,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;YACtB,MAAM,QAAQ,GAAI,WAAmB,EAAE,IAAI,KAAK,QAAQ,CAAA;YAExD,IAAI,QAAQ,EAAE,OAAO,WAAW,EAAE,CAAA;iBAC7B,OAAO,YAAY,EAAE,CAAA;QAC9B,CAAC,MAAM,OAAO,YAAY,EAAE,CAAA;IAChC,CAAC;IAED,OAAO,YAAY,EAAE,CAAA;AACzB,CAAC;AAED,KAAK,UAAU,qBAAqB,CAAC,QAAgB;IACjD,IAAI,WAAW,GAAG,QAAQ,CAAA;IAE1B,MAAO,WAAW,KAAK,OAAA,OAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAE,CAAC;QAC/C,WAAW,GAAG,OAAA,OAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;QACvC,MAAM,oBAAoB,GAAG,OAAA,OAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAA;QAEnE,IAAI,CAAC;YACD,MAAM,KAAK,GAAG,MAAM,WAAA,OAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;YACjD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;gBAClB,SAAQ;YACZ,CAAC;YAED,IAAI,CAAC;gBACD,OAAO,IAAI,CAAC,KAAK,CACb,MAAM,WAAA,OAAE,CAAC,QAAQ,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAClD,CAAA;YACL,CAAC,CAAC,OAAM,CAAC;gBACL,OAAO,IAAI,CAAA;YACf,CAAC;QACL,CAAC,CAAC,OAAM,CAAC;YACL,SAAQ;QACZ,CAAC;IACL,CAAC;IAED,sCAAsC;IACtC,OAAO,IAAI,CAAA;AACf,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3541, "column": 0}, "map": {"version":3,"file":"StringUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/StringUtils.ts"],"sourcesContent":["import shajs from \"sha.js\"\n\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str: string, firstCapital: boolean = false): string {\n    if (firstCapital) str = \" \" + str\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function (match, p1, p2) {\n        if (p2) return p2.toUpperCase()\n        return p1.toLowerCase()\n    })\n}\n\n/**\n * Converts string into snake_case.\n *\n */\nexport function snakeCase(str: string): string {\n    return (\n        str\n            // ABc -> a_bc\n            .replace(/([A-Z])([A-Z])([a-z])/g, \"$1_$2$3\")\n            // aC -> a_c\n            .replace(/([a-z0-9])([A-Z])/g, \"$1_$2\")\n            .toLowerCase()\n    )\n}\n\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str: string): string {\n    return str.replace(\n        /\\w\\S*/g,\n        (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(),\n    )\n}\n\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str: string, abbrLettersCount: number = 1): string {\n    const words = str\n        .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\")\n        .split(\" \")\n    return words.reduce((res, word) => {\n        res += word.substr(0, abbrLettersCount)\n        return res\n    }, \"\")\n}\n\nexport interface IShortenOptions {\n    /** String used to split \"segments\" of the alias/column name */\n    separator?: string\n    /** Maximum length of any \"segment\" */\n    segmentLength?: number\n    /** Length of any \"term\" in a \"segment\"; \"OrderItem\" is a segment, \"Order\" and \"Items\" are terms */\n    termLength?: number\n}\n\n/**\n * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n * maximum length of aliases and column names in SQL queries.\n *\n * @param input String to be shortened.\n * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n *\n * @return Shortened `input`.\n *\n * @example\n * // returns: \"UsShCa__orde__mark__dire\"\n * shorten('UserShoppingCart__order__market__director')\n *\n * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n * shorten(\n *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n *   { separator: '_', segmentLength: 3 }\n * )\n *\n * // equals: UsShCa__orde__mark_market_id\n * `${shorten('UserShoppingCart__order__market')}_market_id`\n */\nexport function shorten(input: string, options: IShortenOptions = {}): string {\n    const { segmentLength = 4, separator = \"__\", termLength = 2 } = options\n\n    const segments = input.split(separator)\n    const shortSegments = segments.reduce((acc: string[], val: string) => {\n        // split the given segment into many terms based on an eventual camel cased name\n        const segmentTerms = val\n            .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\")\n            .split(\" \")\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n        const length = segmentTerms.length > 1 ? termLength : segmentLength\n        const shortSegment = segmentTerms\n            .map((term) => term.substr(0, length))\n            .join(\"\")\n\n        acc.push(shortSegment)\n        return acc\n    }, [])\n\n    return shortSegments.join(separator)\n}\n\ninterface IHashOptions {\n    length?: number\n}\n\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\nexport function hash(input: string, options: IHashOptions = {}): string {\n    const hashFunction = shajs(\"sha1\")\n    hashFunction.update(input, \"utf8\")\n    const hashedInput = hashFunction.digest(\"hex\")\n    if (options.length) {\n        return hashedInput.slice(0, options.length)\n    }\n    return hashedInput\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3642, "column": 0}, "map": {"version":3,"file":"PathUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/PathUtils.ts"],"sourcesContent":["import { hash } from \"./StringUtils\"\n\nconst WINDOWS_PATH_REGEXP = /^([a-zA-Z]:.*)$/\nconst UNC_WINDOWS_PATH_REGEXP = /^\\\\\\\\(\\.\\\\)?(.*)$/\n\nexport function toPortablePath(filepath: string): string {\n    if (process.platform !== `win32`) return filepath\n\n    if (filepath.match(WINDOWS_PATH_REGEXP))\n        filepath = filepath.replace(WINDOWS_PATH_REGEXP, `/$1`)\n    else if (filepath.match(UNC_WINDOWS_PATH_REGEXP))\n        filepath = filepath.replace(\n            UNC_WINDOWS_PATH_REGEXP,\n            (match, p1, p2) => `/unc/${p1 ? `.dot/` : ``}${p2}`,\n        )\n\n    return filepath.replace(/\\\\/g, `/`)\n}\n\n/**\n * Create deterministic valid database name (class, database) of fixed length from any filepath. Equivalent paths for windows/posix systems should\n * be equivalent to enable portability\n */\nexport function filepathToName(filepath: string): string {\n    const uniq = toPortablePath(filepath).toLowerCase()\n    return hash(uniq, { length: 63 })\n}\n\n/**\n * Cross platform isAbsolute\n */\nexport function isAbsolute(filepath: string): boolean {\n    return !!filepath.match(/^(?:[a-z]:|[\\\\]|[/])/i)\n}\n"],"names":[],"mappings":";;;;AAKA,QAAA,cAAA,GAAA,eAYC;AAMD,QAAA,cAAA,GAAA,eAGC;AAKD,QAAA,UAAA,GAAA,WAEC;AAjCD,MAAA,yCAAoC;AAEpC,MAAM,mBAAmB,GAAG,iBAAiB,CAAA;AAC7C,MAAM,uBAAuB,GAAG,mBAAmB,CAAA;AAEnD,SAAgB,cAAc,CAAC,QAAgB;IAC3C,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,QAAE,OAAO,QAAQ,CAAA;;AAWrD,CAAC;AAED;;;GAGG,CACH,SAAgB,cAAc,CAAC,QAAgB;IAC3C,MAAM,IAAI,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAA;IACnD,OAAO,CAAA,GAAA,cAAA,IAAI,EAAC,IAAI,EAAE;QAAE,MAAM,EAAE,EAAE;IAAA,CAAE,CAAC,CAAA;AACrC,CAAC;AAED;;GAEG,CACH,SAAgB,UAAU,CAAC,QAAgB;IACvC,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;AACpD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3675, "column": 0}, "map": {"version":3,"file":"OrmUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/OrmUtils.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport {\n    PrimitiveCriteria,\n    SinglePrimitiveCriteria,\n} from \"../common/PrimitiveCriteria\"\n\nexport class OrmUtils {\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Chunks array into pieces.\n     */\n    public static chunk<T>(array: T[], size: number): T[][] {\n        return Array.from(Array(Math.ceil(array.length / size)), (_, i) => {\n            return array.slice(i * size, i * size + size)\n        })\n    }\n\n    public static splitClassesAndStrings<T>(\n        classesAndStrings: (string | T)[],\n    ): [T[], string[]] {\n        return [\n            classesAndStrings.filter(\n                (cls): cls is T => typeof cls !== \"string\",\n            ),\n            classesAndStrings.filter(\n                (str): str is string => typeof str === \"string\",\n            ),\n        ]\n    }\n\n    public static groupBy<T, R>(\n        array: T[],\n        propertyCallback: (item: T) => R,\n    ): { id: R; items: T[] }[] {\n        return array.reduce((groupedArray, value) => {\n            const key = propertyCallback(value)\n            let grouped = groupedArray.find((i) => i.id === key)\n            if (!grouped) {\n                grouped = { id: key, items: [] }\n                groupedArray.push(grouped)\n            }\n            grouped.items.push(value)\n            return groupedArray\n        }, [] as Array<{ id: R; items: T[] }>)\n    }\n\n    public static uniq<T>(array: T[], criteria?: (item: T) => any): T[]\n    public static uniq<T, K extends keyof T>(array: T[], property: K): T[]\n    public static uniq<T, K extends keyof T>(\n        array: T[],\n        criteriaOrProperty?: ((item: T) => any) | K,\n    ): T[] {\n        return array.reduce((uniqueArray, item) => {\n            let found: boolean = false\n            if (typeof criteriaOrProperty === \"function\") {\n                const itemValue = criteriaOrProperty(item)\n                found = !!uniqueArray.find(\n                    (uniqueItem) =>\n                        criteriaOrProperty(uniqueItem) === itemValue,\n                )\n            } else if (typeof criteriaOrProperty === \"string\") {\n                found = !!uniqueArray.find(\n                    (uniqueItem) =>\n                        uniqueItem[criteriaOrProperty] ===\n                        item[criteriaOrProperty],\n                )\n            } else {\n                found = uniqueArray.indexOf(item) !== -1\n            }\n\n            if (!found) uniqueArray.push(item)\n\n            return uniqueArray\n        }, [] as T[])\n    }\n\n    /**\n     * Deep Object.assign.\n     */\n    public static mergeDeep(target: any, ...sources: any[]): any {\n        if (!sources.length) {\n            return target\n        }\n\n        for (const source of sources) {\n            OrmUtils.merge(target, source)\n        }\n\n        return target\n    }\n\n    /**\n     * Deep compare objects.\n     *\n     * @see http://stackoverflow.com/a/1144249\n     */\n    public static deepCompare(...args: any[]): boolean {\n        let i: any, l: any, leftChain: any, rightChain: any\n\n        if (arguments.length < 1) {\n            return true // Die silently? Don't know how to handle such case, please help...\n            // throw \"Need two or more arguments to compare\";\n        }\n\n        for (i = 1, l = arguments.length; i < l; i++) {\n            leftChain = [] // Todo: this can be cached\n            rightChain = []\n\n            if (\n                !this.compare2Objects(\n                    leftChain,\n                    rightChain,\n                    arguments[0],\n                    arguments[i],\n                )\n            ) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n    /**\n     * Gets deeper value of object.\n     */\n    public static deepValue(obj: ObjectLiteral, path: string) {\n        const segments = path.split(\".\")\n        for (let i = 0, len = segments.length; i < len; i++) {\n            obj = obj[segments[i]]\n        }\n        return obj\n    }\n\n    public static replaceEmptyObjectsWithBooleans(obj: any) {\n        for (const key in obj) {\n            if (obj[key] && typeof obj[key] === \"object\") {\n                if (Object.keys(obj[key]).length === 0) {\n                    obj[key] = true\n                } else {\n                    this.replaceEmptyObjectsWithBooleans(obj[key])\n                }\n            }\n        }\n    }\n\n    public static propertyPathsToTruthyObject(paths: string[]) {\n        const obj: any = {}\n        for (const path of paths) {\n            const props = path.split(\".\")\n            if (!props.length) continue\n\n            if (!obj[props[0]] || obj[props[0]] === true) {\n                obj[props[0]] = {}\n            }\n            let recursiveChild = obj[props[0]]\n            for (const [key, prop] of props.entries()) {\n                if (key === 0) continue\n\n                if (recursiveChild[prop]) {\n                    recursiveChild = recursiveChild[prop]\n                } else if (key === props.length - 1) {\n                    recursiveChild[prop] = {}\n                    recursiveChild = null\n                } else {\n                    recursiveChild[prop] = {}\n                    recursiveChild = recursiveChild[prop]\n                }\n            }\n        }\n        this.replaceEmptyObjectsWithBooleans(obj)\n        return obj\n    }\n\n    /**\n     * Check if two entity-id-maps are the same\n     */\n    public static compareIds(\n        firstId: ObjectLiteral | undefined,\n        secondId: ObjectLiteral | undefined,\n    ): boolean {\n        if (\n            firstId === undefined ||\n            firstId === null ||\n            secondId === undefined ||\n            secondId === null\n        )\n            return false\n\n        // Optimized version for the common case\n        if (\n            ((typeof firstId.id === \"string\" &&\n                typeof secondId.id === \"string\") ||\n                (typeof firstId.id === \"number\" &&\n                    typeof secondId.id === \"number\")) &&\n            Object.keys(firstId).length === 1 &&\n            Object.keys(secondId).length === 1\n        ) {\n            return firstId.id === secondId.id\n        }\n\n        return OrmUtils.deepCompare(firstId, secondId)\n    }\n\n    /**\n     * Transforms given value into boolean value.\n     */\n    public static toBoolean(value: any): boolean {\n        if (typeof value === \"boolean\") return value\n\n        if (typeof value === \"string\") return value === \"true\" || value === \"1\"\n\n        if (typeof value === \"number\") return value > 0\n\n        return false\n    }\n\n    /**\n     * Composes an object from the given array of keys and values.\n     */\n    public static zipObject(keys: any[], values: any[]): ObjectLiteral {\n        return keys.reduce((object, column, index) => {\n            object[column] = values[index]\n            return object\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Compares two arrays.\n     */\n    public static isArraysEqual(arr1: any[], arr2: any[]): boolean {\n        if (arr1.length !== arr2.length) return false\n        return arr1.every((element) => {\n            return arr2.indexOf(element) !== -1\n        })\n    }\n\n    public static areMutuallyExclusive<T>(...lists: T[][]): boolean {\n        const haveSharedObjects = lists.some((list) => {\n            const otherLists = lists.filter((otherList) => otherList !== list)\n            return list.some((item) =>\n                otherLists.some((otherList) => otherList.includes(item)),\n            )\n        })\n        return !haveSharedObjects\n    }\n\n    /**\n     * Parses the CHECK constraint on the specified column and returns\n     * all values allowed by the constraint or undefined if the constraint\n     * is not present.\n     */\n    public static parseSqlCheckExpression(\n        sql: string,\n        columnName: string,\n    ): string[] | undefined {\n        const enumMatch = sql.match(\n            new RegExp(\n                `\"${columnName}\" varchar CHECK\\\\s*\\\\(\\\\s*\"${columnName}\"\\\\s+IN\\\\s*`,\n            ),\n        )\n\n        if (enumMatch && enumMatch.index) {\n            const afterMatch = sql.substring(\n                enumMatch.index + enumMatch[0].length,\n            )\n\n            // This is an enum\n            // all enum values stored as a comma separated list\n            const chars = afterMatch\n\n            /**\n             * * When outside quotes: empty string\n             * * When inside single quotes: `'`\n             */\n            let currentQuotes = \"\"\n            let nextValue = \"\"\n            const enumValues: string[] = []\n            for (let idx = 0; idx < chars.length; idx++) {\n                const char = chars[idx]\n                switch (char) {\n                    case \",\":\n                        if (currentQuotes == \"\") {\n                            enumValues.push(nextValue)\n                            nextValue = \"\"\n                        } else {\n                            nextValue += char\n                        }\n                        break\n                    case \"'\":\n                        if (currentQuotes == char) {\n                            const isNextCharQuote = chars[idx + 1] === char\n                            if (isNextCharQuote) {\n                                // double quote in sql should be treated as a\n                                // single quote that's part of the quoted string\n                                nextValue += char\n                                idx += 1 // skip that next quote\n                            } else {\n                                currentQuotes = \"\"\n                            }\n                        } else {\n                            currentQuotes = char\n                        }\n                        break\n                    case \")\":\n                        if (currentQuotes == \"\") {\n                            enumValues.push(nextValue)\n                            return enumValues\n                        } else {\n                            nextValue += char\n                        }\n                        break\n                    default:\n                        if (currentQuotes != \"\") {\n                            nextValue += char\n                        }\n                }\n            }\n        }\n        return undefined\n    }\n\n    /**\n     * Checks if given criteria is null or empty.\n     */\n    public static isCriteriaNullOrEmpty(criteria: unknown): boolean {\n        return (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0) ||\n            (this.isPlainObject(criteria) && Object.keys(criteria).length === 0)\n        )\n    }\n\n    /**\n     * Checks if given criteria is a primitive value.\n     * Primitive values are strings, numbers and dates.\n     */\n    public static isSinglePrimitiveCriteria(\n        criteria: unknown,\n    ): criteria is SinglePrimitiveCriteria {\n        return (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date\n        )\n    }\n\n    /**\n     * Checks if given criteria is a primitive value or an array of primitive values.\n     */\n    public static isPrimitiveCriteria(\n        criteria: unknown,\n    ): criteria is PrimitiveCriteria {\n        if (Array.isArray(criteria)) {\n            return criteria.every((value) =>\n                this.isSinglePrimitiveCriteria(value),\n            )\n        }\n\n        return this.isSinglePrimitiveCriteria(criteria)\n    }\n\n    // -------------------------------------------------------------------------\n    // Private methods\n    // -------------------------------------------------------------------------\n\n    private static compare2Objects(\n        leftChain: any,\n        rightChain: any,\n        x: any,\n        y: any,\n    ) {\n        let p\n\n        // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n        if (Number.isNaN(x) && Number.isNaN(y)) return true\n\n        // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on the step where we compare prototypes\n        if (x === y) return true\n\n        // Unequal, but either is null or undefined (use case: jsonb comparison)\n        // PR #3776, todo: add tests\n        if (x === null || y === null || x === undefined || y === undefined)\n            return false\n\n        // Fix the buffer compare bug.\n        // See: https://github.com/typeorm/typeorm/issues/3654\n        if (\n            (typeof x.equals === \"function\" ||\n                typeof x.equals === \"function\") &&\n            x.equals(y)\n        )\n            return true\n\n        // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n        if (\n            (typeof x === \"function\" && typeof y === \"function\") ||\n            (x instanceof Date && y instanceof Date) ||\n            (x instanceof RegExp && y instanceof RegExp) ||\n            (typeof x === \"string\" && typeof y === \"string\") ||\n            (typeof x === \"number\" && typeof y === \"number\")\n        )\n            return x.toString() === y.toString()\n\n        // At last checking prototypes as good as we can\n        if (!(typeof x === \"object\" && typeof y === \"object\")) return false\n\n        if (\n            Object.prototype.isPrototypeOf.call(x, y) ||\n            Object.prototype.isPrototypeOf.call(y, x)\n        )\n            return false\n\n        if (x.constructor !== y.constructor) return false\n\n        if (x.prototype !== y.prototype) return false\n\n        // Check for infinitive linking loops\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)\n            return false\n\n        // Quick checking of one object being a subset of another.\n        // todo: cache the structure of arguments[0] for performance\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false\n            } else if (typeof y[p] !== typeof x[p]) {\n                return false\n            }\n        }\n\n        for (p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false\n            } else if (typeof y[p] !== typeof x[p]) {\n                return false\n            }\n\n            switch (typeof x[p]) {\n                case \"object\":\n                case \"function\":\n                    leftChain.push(x)\n                    rightChain.push(y)\n\n                    if (\n                        !this.compare2Objects(leftChain, rightChain, x[p], y[p])\n                    ) {\n                        return false\n                    }\n\n                    leftChain.pop()\n                    rightChain.pop()\n                    break\n\n                default:\n                    if (x[p] !== y[p]) {\n                        return false\n                    }\n                    break\n            }\n        }\n\n        return true\n    }\n\n    // Checks if it's an object made by Object.create(null), {} or new Object()\n    private static isPlainObject(item: any) {\n        if (item === null || item === undefined) {\n            return false\n        }\n\n        return !item.constructor || item.constructor === Object\n    }\n\n    private static mergeArrayKey(\n        target: any,\n        key: number,\n        value: any,\n        memo: Map<any, any>,\n    ) {\n        // Have we seen this before?  Prevent infinite recursion.\n        if (memo.has(value)) {\n            target[key] = memo.get(value)\n            return\n        }\n\n        if (value instanceof Promise) {\n            // Skip promises entirely.\n            // This is a hold-over from the old code & is because we don't want to pull in\n            // the lazy fields.  Ideally we'd remove these promises via another function first\n            // but for now we have to do it here.\n            return\n        }\n\n        if (!this.isPlainObject(value) && !Array.isArray(value)) {\n            target[key] = value\n            return\n        }\n\n        if (!target[key]) {\n            target[key] = Array.isArray(value) ? [] : {}\n        }\n\n        memo.set(value, target[key])\n        this.merge(target[key], value, memo)\n        memo.delete(value)\n    }\n\n    private static mergeObjectKey(\n        target: any,\n        key: string,\n        value: any,\n        memo: Map<any, any>,\n    ) {\n        // Have we seen this before?  Prevent infinite recursion.\n        if (memo.has(value)) {\n            Object.assign(target, { [key]: memo.get(value) })\n            return\n        }\n\n        if (value instanceof Promise) {\n            // Skip promises entirely.\n            // This is a hold-over from the old code & is because we don't want to pull in\n            // the lazy fields.  Ideally we'd remove these promises via another function first\n            // but for now we have to do it here.\n            return\n        }\n\n        if (!this.isPlainObject(value) && !Array.isArray(value)) {\n            Object.assign(target, { [key]: value })\n            return\n        }\n\n        if (!target[key]) {\n            Object.assign(target, { [key]: Array.isArray(value) ? [] : {} })\n        }\n\n        memo.set(value, target[key])\n        this.merge(target[key], value, memo)\n        memo.delete(value)\n    }\n\n    private static merge(\n        target: any,\n        source: any,\n        memo: Map<any, any> = new Map(),\n    ): any {\n        if (this.isPlainObject(target) && this.isPlainObject(source)) {\n            for (const key of Object.keys(source)) {\n                if (key === \"__proto__\") continue\n                this.mergeObjectKey(target, key, source[key], memo)\n            }\n        }\n\n        if (Array.isArray(target) && Array.isArray(source)) {\n            for (let key = 0; key < source.length; key++) {\n                this.mergeArrayKey(target, key, source[key], memo)\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4067, "column": 0}, "map": {"version":3,"file":"VersionUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/VersionUtils.ts"],"sourcesContent":["export class VersionUtils {\n    static isGreaterOrEqual(\n        version: string | undefined,\n        targetVersion: string,\n    ): boolean {\n        if (!version) {\n            return false\n        }\n\n        const v1 = parseVersion(version)\n        const v2 = parseVersion(targetVersion)\n\n        for (let i = 0; i < v1.length && i < v2.length; i++) {\n            if (v1[i] > v2[i]) {\n                return true\n            } else if (v1[i] < v2[i]) {\n                return false\n            }\n        }\n\n        return true\n    }\n}\n\nfunction parseVersion(version: string): number[] {\n    return version.split(\".\").map((value) => parseInt(value, 10))\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAa,YAAY;IACrB,MAAM,CAAC,gBAAgB,CACnB,OAA2B,EAC3B,aAAqB,EAAA;QAErB,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,OAAO,KAAK,CAAA;QAChB,CAAC;QAED,MAAM,EAAE,GAAG,YAAY,CAAC,OAAO,CAAC,CAAA;QAChC,MAAM,EAAE,GAAG,YAAY,CAAC,aAAa,CAAC,CAAA;QAEtC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE,CAAC;YAClD,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;gBAChB,OAAO,IAAI,CAAA;YACf,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;gBACvB,OAAO,KAAK,CAAA;YAChB,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAA;IACf,CAAC;CACJ;AAtBD,QAAA,YAAA,GAAA,aAsBC;AAED,SAAS,YAAY,CAAC,OAAe;IACjC,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAG,CAAD,OAAS,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAA;AACjE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4098, "column": 0}, "map": {"version":3,"file":"ApplyValueTransformers.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/ApplyValueTransformers.ts"],"sourcesContent":["import { ValueTransformer } from \"../decorator/options/ValueTransformer\"\n\nexport class ApplyValueTransformers {\n    static transformFrom(\n        transformer: ValueTransformer | ValueTransformer[],\n        databaseValue: any,\n    ) {\n        if (Array.isArray(transformer)) {\n            const reverseTransformers = transformer.slice().reverse()\n            return reverseTransformers.reduce(\n                (transformedValue, _transformer) => {\n                    return _transformer.from(transformedValue)\n                },\n                databaseValue,\n            )\n        }\n        return transformer.from(databaseValue)\n    }\n    static transformTo(\n        transformer: ValueTransformer | ValueTransformer[],\n        entityValue: any,\n    ) {\n        if (Array.isArray(transformer)) {\n            return transformer.reduce((transformedValue, _transformer) => {\n                return _transformer.to(transformedValue)\n            }, entityValue)\n        }\n        return transformer.to(entityValue)\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAa,sBAAsB;IAC/B,MAAM,CAAC,aAAa,CAChB,WAAkD,EAClD,aAAkB,EAAA;QAElB,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YAC7B,MAAM,mBAAmB,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAA;YACzD,OAAO,mBAAmB,CAAC,MAAM,CAC7B,CAAC,gBAAgB,EAAE,YAAY,EAAE,EAAE;gBAC/B,OAAO,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAC9C,CAAC,EACD,aAAa,CAChB,CAAA;QACL,CAAC;QACD,OAAO,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;IAC1C,CAAC;IACD,MAAM,CAAC,WAAW,CACd,WAAkD,EAClD,WAAgB,EAAA;QAEhB,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YAC7B,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,YAAY,EAAE,EAAE;gBACzD,OAAO,YAAY,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAA;YAC5C,CAAC,EAAE,WAAW,CAAC,CAAA;QACnB,CAAC;QACD,OAAO,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,CAAA;IACtC,CAAC;CACJ;AA3BD,QAAA,sBAAA,GAAA,uBA2BC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4128, "column": 0}, "map": {"version":3,"file":"escapeRegExp.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/escapeRegExp.ts"],"sourcesContent":["// Escape special characters in regular expressions\n// Per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\nconst ESCAPE_REGEXP = /[.*+\\-?^${}()|[\\]\\\\]/g\nexport const escapeRegExp = (s: string) => s.replace(ESCAPE_REGEXP, \"\\\\$&\")\n"],"names":[],"mappings":";;;;;AAAA,mDAAmD;AACnD,iGAAiG;AACjG,MAAM,aAAa,GAAG,uBAAuB,CAAA;AACtC,MAAM,YAAY,GAAG,CAAC,CAAS,EAAE,CAAG,CAAD,AAAE,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;AAA9D,QAAA,YAAY,GAAA,aAAkD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4143, "column": 0}, "map": {"version":3,"file":"RandomGenerator.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/RandomGenerator.ts"],"sourcesContent":["export class RandomGenerator {\n    /**\n     *  discuss at: http://locutus.io/php/sha1/\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\n     * improved by: Michael White (http://getsprink.com)\n     * improved by: Kevin van Zonneveld (http://kvz.io)\n     *    input by: Brett Zamir (http://brett-zamir.me)\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\n     *      note 1: in a steaming fashion for faster and more efficient hashing\n     *   example 1: sha1('Kevin van Zonneveld')\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\n     */\n    static sha1(str: string) {\n        const _rotLeft = function (n: any, s: any) {\n            const t4 = (n << s) | (n >>> (32 - s))\n            return t4\n        }\n\n        const _cvtHex = function (val: any) {\n            let str = \"\"\n            let i\n            let v\n\n            for (i = 7; i >= 0; i--) {\n                v = (val >>> (i * 4)) & 0x0f\n                str += v.toString(16)\n            }\n            return str\n        }\n\n        let blockstart\n        let i, j\n        const W = new Array(80)\n        let H0 = 0x67452301\n        let H1 = 0xefcdab89\n        let H2 = 0x98badcfe\n        let H3 = 0x10325476\n        let H4 = 0xc3d2e1f0\n        let A, B, C, D, E\n        let temp\n\n        // utf8_encode\n        str = /*unescape*/ encodeURIComponent(str)\n        const strLen = str.length\n\n        const wordArray = []\n        for (i = 0; i < strLen - 3; i += 4) {\n            j =\n                (str.charCodeAt(i) << 24) |\n                (str.charCodeAt(i + 1) << 16) |\n                (str.charCodeAt(i + 2) << 8) |\n                str.charCodeAt(i + 3)\n            wordArray.push(j)\n        }\n\n        switch (strLen % 4) {\n            case 0:\n                i = 0x080000000\n                break\n            case 1:\n                i = (str.charCodeAt(strLen - 1) << 24) | 0x0800000\n                break\n            case 2:\n                i =\n                    (str.charCodeAt(strLen - 2) << 24) |\n                    (str.charCodeAt(strLen - 1) << 16) |\n                    0x08000\n                break\n            case 3:\n                i =\n                    (str.charCodeAt(strLen - 3) << 24) |\n                    (str.charCodeAt(strLen - 2) << 16) |\n                    (str.charCodeAt(strLen - 1) << 8) |\n                    0x80\n                break\n        }\n\n        wordArray.push(i)\n\n        while (wordArray.length % 16 !== 14) {\n            wordArray.push(0)\n        }\n\n        wordArray.push(strLen >>> 29)\n        wordArray.push((strLen << 3) & 0x0ffffffff)\n\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\n            for (i = 0; i < 16; i++) {\n                W[i] = wordArray[blockstart + i]\n            }\n            for (i = 16; i <= 79; i++) {\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1)\n            }\n\n            A = H0\n            B = H1\n            C = H2\n            D = H3\n            E = H4\n\n            for (i = 0; i <= 19; i++) {\n                temp =\n                    (_rotLeft(A, 5) +\n                        ((B & C) | (~B & D)) +\n                        E +\n                        W[i] +\n                        0x5a827999) &\n                    0x0ffffffff\n                E = D\n                D = C\n                C = _rotLeft(B, 30)\n                B = A\n                A = temp\n            }\n\n            for (i = 20; i <= 39; i++) {\n                temp =\n                    (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ed9eba1) &\n                    0x0ffffffff\n                E = D\n                D = C\n                C = _rotLeft(B, 30)\n                B = A\n                A = temp\n            }\n\n            for (i = 40; i <= 59; i++) {\n                temp =\n                    (_rotLeft(A, 5) +\n                        ((B & C) | (B & D) | (C & D)) +\n                        E +\n                        W[i] +\n                        0x8f1bbcdc) &\n                    0x0ffffffff\n                E = D\n                D = C\n                C = _rotLeft(B, 30)\n                B = A\n                A = temp\n            }\n\n            for (i = 60; i <= 79; i++) {\n                temp =\n                    (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xca62c1d6) &\n                    0x0ffffffff\n                E = D\n                D = C\n                C = _rotLeft(B, 30)\n                B = A\n                A = temp\n            }\n\n            H0 = (H0 + A) & 0x0ffffffff\n            H1 = (H1 + B) & 0x0ffffffff\n            H2 = (H2 + C) & 0x0ffffffff\n            H3 = (H3 + D) & 0x0ffffffff\n            H4 = (H4 + E) & 0x0ffffffff\n        }\n\n        temp =\n            _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4)\n        return temp.toLowerCase()\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4273, "column": 0}, "map": {"version":3,"file":"DepGraph.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/DepGraph.ts"],"sourcesContent":["/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\n\n/**\n * A simple dependency graph\n */\n\nimport { TypeORMError } from \"../error\"\n\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\n    const currentPath: any[] = []\n    const visited: any = {}\n    return function DFS(currentNode: any) {\n        visited[currentNode] = true\n        currentPath.push(currentNode)\n        edges[currentNode].forEach(function (node: any) {\n            if (!visited[node]) {\n                DFS(node)\n            } else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node)\n                throw new TypeORMError(\n                    `Dependency Cycle Found: ${currentPath.join(\" -> \")}`,\n                )\n            }\n        })\n        currentPath.pop()\n        if (\n            (!leavesOnly || edges[currentNode].length === 0) &&\n            result.indexOf(currentNode) === -1\n        ) {\n            result.push(currentNode)\n        }\n    }\n}\n\nexport class DepGraph {\n    nodes: any = {}\n    outgoingEdges: any = {} // Node -> [Dependency Node]\n    incomingEdges: any = {} // Node -> [Dependant Node]\n\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    addNode(node: any, data?: any) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data\n            } else {\n                this.nodes[node] = node\n            }\n            this.outgoingEdges[node] = []\n            this.incomingEdges[node] = []\n        }\n    }\n\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    removeNode(node: any) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node]\n            delete this.outgoingEdges[node]\n            delete this.incomingEdges[node]\n            ;[this.incomingEdges, this.outgoingEdges].forEach(function (\n                edgeList,\n            ) {\n                Object.keys(edgeList).forEach(function (key: any) {\n                    const idx = edgeList[key].indexOf(node)\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1)\n                    }\n                })\n            })\n        }\n    }\n\n    /**\n     * Check if a node exists in the graph\n     */\n    hasNode(node: any) {\n        return this.nodes.hasOwnProperty(node)\n    }\n\n    /**\n     * Get the data associated with a node name\n     */\n    getNodeData(node: any) {\n        if (this.hasNode(node)) {\n            return this.nodes[node]\n        } else {\n            throw new TypeORMError(`Node does not exist: ${node}`)\n        }\n    }\n\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    setNodeData(node: any, data: any) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data\n        } else {\n            throw new TypeORMError(`Node does not exist: ${node}`)\n        }\n    }\n\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    addDependency(from: any, to: any) {\n        if (!this.hasNode(from)) {\n            throw new TypeORMError(`Node does not exist: ${from}`)\n        }\n        if (!this.hasNode(to)) {\n            throw new TypeORMError(`Node does not exist: ${to}`)\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to)\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from)\n        }\n        return true\n    }\n\n    /**\n     * Remove a dependency between two nodes.\n     */\n    removeDependency(from: any, to: any) {\n        let idx: any\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to)\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1)\n            }\n        }\n\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from)\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1)\n            }\n        }\n    }\n\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    dependenciesOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            const result: any[] = []\n            const DFS = createDFS(this.outgoingEdges, leavesOnly, result)\n            DFS(node)\n            const idx = result.indexOf(node)\n            if (idx >= 0) {\n                result.splice(idx, 1)\n            }\n            return result\n        } else {\n            throw new TypeORMError(`Node does not exist: ${node}`)\n        }\n    }\n\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    dependantsOf(node: any, leavesOnly: any) {\n        if (this.hasNode(node)) {\n            const result: any[] = []\n            const DFS = createDFS(this.incomingEdges, leavesOnly, result)\n            DFS(node)\n            const idx = result.indexOf(node)\n            if (idx >= 0) {\n                result.splice(idx, 1)\n            }\n            return result\n        } else {\n            throw new TypeORMError(`Node does not exist: ${node}`)\n        }\n    }\n\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    overallOrder(leavesOnly?: any) {\n        const self = this\n        const result: any[] = []\n        const keys = Object.keys(this.nodes)\n        if (keys.length === 0) {\n            return result // Empty graph\n        } else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            const CycleDFS = createDFS(this.outgoingEdges, false, [])\n            keys.forEach(function (n: any) {\n                CycleDFS(n)\n            })\n\n            const DFS = createDFS(this.outgoingEdges, leavesOnly, result)\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0\n            }).forEach(function (n) {\n                DFS(n)\n            })\n\n            return result\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4490, "column": 0}, "map": {"version":3,"file":"SqlTagUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/SqlTagUtils.ts"],"sourcesContent":["import { Driver } from \"../driver/Driver\"\nimport dedent from \"dedent\"\n\ninterface BuildSqlTagParams {\n    driver: Driver\n    strings: TemplateStringsArray\n    expressions: unknown[]\n}\n\nexport function buildSqlTag({\n    driver,\n    strings,\n    expressions,\n}: BuildSqlTagParams): { query: string; parameters: unknown[] } {\n    let query = \"\"\n    const parameters: unknown[] = []\n    let idx = 0\n\n    for (const [expressionIdx, expression] of expressions.entries()) {\n        query += strings[expressionIdx]\n\n        if (expression === null) {\n            query += \"NULL\"\n            continue\n        }\n\n        if (typeof expression === \"function\") {\n            const value = expression()\n\n            if (typeof value === \"string\") {\n                query += value\n                continue\n            }\n\n            if (Array.isArray(value)) {\n                if (value.length === 0) {\n                    throw new Error(\n                        `Expression ${expressionIdx} in this sql tagged template is a function which returned an empty array. Empty arrays cannot safely be expanded into parameter lists.`,\n                    )\n                }\n\n                const arrayParams = value.map(() => {\n                    return driver.createParameter(`param_${idx + 1}`, idx++)\n                })\n\n                query += arrayParams.join(\", \")\n                parameters.push(...value)\n\n                continue\n            }\n\n            throw new Error(\n                `Expression ${expressionIdx} in this sql tagged template is a function which returned a value of type \"${\n                    value === null ? \"null\" : typeof value\n                }\". Only array and string types are supported as function return values in sql tagged template expressions.`,\n            )\n        }\n\n        query += driver.createParameter(`param_${idx + 1}`, idx++)\n\n        parameters.push(expression)\n    }\n\n    query += strings[strings.length - 1]\n\n    query = dedent(query)\n\n    return { query, parameters }\n}\n"],"names":[],"mappings":";;;;AASA,QAAA,WAAA,GAAA,YA2DC;;AAnED,MAAA,WAAA,QAAA,eAAA,oBAA2B;AAQ3B,SAAgB,WAAW,CAAC,EACxB,MAAM,EACN,OAAO,EACP,WAAW,EACK;IAChB,IAAI,KAAK,GAAG,EAAE,CAAA;IACd,MAAM,UAAU,GAAc,EAAE,CAAA;IAChC,IAAI,GAAG,GAAG,CAAC,CAAA;IAEX,KAAK,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,CAAE,CAAC;QAC9D,KAAK,IAAI,OAAO,CAAC,aAAa,CAAC,CAAA;QAE/B,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;YACtB,KAAK,IAAI,MAAM,CAAA;YACf,SAAQ;QACZ,CAAC;QAED,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE,CAAC;YACnC,MAAM,KAAK,GAAG,UAAU,EAAE,CAAA;YAE1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAC5B,KAAK,IAAI,KAAK,CAAA;gBACd,SAAQ;YACZ,CAAC;YAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBACvB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBACrB,MAAM,IAAI,KAAK,CACX,CAAA,WAAA,EAAc,aAAa,CAAA,sIAAA,CAAwI,CACtK,CAAA;gBACL,CAAC;gBAED,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;oBAC/B,OAAO,MAAM,CAAC,eAAe,CAAC,CAAA,MAAA,EAAS,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAA;gBAC5D,CAAC,CAAC,CAAA;gBAEF,KAAK,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAC/B,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAA;gBAEzB,SAAQ;YACZ,CAAC;YAED,MAAM,IAAI,KAAK,CACX,CAAA,WAAA,EAAc,aAAa,CAAA,2EAAA,EACvB,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,KACrC,CAAA,0GAAA,CAA4G,CAC/G,CAAA;QACL,CAAC;QAED,KAAK,IAAI,MAAM,CAAC,eAAe,CAAC,CAAA,MAAA,EAAS,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAA;QAE1D,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAC/B,CAAC;IAED,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;IAEpC,KAAK,GAAG,CAAA,GAAA,SAAA,OAAM,EAAC,KAAK,CAAC,CAAA;IAErB,OAAO;QAAE,KAAK;QAAE,UAAU;IAAA,CAAE,CAAA;AAChC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4541, "column": 0}, "map": {"version":3,"file":"TreeRepositoryUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/TreeRepositoryUtils.ts"],"sourcesContent":["import { EntityManager } from \"../entity-manager/EntityManager\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { FindTreesOptions } from \"../repository/FindTreesOptions\"\n\n/**\n * Provides utilities for manipulating tree structures.\n *\n */\nexport class TreeRepositoryUtils {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    static createRelationMaps(\n        manager: EntityManager,\n        metadata: EntityMetadata,\n        alias: string,\n        rawResults: any[],\n    ): { id: any; parentId: any }[] {\n        return rawResults.map((rawResult) => {\n            const joinColumn = metadata.treeParentRelation!.joinColumns[0]\n            const referencedColumn =\n                joinColumn.referencedColumn ?? metadata.primaryColumns[0]\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n            const joinColumnName =\n                joinColumn.givenDatabaseName || joinColumn.databaseName\n            const referencedColumnName =\n                referencedColumn.givenDatabaseName ||\n                referencedColumn.databaseName\n            const id = rawResult[alias + \"_\" + referencedColumnName]\n            const parentId = rawResult[alias + \"_\" + joinColumnName]\n            return {\n                id: manager.connection.driver.prepareHydratedValue(\n                    id,\n                    referencedColumn,\n                ),\n                parentId: manager.connection.driver.prepareHydratedValue(\n                    parentId,\n                    joinColumn,\n                ),\n            }\n        })\n    }\n\n    static buildChildrenEntityTree(\n        metadata: EntityMetadata,\n        entity: any,\n        entities: any[],\n        relationMaps: { id: any; parentId: any }[],\n        options: FindTreesOptions & { depth: number },\n    ): void {\n        const childProperty = metadata.treeChildrenRelation!.propertyName\n        if (options.depth === 0) {\n            entity[childProperty] = []\n            return\n        }\n        const joinColumn = metadata.treeParentRelation!.joinColumns[0]\n        const referencedColumn =\n            joinColumn.referencedColumn ?? metadata.primaryColumns[0]\n        const parentEntityId = referencedColumn.getEntityValue(entity)\n        const childRelationMaps = relationMaps.filter(\n            (relationMap) => relationMap.parentId === parentEntityId,\n        )\n        const childIds = new Set(\n            childRelationMaps.map((relationMap) => relationMap.id),\n        )\n        entity[childProperty] = entities.filter((entity) =>\n            childIds.has(referencedColumn.getEntityValue(entity)),\n        )\n        entity[childProperty].forEach((childEntity: any) => {\n            TreeRepositoryUtils.buildChildrenEntityTree(\n                metadata,\n                childEntity,\n                entities,\n                relationMaps,\n                {\n                    ...options,\n                    depth: options.depth - 1,\n                },\n            )\n        })\n    }\n\n    static buildParentEntityTree(\n        metadata: EntityMetadata,\n        entity: any,\n        entities: any[],\n        relationMaps: { id: any; parentId: any }[],\n    ): void {\n        const parentProperty = metadata.treeParentRelation!.propertyName\n        const joinColumn = metadata.treeParentRelation!.joinColumns[0]\n        const referencedColumn =\n            joinColumn.referencedColumn ?? metadata.primaryColumns[0]\n        const entityId = referencedColumn.getEntityValue(entity)\n        const parentRelationMap = relationMaps.find(\n            (relationMap) => relationMap.id === entityId,\n        )\n        const parentEntity = entities.find((entity) => {\n            if (!parentRelationMap) return false\n\n            return (\n                referencedColumn.getEntityValue(entity) ===\n                parentRelationMap.parentId\n            )\n        })\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity\n            TreeRepositoryUtils.buildParentEntityTree(\n                metadata,\n                entity[parentProperty],\n                entities,\n                relationMaps,\n            )\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4609, "column": 0}, "map": {"version":3,"file":"DateUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/DateUtils.ts"],"sourcesContent":["import { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport dayjs from \"dayjs\"\n\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\nexport class DateUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    static normalizeHydratedDate(\n        mixedDate: Date | string | undefined,\n    ): Date | string | undefined {\n        if (!mixedDate) return mixedDate\n\n        return typeof mixedDate === \"string\"\n            ? new Date(mixedDate)\n            : (mixedDate as Date)\n    }\n\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    static mixedDateToDateString(value: string | Date): string {\n        if (value instanceof Date) {\n            return (\n                this.formatZerolessValue(value.getFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getDate())\n            )\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given value into date object.\n     */\n    static mixedDateToDate(\n        mixedDate: Date | string,\n        toUtc: boolean = false,\n        useMilliseconds = true,\n    ): Date {\n        /**\n         * new Date(ISOString) is not a reliable parser to date strings.\n         * It's better to use 'date-fns' parser to parser string in ISO Format.\n         *\n         * The problem here is with wrong timezone.\n         *\n         * For example:\n         *\n         * ``new Date('2021-04-28')`` will generate `2021-04-28T00:00:00.000Z`\n         * in my timezone, which is not true for my timezone (GMT-0300). It should\n         * be `2021-04-28T03:00:00.000Z` as `new Date(2021, 3, 28)` generates.\n         *\n         * https://stackoverflow.com/a/2587398\n         */\n        let date =\n            typeof mixedDate === \"string\"\n                ? dayjs(mixedDate).toDate()\n                : mixedDate\n\n        if (toUtc)\n            date = new Date(\n                date.getUTCFullYear(),\n                date.getUTCMonth(),\n                date.getUTCDate(),\n                date.getUTCHours(),\n                date.getUTCMinutes(),\n                date.getUTCSeconds(),\n                date.getUTCMilliseconds(),\n            )\n\n        if (!useMilliseconds) date.setUTCMilliseconds(0)\n\n        return date\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedDateToTimeString(\n        value: Date | any,\n        skipSeconds: boolean = false,\n    ): string | any {\n        if (value instanceof Date)\n            return (\n                this.formatZerolessValue(value.getHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getMinutes()) +\n                (!skipSeconds\n                    ? \":\" + this.formatZerolessValue(value.getSeconds())\n                    : \"\")\n            )\n\n        return value\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToDate(value: Date | any): string | any {\n        if (typeof value === \"string\") {\n            const [hours, minutes, seconds] = value.split(\":\")\n            const date = new Date()\n            if (hours) date.setHours(parseInt(hours))\n            if (minutes) date.setMinutes(parseInt(minutes))\n            if (seconds) date.setSeconds(parseInt(seconds))\n            return date\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToString(\n        value: string | any,\n        skipSeconds: boolean = false,\n    ): string | any {\n        value =\n            value instanceof Date\n                ? value.getHours() +\n                  \":\" +\n                  value.getMinutes() +\n                  (!skipSeconds ? \":\" + value.getSeconds() : \"\")\n                : value\n        if (typeof value === \"string\") {\n            return value\n                .split(\":\")\n                .map((v) => (v.length === 1 ? \"0\" + v : v)) // append zero at beginning if we have a first-zero-less number\n                .join(\":\")\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToDatetimeString(\n        value: Date | any,\n        useMilliseconds?: boolean,\n    ): string | any {\n        if (typeof value === \"string\") {\n            value = new Date(value)\n        }\n        if (value instanceof Date) {\n            let finalValue =\n                this.formatZerolessValue(value.getFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getDate()) +\n                \" \" +\n                this.formatZerolessValue(value.getHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getMinutes()) +\n                \":\" +\n                this.formatZerolessValue(value.getSeconds())\n\n            if (useMilliseconds)\n                finalValue += `.${this.formatMilliseconds(\n                    value.getMilliseconds(),\n                )}`\n\n            value = finalValue\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\n     */\n    static mixedDateToUtcDatetimeString(value: Date | any): string | any {\n        if (typeof value === \"string\") {\n            value = new Date(value)\n        }\n        if (value instanceof Date) {\n            return (\n                this.formatZerolessValue(value.getUTCFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) +\n                \" \" +\n                this.formatZerolessValue(value.getUTCHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) +\n                \":\" +\n                this.formatZerolessValue(value.getUTCSeconds()) +\n                \".\" +\n                this.formatMilliseconds(value.getUTCMilliseconds())\n            )\n        }\n\n        return value\n    }\n\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    static simpleArrayToString(value: any[] | any): string[] | any {\n        if (Array.isArray(value)) {\n            return (value as any[]).map((i) => String(i)).join(\",\")\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    static stringToSimpleArray(value: string | any): string | any {\n        if (typeof value === \"string\") {\n            if (value.length > 0) {\n                return value.split(\",\")\n            } else {\n                return []\n            }\n        }\n\n        return value\n    }\n\n    static simpleJsonToString(value: any): string {\n        return JSON.stringify(value)\n    }\n\n    static stringToSimpleJson(value: any) {\n        return typeof value === \"string\" ? JSON.parse(value) : value\n    }\n\n    static simpleEnumToString(value: any) {\n        return \"\" + value\n    }\n\n    static stringToSimpleEnum(value: any, columnMetadata: ColumnMetadata) {\n        if (\n            columnMetadata.enum &&\n            !isNaN(value) &&\n            columnMetadata.enum.indexOf(parseInt(value)) >= 0\n        ) {\n            // convert to number if that exists in poosible enum options\n            value = parseInt(value)\n        }\n\n        return value\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if the totalLength = 2 and the value is 1 then it will return \"01\".\n     */\n    private static formatZerolessValue(value: number, totalLength = 2): string {\n        const pad = \"0\".repeat(totalLength)\n\n        return String(`${pad}${value}`).slice(-totalLength)\n    }\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatMilliseconds(value: number): string {\n        if (value < 10) {\n            return \"00\" + value\n        } else if (value < 100) {\n            return \"0\" + value\n        } else {\n            return String(value)\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4773, "column": 0}, "map": {"version":3,"file":"DirectoryExportedClassesLoader.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/util/DirectoryExportedClassesLoader.ts"],"sourcesContent":["import * as glob from \"glob\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { Logger } from \"../logger/Logger\"\nimport { importOrRequireFile } from \"./ImportUtils\"\nimport { ObjectUtils } from \"./ObjectUtils\"\nimport { InstanceChecker } from \"./InstanceChecker\"\n\n/**\n * Loads all exported classes from the given directory.\n */\nexport async function importClassesFromDirectories(\n    logger: Logger,\n    directories: string[],\n    formats = [\".js\", \".mjs\", \".cjs\", \".ts\", \".mts\", \".cts\"],\n): Promise<Function[]> {\n    const logLevel = \"info\"\n    const classesNotFoundMessage =\n        \"No classes were found using the provided glob pattern: \"\n    const classesFoundMessage = \"All classes found using provided glob pattern\"\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\n        if (\n            typeof exported === \"function\" ||\n            InstanceChecker.isEntitySchema(exported)\n        ) {\n            allLoaded.push(exported)\n        } else if (Array.isArray(exported)) {\n            exported.forEach((value) => loadFileClasses(value, allLoaded))\n        } else if (ObjectUtils.isObject(exported)) {\n            Object.values(exported).forEach((value) =>\n                loadFileClasses(value, allLoaded),\n            )\n        }\n        return allLoaded\n    }\n\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(glob.sync(PlatformTools.pathNormalize(dir)))\n    }, [] as string[])\n\n    if (directories.length > 0 && allFiles.length === 0) {\n        logger.log(logLevel, `${classesNotFoundMessage} \"${directories}\"`)\n    } else if (allFiles.length > 0) {\n        logger.log(\n            logLevel,\n            `${classesFoundMessage} \"${directories}\" : \"${allFiles}\"`,\n        )\n    }\n    const dirPromises = allFiles\n        .filter((file) => {\n            const dtsExtension = file.substring(file.length - 5, file.length)\n            return (\n                formats.indexOf(PlatformTools.pathExtname(file)) !== -1 &&\n                dtsExtension !== \".d.ts\"\n            )\n        })\n        .map(async (file) => {\n            const [importOrRequireResult] = await importOrRequireFile(\n                PlatformTools.pathResolve(file),\n            )\n            return importOrRequireResult\n        })\n\n    const dirs = await Promise.all(dirPromises)\n\n    return loadFileClasses(dirs, [])\n}\n\n/**\n * Loads all json files from the given directory.\n */\nexport function importJsonsFromDirectories(\n    directories: string[],\n    format = \".json\",\n): any[] {\n    const allFiles = directories.reduce((allDirs, dir) => {\n        return allDirs.concat(glob.sync(PlatformTools.pathNormalize(dir)))\n    }, [] as string[])\n\n    return allFiles\n        .filter((file) => PlatformTools.pathExtname(file) === format)\n        .map((file) => require(PlatformTools.pathResolve(file)))\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4843, "column": 0}, "map": {"version":3,"file":"ConnectionOptionsEnvReader.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/connection/options-reader/ConnectionOptionsEnvReader.ts"],"sourcesContent":["import { DataSourceOptions } from \"../../data-source/DataSourceOptions\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\n\n/**\n * Reads connection options from environment variables.\n * Environment variables can have only a single connection.\n * Its strongly required to define TYPEORM_CONNECTION env variable.\n *\n * @deprecated\n */\nexport class ConnectionOptionsEnvReader {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Reads connection options from environment variables.\n     */\n    async read(): Promise<DataSourceOptions[]> {\n        return [\n            {\n                type:\n                    PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\") ||\n                    (PlatformTools.getEnvVariable(\"TYPEORM_URL\")\n                        ? PlatformTools.getEnvVariable(\"TYPEORM_URL\").split(\n                              \"://\",\n                          )[0]\n                        : undefined),\n                url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\n                host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\n                port: this.stringToNumber(\n                    PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\n                ),\n                username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\n                password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\n                database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\n                sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\n                schema: PlatformTools.getEnvVariable(\"TYPEORM_SCHEMA\"),\n                extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")\n                    ? JSON.parse(\n                          PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\"),\n                      )\n                    : undefined,\n                synchronize: OrmUtils.toBoolean(\n                    PlatformTools.getEnvVariable(\"TYPEORM_SYNCHRONIZE\"),\n                ),\n                dropSchema: OrmUtils.toBoolean(\n                    PlatformTools.getEnvVariable(\"TYPEORM_DROP_SCHEMA\"),\n                ),\n                migrationsRun: OrmUtils.toBoolean(\n                    PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_RUN\"),\n                ),\n                entities: this.stringToArray(\n                    PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\"),\n                ),\n                migrations: this.stringToArray(\n                    PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS\"),\n                ),\n                migrationsTableName: PlatformTools.getEnvVariable(\n                    \"TYPEORM_MIGRATIONS_TABLE_NAME\",\n                ),\n                metadataTableName: PlatformTools.getEnvVariable(\n                    \"TYPEORM_METADATA_TABLE_NAME\",\n                ),\n                subscribers: this.stringToArray(\n                    PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\"),\n                ),\n                logging: this.transformLogging(\n                    PlatformTools.getEnvVariable(\"TYPEORM_LOGGING\"),\n                ),\n                logger: PlatformTools.getEnvVariable(\"TYPEORM_LOGGER\"),\n                entityPrefix: PlatformTools.getEnvVariable(\n                    \"TYPEORM_ENTITY_PREFIX\",\n                ),\n                maxQueryExecutionTime: PlatformTools.getEnvVariable(\n                    \"TYPEORM_MAX_QUERY_EXECUTION_TIME\",\n                ),\n                debug: PlatformTools.getEnvVariable(\"TYPEORM_DEBUG\"),\n                cache: this.transformCaching(),\n                uuidExtension: PlatformTools.getEnvVariable(\n                    \"TYPEORM_UUID_EXTENSION\",\n                ),\n            },\n        ]\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Transforms logging string into real logging value connection requires.\n     */\n    protected transformLogging(logging: string): any {\n        if (logging === \"true\" || logging === \"TRUE\" || logging === \"1\")\n            return true\n        if (logging === \"all\") return \"all\"\n\n        return this.stringToArray(logging)\n    }\n\n    /**\n     * Transforms caching option into real caching value option requires.\n     */\n    protected transformCaching(): boolean | object | undefined {\n        const caching = PlatformTools.getEnvVariable(\"TYPEORM_CACHE\")\n        if (caching === \"true\" || caching === \"TRUE\" || caching === \"1\")\n            return true\n        if (caching === \"false\" || caching === \"FALSE\" || caching === \"0\")\n            return false\n        if (\n            caching === \"redis\" ||\n            caching === \"ioredis\" ||\n            caching === \"database\"\n        )\n            return {\n                type: caching,\n                options: PlatformTools.getEnvVariable(\"TYPEORM_CACHE_OPTIONS\")\n                    ? JSON.parse(\n                          PlatformTools.getEnvVariable(\"TYPEORM_CACHE_OPTIONS\"),\n                      )\n                    : undefined,\n                alwaysEnabled: PlatformTools.getEnvVariable(\n                    \"TYPEORM_CACHE_ALWAYS_ENABLED\",\n                ),\n                duration: parseInt(\n                    PlatformTools.getEnvVariable(\"TYPEORM_CACHE_DURATION\"),\n                ),\n            }\n\n        return undefined\n    }\n\n    /**\n     * Converts a string which contains multiple elements split by comma into a string array of strings.\n     */\n    protected stringToArray(variable?: string) {\n        if (!variable) return []\n        return variable.split(\",\").map((str) => str.trim())\n    }\n\n    /**\n     * Converts a string which contains a number into a javascript number\n     */\n    private stringToNumber(value: any): number | undefined {\n        if (!value) {\n            return undefined\n        }\n\n        return parseInt(value)\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4938, "column": 0}, "map": {"version":3,"file":"ConnectionOptionsReader.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/connection/ConnectionOptionsReader.ts"],"sourcesContent":["import appRootPath from \"app-root-path\"\nimport path from \"path\"\n\nimport { DataSourceOptions } from \"../data-source/DataSourceOptions\"\nimport { TypeORMError } from \"../error\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { importOrRequireFile } from \"../util/ImportUtils\"\nimport { isAbsolute } from \"../util/PathUtils\"\nimport { ConnectionOptionsEnvReader } from \"./options-reader/ConnectionOptionsEnvReader\"\n\n/**\n * Reads connection options from the ormconfig.\n */\nexport class ConnectionOptionsReader {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        protected options?: {\n            /**\n             * Directory where ormconfig should be read from.\n             * By default its your application root (where your app package.json is located).\n             */\n            root?: string\n\n            /**\n             * Filename of the ormconfig configuration. By default its equal to \"ormconfig\".\n             */\n            configName?: string\n        },\n    ) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns all connection options read from the ormconfig.\n     */\n    async all(): Promise<DataSourceOptions[]> {\n        const options = await this.load()\n        if (!options)\n            throw new TypeORMError(\n                `No connection options were found in any orm configuration files.`,\n            )\n\n        return options\n    }\n\n    /**\n     * Gets a connection with a given name read from ormconfig.\n     * If connection with such name would not be found then it throw error.\n     */\n    async get(name: string): Promise<DataSourceOptions> {\n        const allOptions = await this.all()\n        const targetOptions = allOptions.find(\n            (options) =>\n                options.name === name || (name === \"default\" && !options.name),\n        )\n        if (!targetOptions)\n            throw new TypeORMError(\n                `Cannot find connection ${name} because its not defined in any orm configuration files.`,\n            )\n\n        return targetOptions\n    }\n\n    /**\n     * Checks if there is a TypeORM configuration file.\n     */\n    async has(name: string): Promise<boolean> {\n        const allOptions = await this.load()\n        if (!allOptions) return false\n\n        const targetOptions = allOptions.find(\n            (options) =>\n                options.name === name || (name === \"default\" && !options.name),\n        )\n        return !!targetOptions\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all connection options from a configuration file.\n     *\n     * todo: get in count NODE_ENV somehow\n     */\n    protected async load(): Promise<DataSourceOptions[] | undefined> {\n        let connectionOptions:\n            | DataSourceOptions\n            | DataSourceOptions[]\n            | undefined = undefined\n\n        const fileFormats = [\n            \"env\",\n            \"js\",\n            \"mjs\",\n            \"cjs\",\n            \"ts\",\n            \"mts\",\n            \"cts\",\n            \"json\",\n        ]\n\n        // Detect if baseFilePath contains file extension\n        const possibleExtension = this.baseFilePath.substr(\n            this.baseFilePath.lastIndexOf(\".\"),\n        )\n        const fileExtension = fileFormats.find(\n            (extension) => `.${extension}` === possibleExtension,\n        )\n\n        // try to find any of following configuration formats\n        const foundFileFormat =\n            fileExtension ||\n            fileFormats.find((format) => {\n                return PlatformTools.fileExist(this.baseFilePath + \".\" + format)\n            })\n\n        // Determine config file name\n        const configFile = fileExtension\n            ? this.baseFilePath\n            : this.baseFilePath + \".\" + foundFileFormat\n\n        // if .env file found then load all its variables into process.env using dotenv package\n        if (foundFileFormat === \"env\") {\n            PlatformTools.dotenv(configFile)\n        } else if (PlatformTools.fileExist(this.baseDirectory + \"/.env\")) {\n            PlatformTools.dotenv(this.baseDirectory + \"/.env\")\n        }\n\n        // try to find connection options from any of available sources of configuration\n        if (\n            PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\") ||\n            PlatformTools.getEnvVariable(\"TYPEORM_URL\")\n        ) {\n            connectionOptions = await new ConnectionOptionsEnvReader().read()\n        } else if (\n            foundFileFormat === \"js\" ||\n            foundFileFormat === \"mjs\" ||\n            foundFileFormat === \"cjs\" ||\n            foundFileFormat === \"ts\" ||\n            foundFileFormat === \"mts\" ||\n            foundFileFormat === \"cts\"\n        ) {\n            const [importOrRequireResult, moduleSystem] =\n                await importOrRequireFile(configFile)\n            const configModule = await importOrRequireResult\n\n            if (\n                moduleSystem === \"esm\" ||\n                (configModule &&\n                    \"__esModule\" in configModule &&\n                    \"default\" in configModule)\n            ) {\n                connectionOptions = configModule.default\n            } else {\n                connectionOptions = configModule\n            }\n        } else if (foundFileFormat === \"json\") {\n            connectionOptions = require(configFile)\n        }\n\n        // normalize and return connection options\n        if (connectionOptions) {\n            return this.normalizeConnectionOptions(connectionOptions)\n        }\n\n        return undefined\n    }\n\n    /**\n     * Normalize connection options.\n     */\n    protected normalizeConnectionOptions(\n        connectionOptions: DataSourceOptions | DataSourceOptions[],\n    ): DataSourceOptions[] {\n        if (!Array.isArray(connectionOptions))\n            connectionOptions = [connectionOptions]\n\n        connectionOptions.forEach((options) => {\n            options.baseDirectory = this.baseDirectory\n            if (options.entities) {\n                const entities = (options.entities as any[]).map((entity) => {\n                    if (\n                        typeof entity === \"string\" &&\n                        entity.substr(0, 1) !== \"/\"\n                    )\n                        return this.baseDirectory + \"/\" + entity\n\n                    return entity\n                })\n                Object.assign(connectionOptions, { entities: entities })\n            }\n            if (options.subscribers) {\n                const subscribers = (options.subscribers as any[]).map(\n                    (subscriber) => {\n                        if (\n                            typeof subscriber === \"string\" &&\n                            subscriber.substr(0, 1) !== \"/\"\n                        )\n                            return this.baseDirectory + \"/\" + subscriber\n\n                        return subscriber\n                    },\n                )\n                Object.assign(connectionOptions, { subscribers: subscribers })\n            }\n            if (options.migrations) {\n                const migrations = (options.migrations as any[]).map(\n                    (migration) => {\n                        if (\n                            typeof migration === \"string\" &&\n                            migration.substr(0, 1) !== \"/\"\n                        )\n                            return this.baseDirectory + \"/\" + migration\n\n                        return migration\n                    },\n                )\n                Object.assign(connectionOptions, { migrations: migrations })\n            }\n\n            // make database path file in sqlite relative to package.json\n            if (\n                options.type === \"sqlite\" ||\n                options.type === \"better-sqlite3\"\n            ) {\n                if (\n                    typeof options.database === \"string\" &&\n                    !isAbsolute(options.database) &&\n                    options.database.substr(0, 1) !== \"/\" && // unix absolute\n                    options.database.substr(1, 2) !== \":\\\\\" && // windows absolute\n                    options.database !== \":memory:\"\n                ) {\n                    Object.assign(options, {\n                        database: this.baseDirectory + \"/\" + options.database,\n                    })\n                }\n            }\n        })\n\n        return connectionOptions\n    }\n\n    /**\n     * Gets directory where configuration file should be located and configuration file name.\n     */\n    protected get baseFilePath(): string {\n        return path.resolve(this.baseDirectory, this.baseConfigName)\n    }\n\n    /**\n     * Gets directory where configuration file should be located.\n     */\n    protected get baseDirectory(): string {\n        return this.options?.root ?? appRootPath.path\n    }\n\n    /**\n     * Gets configuration file name.\n     */\n    protected get baseConfigName(): string {\n        return this.options?.configName ?? \"ormconfig\"\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5115, "column": 0}, "map": {"version":3,"file":"ConnectionMetadataBuilder.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/connection/ConnectionMetadataBuilder.ts"],"sourcesContent":["import { importClassesFromDirectories } from \"../util/DirectoryExportedClassesLoader\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { getFromContainer } from \"../container\"\nimport { MigrationInterface } from \"../migration/MigrationInterface\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { EntityMetadataBuilder } from \"../metadata-builder/EntityMetadataBuilder\"\nimport { EntitySchemaTransformer } from \"../entity-schema/EntitySchemaTransformer\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { EntitySchema } from \"../entity-schema/EntitySchema\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { EntitySubscriberInterface } from \"../subscriber/EntitySubscriberInterface\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    async buildMigrations(\n        migrations: (Function | string)[],\n    ): Promise<MigrationInterface[]> {\n        const [migrationClasses, migrationDirectories] =\n            OrmUtils.splitClassesAndStrings(migrations)\n        const allMigrationClasses = [\n            ...migrationClasses,\n            ...(await importClassesFromDirectories(\n                this.connection.logger,\n                migrationDirectories,\n            )),\n        ]\n        return allMigrationClasses.map((migrationClass) =>\n            getFromContainer<MigrationInterface>(migrationClass),\n        )\n    }\n\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    async buildSubscribers(\n        subscribers: (Function | string)[],\n    ): Promise<EntitySubscriberInterface<any>[]> {\n        const [subscriberClasses, subscriberDirectories] =\n            OrmUtils.splitClassesAndStrings(subscribers || [])\n        const allSubscriberClasses = [\n            ...subscriberClasses,\n            ...(await importClassesFromDirectories(\n                this.connection.logger,\n                subscriberDirectories,\n            )),\n        ]\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map((metadata) =>\n                getFromContainer<EntitySubscriberInterface<any>>(\n                    metadata.target,\n                ),\n            )\n    }\n\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    async buildEntityMetadatas(\n        entities: (Function | EntitySchema<any> | string)[],\n    ): Promise<EntityMetadata[]> {\n        // todo: instead we need to merge multiple metadata args storages\n\n        const [entityClassesOrSchemas, entityDirectories] =\n            OrmUtils.splitClassesAndStrings(entities || [])\n        const entityClasses: Function[] = entityClassesOrSchemas.filter(\n            (entityClass) => !InstanceChecker.isEntitySchema(entityClass),\n        ) as any\n        const entitySchemas: EntitySchema<any>[] =\n            entityClassesOrSchemas.filter((entityClass) =>\n                InstanceChecker.isEntitySchema(entityClass),\n            ) as any\n\n        const allEntityClasses = [\n            ...entityClasses,\n            ...(await importClassesFromDirectories(\n                this.connection.logger,\n                entityDirectories,\n            )),\n        ]\n        allEntityClasses.forEach((entityClass) => {\n            // if we have entity schemas loaded from directories\n            if (InstanceChecker.isEntitySchema(entityClass)) {\n                entitySchemas.push(entityClass)\n            }\n        })\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(\n            this.connection,\n            getMetadataArgsStorage(),\n        ).build(allEntityClasses)\n\n        const metadataArgsStorageFromSchema =\n            new EntitySchemaTransformer().transform(entitySchemas)\n        const schemaEntityMetadatas = new EntityMetadataBuilder(\n            this.connection,\n            metadataArgsStorageFromSchema,\n        ).build()\n\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas]\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5191, "column": 0}, "map": {"version":3,"file":"ConnectionManager.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/connection/ConnectionManager.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\"\nimport { DataSourceOptions } from \"../data-source/DataSourceOptions\"\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\"\n\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n *\n * @deprecated\n */\nexport class ConnectionManager {\n    /**\n     * List of connections registered in this connection manager.\n     */\n    get connections(): DataSource[] {\n        return Array.from(this.connectionMap.values())\n    }\n\n    /**\n     * Internal lookup to quickly get from a connection name to the Connection object.\n     */\n    private readonly connectionMap: Map<string, DataSource> = new Map()\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return this.connectionMap.has(name)\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): DataSource {\n        const connection = this.connectionMap.get(name)\n        if (!connection) throw new ConnectionNotFoundError(name)\n\n        return connection\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    create(options: DataSourceOptions): DataSource {\n        // check if such connection is already registered\n        const existConnection = this.connectionMap.get(\n            options.name || \"default\",\n        )\n        if (existConnection) {\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isInitialized)\n                throw new AlreadyHasActiveConnectionError(\n                    options.name || \"default\",\n                )\n        }\n\n        // create a new connection\n        const connection = new DataSource(options)\n        this.connectionMap.set(connection.name, connection)\n        return connection\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,oDAAsD;AACtD,MAAA,wEAA0E;AAE1E,MAAA,wFAA0F;AAE1F;;;;;GAKG,CACH,MAAa,iBAAiB;IAA9B,aAAA;QAQI;;WAEG,CACc,IAAA,CAAA,aAAa,GAA4B,IAAI,GAAG,EAAE,CAAA;IA+CvE,CAAC;IAzDG;;OAEG,CACH,IAAI,WAAW,GAAA;QACX,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAA;IAClD,CAAC;IAOD,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,GAAG,CAAC,IAAY,EAAA;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACvC,CAAC;IAED;;;;OAIG,CACH,GAAG,CAAC,OAAe,SAAS,EAAA;QACxB,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAC/C,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,0BAAA,uBAAuB,CAAC,IAAI,CAAC,CAAA;QAExD,OAAO,UAAU,CAAA;IACrB,CAAC;IAED;;;OAGG,CACH,MAAM,CAAC,OAA0B,EAAA;QAC7B,iDAAiD;QACjD,MAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAC1C,OAAO,CAAC,IAAI,IAAI,SAAS,CAC5B,CAAA;QACD,IAAI,eAAe,EAAE,CAAC;YAClB,qEAAqE;YACrE,IAAI,eAAe,CAAC,aAAa,EAC7B,MAAM,IAAI,kCAAA,+BAA+B,CACrC,OAAO,CAAC,IAAI,IAAI,SAAS,CAC5B,CAAA;QACT,CAAC;QAED,0BAA0B;QAC1B,MAAM,UAAU,GAAG,IAAI,aAAA,UAAU,CAAC,OAAO,CAAC,CAAA;QAC1C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;QACnD,OAAO,UAAU,CAAA;IACrB,CAAC;CACJ;AA1DD,QAAA,iBAAA,GAAA,kBA0DC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5254, "column": 0}, "map": {"version":3,"file":"Connection.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/connection/Connection.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\n\n/**\n * Connection is a single database ORM connection to a specific database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n *\n * @deprecated\n */\nexport class Connection extends DataSource {}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,oDAAsD;AAEtD;;;;;;GAMG,CACH,MAAa,UAAW,SAAQ,aAAA,UAAU;CAAG;AAA7C,QAAA,UAAA,GAAA,WAA6C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5274, "column": 0}, "map": {"version":3,"file":"FindOperator.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindOperator.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { FindOperatorType } from \"./FindOperatorType\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ValueTransformer } from \"../decorator/options/ValueTransformer\"\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\"\n\ntype SqlGeneratorType = (aliasPath: string) => string\n\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator<T> {\n    readonly \"@instanceof\" = Symbol.for(\"FindOperator\")\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Operator type.\n     */\n    private _type: FindOperatorType\n\n    /**\n     * Parameter value.\n     */\n    private _value: T | FindOperator<T>\n\n    /**\n     * ObjectLiteral parameters.\n     */\n    private _objectLiteralParameters: ObjectLiteral | undefined\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     */\n    private _useParameter: boolean\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     */\n    private _multipleParameters: boolean\n\n    /**\n     * SQL generator\n     */\n    private _getSql: SqlGeneratorType | undefined\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        type: FindOperatorType,\n        value: T | FindOperator<T>,\n        useParameter: boolean = true,\n        multipleParameters: boolean = false,\n        getSql?: SqlGeneratorType,\n        objectLiteralParameters?: ObjectLiteral,\n    ) {\n        this._type = type\n        this._value = value\n        this._useParameter = useParameter\n        this._multipleParameters = multipleParameters\n        this._getSql = getSql\n        this._objectLiteralParameters = objectLiteralParameters\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter(): boolean {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.useParameter\n\n        return this._useParameter\n    }\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters(): boolean {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.multipleParameters\n\n        return this._multipleParameters\n    }\n\n    /**\n     * Gets the Type of this FindOperator\n     */\n    get type(): FindOperatorType {\n        return this._type\n    }\n\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value(): T {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.value\n\n        return this._value\n    }\n\n    /**\n     * Gets ObjectLiteral parameters.\n     */\n    get objectLiteralParameters(): ObjectLiteral | undefined {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.objectLiteralParameters\n\n        return this._objectLiteralParameters\n    }\n\n    /**\n     * Gets the child FindOperator if it exists\n     */\n    get child(): FindOperator<T> | undefined {\n        if (InstanceChecker.isFindOperator(this._value)) return this._value\n\n        return undefined\n    }\n\n    /**\n     * Gets the SQL generator\n     */\n    get getSql(): SqlGeneratorType | undefined {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.getSql\n\n        return this._getSql\n    }\n\n    transformValue(transformer: ValueTransformer | ValueTransformer[]) {\n        if (this._value instanceof FindOperator) {\n            this._value.transformValue(transformer)\n        } else {\n            this._value =\n                Array.isArray(this._value) && this._multipleParameters\n                    ? this._value.map(\n                          (v: any) =>\n                              transformer &&\n                              ApplyValueTransformers.transformTo(\n                                  transformer,\n                                  v,\n                              ),\n                      )\n                    : ApplyValueTransformers.transformTo(\n                          transformer,\n                          this._value,\n                      )\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5356, "column": 0}, "map": {"version":3,"file":"In.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/In.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: In([...]) }\n */\nexport function In<T>(\n    value: readonly T[] | FindOperator<T>,\n): FindOperator<any> {\n    return new FindOperator(\"in\", value as any, true, true)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,EAAA,GAAA,GAIC;AAVD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,EAAE,CACd,KAAqC;IAErC,OAAO,IAAI,eAAA,YAAY,CAAC,IAAI,EAAE,KAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AAC3D,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5373, "column": 0}, "map": {"version":3,"file":"FindOptionsUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindOptionsUtils.ts"],"sourcesContent":["import { FindManyOptions } from \"./FindManyOptions\"\nimport { FindOneOptions } from \"./FindOneOptions\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { FindRelationsNotFoundError } from \"../error\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { FindTreeOptions } from \"./FindTreeOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { EntityPropertyNotFoundError } from \"../error\"\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions<Entity = any>(\n        obj: any,\n    ): obj is FindOneOptions<Entity> {\n        const possibleOptions: FindOneOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (Array.isArray(possibleOptions.select) ||\n                Array.isArray(possibleOptions.relations) ||\n                typeof possibleOptions.select === \"object\" ||\n                typeof possibleOptions.relations === \"object\" ||\n                typeof possibleOptions.where === \"object\" ||\n                // typeof possibleOptions.where === \"string\" ||\n                typeof possibleOptions.join === \"object\" ||\n                typeof possibleOptions.order === \"object\" ||\n                typeof possibleOptions.cache === \"object\" ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                typeof possibleOptions.comment === \"string\" ||\n                typeof possibleOptions.lock === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                typeof possibleOptions.loadEagerRelations === \"boolean\" ||\n                typeof possibleOptions.withDeleted === \"boolean\" ||\n                typeof possibleOptions.relationLoadStrategy === \"string\" ||\n                typeof possibleOptions.transaction === \"boolean\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions<Entity = any>(\n        obj: any,\n    ): obj is FindManyOptions<Entity> {\n        const possibleOptions: FindManyOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (this.isFindOneOptions(possibleOptions) ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"string\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"string\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object: any): string | undefined {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias\n\n        return undefined\n    }\n\n    /**\n     * Applies give find many options to the given query builder.\n\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return qb.where(options);\n\n        return qb;\n    }*/\n\n    /**\n     * Applies give find options to the given query builder.\n\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n\n        if (options.transaction === true) {\n            qb.expressionMap.useTransaction = true;\n        }\n\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n\n        const metadata = qb.expressionMap.mainAlias!.metadata;\n\n        // apply all options from FindOptions\n        if (options.comment) {\n            qb.comment(options.comment);\n        }\n\n        if (options.withDeleted) {\n            qb.withDeleted();\n        }\n\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(select => {\n                if (!metadata.hasColumnWithPropertyPath(`${select}`))\n                    throw new TypeORMError(`${select} column was not found in the ${metadata.name} entity.`);\n\n                const columns = metadata.findColumnsWithPropertyPath(`${select}`);\n\n                for (const column of columns) {\n                    qb.addSelect(qb.alias + \".\" + column.propertyPath);\n                }\n            });\n        }\n\n        if (options.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations];\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                const cache = options.cache as { id: any, milliseconds: number };\n                qb.cache(cache.id, cache.milliseconds);\n            } else {\n                qb.cache(options.cache);\n            }\n        }\n\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version);\n            } else if (\n                options.lock.mode === \"pessimistic_read\" ||\n                options.lock.mode === \"pessimistic_write\" ||\n                options.lock.mode === \"dirty_read\" ||\n                options.lock.mode === \"pessimistic_partial_write\" ||\n                options.lock.mode === \"pessimistic_write_or_fail\" ||\n                options.lock.mode === \"for_no_key_update\" ||\n                options.lock.mode === \"for_key_share\"\n            ) {\n                const tableNames = options.lock.tables ? options.lock.tables.map((table) => {\n                    const tableAlias = qb.expressionMap.aliases.find((alias) => {\n                        return alias.metadata.tableNameWithoutPrefix === table;\n                    });\n                    if (!tableAlias) {\n                        throw new TypeORMError(`\"${table}\" is not part of this query`);\n                    }\n                    return qb.escape(tableAlias.name);\n                }) : undefined;\n                qb.setLock(options.lock.mode, undefined, tableNames);\n            }\n        }\n\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n\n        } else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds as any);\n        }\n\n        if (options.where)\n            qb.where(options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\n\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\n\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n\n        return qb;\n    }*/\n\n    static applyOptionsToTreeQueryBuilder<T extends ObjectLiteral>(\n        qb: SelectQueryBuilder<T>,\n        options?: FindTreeOptions,\n    ): SelectQueryBuilder<T> {\n        if (options?.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations]\n\n            FindOptionsUtils.applyRelationsRecursively(\n                qb,\n                allRelations,\n                qb.expressionMap.mainAlias!.name,\n                qb.expressionMap.mainAlias!.metadata,\n                \"\",\n            )\n\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations)\n        }\n\n        return qb\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    public static applyRelationsRecursively(\n        qb: SelectQueryBuilder<any>,\n        allRelations: string[],\n        alias: string,\n        metadata: EntityMetadata,\n        prefix: string,\n    ): void {\n        // find all relations that match given prefix\n        let matchedBaseRelations: RelationMetadata[] = []\n        if (prefix) {\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\")\n            matchedBaseRelations = allRelations\n                .filter((relation) => relation.match(regexp))\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(\n                        relation.replace(regexp, \"\"),\n                    ),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        } else {\n            matchedBaseRelations = allRelations\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(relation),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        }\n\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach((relation) => {\n            // generate a relation alias\n            const relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyPath,\n            )\n\n            // add a join for the found relation\n            const selection = alias + \".\" + relation.propertyPath\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                qb.concatRelationMetadata(relation)\n            } else {\n                qb.leftJoinAndSelect(selection, relationAlias)\n            }\n\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(\n                allRelations.indexOf(\n                    prefix\n                        ? prefix + \".\" + relation.propertyPath\n                        : relation.propertyPath,\n                ),\n                1,\n            )\n\n            // try to find sub-relations\n            let relationMetadata: EntityMetadata | undefined\n            let relationName: string | undefined\n\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                relationMetadata = relation.inverseEntityMetadata\n                relationName = relationAlias\n            } else {\n                const join = qb.expressionMap.joinAttributes.find(\n                    (join) => join.entityOrProperty === selection,\n                )\n                relationMetadata = join!.metadata!\n                relationName = join!.alias.name\n            }\n\n            if (!relationName || !relationMetadata) {\n                throw new EntityPropertyNotFoundError(\n                    relation.propertyPath,\n                    metadata,\n                )\n            }\n\n            this.applyRelationsRecursively(\n                qb,\n                allRelations,\n                relationName,\n                relationMetadata,\n                prefix\n                    ? prefix + \".\" + relation.propertyPath\n                    : relation.propertyPath,\n            )\n\n            // join the eager relations of the found relation\n            // Only supported for \"join\" relationLoadStrategy\n            if (qb.expressionMap.relationLoadStrategy === \"join\") {\n                const relMetadata = metadata.relations.find(\n                    (metadata) =>\n                        metadata.propertyName === relation.propertyPath,\n                )\n                if (relMetadata) {\n                    this.joinEagerRelations(\n                        qb,\n                        relationAlias,\n                        relMetadata.inverseEntityMetadata,\n                    )\n                }\n            }\n        })\n    }\n\n    public static joinEagerRelations(\n        qb: SelectQueryBuilder<any>,\n        alias: string,\n        metadata: EntityMetadata,\n    ) {\n        metadata.eagerRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyName,\n            )\n\n            // add a join for the relation\n            // Checking whether the relation wasn't joined yet.\n            let addJoin = true\n            // TODO: Review this validation\n            for (const join of qb.expressionMap.joinAttributes) {\n                if (\n                    join.condition !== undefined ||\n                    join.mapToProperty !== undefined ||\n                    join.isMappingMany !== undefined ||\n                    join.direction !== \"LEFT\" ||\n                    join.entityOrProperty !==\n                        `${alias}.${relation.propertyPath}`\n                ) {\n                    continue\n                }\n                addJoin = false\n                relationAlias = join.alias.name\n                break\n            }\n\n            const joinAlreadyAdded = Boolean(\n                qb.expressionMap.joinAttributes.find(\n                    (joinAttribute) =>\n                        joinAttribute.alias.name === relationAlias,\n                ),\n            )\n\n            if (addJoin && !joinAlreadyAdded) {\n                qb.leftJoin(alias + \".\" + relation.propertyPath, relationAlias)\n            }\n\n            // Checking whether the relation wasn't selected yet.\n            // This check shall be after the join check to detect relationAlias.\n            let addSelect = true\n            for (const select of qb.expressionMap.selects) {\n                if (\n                    select.aliasName !== undefined ||\n                    select.virtual !== undefined ||\n                    select.selection !== relationAlias\n                ) {\n                    continue\n                }\n                addSelect = false\n                break\n            }\n\n            if (addSelect) {\n                qb.addSelect(relationAlias)\n            }\n\n            // (recursive) join the eager relations\n            this.joinEagerRelations(\n                qb,\n                relationAlias,\n                relation.inverseEntityMetadata,\n            )\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5679, "column": 0}, "map": {"version":3,"file":"And.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/And.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\nexport function And<T>(...values: FindOperator<T>[]): FindOperator<T> {\n    return new FindOperator(\"and\", values as any, true, true)\n}\n"],"names":[],"mappings":";;;;AAEA,QAAA,GAAA,GAAA,IAEC;AAJD,MAAA,4CAA8C;AAE9C,SAAgB,GAAG,CAAI,GAAG,MAAyB;IAC/C,OAAO,IAAI,eAAA,YAAY,CAAC,KAAK,EAAE,MAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AAC7D,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5693, "column": 0}, "map": {"version":3,"file":"Or.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/Or.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\nexport function Or<T>(...values: FindOperator<T>[]): FindOperator<T> {\n    return new FindOperator(\"or\", values as any, true, true)\n}\n"],"names":[],"mappings":";;;;AAEA,QAAA,EAAA,GAAA,GAEC;AAJD,MAAA,4CAA8C;AAE9C,SAAgB,EAAE,CAAI,GAAG,MAAyB;IAC9C,OAAO,IAAI,eAAA,YAAY,CAAC,IAAI,EAAE,MAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AAC5D,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5707, "column": 0}, "map": {"version":3,"file":"Any.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/Any.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: Any([...]) }\n */\nexport function Any<T>(value: readonly T[] | FindOperator<T>): FindOperator<T> {\n    return new FindOperator(\"any\", value as any)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,GAAA,GAAA,IAEC;AARD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,GAAG,CAAI,KAAqC;IACxD,OAAO,IAAI,eAAA,YAAY,CAAC,KAAK,EAAE,KAAY,CAAC,CAAA;AAChD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5724, "column": 0}, "map": {"version":3,"file":"ArrayContainedBy.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/ArrayContainedBy.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * FindOptions Operator.\n * Example: { someField: ArrayContainedBy([...]) }\n */\nexport function ArrayContainedBy<T>(\n    value: readonly T[] | FindOperator<T>,\n): FindOperator<any> {\n    return new FindOperator(\"arrayContainedBy\", value as any)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,gBAAA,GAAA,iBAIC;AAVD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,gBAAgB,CAC5B,KAAqC;IAErC,OAAO,IAAI,eAAA,YAAY,CAAC,kBAAkB,EAAE,KAAY,CAAC,CAAA;AAC7D,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5741, "column": 0}, "map": {"version":3,"file":"ArrayContains.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/ArrayContains.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * FindOptions Operator.\n * Example: { someField: ArrayContains([...]) }\n */\nexport function ArrayContains<T>(\n    value: readonly T[] | FindOperator<T>,\n): FindOperator<any> {\n    return new FindOperator(\"arrayContains\", value as any)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,aAAA,GAAA,cAIC;AAVD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,aAAa,CACzB,KAAqC;IAErC,OAAO,IAAI,eAAA,YAAY,CAAC,eAAe,EAAE,KAAY,CAAC,CAAA;AAC1D,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5758, "column": 0}, "map": {"version":3,"file":"ArrayOverlap.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/ArrayOverlap.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * FindOptions Operator.\n * Example: { someField: ArrayOverlap([...]) }\n */\nexport function ArrayOverlap<T>(\n    value: readonly T[] | FindOperator<T>,\n): FindOperator<any> {\n    return new FindOperator(\"arrayOverlap\", value as any)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,YAAA,GAAA,aAIC;AAVD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,YAAY,CACxB,KAAqC;IAErC,OAAO,IAAI,eAAA,YAAY,CAAC,cAAc,EAAE,KAAY,CAAC,CAAA;AACzD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5775, "column": 0}, "map": {"version":3,"file":"Between.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/Between.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: Between(x, y) }\n */\nexport function Between<T>(\n    from: T | FindOperator<T>,\n    to: T | FindOperator<T>,\n): FindOperator<T> {\n    return new FindOperator(\"between\", [from, to] as any, true, true)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,OAAA,GAAA,QAKC;AAXD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,OAAO,CACnB,IAAyB,EACzB,EAAuB;IAEvB,OAAO,IAAI,eAAA,YAAY,CAAC,SAAS,EAAE;QAAC,IAAI;QAAE,EAAE;KAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AACrE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5795, "column": 0}, "map": {"version":3,"file":"EqualOperator.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/EqualOperator.ts"],"sourcesContent":["import { FindOperator } from \"./FindOperator\"\n\nexport class EqualOperator<T> extends FindOperator<T> {\n    readonly \"@instanceof\" = Symbol.for(\"EqualOperator\")\n\n    constructor(value: T | FindOperator<T>) {\n        super(\"equal\", value)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAA6C;AAE7C,MAAa,aAAiB,SAAQ,eAAA,YAAe;IAGjD,YAAY,KAA0B,CAAA;QAClC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;QAHhB,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;IAIpD,CAAC;CACJ;AAND,QAAA,aAAA,GAAA,cAMC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5813, "column": 0}, "map": {"version":3,"file":"Equal.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/Equal.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\nimport { EqualOperator } from \"../EqualOperator\"\n\n/**\n * Find Options Operator.\n * This operator is handy to provide object value for non-relational properties of the Entity.\n *\n * Examples:\n *      { someField: Equal(\"value\") }\n *      { uuid: Equal(new UUID()) }\n */\nexport function Equal<T>(value: T | FindOperator<T>) {\n    return new EqualOperator(value)\n}\n"],"names":[],"mappings":";;;;AAWA,QAAA,KAAA,GAAA,MAEC;AAZD,MAAA,8CAAgD;AAEhD;;;;;;;GAOG,CACH,SAAgB,KAAK,CAAI,KAA0B;IAC/C,OAAO,IAAI,gBAAA,aAAa,CAAC,KAAK,CAAC,CAAA;AACnC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5834, "column": 0}, "map": {"version":3,"file":"IsNull.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/IsNull.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: IsNull() }\n */\nexport function IsNull() {\n    return new FindOperator(\"isNull\", undefined as any, false)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,MAAA,GAAA,OAEC;AARD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,MAAM;IAClB,OAAO,IAAI,eAAA,YAAY,CAAC,QAAQ,EAAE,SAAgB,EAAE,KAAK,CAAC,CAAA;AAC9D,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5851, "column": 0}, "map": {"version":3,"file":"LessThan.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/LessThan.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: LessThan(10) }\n */\nexport function LessThan<T>(value: T | FindOperator<T>) {\n    return new FindOperator(\"lessThan\", value)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,QAAA,GAAA,SAEC;AARD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,QAAQ,CAAI,KAA0B;IAClD,OAAO,IAAI,eAAA,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAA;AAC9C,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5868, "column": 0}, "map": {"version":3,"file":"LessThanOrEqual.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/LessThanOrEqual.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: LessThanOrEqual(10) }\n */\nexport function LessThanOrEqual<T>(value: T | FindOperator<T>) {\n    return new FindOperator(\"lessThanOrEqual\", value)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,eAAA,GAAA,gBAEC;AARD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,eAAe,CAAI,KAA0B;IACzD,OAAO,IAAI,eAAA,YAAY,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;AACrD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5885, "column": 0}, "map": {"version":3,"file":"ILike.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/ILike.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: ILike(\"%SOME string%\") }\n */\nexport function ILike<T>(value: T | FindOperator<T>) {\n    return new FindOperator(\"ilike\", value)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,KAAA,GAAA,MAEC;AARD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,KAAK,CAAI,KAA0B;IAC/C,OAAO,IAAI,eAAA,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;AAC3C,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5902, "column": 0}, "map": {"version":3,"file":"Like.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/Like.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: Like(\"%some string%\") }\n */\nexport function Like<T>(value: T | FindOperator<T>) {\n    return new FindOperator(\"like\", value)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,IAAA,GAAA,KAEC;AARD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,IAAI,CAAI,KAA0B;IAC9C,OAAO,IAAI,eAAA,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;AAC1C,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5919, "column": 0}, "map": {"version":3,"file":"MoreThan.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/MoreThan.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: MoreThan(10) }\n */\nexport function MoreThan<T>(value: T | FindOperator<T>) {\n    return new FindOperator(\"moreThan\", value)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,QAAA,GAAA,SAEC;AARD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,QAAQ,CAAI,KAA0B;IAClD,OAAO,IAAI,eAAA,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAA;AAC9C,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5936, "column": 0}, "map": {"version":3,"file":"MoreThanOrEqual.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/MoreThanOrEqual.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Example: { someField: MoreThanOrEqual(10) }\n */\nexport function MoreThanOrEqual<T>(value: T | FindOperator<T>) {\n    return new FindOperator(\"moreThanOrEqual\", value)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,eAAA,GAAA,gBAEC;AARD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,eAAe,CAAI,KAA0B;IACzD,OAAO,IAAI,eAAA,YAAY,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;AACrD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5953, "column": 0}, "map": {"version":3,"file":"Not.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/Not.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * Find Options Operator.\n * Used to negate expression.\n * Example: { title: not(\"hello\") } will return entities where title not equal to \"hello\".\n */\nexport function Not<T>(value: T | FindOperator<T>) {\n    return new FindOperator(\"not\", value)\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,GAAA,GAAA,IAEC;AATD,MAAA,4CAA8C;AAE9C;;;;GAIG,CACH,SAAgB,GAAG,CAAI,KAA0B;IAC7C,OAAO,IAAI,eAAA,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;AACzC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5971, "column": 0}, "map": {"version":3,"file":"Raw.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/Raw.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw(\"12\") }\n */\nexport function Raw<T>(value: string): FindOperator<any>\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = 5`) }\n */\nexport function Raw<T>(\n    sqlGenerator: (columnAlias: string) => string,\n): FindOperator<any>\n\n/**\n * Find Options Operator.\n * For escaping parameters use next syntax:\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = :value`, { value: 5 }) }\n */\nexport function Raw<T>(\n    sqlGenerator: (columnAlias: string) => string,\n    parameters: ObjectLiteral,\n): FindOperator<any>\n\nexport function Raw<T>(\n    valueOrSqlGenerator: string | ((columnAlias: string) => string),\n    sqlGeneratorParameters?: ObjectLiteral,\n): FindOperator<any> {\n    if (typeof valueOrSqlGenerator !== \"function\") {\n        return new FindOperator(\"raw\", valueOrSqlGenerator, false)\n    }\n\n    return new FindOperator(\n        \"raw\",\n        [],\n        true,\n        true,\n        valueOrSqlGenerator,\n        sqlGeneratorParameters,\n    )\n}\n"],"names":[],"mappings":";;;;AA2BA,QAAA,GAAA,GAAA,IAgBC;AA3CD,MAAA,4CAA8C;AA2B9C,SAAgB,GAAG,CACf,mBAA+D,EAC/D,sBAAsC;IAEtC,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE,CAAC;QAC5C,OAAO,IAAI,eAAA,YAAY,CAAC,KAAK,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAA;IAC9D,CAAC;IAED,OAAO,IAAI,eAAA,YAAY,CACnB,KAAK,EACL,EAAE,EACF,IAAI,EACJ,IAAI,EACJ,mBAAmB,EACnB,sBAAsB,CACzB,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5988, "column": 0}, "map": {"version":3,"file":"JsonContains.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/find-options/operator/JsonContains.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\n\n/**\n * FindOptions Operator.\n * Example: { someField: JsonContains({...}) }\n */\nexport function JsonContains<\n    T extends Record<string | number | symbol, unknown>,\n>(value: T | FindOperator<T>): FindOperator<any> {\n    return new FindOperator(\"jsonContains\", value as any)\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,YAAA,GAAA,aAIC;AAVD,MAAA,4CAA8C;AAE9C;;;GAGG,CACH,SAAgB,YAAY,CAE1B,KAA0B;IACxB,OAAO,IAAI,eAAA,YAAY,CAAC,cAAc,EAAE,KAAY,CAAC,CAAA;AACzD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6005, "column": 0}, "map": {"version":3,"file":"FindManyOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindManyOptions.ts"],"sourcesContent":["import { FindOneOptions } from \"./FindOneOptions\"\n\n/**\n * Defines a special criteria to find specific entities.\n */\nexport interface FindManyOptions<Entity = any> extends FindOneOptions<Entity> {\n    /**\n     * Offset (paginated) where from entities should be taken.\n     */\n    skip?: number\n\n    /**\n     * Limit (paginated) - max number of entities should be taken.\n     */\n    take?: number\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6014, "column": 0}, "map": {"version":3,"file":"FindOneOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindOneOptions.ts"],"sourcesContent":["import { JoinOptions } from \"./JoinOptions\"\nimport { FindOptionsWhere } from \"./FindOptionsWhere\"\nimport {\n    FindOptionsSelect,\n    FindOptionsSelectByString,\n} from \"./FindOptionsSelect\"\nimport {\n    FindOptionsRelationByString,\n    FindOptionsRelations,\n} from \"./FindOptionsRelations\"\nimport { FindOptionsOrder } from \"./FindOptionsOrder\"\n\n/**\n * Defines a special criteria to find specific entity.\n */\nexport interface FindOneOptions<Entity = any> {\n    /**\n     * Adds a comment with the supplied string in the generated query.  This is\n     * helpful for debugging purposes, such as finding a specific query in the\n     * database server's logs, or for categorization using an APM product.\n     */\n    comment?: string\n\n    /**\n     * Specifies what columns should be retrieved.\n     */\n    select?: FindOptionsSelect<Entity> | FindOptionsSelectByString<Entity>\n\n    /**\n     * Simple condition that should be applied to match entities.\n     */\n    where?: FindOptionsWhere<Entity>[] | FindOptionsWhere<Entity>\n\n    /**\n     * Indicates what relations of entity should be loaded (simplified left join form).\n     */\n    relations?: FindOptionsRelations<Entity> | FindOptionsRelationByString\n\n    /**\n     * Specifies how relations must be loaded - using \"joins\" or separate queries.\n     * If you are loading too much data with nested joins it's better to load relations\n     * using separate queries.\n     *\n     * Default strategy is \"join\", but default can be customized in connection options.\n     */\n    relationLoadStrategy?: \"join\" | \"query\"\n\n    /**\n     * Specifies what relations should be loaded.\n     *\n     * @deprecated\n     */\n    join?: JoinOptions\n\n    /**\n     * Order, in which entities should be ordered.\n     */\n    order?: FindOptionsOrder<Entity>\n\n    /**\n     * Enables or disables query result caching.\n     */\n    cache?: boolean | number | { id: any; milliseconds: number }\n\n    /**\n     * Indicates what locking mode should be used.\n     *\n     * Note: For lock tables, you must specify the table names and not the relation names\n     */\n    lock?:\n        | { mode: \"optimistic\"; version: number | Date }\n        | {\n              mode:\n                  | \"pessimistic_read\"\n                  | \"pessimistic_write\"\n                  | \"dirty_read\"\n                  /*\n                    \"pessimistic_partial_write\" and \"pessimistic_write_or_fail\" are deprecated and\n                    will be removed in a future version.\n\n                    Use onLocked instead.\n                 */\n                  | \"pessimistic_partial_write\"\n                  | \"pessimistic_write_or_fail\"\n                  | \"for_no_key_update\"\n                  | \"for_key_share\"\n              tables?: string[]\n              onLocked?: \"nowait\" | \"skip_locked\"\n          }\n\n    /**\n     * Indicates if soft-deleted rows should be included in entity result.\n     */\n    withDeleted?: boolean\n\n    /**\n     * If sets to true then loads all relation ids of the entity and maps them into relation values (not relation objects).\n     * If array of strings is given then loads only relation ids of the given properties.\n     */\n    loadRelationIds?:\n        | boolean\n        | { relations?: string[]; disableMixedMap?: boolean } // todo: extract options into separate interface, reuse\n\n    /**\n     * Indicates if eager relations should be loaded or not.\n     * By default, they are loaded when find methods are used.\n     */\n    loadEagerRelations?: boolean\n\n    /**\n     * If this is set to true, SELECT query in a `find` method will be executed in a transaction.\n     */\n    transaction?: boolean\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6023, "column": 0}, "map": {"version":3,"file":"FindOperatorType.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindOperatorType.ts"],"sourcesContent":["/**\n * List of types that FindOperator can be.\n */\nexport type FindOperatorType =\n    | \"not\"\n    | \"lessThan\"\n    | \"lessThanOrEqual\"\n    | \"moreThan\"\n    | \"moreThanOrEqual\"\n    | \"equal\"\n    | \"between\"\n    | \"in\"\n    | \"any\"\n    | \"isNull\"\n    | \"ilike\"\n    | \"like\"\n    | \"raw\"\n    | \"arrayContains\"\n    | \"arrayContainedBy\"\n    | \"arrayOverlap\"\n    | \"and\"\n    | \"jsonContains\"\n    | \"or\"\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6032, "column": 0}, "map": {"version":3,"file":"FindOptionsOrder.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindOptionsOrder.ts"],"sourcesContent":["import { ObjectId } from \"../driver/mongodb/typings\"\n\n/**\n * A single property handler for FindOptionsOrder.\n */\nexport type FindOptionsOrderProperty<Property> = Property extends Promise<\n    infer I\n>\n    ? FindOptionsOrderProperty<NonNullable<I>>\n    : Property extends Array<infer I>\n    ? FindOptionsOrderProperty<NonNullable<I>>\n    : Property extends Function\n    ? never\n    : Property extends string\n    ? FindOptionsOrderValue\n    : Property extends number\n    ? FindOptionsOrderValue\n    : Property extends boolean\n    ? FindOptionsOrderValue\n    : Property extends Buffer\n    ? FindOptionsOrderValue\n    : Property extends Date\n    ? FindOptionsOrderValue\n    : Property extends ObjectId\n    ? FindOptionsOrderValue\n    : Property extends object\n    ? FindOptionsOrder<Property> | FindOptionsOrderValue\n    : FindOptionsOrderValue\n\n/**\n * Order by find options.\n */\nexport type FindOptionsOrder<Entity> = {\n    [P in keyof Entity]?: P extends \"toString\"\n        ? unknown\n        : FindOptionsOrderProperty<NonNullable<Entity[P]>>\n}\n\n/**\n * Value of order by in find options.\n */\nexport type FindOptionsOrderValue =\n    | \"ASC\"\n    | \"DESC\"\n    | \"asc\"\n    | \"desc\"\n    | 1\n    | -1\n    | {\n          direction?: \"asc\" | \"desc\" | \"ASC\" | \"DESC\"\n          nulls?: \"first\" | \"last\" | \"FIRST\" | \"LAST\"\n      }\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6041, "column": 0}, "map": {"version":3,"file":"FindOptionsRelations.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindOptionsRelations.ts"],"sourcesContent":["import { ObjectId } from \"../driver/mongodb/typings\"\n\n/**\n * A single property handler for FindOptionsRelations.\n */\nexport type FindOptionsRelationsProperty<Property> = Property extends Promise<\n    infer I\n>\n    ? FindOptionsRelationsProperty<NonNullable<I>> | boolean\n    : Property extends Array<infer I>\n    ? FindOptionsRelationsProperty<NonNullable<I>> | boolean\n    : Property extends string\n    ? never\n    : Property extends number\n    ? never\n    : Property extends boolean\n    ? never\n    : Property extends Function\n    ? never\n    : Property extends Buffer\n    ? never\n    : Property extends Date\n    ? never\n    : Property extends ObjectId\n    ? never\n    : Property extends object\n    ? FindOptionsRelations<Property> | boolean\n    : boolean\n\n/**\n * Relations find options.\n */\nexport type FindOptionsRelations<Entity> = {\n    [P in keyof Entity]?: P extends \"toString\"\n        ? unknown\n        : FindOptionsRelationsProperty<NonNullable<Entity[P]>>\n}\n\n/**\n * Relation names to be selected by \"relation\" defined as string.\n * Old relation mechanism in TypeORM.\n *\n * @deprecated will be removed in the next version, use FindOptionsRelation type notation instead\n */\nexport type FindOptionsRelationByString = string[]\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6050, "column": 0}, "map": {"version":3,"file":"FindOptionsSelect.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindOptionsSelect.ts"],"sourcesContent":["import { ObjectId } from \"../driver/mongodb/typings\"\n\n/**\n * A single property handler for FindOptionsSelect.\n */\nexport type FindOptionsSelectProperty<Property> = Property extends Promise<\n    infer I\n>\n    ? FindOptionsSelectProperty<I> | boolean\n    : Property extends Array<infer I>\n    ? FindOptionsSelectProperty<I> | boolean\n    : Property extends string\n    ? boolean\n    : Property extends number\n    ? boolean\n    : Property extends boolean\n    ? boolean\n    : Property extends Function\n    ? never\n    : Property extends Buffer\n    ? boolean\n    : Property extends Date\n    ? boolean\n    : Property extends ObjectId\n    ? boolean\n    : Property extends object\n    ? FindOptionsSelect<Property> | boolean\n    : boolean\n\n/**\n * Select find options.\n */\nexport type FindOptionsSelect<Entity> = {\n    [P in keyof Entity]?: P extends \"toString\"\n        ? unknown\n        : FindOptionsSelectProperty<NonNullable<Entity[P]>>\n}\n\n/**\n * Property paths (column names) to be selected by \"find\" defined as string.\n * Old selection mechanism in TypeORM.\n *\n * @deprecated will be removed in the next version, use FindOptionsSelect type notation instead\n */\nexport type FindOptionsSelectByString<Entity> = (keyof Entity)[]\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6059, "column": 0}, "map": {"version":3,"file":"FindOptionsWhere.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindOptionsWhere.ts"],"sourcesContent":["import { FindOperator } from \"./FindOperator\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { EqualOperator } from \"./EqualOperator\"\n\n/**\n * A single property handler for FindOptionsWhere.\n *\n * The reason why we have both \"PropertyToBeNarrowed\" and \"Property\" is that Union is narrowed down when extends is used.\n * It means the result of FindOptionsWhereProperty<1 | 2> doesn't include FindOperator<1 | 2> but FindOperator<1> | FindOperator<2>.\n * So we keep the original Union as Original and pass it to the FindOperator too. Original remains Union as extends is not used for it.\n */\nexport type FindOptionsWhereProperty<\n    PropertyToBeNarrowed,\n    Property = PropertyToBeNarrowed,\n> = PropertyToBeNarrowed extends Promise<infer I>\n    ? FindOptionsWhereProperty<NonNullable<I>>\n    : PropertyToBeNarrowed extends Array<infer I>\n    ? FindOptionsWhereProperty<NonNullable<I>>\n    : PropertyToBeNarrowed extends Function\n    ? never\n    : PropertyToBeNarrowed extends Buffer\n    ? Property | FindOperator<Property>\n    : PropertyToBeNarrowed extends Date\n    ? Property | FindOperator<Property>\n    : PropertyToBeNarrowed extends ObjectId\n    ? Property | FindOperator<Property>\n    : PropertyToBeNarrowed extends string\n    ? Property | FindOperator<Property>\n    : PropertyToBeNarrowed extends number\n    ? Property | FindOperator<Property>\n    : PropertyToBeNarrowed extends boolean\n    ? Property | FindOperator<Property>\n    : PropertyToBeNarrowed extends object\n    ?\n          | FindOptionsWhere<Property>\n          | FindOptionsWhere<Property>[]\n          | EqualOperator<Property>\n          | FindOperator<any>\n          | boolean\n          | Property\n    : Property | FindOperator<Property>\n\n/**\n * Used for find operations.\n */\nexport type FindOptionsWhere<Entity> = {\n    [P in keyof Entity]?: P extends \"toString\"\n        ? unknown\n        : FindOptionsWhereProperty<NonNullable<Entity[P]>>\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6068, "column": 0}, "map": {"version":3,"file":"FindTreeOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/FindTreeOptions.ts"],"sourcesContent":["/**\n * Defines a special criteria to find specific entities.\n */\nexport interface FindTreeOptions {\n    /**\n     * Indicates what relations of entity should be loaded (simplified left join form).\n     */\n    relations?: string[]\n\n    /**\n     * When loading a tree from a TreeRepository, limits the depth of the descendents loaded\n     */\n    depth?: number\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6077, "column": 0}, "map": {"version":3,"file":"JoinOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/JoinOptions.ts"],"sourcesContent":["/**\n * Used to specify what entity relations should be loaded.\n *\n * Example:\n *  const options: JoinOptions = {\n *     alias: \"photo\",\n *     leftJoin: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     innerJoin: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     leftJoinAndSelect: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     },\n *     innerJoinAndSelect: {\n *         author: \"photo.author\",\n *         categories: \"categories\",\n *         user: \"categories.user\",\n *         profile: \"user.profile\"\n *     }\n * };\n *\n * @deprecated\n */\nexport interface JoinOptions {\n    /**\n     * Alias of the main entity.\n     */\n    alias: string\n\n    /**\n     * Object where each key represents the LEFT JOIN alias,\n     * and the corresponding value represents the relation path.\n     *\n     * The columns of the joined table are included in the selection.\n     */\n    leftJoinAndSelect?: { [key: string]: string }\n\n    /**\n     * Object where each key represents the INNER JOIN alias,\n     * and the corresponding value represents the relation path.\n     *\n     * The columns of the joined table are included in the selection.\n     */\n    innerJoinAndSelect?: { [key: string]: string }\n\n    /**\n     * Object where each key represents the LEFT JOIN alias,\n     * and the corresponding value represents the relation path.\n     *\n     * This method does not select the columns of the joined table.\n     */\n    leftJoin?: { [key: string]: string }\n\n    /**\n     * Object where each key represents the INNER JOIN alias,\n     * and the corresponding value represents the relation path.\n     *\n     * This method does not select the columns of the joined table.\n     */\n    innerJoin?: { [key: string]: string }\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6086, "column": 0}, "map": {"version":3,"file":"OrderByCondition.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/find-options/OrderByCondition.ts"],"sourcesContent":["/**\n * Special object that defines order condition for ORDER BY in sql.\n *\n * Example:\n * {\n *  \"name\": \"ASC\",\n *  \"id\": \"DESC\"\n * }\n *\n * @deprecated\n */\nexport type OrderByCondition = {\n    [columnName: string]:\n        | (\"ASC\" | \"DESC\")\n        | {\n              order: \"ASC\" | \"DESC\"\n              nulls?: \"NULLS FIRST\" | \"NULLS LAST\"\n          }\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6095, "column": 0}, "map": {"version":3,"file":"BroadcasterResult.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/subscriber/BroadcasterResult.ts"],"sourcesContent":["/**\n * Broadcaster execution result - promises executed by operations and number of executed listeners and subscribers.\n */\nexport class BroadcasterResult {\n    /**\n     * Number of executed listeners and subscribers.\n     */\n    count: number = 0\n\n    /**\n     * Promises returned by listeners and subscribers which needs to be awaited.\n     */\n    promises: Promise<any>[] = []\n\n    /**\n     * Wait for all promises to settle\n     */\n    async wait(): Promise<BroadcasterResult> {\n        if (this.promises.length > 0) {\n            await Promise.all(this.promises)\n        }\n\n        return this\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA;;GAEG,CACH,MAAa,iBAAiB;IAA9B,aAAA;QACI;;WAEG,CACH,IAAA,CAAA,KAAK,GAAW,CAAC,CAAA;QAEjB;;WAEG,CACH,IAAA,CAAA,QAAQ,GAAmB,EAAE,CAAA;IAYjC,CAAC;IAVG;;OAEG,CACH,KAAK,CAAC,IAAI,GAAA;QACN,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3B,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACpC,CAAC;QAED,OAAO,IAAI,CAAA;IACf,CAAC;CACJ;AArBD,QAAA,iBAAA,GAAA,kBAqBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6126, "column": 0}, "map": {"version":3,"file":"Broadcaster.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/subscriber/Broadcaster.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { BroadcasterResult } from \"./BroadcasterResult\"\nimport { EntitySubscriberInterface } from \"./EntitySubscriberInterface\"\n\ninterface BroadcasterEvents {\n    BeforeQuery: (query: string, parameters: any[] | undefined) => void\n    AfterQuery: (\n        query: string,\n        parameters: any[] | undefined,\n        success: boolean,\n        executionTime: number | undefined,\n        rawResults: any | undefined,\n        error: any | undefined,\n    ) => void\n\n    BeforeTransactionCommit: () => void\n    AfterTransactionCommit: () => void\n    BeforeTransactionStart: () => void\n    AfterTransactionStart: () => void\n    BeforeTransactionRollback: () => void\n    AfterTransactionRollback: () => void\n\n    BeforeUpdate: (\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        updatedColumns?: ColumnMetadata[],\n        updatedRelations?: RelationMetadata[],\n    ) => void\n    AfterUpdate: (\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        updatedColumns?: ColumnMetadata[],\n        updatedRelations?: RelationMetadata[],\n    ) => void\n\n    BeforeInsert: (\n        metadata: EntityMetadata,\n        entity: ObjectLiteral | undefined,\n    ) => void\n    AfterInsert: (\n        metadata: EntityMetadata,\n        entity: ObjectLiteral | undefined,\n    ) => void\n\n    BeforeRemove: (\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n    ) => void\n    AfterRemove: (\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n    ) => void\n\n    BeforeSoftRemove: (\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n    ) => void\n    AfterSoftRemove: (\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n    ) => void\n\n    BeforeRecover: (\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n    ) => void\n    AfterRecover: (\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n    ) => void\n\n    Load: (metadata: EntityMetadata, entities: ObjectLiteral[]) => void\n}\n\n/**\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\n */\nexport class Broadcaster {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private queryRunner: QueryRunner) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async broadcast<U extends keyof BroadcasterEvents>(\n        event: U,\n        ...args: Parameters<BroadcasterEvents[U]>\n    ): Promise<void> {\n        const result = new BroadcasterResult()\n\n        const broadcastFunction = this[`broadcast${event}Event` as keyof this]\n\n        if (typeof broadcastFunction === \"function\") {\n            ;(broadcastFunction as any).call(this, result, ...args)\n        }\n\n        await result.wait()\n    }\n\n    /**\n     * Broadcasts \"BEFORE_INSERT\" event.\n     * Before insert event is executed before entity is being inserted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeInsertEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity: undefined | ObjectLiteral,\n    ): void {\n        if (entity && metadata.beforeInsertListeners.length) {\n            metadata.beforeInsertListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeInsert\n                ) {\n                    const executionResult = subscriber.beforeInsert({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_UPDATE\" event.\n     * Before update event is executed before entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeUpdateEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        updatedColumns?: ColumnMetadata[],\n        updatedRelations?: RelationMetadata[],\n    ): void {\n        // todo: send relations too?\n        if (entity && metadata.beforeUpdateListeners.length) {\n            metadata.beforeUpdateListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeUpdate\n                ) {\n                    const executionResult = subscriber.beforeUpdate({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || [],\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_REMOVE\" event.\n     * Before remove event is executed before entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeRemoveEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        identifier?: ObjectLiteral,\n    ): void {\n        if (entity && metadata.beforeRemoveListeners.length) {\n            metadata.beforeRemoveListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeRemove\n                ) {\n                    const executionResult = subscriber.beforeRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(\n                            databaseEntity ?? identifier,\n                        ),\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_SOFT_REMOVE\" event.\n     * Before soft remove event is executed before entity is being soft removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeSoftRemoveEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        identifier?: ObjectLiteral,\n    ): void {\n        if (entity && metadata.beforeSoftRemoveListeners.length) {\n            metadata.beforeSoftRemoveListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeSoftRemove\n                ) {\n                    const executionResult = subscriber.beforeSoftRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(\n                            databaseEntity ?? identifier,\n                        ),\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_RECOVER\" event.\n     * Before recover event is executed before entity is being recovered in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastBeforeRecoverEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        identifier?: ObjectLiteral,\n    ): void {\n        if (entity && metadata.beforeRecoverListeners.length) {\n            metadata.beforeRecoverListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.beforeRecover\n                ) {\n                    const executionResult = subscriber.beforeRecover({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(\n                            databaseEntity ?? identifier,\n                        ),\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_INSERT\" event.\n     * After insert event is executed after entity is being persisted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterInsertEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        identifier?: ObjectLiteral,\n    ): void {\n        if (entity && metadata.afterInsertListeners.length) {\n            metadata.afterInsertListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterInsert\n                ) {\n                    const executionResult = subscriber.afterInsert({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        entityId: metadata.getEntityIdMixedMap(identifier),\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_QUERY\" event.\n     */\n    broadcastBeforeQueryEvent(\n        result: BroadcasterResult,\n        query: string,\n        parameters: undefined | any[],\n    ): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.beforeQuery) {\n                    const executionResult = subscriber.beforeQuery({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        query: query,\n                        parameters: parameters,\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_QUERY\" event.\n     */\n    broadcastAfterQueryEvent(\n        result: BroadcasterResult,\n        query: string,\n        parameters: undefined | any[],\n        success: boolean,\n        executionTime: undefined | number,\n        rawResults: undefined | any,\n        error: undefined | any,\n    ): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.afterQuery) {\n                    const executionResult = subscriber.afterQuery({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        query: query,\n                        parameters: parameters,\n                        success: success,\n                        executionTime: executionTime,\n                        rawResults: rawResults,\n                        error: error,\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_START\" event.\n     */\n    broadcastBeforeTransactionStartEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.beforeTransactionStart) {\n                    const executionResult = subscriber.beforeTransactionStart({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_START\" event.\n     */\n    broadcastAfterTransactionStartEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.afterTransactionStart) {\n                    const executionResult = subscriber.afterTransactionStart({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_COMMIT\" event.\n     */\n    broadcastBeforeTransactionCommitEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.beforeTransactionCommit) {\n                    const executionResult = subscriber.beforeTransactionCommit({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_COMMIT\" event.\n     */\n    broadcastAfterTransactionCommitEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.afterTransactionCommit) {\n                    const executionResult = subscriber.afterTransactionCommit({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"BEFORE_TRANSACTION_ROLLBACK\" event.\n     */\n    broadcastBeforeTransactionRollbackEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.beforeTransactionRollback) {\n                    const executionResult =\n                        subscriber.beforeTransactionRollback({\n                            connection: this.queryRunner.connection,\n                            queryRunner: this.queryRunner,\n                            manager: this.queryRunner.manager,\n                        })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_TRANSACTION_ROLLBACK\" event.\n     */\n    broadcastAfterTransactionRollbackEvent(result: BroadcasterResult): void {\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (subscriber.afterTransactionRollback) {\n                    const executionResult = subscriber.afterTransactionRollback(\n                        {\n                            connection: this.queryRunner.connection,\n                            queryRunner: this.queryRunner,\n                            manager: this.queryRunner.manager,\n                        },\n                    )\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_UPDATE\" event.\n     * After update event is executed after entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterUpdateEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        updatedColumns?: ColumnMetadata[],\n        updatedRelations?: RelationMetadata[],\n    ): void {\n        if (entity && metadata.afterUpdateListeners.length) {\n            metadata.afterUpdateListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterUpdate\n                ) {\n                    const executionResult = subscriber.afterUpdate({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || [],\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_REMOVE\" event.\n     * After remove event is executed after entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterRemoveEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        identifier?: ObjectLiteral,\n    ): void {\n        if (entity && metadata.afterRemoveListeners.length) {\n            metadata.afterRemoveListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterRemove\n                ) {\n                    const executionResult = subscriber.afterRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(\n                            databaseEntity ?? identifier,\n                        ),\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_SOFT_REMOVE\" event.\n     * After soft remove event is executed after entity is being soft removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterSoftRemoveEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        identifier?: ObjectLiteral,\n    ): void {\n        if (entity && metadata.afterSoftRemoveListeners.length) {\n            metadata.afterSoftRemoveListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterSoftRemove\n                ) {\n                    const executionResult = subscriber.afterSoftRemove({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(\n                            databaseEntity ?? identifier,\n                        ),\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * Broadcasts \"AFTER_RECOVER\" event.\n     * After recover event is executed after entity is being recovered in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastAfterRecoverEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entity?: ObjectLiteral,\n        databaseEntity?: ObjectLiteral,\n        identifier?: ObjectLiteral,\n    ): void {\n        if (entity && metadata.afterRecoverListeners.length) {\n            metadata.afterRecoverListeners.forEach((listener) => {\n                if (listener.isAllowed(entity)) {\n                    const executionResult = listener.execute(entity)\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach((subscriber) => {\n                if (\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterRecover\n                ) {\n                    const executionResult = subscriber.afterRecover({\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(\n                            databaseEntity ?? identifier,\n                        ),\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                }\n            })\n        }\n    }\n\n    /**\n     * @deprecated Use `broadcastLoadForAllEvent`\n     */\n    broadcastLoadEventsForAll(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entities: ObjectLiteral[],\n    ): void {\n        return this.broadcastLoadEvent(result, metadata, entities)\n    }\n\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    broadcastLoadEvent(\n        result: BroadcasterResult,\n        metadata: EntityMetadata,\n        entities: ObjectLiteral[],\n    ): void {\n        // Calculate which subscribers are fitting for the given entity type\n        const fittingSubscribers =\n            this.queryRunner.connection.subscribers.filter(\n                (subscriber) =>\n                    this.isAllowedSubscriber(subscriber, metadata.target) &&\n                    subscriber.afterLoad,\n            )\n\n        if (\n            metadata.relations.length ||\n            metadata.afterLoadListeners.length ||\n            fittingSubscribers.length\n        ) {\n            // todo: check why need this?\n            const nonPromiseEntities = entities.filter(\n                (entity) => !(entity instanceof Promise),\n            )\n\n            // collect load events for all children entities that were loaded with the main entity\n            if (metadata.relations.length) {\n                metadata.relations.forEach((relation) => {\n                    nonPromiseEntities.forEach((entity) => {\n                        // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query\n                        if (\n                            relation.isLazy &&\n                            !entity.hasOwnProperty(relation.propertyName)\n                        )\n                            return\n\n                        const value = relation.getEntityValue(entity)\n                        if (ObjectUtils.isObject(value))\n                            this.broadcastLoadEvent(\n                                result,\n                                relation.inverseEntityMetadata,\n                                Array.isArray(value) ? value : [value],\n                            )\n                    })\n                })\n            }\n\n            if (metadata.afterLoadListeners.length) {\n                metadata.afterLoadListeners.forEach((listener) => {\n                    nonPromiseEntities.forEach((entity) => {\n                        if (listener.isAllowed(entity)) {\n                            const executionResult = listener.execute(entity)\n                            if (executionResult instanceof Promise)\n                                result.promises.push(executionResult)\n                            result.count++\n                        }\n                    })\n                })\n            }\n\n            fittingSubscribers.forEach((subscriber) => {\n                nonPromiseEntities.forEach((entity) => {\n                    const executionResult = subscriber.afterLoad!(entity, {\n                        entity,\n                        metadata,\n                        connection: this.queryRunner.connection,\n                        queryRunner: this.queryRunner,\n                        manager: this.queryRunner.manager,\n                    })\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult)\n                    result.count++\n                })\n            })\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\n     * or listens our entity.\n     */\n    protected isAllowedSubscriber(\n        subscriber: EntitySubscriberInterface<any>,\n        target: Function | string,\n    ): boolean {\n        return (\n            !subscriber.listenTo ||\n            !subscriber.listenTo() ||\n            subscriber.listenTo() === Object ||\n            subscriber.listenTo() === target ||\n            subscriber.listenTo().isPrototypeOf(target)\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6721, "column": 0}, "map": {"version":3,"file":"QueryEvent.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/subscriber/event/QueryEvent.ts"],"sourcesContent":["import { EntityManager } from \"../../entity-manager/EntityManager\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\n\n/**\n * BeforeQueryEvent is an object that broadcaster sends to the entity subscriber before query is ran against the database.\n */\nexport interface QueryEvent<Entity> {\n    /**\n     * Connection used in the event.\n     */\n    connection: DataSource\n\n    /**\n     * QueryRunner used in the event transaction.\n     * All database operations in the subscribed event listener should be performed using this query runner instance.\n     */\n    queryRunner: QueryRunner\n\n    /**\n     * EntityManager used in the event transaction.\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\n     */\n    manager: EntityManager\n\n    /**\n     * Query that is being executed.\n     */\n    query: string\n\n    /**\n     * Parameters used in the query.\n     */\n    parameters?: any[]\n}\n\nexport interface BeforeQueryEvent<Entity> extends QueryEvent<Entity> {}\n\nexport interface AfterQueryEvent<Entity> extends QueryEvent<Entity> {\n    /**\n     * Whether the query was successful.\n     */\n    success: boolean\n\n    /**\n     * The duration of the query execution, in milliseconds.\n     */\n    executionTime?: number\n\n    /**\n     * The raw results from the database if the query was successful.\n     */\n    rawResults?: any\n\n    /**\n     * The error thrown if the query was unsuccessful.\n     */\n    error?: any\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6730, "column": 0}, "map": {"version":3,"file":"DefaultNamingStrategy.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/naming-strategy/DefaultNamingStrategy.ts"],"sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\nimport { RandomGenerator } from \"../util/RandomGenerator\"\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\"\nimport { Table } from \"../schema-builder/table/Table\"\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n    protected getTableName(tableOrName: Table | string): string {\n        if (typeof tableOrName !== \"string\") {\n            tableOrName = tableOrName.name\n        }\n\n        return tableOrName.split(\".\").pop()!\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(\n        targetName: string,\n        userSpecifiedName: string | undefined,\n    ): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName)\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\"\n    }\n\n    columnName(\n        propertyName: string,\n        customName: string,\n        embeddedPrefixes: string[],\n    ): string {\n        const name = customName || propertyName\n\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name)\n\n        return name\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName\n    }\n\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${columnName}`\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        _referencedTablePath?: string,\n        _referencedColumnNames?: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    indexName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26)\n        return isEnum ? `${name}_ENUM` : name\n    }\n\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName)\n    }\n\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string {\n        return snakeCase(\n            firstTableName +\n                \"_\" +\n                firstPropertyName.replace(/\\./gi, \"_\") +\n                \"_\" +\n                secondTableName,\n        )\n    }\n\n    joinTableColumnDuplicationPrefix(\n        columnName: string,\n        index: number,\n    ): string {\n        return columnName + \"_\" + index\n    }\n\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return camelCase(\n            tableName + \"_\" + (columnName ? columnName : propertyName),\n        )\n    }\n\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName)\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName\n    }\n\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" }\n    materializedPathColumnName = \"mpath\"\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6882, "column": 0}, "map": {"version":3,"file":"LegacyOracleNamingStrategy.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/naming-strategy/LegacyOracleNamingStrategy.ts"],"sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\nimport { RandomGenerator } from \"../util/RandomGenerator\"\nimport { DefaultNamingStrategy } from \"./DefaultNamingStrategy\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Shorten strategy\n */\nexport type ShortenStrategy = \"truncate\" | \"hash\"\n\n/**\n * Naming strategy for legacy Oracle database with 30 bytes identifier limit.\n *\n * Currently, only column name must be shorten in order to avoid ORA-00972.\n * Issues with other identifiers were fixed.\n */\nexport class LegacyOracleNamingStrategy\n    extends DefaultNamingStrategy\n    implements NamingStrategyInterface\n{\n    public readonly IDENTIFIER_MAX_SIZE = 30\n    public readonly DEFAULT_COLUMN_PREFIX = \"COL_\"\n    protected shortenStrategy: ShortenStrategy\n\n    constructor(shortenStrategy: ShortenStrategy = \"hash\") {\n        super()\n        this.shortenStrategy = shortenStrategy\n    }\n\n    columnName(\n        propertyName: string,\n        customName: string,\n        embeddedPrefixes: string[],\n    ): string {\n        const longName: string = super.columnName(\n            propertyName,\n            customName,\n            embeddedPrefixes,\n        )\n        if (this.shortenStrategy === \"truncate\") {\n            return this.truncateIdentifier(longName)\n        } else if (this.shortenStrategy === \"hash\") {\n            return this.hashIdentifier(longName, this.DEFAULT_COLUMN_PREFIX)\n        } else {\n            throw new TypeORMError(`Invalid shortenStrategy`)\n        }\n    }\n\n    protected hashIdentifier(input: string, prefix: string): string {\n        if (prefix.length >= this.IDENTIFIER_MAX_SIZE) {\n            throw new TypeORMError(\n                `Prefix must be shorter than IDENTIFIER_MAX_SIZE`,\n            )\n        }\n        return (\n            prefix +\n            RandomGenerator.sha1(input).substring(\n                0,\n                this.IDENTIFIER_MAX_SIZE - prefix.length,\n            )\n        )\n    }\n\n    protected truncateIdentifier(input: string): string {\n        if (input.length > this.IDENTIFIER_MAX_SIZE) {\n            return input.substring(0, this.IDENTIFIER_MAX_SIZE)\n        } else {\n            return input\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,uDAAyD;AACzD,MAAA,6DAA+D;AAC/D,MAAA,8BAAuC;AAOvC;;;;;GAKG,CACH,MAAa,0BACT,SAAQ,wBAAA,qBAAqB;IAO7B,YAAY,kBAAmC,MAAM,CAAA;QACjD,KAAK,EAAE,CAAA;QALK,IAAA,CAAA,mBAAmB,GAAG,EAAE,CAAA;QACxB,IAAA,CAAA,qBAAqB,GAAG,MAAM,CAAA;QAK1C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAA;IAC1C,CAAC;IAED,UAAU,CACN,YAAoB,EACpB,UAAkB,EAClB,gBAA0B,EAAA;QAE1B,MAAM,QAAQ,GAAW,KAAK,CAAC,UAAU,CACrC,YAAY,EACZ,UAAU,EACV,gBAAgB,CACnB,CAAA;QACD,IAAI,IAAI,CAAC,eAAe,KAAK,UAAU,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAA;QAC5C,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,KAAK,MAAM,EAAE,CAAC;YACzC,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAA;QACpE,CAAC,MAAM,CAAC;YACJ,MAAM,IAAI,QAAA,YAAY,CAAC,CAAA,uBAAA,CAAyB,CAAC,CAAA;QACrD,CAAC;IACL,CAAC;IAES,cAAc,CAAC,KAAa,EAAE,MAAc,EAAA;QAClD,IAAI,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC5C,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,+CAAA,CAAiD,CACpD,CAAA;QACL,CAAC;QACD,OAAO,AACH,MAAM,GACN,kBAAA,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACjC,CAAC,EACD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAC3C,CACJ,CAAA;IACL,CAAC;IAES,kBAAkB,CAAC,KAAa,EAAA;QACtC,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC1C,OAAO,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAA;QACvD,CAAC,MAAM,CAAC;YACJ,OAAO,KAAK,CAAA;QAChB,CAAC;IACL,CAAC;CACJ;AAtDD,QAAA,0BAAA,GAAA,2BAsDC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6932, "column": 0}, "map": {"version":3,"file":"TableColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/table/TableColumn.ts"],"sourcesContent":["import { TableColumnOptions } from \"../options/TableColumnOptions\"\n\n/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n    readonly \"@instanceof\" = Symbol.for(\"TableColumn\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string\n\n    /**\n     * Column type.\n     */\n    type: string\n\n    /**\n     * Column's default value.\n     */\n    default?: any\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     * `rowid` option supported only in CockroachDB.\n     */\n    generationStrategy?: \"uuid\" | \"increment\" | \"rowid\" | \"identity\"\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false\n\n    /**\n     * Indicates if column stores array.\n     */\n    isArray: boolean = false\n\n    /**\n     * Column's comment.\n     */\n    comment?: string\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length: string = \"\"\n\n    /**\n     * Column type's display width. Used only on some column types in MySQL.\n     * For example, INT(4) specifies an INT with a display width of four digits.\n     */\n    width?: number\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number | null\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    zerofill: boolean = false\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned: boolean = false\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: string[]\n\n    /**\n     * Exact name of enum\n     */\n    enumName?: string\n\n    /**\n     * Name of the primary key constraint for primary column.\n     */\n    primaryKeyConstraintName?: string\n\n    /**\n     * Generated column expression.\n     */\n    asExpression?: string\n\n    /**\n     * Generated column type.\n     */\n    generatedType?: \"VIRTUAL\" | \"STORED\"\n\n    /**\n     * Identity column type. Supports only in Postgres 10+.\n     */\n    generatedIdentity?: \"ALWAYS\" | \"BY DEFAULT\"\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableColumnOptions) {\n        if (options) {\n            this.name = options.name\n            this.type = options.type || \"\"\n            this.length = options.length || \"\"\n            this.width = options.width\n            this.charset = options.charset\n            this.collation = options.collation\n            this.precision = options.precision\n            this.scale = options.scale\n            this.zerofill = options.zerofill || false\n            this.unsigned = this.zerofill ? true : options.unsigned || false\n            this.default = options.default\n            this.onUpdate = options.onUpdate\n            this.isNullable = options.isNullable || false\n            this.isGenerated = options.isGenerated || false\n            this.generationStrategy = options.generationStrategy\n            this.generatedIdentity = options.generatedIdentity\n            this.isPrimary = options.isPrimary || false\n            this.isUnique = options.isUnique || false\n            this.isArray = options.isArray || false\n            this.comment = options.comment\n            this.enum = options.enum\n            this.enumName = options.enumName\n            this.primaryKeyConstraintName = options.primaryKeyConstraintName\n            this.asExpression = options.asExpression\n            this.generatedType = options.generatedType\n            this.spatialFeatureType = options.spatialFeatureType\n            this.srid = options.srid\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column to a new column with exact same properties as this column has.\n     */\n    clone(): TableColumn {\n        return new TableColumn(<TableColumnOptions>{\n            name: this.name,\n            type: this.type,\n            length: this.length,\n            width: this.width,\n            charset: this.charset,\n            collation: this.collation,\n            precision: this.precision,\n            scale: this.scale,\n            zerofill: this.zerofill,\n            unsigned: this.unsigned,\n            enum: this.enum,\n            enumName: this.enumName,\n            primaryKeyConstraintName: this.primaryKeyConstraintName,\n            asExpression: this.asExpression,\n            generatedType: this.generatedType,\n            default: this.default,\n            onUpdate: this.onUpdate,\n            isNullable: this.isNullable,\n            isGenerated: this.isGenerated,\n            generationStrategy: this.generationStrategy,\n            generatedIdentity: this.generatedIdentity,\n            isPrimary: this.isPrimary,\n            isUnique: this.isUnique,\n            isArray: this.isArray,\n            comment: this.comment,\n            spatialFeatureType: this.spatialFeatureType,\n            srid: this.srid,\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7044, "column": 0}, "map": {"version":3,"file":"TableIndex.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/table/TableIndex.ts"],"sourcesContent":["import { IndexMetadata } from \"../../metadata/IndexMetadata\"\nimport { TableIndexOptions } from \"../options/TableIndexOptions\"\n\n/**\n * Database's table index stored in this class.\n */\nexport class TableIndex {\n    readonly \"@instanceof\" = Symbol.for(\"TableIndex\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Index name.\n     */\n    name?: string\n\n    /**\n     * Columns included in this index.\n     */\n    columnNames: string[] = []\n\n    /**\n     * Indicates if this index is unique.\n     */\n    isUnique: boolean\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean\n\n    /**\n     * Create the index using the CONCURRENTLY modifier\n     * Works only in postgres.\n     */\n    isConcurrent: boolean\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean\n\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n    isNullFiltered: boolean\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string\n\n    /**\n     * Index filter condition.\n     */\n    where: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableIndexOptions) {\n        this.name = options.name\n        this.columnNames = options.columnNames\n        this.isUnique = !!options.isUnique\n        this.isSpatial = !!options.isSpatial\n        this.isConcurrent = !!options.isConcurrent\n        this.isFulltext = !!options.isFulltext\n        this.isNullFiltered = !!options.isNullFiltered\n        this.parser = options.parser\n        this.where = options.where ? options.where : \"\"\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone(): TableIndex {\n        return new TableIndex(<TableIndexOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            isUnique: this.isUnique,\n            isSpatial: this.isSpatial,\n            isConcurrent: this.isConcurrent,\n            isFulltext: this.isFulltext,\n            isNullFiltered: this.isNullFiltered,\n            parser: this.parser,\n            where: this.where,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata: IndexMetadata): TableIndex {\n        return new TableIndex(<TableIndexOptions>{\n            name: indexMetadata.name,\n            columnNames: indexMetadata.columns.map(\n                (column) => column.databaseName,\n            ),\n            isUnique: indexMetadata.isUnique,\n            isSpatial: indexMetadata.isSpatial,\n            isConcurrent: indexMetadata.isConcurrent,\n            isFulltext: indexMetadata.isFulltext,\n            isNullFiltered: indexMetadata.isNullFiltered,\n            parser: indexMetadata.parser,\n            where: indexMetadata.where,\n        })\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA;;GAEG,CACH,MAAa,UAAU;IA4DnB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAA0B,CAAA;QA/D7B,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAWjD;;WAEG,CACH,IAAA,CAAA,WAAW,GAAa,EAAE,CAAA;QAkDtB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;QACtC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAA;QAClC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAA;QACpC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,YAAY,CAAA;QAC1C,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAA;QACtC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,cAAc,CAAA;QAC9C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;QAC5B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;IACnD,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,GAAA;QACD,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,CAAC;mBAAG,IAAI,CAAC,WAAW;aAAC;YAClC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;SACpB,CAAC,CAAA;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,MAAM,CAAC,MAAM,CAAC,aAA4B,EAAA;QACtC,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,WAAW,EAAE,aAAa,CAAC,OAAO,CAAC,GAAG,CAClC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,YAAY,CAClC;YACD,QAAQ,EAAE,aAAa,CAAC,QAAQ;YAChC,SAAS,EAAE,aAAa,CAAC,SAAS;YAClC,YAAY,EAAE,aAAa,CAAC,YAAY;YACxC,UAAU,EAAE,aAAa,CAAC,UAAU;YACpC,cAAc,EAAE,aAAa,CAAC,cAAc;YAC5C,MAAM,EAAE,aAAa,CAAC,MAAM;YAC5B,KAAK,EAAE,aAAa,CAAC,KAAK;SAC7B,CAAC,CAAA;IACN,CAAC;CACJ;AAvHD,QAAA,UAAA,GAAA,WAuHC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7115, "column": 0}, "map": {"version":3,"file":"TableForeignKey.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/table/TableForeignKey.ts"],"sourcesContent":["import { ForeignKeyMetadata } from \"../../metadata/ForeignKeyMetadata\"\nimport { TableForeignKeyOptions } from \"../options/TableForeignKeyOptions\"\nimport { Driver } from \"../../driver/Driver\"\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n    readonly \"@instanceof\" = Symbol.for(\"TableForeignKey\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the foreign key constraint.\n     */\n    name?: string\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[] = []\n\n    /**\n     * Database of Table referenced in the foreign key.\n     */\n    referencedDatabase?: string\n\n    /**\n     * Database of Table referenced in the foreign key.\n     */\n    referencedSchema?: string\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[] = []\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string\n\n    /**\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being updated.\n     */\n    onUpdate?: string\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableForeignKeyOptions) {\n        this.name = options.name\n        this.columnNames = options.columnNames\n        this.referencedColumnNames = options.referencedColumnNames\n        this.referencedDatabase = options.referencedDatabase\n        this.referencedSchema = options.referencedSchema\n        this.referencedTableName = options.referencedTableName\n        this.onDelete = options.onDelete\n        this.onUpdate = options.onUpdate\n        this.deferrable = options.deferrable\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone(): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedDatabase: this.referencedDatabase,\n            referencedSchema: this.referencedSchema,\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(\n        metadata: ForeignKeyMetadata,\n        driver: Driver,\n    ): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedDatabase: metadata.referencedEntityMetadata.database,\n            referencedSchema: metadata.referencedEntityMetadata.schema,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        })\n    }\n}\n"],"names":[],"mappings":";;;;;AAIA;;GAEG,CACH,MAAa,eAAe;IAuDxB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAA+B,CAAA;QA1DlC,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;QAWtD;;WAEG,CACH,IAAA,CAAA,WAAW,GAAa,EAAE,CAAA;QAiB1B;;WAEG,CACH,IAAA,CAAA,qBAAqB,GAAa,EAAE,CAAA;QAyBhC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;QACtC,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAA;QAC1D,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAA;QACpD,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAA;QAChD,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAA;QACtD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;QAChC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;QAChC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;IACxC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,GAAA;QACD,OAAO,IAAI,eAAe,CAAyB;YAC/C,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,CAAC;mBAAG,IAAI,CAAC,WAAW;aAAC;YAClC,qBAAqB,EAAE,CAAC;mBAAG,IAAI,CAAC,qBAAqB;aAAC;YACtD,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC,CAAA;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,MAAM,CAAC,MAAM,CACT,QAA4B,EAC5B,MAAc,EAAA;QAEd,OAAO,IAAI,eAAe,CAAyB;YAC/C,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,WAAW,EAAE,QAAQ,CAAC,WAAW;YACjC,qBAAqB,EAAE,QAAQ,CAAC,qBAAqB;YACrD,kBAAkB,EAAE,QAAQ,CAAC,wBAAwB,CAAC,QAAQ;YAC9D,gBAAgB,EAAE,QAAQ,CAAC,wBAAwB,CAAC,MAAM;YAC1D,mBAAmB,EAAE,QAAQ,CAAC,mBAAmB;YACjD,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,UAAU,EAAE,QAAQ,CAAC,UAAU;SAClC,CAAC,CAAA;IACN,CAAC;CACJ;AAnHD,QAAA,eAAA,GAAA,gBAmHC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7191, "column": 0}, "map": {"version":3,"file":"TableUtils.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/util/TableUtils.ts"],"sourcesContent":["import { TableColumnOptions } from \"../options/TableColumnOptions\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { Driver } from \"../../driver/Driver\"\n\nexport class TableUtils {\n    static createTableColumnOptions(\n        columnMetadata: ColumnMetadata,\n        driver: Driver,\n    ): TableColumnOptions {\n        return {\n            name: columnMetadata.databaseName,\n            length: driver.getColumnLength(columnMetadata),\n            width: columnMetadata.width,\n            charset: columnMetadata.charset,\n            collation: columnMetadata.collation,\n            precision: columnMetadata.precision,\n            scale: columnMetadata.scale,\n            zerofill: columnMetadata.zerofill,\n            unsigned: columnMetadata.unsigned,\n            asExpression: columnMetadata.asExpression,\n            generatedType: columnMetadata.generatedType,\n            default: driver.normalizeDefault(columnMetadata),\n            onUpdate: columnMetadata.onUpdate,\n            comment: columnMetadata.comment,\n            isGenerated: columnMetadata.isGenerated,\n            generationStrategy: columnMetadata.generationStrategy,\n            generatedIdentity: columnMetadata.generatedIdentity,\n            isNullable: columnMetadata.isNullable,\n            type: driver.normalizeType(columnMetadata),\n            isPrimary: columnMetadata.isPrimary,\n            isUnique: driver.normalizeIsUnique(columnMetadata),\n            isArray: columnMetadata.isArray || false,\n            enum: columnMetadata.enum\n                ? columnMetadata.enum.map((val) => val + \"\")\n                : columnMetadata.enum,\n            enumName: columnMetadata.enumName,\n            primaryKeyConstraintName: columnMetadata.primaryKeyConstraintName,\n            spatialFeatureType: columnMetadata.spatialFeatureType,\n            srid: columnMetadata.srid,\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAIA,MAAa,UAAU;IACnB,MAAM,CAAC,wBAAwB,CAC3B,cAA8B,EAC9B,MAAc,EAAA;QAEd,OAAO;YACH,IAAI,EAAE,cAAc,CAAC,YAAY;YACjC,MAAM,EAAE,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC;YAC9C,KAAK,EAAE,cAAc,CAAC,KAAK;YAC3B,OAAO,EAAE,cAAc,CAAC,OAAO;YAC/B,SAAS,EAAE,cAAc,CAAC,SAAS;YACnC,SAAS,EAAE,cAAc,CAAC,SAAS;YACnC,KAAK,EAAE,cAAc,CAAC,KAAK;YAC3B,QAAQ,EAAE,cAAc,CAAC,QAAQ;YACjC,QAAQ,EAAE,cAAc,CAAC,QAAQ;YACjC,YAAY,EAAE,cAAc,CAAC,YAAY;YACzC,aAAa,EAAE,cAAc,CAAC,aAAa;YAC3C,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC,cAAc,CAAC;YAChD,QAAQ,EAAE,cAAc,CAAC,QAAQ;YACjC,OAAO,EAAE,cAAc,CAAC,OAAO;YAC/B,WAAW,EAAE,cAAc,CAAC,WAAW;YACvC,kBAAkB,EAAE,cAAc,CAAC,kBAAkB;YACrD,iBAAiB,EAAE,cAAc,CAAC,iBAAiB;YACnD,UAAU,EAAE,cAAc,CAAC,UAAU;YACrC,IAAI,EAAE,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC;YAC1C,SAAS,EAAE,cAAc,CAAC,SAAS;YACnC,QAAQ,EAAE,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC;YAClD,OAAO,EAAE,cAAc,CAAC,OAAO,IAAI,KAAK;YACxC,IAAI,EAAE,cAAc,CAAC,IAAI,GACnB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAG,CAAD,EAAI,GAAG,EAAE,CAAC,GAC1C,cAAc,CAAC,IAAI;YACzB,QAAQ,EAAE,cAAc,CAAC,QAAQ;YACjC,wBAAwB,EAAE,cAAc,CAAC,wBAAwB;YACjE,kBAAkB,EAAE,cAAc,CAAC,kBAAkB;YACrD,IAAI,EAAE,cAAc,CAAC,IAAI;SAC5B,CAAA;IACL,CAAC;CACJ;AArCD,QAAA,UAAA,GAAA,WAqCC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7235, "column": 0}, "map": {"version":3,"file":"TableUnique.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/table/TableUnique.ts"],"sourcesContent":["import { TableUniqueOptions } from \"../options/TableUniqueOptions\"\nimport { UniqueMetadata } from \"../../metadata/UniqueMetadata\"\n\n/**\n * Database's table unique constraint stored in this class.\n */\nexport class TableUnique {\n    readonly \"@instanceof\" = Symbol.for(\"TableUnique\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string\n\n    /**\n     * Columns that contains this constraint.\n     */\n    columnNames: string[] = []\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableUniqueOptions) {\n        this.name = options.name\n        this.columnNames = options.columnNames\n        this.deferrable = options.deferrable\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            deferrable: this.deferrable,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates unique from the unique metadata object.\n     */\n    static create(uniqueMetadata: UniqueMetadata): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: uniqueMetadata.name,\n            columnNames: uniqueMetadata.columns.map(\n                (column) => column.databaseName,\n            ),\n            deferrable: uniqueMetadata.deferrable,\n        })\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA;;GAEG,CACH,MAAa,WAAW;IAuBpB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAA2B,CAAA;QA1B9B,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;QAWlD;;WAEG,CACH,IAAA,CAAA,WAAW,GAAa,EAAE,CAAA;QAatB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;QACtC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;IACxC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,GAAA;QACD,OAAO,IAAI,WAAW,CAAqB;YACvC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,CAAC;mBAAG,IAAI,CAAC,WAAW;aAAC;YAClC,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC,CAAA;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,MAAM,CAAC,MAAM,CAAC,cAA8B,EAAA;QACxC,OAAO,IAAI,WAAW,CAAqB;YACvC,IAAI,EAAE,cAAc,CAAC,IAAI;YACzB,WAAW,EAAE,cAAc,CAAC,OAAO,CAAC,GAAG,CACnC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,YAAY,CAClC;YACD,UAAU,EAAE,cAAc,CAAC,UAAU;SACxC,CAAC,CAAA;IACN,CAAC;CACJ;AAhED,QAAA,WAAA,GAAA,YAgEC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7288, "column": 0}, "map": {"version":3,"file":"TableCheck.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/table/TableCheck.ts"],"sourcesContent":["import { TableCheckOptions } from \"../options/TableCheckOptions\"\nimport { CheckMetadata } from \"../../metadata/CheckMetadata\"\n\n/**\n * Database's table check constraint stored in this class.\n */\nexport class TableCheck {\n    readonly \"@instanceof\" = Symbol.for(\"TableCheck\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string\n\n    /**\n     * Column that contains this constraint.\n     */\n    columnNames?: string[] = []\n\n    /**\n     * Check expression.\n     */\n    expression?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableCheckOptions) {\n        this.name = options.name\n        this.columnNames = options.columnNames\n        this.expression = options.expression\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableCheck {\n        return new TableCheck(<TableCheckOptions>{\n            name: this.name,\n            columnNames: this.columnNames ? [...this.columnNames] : [],\n            expression: this.expression,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates checks from the check metadata object.\n     */\n    static create(checkMetadata: CheckMetadata): TableCheck {\n        return new TableCheck(<TableCheckOptions>{\n            name: checkMetadata.name,\n            expression: checkMetadata.expression,\n        })\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA;;GAEG,CACH,MAAa,UAAU;IAsBnB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAA0B,CAAA;QAzB7B,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAWjD;;WAEG,CACH,IAAA,CAAA,WAAW,GAAc,EAAE,CAAA;QAYvB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;QACtC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;IACxC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,GAAA;QACD,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;mBAAG,IAAI,CAAC,WAAW;aAAC,CAAC,CAAC,CAAC,EAAE;YAC1D,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC,CAAA;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,MAAM,CAAC,MAAM,CAAC,aAA4B,EAAA;QACtC,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,UAAU,EAAE,aAAa,CAAC,UAAU;SACvC,CAAC,CAAA;IACN,CAAC;CACJ;AA5DD,QAAA,UAAA,GAAA,WA4DC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7340, "column": 0}, "map": {"version":3,"file":"TableExclusion.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/table/TableExclusion.ts"],"sourcesContent":["import { TableExclusionOptions } from \"../options/TableExclusionOptions\"\nimport { ExclusionMetadata } from \"../../metadata/ExclusionMetadata\"\n\n/**\n * Database's table exclusion constraint stored in this class.\n */\nexport class TableExclusion {\n    readonly \"@instanceof\" = Symbol.for(\"TableExclusion\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string\n\n    /**\n     * Exclusion expression.\n     */\n    expression?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableExclusionOptions) {\n        this.name = options.name\n        this.expression = options.expression\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableExclusion {\n        return new TableExclusion(<TableExclusionOptions>{\n            name: this.name,\n            expression: this.expression,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates exclusions from the exclusion metadata object.\n     */\n    static create(exclusionMetadata: ExclusionMetadata): TableExclusion {\n        return new TableExclusion(<TableExclusionOptions>{\n            name: exclusionMetadata.name,\n            expression: exclusionMetadata.expression,\n        })\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA;;GAEG,CACH,MAAa,cAAc;IAiBvB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAA8B,CAAA;QApBjC,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;QAqBjD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;IACxC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,GAAA;QACD,OAAO,IAAI,cAAc,CAAwB;YAC7C,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC,CAAA;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,MAAM,CAAC,MAAM,CAAC,iBAAoC,EAAA;QAC9C,OAAO,IAAI,cAAc,CAAwB;YAC7C,IAAI,EAAE,iBAAiB,CAAC,IAAI;YAC5B,UAAU,EAAE,iBAAiB,CAAC,UAAU;SAC3C,CAAC,CAAA;IACN,CAAC;CACJ;AArDD,QAAA,cAAA,GAAA,eAqDC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7385, "column": 0}, "map": {"version":3,"file":"Table.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/table/Table.ts"],"sourcesContent":["import { TableColumn } from \"./TableColumn\"\nimport { TableIndex } from \"./TableIndex\"\nimport { TableForeignKey } from \"./TableForeignKey\"\nimport { Driver } from \"../../driver/Driver\"\nimport { TableOptions } from \"../options/TableOptions\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { TableUtils } from \"../util/TableUtils\"\nimport { TableUnique } from \"./TableUnique\"\nimport { TableCheck } from \"./TableCheck\"\nimport { TableExclusion } from \"./TableExclusion\"\n\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n    readonly \"@instanceof\" = Symbol.for(\"Table\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name that this table resides in if it applies.\n     */\n    database?: string\n\n    /**\n     * Schema name that this table resides in if it applies.\n     */\n    schema?: string\n\n    /**\n     * May contain database name, schema name and table name, unless they're the current database.\n     *\n     * E.g. myDB.mySchema.myTable\n     */\n    name: string\n\n    /**\n     * Table columns.\n     */\n    columns: TableColumn[] = []\n\n    /**\n     * Table indices.\n     */\n    indices: TableIndex[] = []\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: TableForeignKey[] = []\n\n    /**\n     * Table unique constraints.\n     */\n    uniques: TableUnique[] = []\n\n    /**\n     * Table check constraints.\n     */\n    checks: TableCheck[] = []\n\n    /**\n     * Table exclusion constraints.\n     */\n    exclusions: TableExclusion[] = []\n\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    justCreated: boolean = false\n\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n    withoutRowid?: boolean = false\n\n    /**\n     * Table engine.\n     */\n    engine?: string\n\n    /**\n     * Table comment. Not supported by all database types.\n     */\n    comment?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableOptions) {\n        if (options) {\n            this.database = options.database\n            this.schema = options.schema\n            this.name = options.name\n\n            if (options.columns)\n                this.columns = options.columns.map(\n                    (column) => new TableColumn(column),\n                )\n\n            if (options.indices)\n                this.indices = options.indices.map(\n                    (index) => new TableIndex(index),\n                )\n\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map(\n                    (foreignKey) =>\n                        new TableForeignKey({\n                            ...foreignKey,\n                            referencedDatabase:\n                                foreignKey?.referencedDatabase ||\n                                options.database,\n                            referencedSchema:\n                                foreignKey?.referencedSchema || options.schema,\n                        }),\n                )\n\n            if (options.uniques)\n                this.uniques = options.uniques.map(\n                    (unique) => new TableUnique(unique),\n                )\n\n            if (options.checks)\n                this.checks = options.checks.map(\n                    (check) => new TableCheck(check),\n                )\n\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map(\n                    (exclusion) => new TableExclusion(exclusion),\n                )\n\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated\n\n            if (options.withoutRowid) this.withoutRowid = options.withoutRowid\n\n            this.engine = options.engine\n\n            this.comment = options.comment\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get primaryColumns(): TableColumn[] {\n        return this.columns.filter((column) => column.isPrimary)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): Table {\n        return new Table({\n            schema: this.schema,\n            database: this.database,\n            name: this.name,\n            columns: this.columns.map((column) => column.clone()),\n            indices: this.indices.map((constraint) => constraint.clone()),\n            foreignKeys: this.foreignKeys.map((constraint) =>\n                constraint.clone(),\n            ),\n            uniques: this.uniques.map((constraint) => constraint.clone()),\n            checks: this.checks.map((constraint) => constraint.clone()),\n            exclusions: this.exclusions.map((constraint) => constraint.clone()),\n            justCreated: this.justCreated,\n            withoutRowid: this.withoutRowid,\n            engine: this.engine,\n            comment: this.comment,\n        })\n    }\n\n    /**\n     * Add column and creates its constraints.\n     */\n    addColumn(column: TableColumn): void {\n        this.columns.push(column)\n    }\n\n    /**\n     * Remove column and its constraints.\n     */\n    removeColumn(column: TableColumn): void {\n        const foundColumn = this.columns.find((c) => c.name === column.name)\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1)\n    }\n\n    /**\n     * Adds unique constraint.\n     */\n    addUniqueConstraint(uniqueConstraint: TableUnique): void {\n        this.uniques.push(uniqueConstraint)\n        if (uniqueConstraint.columnNames.length === 1) {\n            const uniqueColumn = this.columns.find(\n                (column) => column.name === uniqueConstraint.columnNames[0],\n            )\n            if (uniqueColumn) uniqueColumn.isUnique = true\n        }\n    }\n\n    /**\n     * Removes unique constraint.\n     */\n    removeUniqueConstraint(removedUnique: TableUnique): void {\n        const foundUnique = this.uniques.find(\n            (unique) => unique.name === removedUnique.name,\n        )\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1)\n            if (foundUnique.columnNames.length === 1) {\n                const uniqueColumn = this.columns.find(\n                    (column) => column.name === foundUnique.columnNames[0],\n                )\n                if (uniqueColumn) uniqueColumn.isUnique = false\n            }\n        }\n    }\n\n    /**\n     * Adds check constraint.\n     */\n    addCheckConstraint(checkConstraint: TableCheck): void {\n        this.checks.push(checkConstraint)\n    }\n\n    /**\n     * Removes check constraint.\n     */\n    removeCheckConstraint(removedCheck: TableCheck): void {\n        const foundCheck = this.checks.find(\n            (check) => check.name === removedCheck.name,\n        )\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1)\n        }\n    }\n\n    /**\n     * Adds exclusion constraint.\n     */\n    addExclusionConstraint(exclusionConstraint: TableExclusion): void {\n        this.exclusions.push(exclusionConstraint)\n    }\n\n    /**\n     * Removes exclusion constraint.\n     */\n    removeExclusionConstraint(removedExclusion: TableExclusion): void {\n        const foundExclusion = this.exclusions.find(\n            (exclusion) => exclusion.name === removedExclusion.name,\n        )\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1)\n        }\n    }\n\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKey(foreignKey: TableForeignKey): void {\n        this.foreignKeys.push(foreignKey)\n    }\n\n    /**\n     * Removes foreign key.\n     */\n    removeForeignKey(removedForeignKey: TableForeignKey): void {\n        const fk = this.foreignKeys.find(\n            (foreignKey) => foreignKey.name === removedForeignKey.name,\n        )\n        if (fk) this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1)\n    }\n\n    /**\n     * Adds index.\n     */\n    addIndex(index: TableIndex, isMysql: boolean = false): void {\n        this.indices.push(index)\n\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            const column = this.columns.find(\n                (c) => c.name === index.columnNames[0],\n            )\n            if (column) column.isUnique = true\n        }\n    }\n\n    /**\n     * Removes index.\n     */\n    removeIndex(tableIndex: TableIndex, isMysql: boolean = false): void {\n        const index = this.indices.find(\n            (index) => index.name === tableIndex.name,\n        )\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1)\n\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                const column = this.columns.find(\n                    (c) => c.name === index.columnNames[0],\n                )\n                if (column)\n                    column.isUnique = this.indices.some(\n                        (ind) =>\n                            ind.columnNames.length === 1 &&\n                            ind.columnNames[0] === column.name &&\n                            !!index.isUnique,\n                    )\n            }\n        }\n    }\n\n    findColumnByName(name: string): TableColumn | undefined {\n        return this.columns.find((column) => column.name === name)\n    }\n\n    /**\n     * Returns all column indices.\n     */\n    findColumnIndices(column: TableColumn): TableIndex[] {\n        return this.indices.filter((index) => {\n            return !!index.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column foreign keys.\n     */\n    findColumnForeignKeys(column: TableColumn): TableForeignKey[] {\n        return this.foreignKeys.filter((foreignKey) => {\n            return !!foreignKey.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column uniques.\n     */\n    findColumnUniques(column: TableColumn): TableUnique[] {\n        return this.uniques.filter((unique) => {\n            return !!unique.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column checks.\n     */\n    findColumnChecks(column: TableColumn): TableCheck[] {\n        return this.checks.filter((check) => {\n            return !!check.columnNames!.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): Table {\n        const database =\n            entityMetadata.database === driver.database\n                ? undefined\n                : entityMetadata.database\n        const schema =\n            entityMetadata.schema === (driver.options as any).schema\n                ? undefined\n                : entityMetadata.schema\n\n        const options: TableOptions = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(\n                entityMetadata.tableName,\n                schema,\n                database,\n            ),\n            withoutRowid: entityMetadata.withoutRowid,\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter((column) => column && !column.isVirtualProperty)\n                .map((column) =>\n                    TableUtils.createTableColumnOptions(column, driver),\n                ),\n            indices: entityMetadata.indices\n                .filter((index) => index.synchronize === true)\n                .map((index) => TableIndex.create(index)),\n            uniques: entityMetadata.uniques.map((unique) =>\n                TableUnique.create(unique),\n            ),\n            checks: entityMetadata.checks.map((check) =>\n                TableCheck.create(check),\n            ),\n            exclusions: entityMetadata.exclusions.map((exclusion) =>\n                TableExclusion.create(exclusion),\n            ),\n            comment: entityMetadata.comment,\n        }\n\n        return new Table(options)\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7634, "column": 0}, "map": {"version":3,"file":"View.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/view/View.ts"],"sourcesContent":["import {\n    DataSource,\n    Driver,\n    EntityMetadata,\n    SelectQueryBuilder,\n    TableIndex,\n} from \"../..\"\nimport { ViewOptions } from \"../options/ViewOptions\"\n\n/**\n * View in the database represented in this class.\n */\nexport class View {\n    readonly \"@instanceof\" = Symbol.for(\"View\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name that this view resides in if it applies.\n     */\n    database?: string\n\n    /**\n     * Schema name that this view resides in if it applies.\n     */\n    schema?: string\n\n    /**\n     * View name\n     */\n    name: string\n\n    /**\n     * Indicates if view is materialized.\n     */\n    materialized: boolean\n\n    /**\n     * View Indices\n     */\n    indices: TableIndex[]\n\n    /**\n     * View definition.\n     */\n    expression: string | ((connection: DataSource) => SelectQueryBuilder<any>)\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: ViewOptions) {\n        this.indices = []\n        if (options) {\n            this.database = options.database\n            this.schema = options.schema\n            this.name = options.name\n            this.expression = options.expression\n            this.materialized = !!options.materialized\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): View {\n        return new View(<ViewOptions>{\n            database: this.database,\n            schema: this.schema,\n            name: this.name,\n            expression: this.expression,\n            materialized: this.materialized,\n        })\n    }\n\n    /**\n     * Add index\n     */\n    addIndex(index: TableIndex): void {\n        this.indices.push(index)\n    }\n\n    /**\n     * Remove index\n     */\n    removeIndex(viewIndex: TableIndex): void {\n        const index = this.indices.find(\n            (index) => index.name === viewIndex.name,\n        )\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates view from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): View {\n        const options: ViewOptions = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(\n                entityMetadata.tableName,\n                entityMetadata.schema,\n                entityMetadata.database,\n            ),\n            expression: entityMetadata.expression!,\n            materialized: entityMetadata.tableMetadataArgs.materialized,\n        }\n\n        return new View(options)\n    }\n}\n"],"names":[],"mappings":";;;;;AASA;;GAEG,CACH,MAAa,IAAI;IAqCb,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAAqB,CAAA;QAxCxB,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QAyCvC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;QACjB,IAAI,OAAO,EAAE,CAAC;YACV,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;YAChC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;YAC5B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;YACxB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;YACpC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,YAAY,CAAA;QAC9C,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,GAAA;QACD,OAAO,IAAI,IAAI,CAAc;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,YAAY,EAAE,IAAI,CAAC,YAAY;SAClC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACH,QAAQ,CAAC,KAAiB,EAAA;QACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC5B,CAAC;IAED;;OAEG,CACH,WAAW,CAAC,SAAqB,EAAA;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAC3B,CAAC,KAAK,EAAE,CAAG,CAAD,IAAM,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAC3C,CAAA;QACD,IAAI,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAA;QACvD,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,MAAM,CAAC,MAAM,CAAC,cAA8B,EAAE,MAAc,EAAA;QACxD,MAAM,OAAO,GAAgB;YACzB,QAAQ,EAAE,cAAc,CAAC,QAAQ;YACjC,MAAM,EAAE,cAAc,CAAC,MAAM;YAC7B,IAAI,EAAE,MAAM,CAAC,cAAc,CACvB,cAAc,CAAC,SAAS,EACxB,cAAc,CAAC,MAAM,EACrB,cAAc,CAAC,QAAQ,CAC1B;YACD,UAAU,EAAE,cAAc,CAAC,UAAW;YACtC,YAAY,EAAE,cAAc,CAAC,iBAAiB,CAAC,YAAY;SAC9D,CAAA;QAED,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC;CACJ;AA9GD,QAAA,IAAA,GAAA,KA8GC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7705, "column": 0}, "map": {"version":3,"file":"ViewUtils.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/util/ViewUtils.ts"],"sourcesContent":["import { EntityMetadata } from \"../../metadata/EntityMetadata\"\n\nexport class ViewUtils {\n    /**\n     * Comparator for .sort() that will order views bases on dependencies in creation order\n     */\n    static viewMetadataCmp(\n        metadataA: EntityMetadata | undefined,\n        metadataB: EntityMetadata | undefined,\n    ): number {\n        if (!metadataA || !metadataB) {\n            return 0\n        }\n        if (\n            metadataA.dependsOn &&\n            (metadataA.dependsOn.has(metadataB.target) ||\n                metadataA.dependsOn.has(metadataB.name))\n        ) {\n            return 1\n        }\n        if (\n            metadataB.dependsOn &&\n            (metadataB.dependsOn.has(metadataA.target) ||\n                metadataB.dependsOn.has(metadataA.name))\n        ) {\n            return -1\n        }\n        return 0\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAa,SAAS;IAClB;;OAEG,CACH,MAAM,CAAC,eAAe,CAClB,SAAqC,EACrC,SAAqC,EAAA;QAErC,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,EAAE,CAAC;YAC3B,OAAO,CAAC,CAAA;QACZ,CAAC;QACD,IACI,SAAS,CAAC,SAAS,IACnB,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,IACtC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAC9C,CAAC;YACC,OAAO,CAAC,CAAA;QACZ,CAAC;QACD,IACI,SAAS,CAAC,SAAS,IACnB,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,IACtC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAC9C,CAAC;YACC,OAAO,CAAC,CAAC,CAAA;QACb,CAAC;QACD,OAAO,CAAC,CAAA;IACZ,CAAC;CACJ;AA3BD,QAAA,SAAA,GAAA,UA2BC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7732, "column": 0}, "map": {"version":3,"file":"RdbmsSchemaBuilder.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/schema-builder/RdbmsSchemaBuilder.ts"],"sourcesContent":["import { Table } from \"./table/Table\"\nimport { TableColumn } from \"./table/TableColumn\"\nimport { TableForeignKey } from \"./table/TableForeignKey\"\nimport { TableIndex } from \"./table/TableIndex\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { SchemaBuilder } from \"./SchemaBuilder\"\nimport { SqlInMemory } from \"../driver/SqlInMemory\"\nimport { TableUtils } from \"./util/TableUtils\"\nimport { TableColumnOptions } from \"./options/TableColumnOptions\"\nimport { TableUnique } from \"./table/TableUnique\"\nimport { TableCheck } from \"./table/TableCheck\"\nimport { TableExclusion } from \"./table/TableExclusion\"\nimport { View } from \"./view/View\"\nimport { ViewUtils } from \"./util/ViewUtils\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { PostgresQueryRunner } from \"../driver/postgres/PostgresQueryRunner\"\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\n    readonly \"@instanceof\" = Symbol.for(\"RdbmsSchemaBuilder\")\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner\n\n    private currentDatabase?: string\n\n    private currentSchema?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = this.connection.createQueryRunner()\n\n        // this.connection.driver.database || this.currentDatabase;\n        this.currentDatabase = this.connection.driver.database\n        this.currentSchema = this.connection.driver.schema\n\n        // CockroachDB implements asynchronous schema sync operations which can not been executed in transaction.\n        // E.g. if you try to DROP column and ADD it again in the same transaction, crdb throws error.\n        // In Spanner queries against the INFORMATION_SCHEMA can be used in a read-only transaction,\n        // but not in a read-write transaction.\n        const isUsingTransactions =\n            !(this.connection.driver.options.type === \"cockroachdb\") &&\n            !(this.connection.driver.options.type === \"spanner\") &&\n            this.connection.options.migrationsTransactionMode !== \"none\"\n\n        await this.queryRunner.beforeMigration()\n\n        if (isUsingTransactions) {\n            await this.queryRunner.startTransaction()\n        }\n\n        try {\n            await this.createMetadataTableIfNecessary(this.queryRunner)\n            // Flush the queryrunner table & view cache\n            const tablePaths = this.entityToSyncMetadatas.map((metadata) =>\n                this.getTablePath(metadata),\n            )\n            const viewPaths = this.viewEntityToSyncMetadatas.map((metadata) =>\n                this.getTablePath(metadata),\n            )\n\n            await this.queryRunner.getTables(tablePaths)\n            await this.queryRunner.getViews(viewPaths)\n\n            await this.executeSchemaSyncOperationsInProperOrder()\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                await this.connection.queryResultCache.synchronize(\n                    this.queryRunner,\n                )\n\n            if (isUsingTransactions) {\n                await this.queryRunner.commitTransaction()\n            }\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (isUsingTransactions) {\n                    await this.queryRunner.rollbackTransaction()\n                }\n            } catch (rollbackError) {}\n            throw error\n        } finally {\n            await this.queryRunner.afterMigration()\n\n            await this.queryRunner.release()\n        }\n    }\n\n    /**\n     * Create the typeorm_metadata table if necessary.\n     */\n    async createMetadataTableIfNecessary(\n        queryRunner: QueryRunner,\n    ): Promise<void> {\n        if (\n            this.viewEntityToSyncMetadatas.length > 0 ||\n            this.hasGeneratedColumns()\n        ) {\n            await this.createTypeormMetadataTable(queryRunner)\n        }\n    }\n\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log(): Promise<SqlInMemory> {\n        this.queryRunner = this.connection.createQueryRunner()\n        try {\n            // Flush the queryrunner table & view cache\n            const tablePaths = this.entityToSyncMetadatas.map((metadata) =>\n                this.getTablePath(metadata),\n            )\n            const viewPaths = this.viewEntityToSyncMetadatas.map((metadata) =>\n                this.getTablePath(metadata),\n            )\n            await this.queryRunner.getTables(tablePaths)\n            await this.queryRunner.getViews(viewPaths)\n\n            this.queryRunner.enableSqlMemory()\n            await this.executeSchemaSyncOperationsInProperOrder()\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                // todo: check this functionality\n                await this.connection.queryResultCache.synchronize(\n                    this.queryRunner,\n                )\n\n            return this.queryRunner.getMemorySql()\n        } finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory()\n            await this.queryRunner.release()\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(\n            (metadata) =>\n                metadata.synchronize &&\n                metadata.tableType !== \"entity-child\" &&\n                metadata.tableType !== \"view\",\n        )\n    }\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get viewEntityToSyncMetadatas(): EntityMetadata[] {\n        return (\n            this.connection.entityMetadatas\n                .filter(\n                    (metadata) =>\n                        metadata.tableType === \"view\" && metadata.synchronize,\n                )\n                // sort views in creation order by dependencies\n                .sort(ViewUtils.viewMetadataCmp)\n        )\n    }\n\n    /**\n     * Checks if there are at least one generated column.\n     */\n    protected hasGeneratedColumns(): boolean {\n        return this.connection.entityMetadatas.some((entityMetadata) => {\n            return entityMetadata.columns.some((column) => column.generatedType)\n        })\n    }\n\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\n        await this.dropOldViews()\n        await this.dropOldForeignKeys()\n        await this.dropOldIndices()\n        await this.dropOldChecks()\n        await this.dropOldExclusions()\n        await this.dropCompositeUniqueConstraints()\n        // await this.renameTables();\n        await this.renameColumns()\n        await this.changeTableComment()\n        await this.createNewTables()\n        await this.dropRemovedColumns()\n        await this.addNewColumns()\n        await this.updatePrimaryKeys()\n        await this.updateExistColumns()\n        await this.createNewIndices()\n        await this.createNewChecks()\n        await this.createNewExclusions()\n        await this.createCompositeUniqueConstraints()\n        await this.createForeignKeys()\n        await this.createViews()\n        await this.createNewViewIndices()\n    }\n\n    private getTablePath(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): string {\n        const parsed = this.connection.driver.parseTableName(target)\n\n        return this.connection.driver.buildTableName(\n            parsed.tableName,\n            parsed.schema || this.currentSchema,\n            parsed.database || this.currentDatabase,\n        )\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const tableForeignKeysToDrop = table.foreignKeys.filter(\n                (tableForeignKey) => {\n                    const metadataFK = metadata.foreignKeys.find(\n                        (metadataForeignKey) =>\n                            tableForeignKey.name === metadataForeignKey.name &&\n                            this.getTablePath(tableForeignKey) ===\n                                this.getTablePath(\n                                    metadataForeignKey.referencedEntityMetadata,\n                                ),\n                    )\n                    return (\n                        !metadataFK ||\n                        (metadataFK.onDelete &&\n                            metadataFK.onDelete !== tableForeignKey.onDelete) ||\n                        (metadataFK.onUpdate &&\n                            metadataFK.onUpdate !== tableForeignKey.onUpdate)\n                    )\n                },\n            )\n            if (tableForeignKeysToDrop.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `dropping old foreign keys of ${\n                    table.name\n                }: ${tableForeignKeysToDrop\n                    .map((dbForeignKey) => dbForeignKey.name)\n                    .join(\", \")}`,\n            )\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(\n                table,\n                tableForeignKeysToDrop,\n            )\n        }\n    }\n\n    /**\n     * Rename tables\n     */\n    protected async renameTables(): Promise<void> {\n        // for (const metadata of this.entityToSyncMetadatas) {\n        //     const table = this.queryRunner.loadedTables.find(table => this.getTablePath(table) === this.getTablePath(metadata));\n        // }\n    }\n\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    protected async renameColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            if (metadata.columns.length !== table.columns.length) continue\n\n            const renamedMetadataColumns = metadata.columns\n                .filter((c) => !c.isVirtualProperty)\n                .filter((column) => {\n                    return !table.columns.find((tableColumn) => {\n                        return (\n                            tableColumn.name === column.databaseName &&\n                            tableColumn.type ===\n                                this.connection.driver.normalizeType(column) &&\n                            tableColumn.isNullable === column.isNullable &&\n                            tableColumn.isUnique ===\n                                this.connection.driver.normalizeIsUnique(column)\n                        )\n                    })\n                })\n\n            if (\n                renamedMetadataColumns.length === 0 ||\n                renamedMetadataColumns.length > 1\n            )\n                continue\n\n            const renamedTableColumns = table.columns.filter((tableColumn) => {\n                return !metadata.columns.find((column) => {\n                    return (\n                        !column.isVirtualProperty &&\n                        column.databaseName === tableColumn.name &&\n                        this.connection.driver.normalizeType(column) ===\n                            tableColumn.type &&\n                        column.isNullable === tableColumn.isNullable &&\n                        this.connection.driver.normalizeIsUnique(column) ===\n                            tableColumn.isUnique\n                    )\n                })\n            })\n\n            if (\n                renamedTableColumns.length === 0 ||\n                renamedTableColumns.length > 1\n            )\n                continue\n\n            const renamedColumn = renamedTableColumns[0].clone()\n            renamedColumn.name = renamedMetadataColumns[0].databaseName\n\n            this.connection.logger.logSchemaBuild(\n                `renaming column \"${renamedTableColumns[0].name}\" in \"${table.name}\" to \"${renamedColumn.name}\"`,\n            )\n            await this.queryRunner.renameColumn(\n                table,\n                renamedTableColumns[0],\n                renamedColumn,\n            )\n        }\n    }\n\n    protected async dropOldIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const dropQueries = table.indices\n                .filter((tableIndex) => {\n                    const indexMetadata = metadata.indices.find(\n                        (index) => index.name === tableIndex.name,\n                    )\n                    if (indexMetadata) {\n                        if (indexMetadata.synchronize === false) return false\n\n                        if (indexMetadata.isUnique !== tableIndex.isUnique)\n                            return true\n\n                        if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                            return true\n\n                        if (\n                            this.connection.driver.isFullTextColumnTypeSupported() &&\n                            indexMetadata.isFulltext !== tableIndex.isFulltext\n                        )\n                            return true\n\n                        if (\n                            indexMetadata.columns.length !==\n                            tableIndex.columnNames.length\n                        )\n                            return true\n\n                        return !indexMetadata.columns.every(\n                            (column) =>\n                                tableIndex.columnNames.indexOf(\n                                    column.databaseName,\n                                ) !== -1,\n                        )\n                    }\n\n                    return true\n                })\n                .map(async (tableIndex) => {\n                    this.connection.logger.logSchemaBuild(\n                        `dropping an index: \"${tableIndex.name}\" from table ${table.name}`,\n                    )\n                    await this.queryRunner.dropIndex(table, tableIndex)\n                })\n\n            await Promise.all(dropQueries)\n        }\n        if (this.connection.options.type === \"postgres\") {\n            const postgresQueryRunner: PostgresQueryRunner = <\n                PostgresQueryRunner\n            >this.queryRunner\n            for (const metadata of this.viewEntityToSyncMetadatas) {\n                const view = this.queryRunner.loadedViews.find(\n                    (view) =>\n                        this.getTablePath(view) === this.getTablePath(metadata),\n                )\n                if (!view) continue\n\n                const dropQueries = view.indices\n                    .filter((tableIndex) => {\n                        const indexMetadata = metadata.indices.find(\n                            (index) => index.name === tableIndex.name,\n                        )\n                        if (indexMetadata) {\n                            if (indexMetadata.synchronize === false)\n                                return false\n\n                            if (indexMetadata.isUnique !== tableIndex.isUnique)\n                                return true\n\n                            if (\n                                indexMetadata.isSpatial !== tableIndex.isSpatial\n                            )\n                                return true\n\n                            if (\n                                this.connection.driver.isFullTextColumnTypeSupported() &&\n                                indexMetadata.isFulltext !==\n                                    tableIndex.isFulltext\n                            )\n                                return true\n\n                            if (\n                                indexMetadata.columns.length !==\n                                tableIndex.columnNames.length\n                            )\n                                return true\n\n                            return !indexMetadata.columns.every(\n                                (column) =>\n                                    tableIndex.columnNames.indexOf(\n                                        column.databaseName,\n                                    ) !== -1,\n                            )\n                        }\n\n                        return true\n                    })\n                    .map(async (tableIndex) => {\n                        this.connection.logger.logSchemaBuild(\n                            `dropping an index: \"${tableIndex.name}\" from view ${view.name}`,\n                        )\n                        await postgresQueryRunner.dropViewIndex(\n                            view,\n                            tableIndex,\n                        )\n                    })\n\n                await Promise.all(dropQueries)\n            }\n        }\n    }\n\n    protected async dropOldChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (\n            DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\"\n        )\n            return\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const oldChecks = table.checks.filter((tableCheck) => {\n                return !metadata.checks.find(\n                    (checkMetadata) => checkMetadata.name === tableCheck.name,\n                )\n            })\n\n            if (oldChecks.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `dropping old check constraint: ${oldChecks\n                    .map((check) => `\"${check.name}\"`)\n                    .join(\", \")} from table \"${table.name}\"`,\n            )\n            await this.queryRunner.dropCheckConstraints(table, oldChecks)\n        }\n    }\n\n    protected async dropCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const compositeUniques = table.uniques.filter((tableUnique) => {\n                return (\n                    tableUnique.columnNames.length > 1 &&\n                    !metadata.uniques.find(\n                        (uniqueMetadata) =>\n                            uniqueMetadata.name === tableUnique.name,\n                    )\n                )\n            })\n\n            if (compositeUniques.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `dropping old unique constraint: ${compositeUniques\n                    .map((unique) => `\"${unique.name}\"`)\n                    .join(\", \")} from table \"${table.name}\"`,\n            )\n            await this.queryRunner.dropUniqueConstraints(\n                table,\n                compositeUniques,\n            )\n        }\n    }\n\n    protected async dropOldExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver.options.type === \"postgres\")) return\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const oldExclusions = table.exclusions.filter((tableExclusion) => {\n                return !metadata.exclusions.find(\n                    (exclusionMetadata) =>\n                        exclusionMetadata.name === tableExclusion.name,\n                )\n            })\n\n            if (oldExclusions.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `dropping old exclusion constraint: ${oldExclusions\n                    .map((exclusion) => `\"${exclusion.name}\"`)\n                    .join(\", \")} from table \"${table.name}\"`,\n            )\n            await this.queryRunner.dropExclusionConstraints(\n                table,\n                oldExclusions,\n            )\n        }\n    }\n\n    /**\n     * change table comment\n     */\n    protected async changeTableComment(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            if (\n                DriverUtils.isMySQLFamily(this.connection.driver) ||\n                this.connection.driver.options.type === \"postgres\"\n            ) {\n                const newComment = metadata.comment\n                await this.queryRunner.changeTableComment(table, newComment)\n            }\n        }\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            // check if table does not exist yet\n            const existTable = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (existTable) continue\n\n            this.connection.logger.logSchemaBuild(\n                `creating a new table: ${this.getTablePath(metadata)}`,\n            )\n\n            // create a new table and sync it in the database\n            const table = Table.create(metadata, this.connection.driver)\n            await this.queryRunner.createTable(table, false, false)\n            this.queryRunner.loadedTables.push(table)\n        }\n    }\n\n    protected async createViews(): Promise<void> {\n        for (const metadata of this.viewEntityToSyncMetadatas) {\n            // check if view does not exist yet\n            const existView = this.queryRunner.loadedViews.find((view) => {\n                const viewExpression =\n                    typeof view.expression === \"string\"\n                        ? view.expression.trim()\n                        : view.expression(this.connection).getQuery()\n                const metadataExpression =\n                    typeof metadata.expression === \"string\"\n                        ? metadata.expression.trim()\n                        : metadata.expression!(this.connection).getQuery()\n                return (\n                    this.getTablePath(view) === this.getTablePath(metadata) &&\n                    viewExpression === metadataExpression\n                )\n            })\n            if (existView) continue\n\n            this.connection.logger.logSchemaBuild(\n                `creating a new view: ${this.getTablePath(metadata)}`,\n            )\n\n            // create a new view and sync it in the database\n            const view = View.create(metadata, this.connection.driver)\n            await this.queryRunner.createView(view, true)\n            this.queryRunner.loadedViews.push(view)\n        }\n    }\n\n    protected async dropOldViews(): Promise<void> {\n        const droppedViews: Array<View> = []\n        const viewEntityToSyncMetadatas = this.viewEntityToSyncMetadatas\n        // BuIld lookup cache for finding views metadata\n        const viewToMetadata = new Map<View, EntityMetadata>()\n        for (const view of this.queryRunner.loadedViews) {\n            const viewMetadata = viewEntityToSyncMetadatas.find((metadata) => {\n                return this.getTablePath(view) === this.getTablePath(metadata)\n            })\n            if (viewMetadata) {\n                viewToMetadata.set(view, viewMetadata)\n            }\n        }\n        // Gather all changed view, that need a drop\n        for (const view of this.queryRunner.loadedViews) {\n            const viewMetadata = viewToMetadata.get(view)\n            if (!viewMetadata) {\n                continue\n            }\n            const viewExpression =\n                typeof view.expression === \"string\"\n                    ? view.expression.trim()\n                    : view.expression(this.connection).getQuery()\n            const metadataExpression =\n                typeof viewMetadata.expression === \"string\"\n                    ? viewMetadata.expression.trim()\n                    : viewMetadata.expression!(this.connection).getQuery()\n\n            if (viewExpression === metadataExpression) continue\n\n            this.connection.logger.logSchemaBuild(\n                `dropping an old view: ${view.name}`,\n            )\n\n            // Collect view to be dropped\n            droppedViews.push(view)\n        }\n\n        // Helper function that for a given view, will recursively return list of the view and all views that depend on it\n        const viewDependencyChain = (view: View): View[] => {\n            // Get the view metadata\n            const viewMetadata = viewToMetadata.get(view)\n            let viewWithDependencies = [view]\n            // If no metadata is known for the view, simply return the view itself\n            if (!viewMetadata) {\n                return viewWithDependencies\n            }\n            // Iterate over all known views\n            for (const [\n                currentView,\n                currentMetadata,\n            ] of viewToMetadata.entries()) {\n                // Ignore self reference\n                if (currentView === view) {\n                    continue\n                }\n                // If the currently iterated view depends on the passed in view\n                if (\n                    currentMetadata.dependsOn &&\n                    (currentMetadata.dependsOn.has(viewMetadata.target) ||\n                        currentMetadata.dependsOn.has(viewMetadata.name))\n                ) {\n                    // Recursively add currently iterate view and its dependents\n                    viewWithDependencies = viewWithDependencies.concat(\n                        viewDependencyChain(currentView),\n                    )\n                }\n            }\n            // Return all collected views\n            return viewWithDependencies\n        }\n\n        // Collect final list of views to be dropped in a Set so there are no duplicates\n        const droppedViewsWithDependencies: Set<View> = new Set(\n            // Collect all dropped views, and their dependencies\n            droppedViews\n                .map((view) => viewDependencyChain(view))\n                // Flattened to single Array ( can be replaced with flatMap, once supported)\n                .reduce((all, segment) => {\n                    return all.concat(segment)\n                }, [])\n                // Sort the views to be dropped in creation order\n                .sort((a, b) => {\n                    return ViewUtils.viewMetadataCmp(\n                        viewToMetadata.get(a),\n                        viewToMetadata.get(b),\n                    )\n                })\n                // reverse order to get drop order\n                .reverse(),\n        )\n\n        // Finally emit all drop views\n        for (const view of droppedViewsWithDependencies) {\n            await this.queryRunner.dropView(view)\n        }\n        this.queryRunner.loadedViews = this.queryRunner.loadedViews.filter(\n            (view) => !droppedViewsWithDependencies.has(view),\n        )\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected async dropRemovedColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedTableColumns = table.columns.filter((tableColumn) => {\n                return !metadata.columns.find(\n                    (columnMetadata) =>\n                        columnMetadata.isVirtualProperty ||\n                        columnMetadata.databaseName === tableColumn.name,\n                )\n            })\n            if (droppedTableColumns.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `columns dropped in ${table.name}: ` +\n                    droppedTableColumns.map((column) => column.name).join(\", \"),\n            )\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(table, droppedTableColumns)\n        }\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected async addNewColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(\n                (columnMetadata) => {\n                    return (\n                        !columnMetadata.isVirtualProperty &&\n                        !table.columns.find(\n                            (tableColumn) =>\n                                tableColumn.name ===\n                                columnMetadata.databaseName,\n                        )\n                    )\n                },\n            )\n            if (newColumnMetadatas.length === 0) continue\n\n            // create columns in the database\n            const newTableColumnOptions =\n                this.metadataColumnsToTableColumnOptions(newColumnMetadatas)\n            const newTableColumns = newTableColumnOptions.map(\n                (option) => new TableColumn(option),\n            )\n\n            if (newTableColumns.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `new columns added: ` +\n                    newColumnMetadatas\n                        .map((column) => column.databaseName)\n                        .join(\", \"),\n            )\n            await this.queryRunner.addColumns(table, newTableColumns)\n        }\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    protected async updatePrimaryKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const primaryMetadataColumns = metadata.columns.filter(\n                (column) => column.isPrimary,\n            )\n            const primaryTableColumns = table.columns.filter(\n                (column) => column.isPrimary,\n            )\n            if (\n                primaryTableColumns.length !== primaryMetadataColumns.length &&\n                primaryMetadataColumns.length > 1\n            ) {\n                const changedPrimaryColumns = primaryMetadataColumns.map(\n                    (primaryMetadataColumn) => {\n                        return new TableColumn(\n                            TableUtils.createTableColumnOptions(\n                                primaryMetadataColumn,\n                                this.connection.driver,\n                            ),\n                        )\n                    },\n                )\n                await this.queryRunner.updatePrimaryKeys(\n                    table,\n                    changedPrimaryColumns,\n                )\n            }\n        }\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected async updateExistColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const changedColumns = this.connection.driver.findChangedColumns(\n                table.columns,\n                metadata.columns,\n            )\n            if (changedColumns.length === 0) continue\n\n            // drop all foreign keys that point to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnReferencedForeignKeys(\n                    this.getTablePath(metadata),\n                    changedColumn.databaseName,\n                )\n            }\n\n            // drop all composite indices related to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnCompositeIndices(\n                    this.getTablePath(metadata),\n                    changedColumn.databaseName,\n                )\n            }\n\n            // drop all composite uniques related to this column\n            // Mysql does not support unique constraints.\n            if (\n                !(\n                    DriverUtils.isMySQLFamily(this.connection.driver) ||\n                    this.connection.driver.options.type === \"aurora-mysql\" ||\n                    this.connection.driver.options.type === \"spanner\"\n                )\n            ) {\n                for (const changedColumn of changedColumns) {\n                    await this.dropColumnCompositeUniques(\n                        this.getTablePath(metadata),\n                        changedColumn.databaseName,\n                    )\n                }\n            }\n\n            // generate a map of new/old columns\n            const newAndOldTableColumns = changedColumns.map(\n                (changedColumn) => {\n                    const oldTableColumn = table.columns.find(\n                        (column) => column.name === changedColumn.databaseName,\n                    )!\n                    const newTableColumnOptions =\n                        TableUtils.createTableColumnOptions(\n                            changedColumn,\n                            this.connection.driver,\n                        )\n                    const newTableColumn = new TableColumn(\n                        newTableColumnOptions,\n                    )\n\n                    return {\n                        oldColumn: oldTableColumn,\n                        newColumn: newTableColumn,\n                    }\n                },\n            )\n\n            if (newAndOldTableColumns.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `columns changed in \"${table.name}\". updating: ` +\n                    changedColumns\n                        .map((column) => column.databaseName)\n                        .join(\", \"),\n            )\n            await this.queryRunner.changeColumns(table, newAndOldTableColumns)\n        }\n    }\n\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    protected async createNewIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const newIndices = metadata.indices\n                .filter(\n                    (indexMetadata) =>\n                        !table.indices.find(\n                            (tableIndex) =>\n                                tableIndex.name === indexMetadata.name,\n                        ) && indexMetadata.synchronize === true,\n                )\n                .map((indexMetadata) => TableIndex.create(indexMetadata))\n\n            if (newIndices.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `adding new indices ${newIndices\n                    .map((index) => `\"${index.name}\"`)\n                    .join(\", \")} in table \"${table.name}\"`,\n            )\n            await this.queryRunner.createIndices(table, newIndices)\n        }\n    }\n\n    /**\n     * Creates indices for materialized views.\n     */\n    protected async createNewViewIndices(): Promise<void> {\n        // Only PostgreSQL supports indices for materialized views.\n        if (\n            this.connection.options.type !== \"postgres\" ||\n            !DriverUtils.isPostgresFamily(this.connection.driver)\n        ) {\n            return\n        }\n        const postgresQueryRunner: PostgresQueryRunner = <PostgresQueryRunner>(\n            this.queryRunner\n        )\n        for (const metadata of this.viewEntityToSyncMetadatas) {\n            // check if view does not exist yet\n            const view = this.queryRunner.loadedViews.find((view) => {\n                const viewExpression =\n                    typeof view.expression === \"string\"\n                        ? view.expression.trim()\n                        : view.expression(this.connection).getQuery()\n                const metadataExpression =\n                    typeof metadata.expression === \"string\"\n                        ? metadata.expression.trim()\n                        : metadata.expression!(this.connection).getQuery()\n                return (\n                    this.getTablePath(view) === this.getTablePath(metadata) &&\n                    viewExpression === metadataExpression\n                )\n            })\n            if (!view || !view.materialized) continue\n\n            const newIndices = metadata.indices\n                .filter(\n                    (indexMetadata) =>\n                        !view.indices.find(\n                            (tableIndex) =>\n                                tableIndex.name === indexMetadata.name,\n                        ) && indexMetadata.synchronize === true,\n                )\n                .map((indexMetadata) => TableIndex.create(indexMetadata))\n\n            if (newIndices.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `adding new indices ${newIndices\n                    .map((index) => `\"${index.name}\"`)\n                    .join(\", \")} in view \"${view.name}\"`,\n            )\n            await postgresQueryRunner.createViewIndices(view, newIndices)\n        }\n    }\n\n    protected async createNewChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (\n            DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\"\n        )\n            return\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const newChecks = metadata.checks\n                .filter(\n                    (checkMetadata) =>\n                        !table.checks.find(\n                            (tableCheck) =>\n                                tableCheck.name === checkMetadata.name,\n                        ),\n                )\n                .map((checkMetadata) => TableCheck.create(checkMetadata))\n\n            if (newChecks.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `adding new check constraints: ${newChecks\n                    .map((index) => `\"${index.name}\"`)\n                    .join(\", \")} in table \"${table.name}\"`,\n            )\n            await this.queryRunner.createCheckConstraints(table, newChecks)\n        }\n    }\n\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    protected async createCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const compositeUniques = metadata.uniques\n                .filter(\n                    (uniqueMetadata) =>\n                        uniqueMetadata.columns.length > 1 &&\n                        !table.uniques.find(\n                            (tableUnique) =>\n                                tableUnique.name === uniqueMetadata.name,\n                        ),\n                )\n                .map((uniqueMetadata) => TableUnique.create(uniqueMetadata))\n\n            if (compositeUniques.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `adding new unique constraints: ${compositeUniques\n                    .map((unique) => `\"${unique.name}\"`)\n                    .join(\", \")} in table \"${table.name}\"`,\n            )\n            await this.queryRunner.createUniqueConstraints(\n                table,\n                compositeUniques,\n            )\n        }\n    }\n\n    /**\n     * Creates exclusions which are missing in db yet.\n     */\n    protected async createNewExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver.options.type === \"postgres\")) return\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const newExclusions = metadata.exclusions\n                .filter(\n                    (exclusionMetadata) =>\n                        !table.exclusions.find(\n                            (tableExclusion) =>\n                                tableExclusion.name === exclusionMetadata.name,\n                        ),\n                )\n                .map((exclusionMetadata) =>\n                    TableExclusion.create(exclusionMetadata),\n                )\n\n            if (newExclusions.length === 0) continue\n\n            this.connection.logger.logSchemaBuild(\n                `adding new exclusion constraints: ${newExclusions\n                    .map((exclusion) => `\"${exclusion.name}\"`)\n                    .join(\", \")} in table \"${table.name}\"`,\n            )\n            await this.queryRunner.createExclusionConstraints(\n                table,\n                newExclusions,\n            )\n        }\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected async createForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(\n                (table) =>\n                    this.getTablePath(table) === this.getTablePath(metadata),\n            )\n            if (!table) continue\n\n            const newKeys = metadata.foreignKeys.filter((foreignKey) => {\n                return !table.foreignKeys.find(\n                    (dbForeignKey) =>\n                        dbForeignKey.name === foreignKey.name &&\n                        this.getTablePath(dbForeignKey) ===\n                            this.getTablePath(\n                                foreignKey.referencedEntityMetadata,\n                            ),\n                )\n            })\n            if (newKeys.length === 0) continue\n\n            const dbForeignKeys = newKeys.map((foreignKeyMetadata) =>\n                TableForeignKey.create(\n                    foreignKeyMetadata,\n                    this.connection.driver,\n                ),\n            )\n            this.connection.logger.logSchemaBuild(\n                `creating a foreign keys: ${newKeys\n                    .map((key) => key.name)\n                    .join(\", \")} on table \"${table.name}\"`,\n            )\n            await this.queryRunner.createForeignKeys(table, dbForeignKeys)\n        }\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(\n        tablePath: string,\n        columnName: string,\n    ): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(\n            (table) => this.getTablePath(table) === tablePath,\n        )\n        if (!table) return\n\n        const tablesWithFK: Table[] = []\n        const columnForeignKey = table.foreignKeys.find(\n            (foreignKey) => foreignKey.columnNames.indexOf(columnName) !== -1,\n        )\n        if (columnForeignKey) {\n            const clonedTable = table.clone()\n            clonedTable.foreignKeys = [columnForeignKey]\n            tablesWithFK.push(clonedTable)\n            table.removeForeignKey(columnForeignKey)\n        }\n\n        for (const loadedTable of this.queryRunner.loadedTables) {\n            const dependForeignKeys = loadedTable.foreignKeys.filter(\n                (foreignKey) => {\n                    return (\n                        this.getTablePath(foreignKey) === tablePath &&\n                        foreignKey.referencedColumnNames.indexOf(columnName) !==\n                            -1\n                    )\n                },\n            )\n\n            if (dependForeignKeys.length > 0) {\n                const clonedTable = loadedTable.clone()\n                clonedTable.foreignKeys = dependForeignKeys\n                tablesWithFK.push(clonedTable)\n                dependForeignKeys.forEach((dependForeignKey) =>\n                    loadedTable.removeForeignKey(dependForeignKey),\n                )\n            }\n        }\n\n        if (tablesWithFK.length > 0) {\n            for (const tableWithFK of tablesWithFK) {\n                this.connection.logger.logSchemaBuild(\n                    `dropping related foreign keys of ${\n                        tableWithFK.name\n                    }: ${tableWithFK.foreignKeys\n                        .map((foreignKey) => foreignKey.name)\n                        .join(\", \")}`,\n                )\n                await this.queryRunner.dropForeignKeys(\n                    tableWithFK,\n                    tableWithFK.foreignKeys,\n                )\n            }\n        }\n    }\n\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    protected async dropColumnCompositeIndices(\n        tablePath: string,\n        columnName: string,\n    ): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(\n            (table) => this.getTablePath(table) === tablePath,\n        )\n        if (!table) return\n\n        const relatedIndices = table.indices.filter(\n            (index) =>\n                index.columnNames.length > 1 &&\n                index.columnNames.indexOf(columnName) !== -1,\n        )\n        if (relatedIndices.length === 0) return\n\n        this.connection.logger.logSchemaBuild(\n            `dropping related indices of \"${tablePath}\".\"${columnName}\": ${relatedIndices\n                .map((index) => index.name)\n                .join(\", \")}`,\n        )\n        await this.queryRunner.dropIndices(table, relatedIndices)\n    }\n\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    protected async dropColumnCompositeUniques(\n        tablePath: string,\n        columnName: string,\n    ): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(\n            (table) => this.getTablePath(table) === tablePath,\n        )\n        if (!table) return\n\n        const relatedUniques = table.uniques.filter(\n            (unique) =>\n                unique.columnNames.length > 1 &&\n                unique.columnNames.indexOf(columnName) !== -1,\n        )\n        if (relatedUniques.length === 0) return\n\n        this.connection.logger.logSchemaBuild(\n            `dropping related unique constraints of \"${tablePath}\".\"${columnName}\": ${relatedUniques\n                .map((unique) => unique.name)\n                .join(\", \")}`,\n        )\n        await this.queryRunner.dropUniqueConstraints(table, relatedUniques)\n    }\n\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    protected metadataColumnsToTableColumnOptions(\n        columns: ColumnMetadata[],\n    ): TableColumnOptions[] {\n        return columns.map((columnMetadata) =>\n            TableUtils.createTableColumnOptions(\n                columnMetadata,\n                this.connection.driver,\n            ),\n        )\n    }\n\n    /**\n     * Creates typeorm service table for storing user defined Views and generate columns.\n     */\n    protected async createTypeormMetadataTable(queryRunner: QueryRunner) {\n        const schema = this.currentSchema\n        const database = this.currentDatabase\n        const typeormMetadataTable = this.connection.driver.buildTableName(\n            this.connection.metadataTableName,\n            schema,\n            database,\n        )\n\n        // Spanner requires at least one primary key in a table.\n        // Since we don't have unique column in \"typeorm_metadata\" table\n        // and we should avoid breaking changes, we mark all columns as primary for Spanner driver.\n        const isPrimary = this.connection.driver.options.type === \"spanner\"\n        await queryRunner.createTable(\n            new Table({\n                database: database,\n                schema: schema,\n                name: typeormMetadataTable,\n                columns: [\n                    {\n                        name: \"type\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .metadataType,\n                        }),\n                        isNullable: false,\n                        isPrimary,\n                    },\n                    {\n                        name: \"database\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .metadataDatabase,\n                        }),\n                        isNullable: true,\n                        isPrimary,\n                    },\n                    {\n                        name: \"schema\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .metadataSchema,\n                        }),\n                        isNullable: true,\n                        isPrimary,\n                    },\n                    {\n                        name: \"table\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .metadataTable,\n                        }),\n                        isNullable: true,\n                        isPrimary,\n                    },\n                    {\n                        name: \"name\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .metadataName,\n                        }),\n                        isNullable: true,\n                        isPrimary,\n                    },\n                    {\n                        name: \"value\",\n                        type: this.connection.driver.normalizeType({\n                            type: this.connection.driver.mappedDataTypes\n                                .metadataValue,\n                        }),\n                        isNullable: true,\n                        isPrimary,\n                    },\n                ],\n            }),\n            true,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8454, "column": 0}, "map": {"version":3,"file":"MongoSchemaBuilder.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/schema-builder/MongoSchemaBuilder.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { SchemaBuilder } from \"./SchemaBuilder\"\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\nimport { SqlInMemory } from \"../driver/SqlInMemory\"\nimport { CreateIndexesOptions } from \"../driver/mongodb/typings\"\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class MongoSchemaBuilder implements SchemaBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        const queryRunner =\n            this.connection.createQueryRunner() as MongoQueryRunner\n        const promises: Promise<any>[] = []\n        this.connection.entityMetadatas.forEach((metadata) => {\n            metadata.indices.forEach((index) => {\n                const options: CreateIndexesOptions = Object.assign(\n                    {},\n                    {\n                        name: index.name,\n                        unique: index.isUnique,\n                        sparse: index.isSparse,\n                        background: index.isBackground,\n                    },\n                    index.expireAfterSeconds === undefined\n                        ? {}\n                        : { expireAfterSeconds: index.expireAfterSeconds },\n                )\n                promises.push(\n                    queryRunner.createCollectionIndex(\n                        metadata.tableName,\n                        index.columnNamesWithOrderingMap,\n                        options,\n                    ),\n                )\n            })\n            metadata.uniques.forEach((unique) => {\n                const options = <CreateIndexesOptions>{\n                    name: unique.name,\n                    unique: true,\n                }\n                promises.push(\n                    queryRunner.createCollectionIndex(\n                        metadata.tableName,\n                        unique.columnNamesWithOrderingMap,\n                        options,\n                    ),\n                )\n            })\n        })\n        await Promise.all(promises)\n    }\n\n    /**\n     * Returns query to be executed by schema builder.\n     */\n    log(): Promise<SqlInMemory> {\n        return Promise.resolve(new SqlInMemory())\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA,MAAA,iDAAmD;AAGnD;;;;;;;;;;;;;GAaG,CACH,MAAa,kBAAkB;IAC3B,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAsB,UAAsB,CAAA;QAAtB,IAAA,CAAA,UAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAEhD,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,CAAC,KAAK,GAAA;QACP,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAsB,CAAA;QAC3D,MAAM,QAAQ,GAAmB,EAAE,CAAA;QACnC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjD,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC/B,MAAM,OAAO,GAAyB,MAAM,CAAC,MAAM,CAC/C,CAAA,CAAE,EACF;oBACI,IAAI,EAAE,KAAK,CAAC,IAAI;oBAChB,MAAM,EAAE,KAAK,CAAC,QAAQ;oBACtB,MAAM,EAAE,KAAK,CAAC,QAAQ;oBACtB,UAAU,EAAE,KAAK,CAAC,YAAY;iBACjC,EACD,KAAK,CAAC,kBAAkB,KAAK,SAAS,GAChC,CAAA,CAAE,GACF;oBAAE,kBAAkB,EAAE,KAAK,CAAC,kBAAkB;gBAAA,CAAE,CACzD,CAAA;gBACD,QAAQ,CAAC,IAAI,CACT,WAAW,CAAC,qBAAqB,CAC7B,QAAQ,CAAC,SAAS,EAClB,KAAK,CAAC,0BAA0B,EAChC,OAAO,CACV,CACJ,CAAA;YACL,CAAC,CAAC,CAAA;YACF,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBAChC,MAAM,OAAO,GAAyB;oBAClC,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,MAAM,EAAE,IAAI;iBACf,CAAA;gBACD,QAAQ,CAAC,IAAI,CACT,WAAW,CAAC,qBAAqB,CAC7B,QAAQ,CAAC,SAAS,EAClB,MAAM,CAAC,0BAA0B,EACjC,OAAO,CACV,CACJ,CAAA;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QACF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG,CACH,GAAG,GAAA;QACC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,cAAA,WAAW,EAAE,CAAC,CAAA;IAC7C,CAAC;CACJ;AA/DD,QAAA,kBAAA,GAAA,mBA+DC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8522, "column": 0}, "map": {"version":3,"file":"TableCheckOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/options/TableCheckOptions.ts"],"sourcesContent":["/**\n * Database's table check constraint options.\n */\nexport interface TableCheckOptions {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string\n\n    /**\n     * Column that contains this constraint.\n     */\n    columnNames?: string[]\n\n    /**\n     * Check expression.\n     */\n    expression?: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8531, "column": 0}, "map": {"version":3,"file":"TableColumnOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/options/TableColumnOptions.ts"],"sourcesContent":["/**\n * Table's column options.\n */\nexport interface TableColumnOptions {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string\n\n    /**\n     * Column type.\n     */\n    type: string\n\n    /**\n     * Column's default value.\n     */\n    default?: any\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable?: boolean\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated?: boolean\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     */\n    generationStrategy?: \"uuid\" | \"increment\" | \"rowid\" | \"identity\"\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary?: boolean\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique?: boolean\n\n    /**\n     * Indicates if column stores array.\n     */\n    isArray?: boolean\n\n    /**\n     * Column's comment.\n     */\n    comment?: string\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length?: string\n\n    /**\n     * Column type's display width. Used only on some column types in MySQL.\n     * For example, INT(4) specifies an INT with a display width of four digits.\n     */\n    width?: number\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number | null\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    zerofill?: boolean\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned?: boolean\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: string[]\n\n    /**\n     * Exact name of enum\n     */\n    enumName?: string\n\n    /**\n     * If this column is primary key then this specifies the name for it.\n     */\n    primaryKeyConstraintName?: string\n\n    /**\n     * If this column is foreign key then this specifies the name for it.\n     */\n    foreignKeyConstraintName?: string\n\n    /**\n     * Generated column expression.\n     */\n    asExpression?: string\n\n    /**\n     * Generated column type.\n     */\n    generatedType?: \"VIRTUAL\" | \"STORED\"\n\n    /**\n     * Identity column type. Supports only in Postgres 10+.\n     */\n    generatedIdentity?: \"ALWAYS\" | \"BY DEFAULT\"\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8540, "column": 0}, "map": {"version":3,"file":"TableExclusionOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/options/TableExclusionOptions.ts"],"sourcesContent":["/**\n * Database's table exclusion constraint options.\n */\nexport interface TableExclusionOptions {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string\n\n    /**\n     * Exclusion expression.\n     */\n    expression?: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8549, "column": 0}, "map": {"version":3,"file":"TableForeignKeyOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/options/TableForeignKeyOptions.ts"],"sourcesContent":["/**\n * Foreign key options.\n */\nexport interface TableForeignKeyOptions {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the foreign key.\n     */\n    name?: string\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[]\n\n    /**\n     * Database of the Table referenced in the foreign key.\n     */\n    referencedDatabase?: string\n\n    /**\n     * Schema of the Table referenced in the foreign key.\n     */\n    referencedSchema?: string\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[]\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string\n\n    /**\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being updated.\n     */\n    onUpdate?: string\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8558, "column": 0}, "map": {"version":3,"file":"TableIndexOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/options/TableIndexOptions.ts"],"sourcesContent":["/**\n * Database's table index options.\n */\nexport interface TableIndexOptions {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string\n\n    /**\n     * Columns included in this index.\n     */\n    columnNames: string[]\n\n    /**\n     * Indicates if this index is unique.\n     */\n    isUnique?: boolean\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial?: boolean\n\n    /**\n     * Builds the index using the concurrently option.\n     * This options is only supported for postgres database.\n     */\n    isConcurrent?: boolean\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Supported only in MySQL & SAP HANA.\n     */\n    isFulltext?: boolean\n\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n    isNullFiltered?: boolean\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string\n\n    /**\n     * Index filter condition.\n     */\n    where?: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8567, "column": 0}, "map": {"version":3,"file":"TableOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/options/TableOptions.ts"],"sourcesContent":["import { TableColumnOptions } from \"./TableColumnOptions\"\nimport { TableIndexOptions } from \"./TableIndexOptions\"\nimport { TableForeignKeyOptions } from \"./TableForeignKeyOptions\"\nimport { TableUniqueOptions } from \"./TableUniqueOptions\"\nimport { TableCheckOptions } from \"./TableCheckOptions\"\nimport { TableExclusionOptions } from \"./TableExclusionOptions\"\n\n/**\n * Table options.\n */\nexport interface TableOptions {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Table schema.\n     */\n    schema?: string\n\n    /**\n     * Table database.\n     */\n    database?: string\n\n    /**\n     * Table name.\n     */\n    name: string\n\n    /**\n     * Table columns.\n     */\n    columns?: TableColumnOptions[]\n\n    /**\n     * Table indices.\n     */\n    indices?: TableIndexOptions[]\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys?: TableForeignKeyOptions[]\n\n    /**\n     * Table unique constraints.\n     */\n    uniques?: TableUniqueOptions[]\n\n    /**\n     * Table check constraints.\n     */\n    checks?: TableCheckOptions[]\n\n    /**\n     * Table check constraints.\n     */\n    exclusions?: TableExclusionOptions[]\n\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    justCreated?: boolean\n\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n    withoutRowid?: boolean\n\n    /**\n     * Table engine.\n     */\n    engine?: string\n\n    /**\n     * Table comment. Not supported by all database types.\n     */\n    comment?: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8576, "column": 0}, "map": {"version":3,"file":"TableUniqueOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/options/TableUniqueOptions.ts"],"sourcesContent":["/**\n * Database's table unique constraint options.\n */\nexport interface TableUniqueOptions {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string\n\n    /**\n     * Columns that contains this constraint.\n     */\n    columnNames: string[]\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8585, "column": 0}, "map": {"version":3,"file":"ViewOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/schema-builder/options/ViewOptions.ts"],"sourcesContent":["import { DataSource, SelectQueryBuilder } from \"../..\"\n\n/**\n * View options.\n */\nexport interface ViewOptions {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name that this table resides in if it applies.\n     */\n    database?: string\n\n    /**\n     * Schema name that this table resides in if it applies.\n     */\n    schema?: string\n\n    /**\n     * View name.\n     */\n    name: string\n\n    /**\n     * View expression.\n     */\n    expression: string | ((connection: DataSource) => SelectQueryBuilder<any>)\n\n    /**\n     * Indicates if view is materialized\n     */\n\n    materialized?: boolean\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8594, "column": 0}, "map": {"version":3,"file":"Migration.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/migration/Migration.ts"],"sourcesContent":["import { MigrationInterface } from \"./MigrationInterface\"\n\n/**\n * Represents entity of the migration in the database.\n */\nexport class Migration {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Migration id.\n     * Indicates order of the executed migrations.\n     */\n    id: number | undefined\n\n    /**\n     * Timestamp of the migration.\n     */\n    timestamp: number\n\n    /**\n     * Name of the migration (class name).\n     */\n    name: string\n\n    /**\n     * Migration instance that needs to be run.\n     */\n    instance?: MigrationInterface\n\n    /**\n     * Whether to run this migration within a transaction\n     */\n    transaction?: boolean\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        id: number | undefined,\n        timestamp: number,\n        name: string,\n        instance?: MigrationInterface,\n        transaction?: boolean,\n    ) {\n        this.id = id\n        this.timestamp = timestamp\n        this.name = name\n        this.instance = instance\n        this.transaction = transaction\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;;GAEG,CACH,MAAa,SAAS;IA+BlB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YACI,EAAsB,EACtB,SAAiB,EACjB,IAAY,EACZ,QAA6B,EAC7B,WAAqB,CAAA;QAErB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAA;QACZ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;IAClC,CAAC;CACJ;AAhDD,QAAA,SAAA,GAAA,UAgDC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8619, "column": 0}, "map": {"version":3,"file":"MigrationExecutor.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/migration/MigrationExecutor.ts"],"sourcesContent":["import { Table } from \"../schema-builder/table/Table\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { Migration } from \"./Migration\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\"\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\nimport { ForbiddenTransactionModeOverrideError, TypeORMError } from \"../error\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates how migrations should be run in transactions.\n     *   all: all migrations are run in a single transaction\n     *   none: all migrations are run without a transaction\n     *   each: each migration is run in a separate transaction\n     */\n    transaction: \"all\" | \"none\" | \"each\" = \"all\"\n\n    /**\n     * Option to fake-run or fake-revert a migration, adding to the\n     * executed migrations table, but not actually running it. This feature is\n     * useful for when migrations are added after the fact or for\n     * interoperability between applications which are desired to each keep\n     * a consistent migration history.\n     */\n    fake: boolean\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private readonly migrationsDatabase?: string\n    private readonly migrationsSchema?: string\n    private readonly migrationsTable: string\n    private readonly migrationsTableName: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        protected connection: DataSource,\n        protected queryRunner?: QueryRunner,\n    ) {\n        const { schema } = this.connection.driver.options as any\n        const database = this.connection.driver.database\n        this.migrationsDatabase = database\n        this.migrationsSchema = schema\n        this.migrationsTableName =\n            connection.options.migrationsTableName || \"migrations\"\n        this.migrationsTable = this.connection.driver.buildTableName(\n            this.migrationsTableName,\n            schema,\n            database,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Tries to execute a single migration given.\n     */\n    public async executeMigration(migration: Migration): Promise<Migration> {\n        return this.withQueryRunner(async (queryRunner) => {\n            await this.createMigrationsTableIfNotExist(queryRunner)\n\n            // create typeorm_metadata table if it's not created yet\n            const schemaBuilder = this.connection.driver.createSchemaBuilder()\n            if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\n                await schemaBuilder.createMetadataTableIfNecessary(queryRunner)\n            }\n\n            await queryRunner.beforeMigration()\n            await (migration.instance as any).up(queryRunner)\n            await queryRunner.afterMigration()\n            await this.insertExecutedMigration(queryRunner, migration)\n\n            return migration\n        })\n    }\n\n    /**\n     * Returns an array of all migrations.\n     */\n    public async getAllMigrations(): Promise<Migration[]> {\n        return Promise.resolve(this.getMigrations())\n    }\n\n    /**\n     * Returns an array of all executed migrations.\n     */\n    public async getExecutedMigrations(): Promise<Migration[]> {\n        return this.withQueryRunner(async (queryRunner) => {\n            await this.createMigrationsTableIfNotExist(queryRunner)\n\n            return await this.loadExecutedMigrations(queryRunner)\n        })\n    }\n\n    /**\n     * Returns an array of all pending migrations.\n     */\n    public async getPendingMigrations(): Promise<Migration[]> {\n        const allMigrations = await this.getAllMigrations()\n        const executedMigrations = await this.getExecutedMigrations()\n\n        return allMigrations.filter(\n            (migration) =>\n                !executedMigrations.find(\n                    (executedMigration) =>\n                        executedMigration.name === migration.name,\n                ),\n        )\n    }\n\n    /**\n     * Inserts an executed migration.\n     */\n    public insertMigration(migration: Migration): Promise<void> {\n        return this.withQueryRunner((q) =>\n            this.insertExecutedMigration(q, migration),\n        )\n    }\n\n    /**\n     * Deletes an executed migration.\n     */\n    public deleteMigration(migration: Migration): Promise<void> {\n        return this.withQueryRunner((q) =>\n            this.deleteExecutedMigration(q, migration),\n        )\n    }\n\n    /**\n     * Lists all migrations and whether they have been executed or not\n     * returns true if there are unapplied migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        let hasUnappliedMigrations = false\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner)\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(\n            queryRunner,\n        )\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations()\n\n        for (const migration of allMigrations) {\n            const executedMigration = executedMigrations.find(\n                (executedMigration) =>\n                    executedMigration.name === migration.name,\n            )\n\n            if (executedMigration) {\n                this.connection.logger.logSchemaBuild(\n                    `[X] ${executedMigration.id} ${migration.name}`,\n                )\n            } else {\n                hasUnappliedMigrations = true\n                this.connection.logger.logSchemaBuild(`[ ] ${migration.name}`)\n            }\n        }\n\n        // if query runner was created by us then release it\n        if (!this.queryRunner) {\n            await queryRunner.release()\n        }\n\n        return hasUnappliedMigrations\n    }\n\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations(): Promise<Migration[]> {\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n        // create migrations table if it's not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner)\n\n        // create the typeorm_metadata table if it's not created yet\n        const schemaBuilder = this.connection.driver.createSchemaBuilder()\n        if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\n            await schemaBuilder.createMetadataTableIfNecessary(queryRunner)\n        }\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(\n            queryRunner,\n        )\n\n        // get the time when last migration was executed\n        const lastTimeExecutedMigration =\n            this.getLatestTimestampMigration(executedMigrations)\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations()\n\n        // variable to store all migrations we did successfully\n        const successMigrations: Migration[] = []\n\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter((migration) => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find(\n                (executedMigration) =>\n                    executedMigration.name === migration.name,\n            )\n            if (executedMigration) return false\n\n            // migration is new and not executed. now check if its timestamp is correct\n            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n            //     throw new TypeORMError(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n\n            // every check is passed means that migration was not run yet and we need to run it\n            return true\n        })\n\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.logSchemaBuild(`No migrations are pending`)\n            // if query runner was created by us then release it\n            if (!this.queryRunner) await queryRunner.release()\n            return []\n        }\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(\n            `${executedMigrations.length} migrations are already loaded in the database.`,\n        )\n        this.connection.logger.logSchemaBuild(\n            `${allMigrations.length} migrations were found in the source code.`,\n        )\n        if (lastTimeExecutedMigration)\n            this.connection.logger.logSchemaBuild(\n                `${\n                    lastTimeExecutedMigration.name\n                } is the last executed migration. It was executed on ${new Date(\n                    lastTimeExecutedMigration.timestamp,\n                ).toString()}.`,\n            )\n        this.connection.logger.logSchemaBuild(\n            `${pendingMigrations.length} migrations are new migrations must be executed.`,\n        )\n\n        if (this.transaction === \"all\") {\n            // If we desire to run all migrations in a single transaction\n            // but there is a migration that explicitly overrides the transaction mode\n            // then we have to fail since we cannot properly resolve that intent\n            // In theory we could support overrides that are set to `true`,\n            // however to keep the interface more rigid, we fail those too\n            const migrationsOverridingTransactionMode =\n                pendingMigrations.filter(\n                    (migration) =>\n                        !(migration.instance?.transaction === undefined),\n                )\n\n            if (migrationsOverridingTransactionMode.length > 0) {\n                const error = new ForbiddenTransactionModeOverrideError(\n                    migrationsOverridingTransactionMode,\n                )\n                this.connection.logger.logMigration(\n                    `Migrations failed, error: ${error.message}`,\n                )\n                throw error\n            }\n        }\n\n        // Set the per-migration defaults for the transaction mode\n        // so that we have one centralized place that controls this behavior\n\n        // When transaction mode is `each` the default is to run in a transaction\n        // When transaction mode is `none` the default is to not run in a transaction\n        // When transaction mode is `all` the default is to not run in a transaction\n        // since all the migrations are already running in one single transaction\n\n        const txModeDefault = {\n            each: true,\n            none: false,\n            all: false,\n        }[this.transaction]\n\n        for (const migration of pendingMigrations) {\n            if (migration.instance) {\n                const instanceTx = migration.instance.transaction\n\n                if (instanceTx === undefined) {\n                    migration.transaction = txModeDefault\n                } else {\n                    migration.transaction = instanceTx\n                }\n            }\n        }\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false\n        if (this.transaction === \"all\" && !queryRunner.isTransactionActive) {\n            await queryRunner.beforeMigration()\n            await queryRunner.startTransaction()\n            transactionStartedByUs = true\n        }\n\n        // run all pending migrations in a sequence\n        try {\n            for (const migration of pendingMigrations) {\n                if (this.fake) {\n                    // directly insert migration record into the database if it is fake\n                    await this.insertExecutedMigration(queryRunner, migration)\n\n                    // nothing else needs to be done, continue to next migration\n                    continue\n                }\n\n                if (migration.transaction && !queryRunner.isTransactionActive) {\n                    await queryRunner.beforeMigration()\n                    await queryRunner.startTransaction()\n                    transactionStartedByUs = true\n                }\n\n                await migration\n                    .instance!.up(queryRunner)\n                    .catch((error) => {\n                        // informative log about migration failure\n                        this.connection.logger.logMigration(\n                            `Migration \"${migration.name}\" failed, error: ${error?.message}`,\n                        )\n                        throw error\n                    })\n                    .then(async () => {\n                        // now when migration is executed we need to insert record about it into the database\n                        await this.insertExecutedMigration(\n                            queryRunner,\n                            migration,\n                        )\n                        // commit transaction if we started it\n                        if (migration.transaction && transactionStartedByUs) {\n                            await queryRunner.commitTransaction()\n                            await queryRunner.afterMigration()\n                        }\n                    })\n                    .then(() => {\n                        // informative log about migration success\n                        successMigrations.push(migration)\n                        this.connection.logger.logSchemaBuild(\n                            `Migration ${migration.name} has been ${\n                                this.fake ? \"(fake) \" : \"\"\n                            }executed successfully.`,\n                        )\n                    })\n            }\n\n            // commit transaction if we started it\n            if (this.transaction === \"all\" && transactionStartedByUs) {\n                await queryRunner.commitTransaction()\n                await queryRunner.afterMigration()\n            }\n        } catch (err) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction()\n                } catch (rollbackError) {}\n            }\n\n            throw err\n        } finally {\n            // if query runner was created by us then release it\n            if (!this.queryRunner) await queryRunner.release()\n        }\n        return successMigrations\n    }\n\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration(): Promise<void> {\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n\n        // create migrations table if it's not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner)\n\n        // create typeorm_metadata table if it's not created yet\n        const schemaBuilder = this.connection.driver.createSchemaBuilder()\n        if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\n            await schemaBuilder.createMetadataTableIfNecessary(queryRunner)\n        }\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(\n            queryRunner,\n        )\n\n        // get the time when last migration was executed\n        const lastTimeExecutedMigration =\n            this.getLatestExecutedMigration(executedMigrations)\n\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.logSchemaBuild(\n                `No migrations were found in the database. Nothing to revert!`,\n            )\n            return\n        }\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations()\n\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find(\n            (migration) => migration.name === lastTimeExecutedMigration!.name,\n        )\n\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new TypeORMError(\n                `No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`,\n            )\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(\n            `${executedMigrations.length} migrations are already loaded in the database.`,\n        )\n        this.connection.logger.logSchemaBuild(\n            `${\n                lastTimeExecutedMigration.name\n            } is the last executed migration. It was executed on ${new Date(\n                lastTimeExecutedMigration.timestamp,\n            ).toString()}.`,\n        )\n        this.connection.logger.logSchemaBuild(`Now reverting it...`)\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false\n        if (this.transaction !== \"none\" && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction()\n            transactionStartedByUs = true\n        }\n\n        try {\n            if (!this.fake) {\n                await queryRunner.beforeMigration()\n                await migrationToRevert.instance!.down(queryRunner)\n                await queryRunner.afterMigration()\n            }\n\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert)\n            this.connection.logger.logSchemaBuild(\n                `Migration ${migrationToRevert.name} has been ${\n                    this.fake ? \"(fake) \" : \"\"\n                }reverted successfully.`,\n            )\n\n            // commit transaction if we started it\n            if (transactionStartedByUs) await queryRunner.commitTransaction()\n        } catch (err) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction()\n                } catch (rollbackError) {}\n            }\n\n            throw err\n        } finally {\n            // if query runner was created by us then release it\n            if (!this.queryRunner) await queryRunner.release()\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    protected async createMigrationsTableIfNotExist(\n        queryRunner: QueryRunner,\n    ): Promise<void> {\n        // If driver is mongo no need to create\n        if (this.connection.driver.options.type === \"mongodb\") {\n            return\n        }\n        const tableExist = await queryRunner.hasTable(this.migrationsTable) // todo: table name should be configurable\n        if (!tableExist) {\n            await queryRunner.createTable(\n                new Table({\n                    database: this.migrationsDatabase,\n                    schema: this.migrationsSchema,\n                    name: this.migrationsTable,\n                    columns: [\n                        {\n                            name: \"id\",\n                            type: this.connection.driver.normalizeType({\n                                type: this.connection.driver.mappedDataTypes\n                                    .migrationId,\n                            }),\n                            isGenerated: true,\n                            generationStrategy: \"increment\",\n                            isPrimary: true,\n                            isNullable: false,\n                        },\n                        {\n                            name: \"timestamp\",\n                            type: this.connection.driver.normalizeType({\n                                type: this.connection.driver.mappedDataTypes\n                                    .migrationTimestamp,\n                            }),\n                            isPrimary: false,\n                            isNullable: false,\n                        },\n                        {\n                            name: \"name\",\n                            type: this.connection.driver.normalizeType({\n                                type: this.connection.driver.mappedDataTypes\n                                    .migrationName,\n                            }),\n                            isNullable: false,\n                        },\n                    ],\n                }),\n            )\n        }\n    }\n\n    /**\n     * Loads all migrations that were executed and saved into the database (sorts by id).\n     */\n    protected async loadExecutedMigrations(\n        queryRunner: QueryRunner,\n    ): Promise<Migration[]> {\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const mongoRunner = queryRunner as MongoQueryRunner\n            return mongoRunner\n                .cursor(this.migrationsTableName, {})\n                .sort({ _id: -1 })\n                .toArray()\n        } else {\n            const migrationsRaw: ObjectLiteral[] = await this.connection.manager\n                .createQueryBuilder(queryRunner)\n                .select()\n                .orderBy(this.connection.driver.escape(\"id\"), \"DESC\")\n                .from(this.migrationsTable, this.migrationsTableName)\n                .getRawMany()\n            return migrationsRaw.map((migrationRaw) => {\n                return new Migration(\n                    parseInt(migrationRaw[\"id\"]),\n                    parseInt(migrationRaw[\"timestamp\"]),\n                    migrationRaw[\"name\"],\n                )\n            })\n        }\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected getMigrations(): Migration[] {\n        const migrations = this.connection.migrations.map((migration) => {\n            const migrationClassName =\n                migration.name || (migration.constructor as any).name\n            const migrationTimestamp = parseInt(\n                migrationClassName.substr(-13),\n                10,\n            )\n            if (!migrationTimestamp || isNaN(migrationTimestamp)) {\n                throw new TypeORMError(\n                    `${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`,\n                )\n            }\n\n            return new Migration(\n                undefined,\n                migrationTimestamp,\n                migrationClassName,\n                migration,\n            )\n        })\n\n        this.checkForDuplicateMigrations(migrations)\n\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp)\n    }\n\n    protected checkForDuplicateMigrations(migrations: Migration[]) {\n        const migrationNames = migrations.map((migration) => migration.name)\n        const duplicates = Array.from(\n            new Set(\n                migrationNames.filter(\n                    (migrationName, index) =>\n                        migrationNames.indexOf(migrationName) < index,\n                ),\n            ),\n        )\n        if (duplicates.length > 0) {\n            throw Error(`Duplicate migrations: ${duplicates.join(\", \")}`)\n        }\n    }\n\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    protected getLatestTimestampMigration(\n        migrations: Migration[],\n    ): Migration | undefined {\n        const sortedMigrations = migrations\n            .map((migration) => migration)\n            .sort((a, b) => (a.timestamp - b.timestamp) * -1)\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined\n    }\n\n    /**\n     * Finds the latest migration in the given array of migrations.\n     * PRE: Migration array must be sorted by descending id.\n     */\n    protected getLatestExecutedMigration(\n        sortedMigrations: Migration[],\n    ): Migration | undefined {\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined\n    }\n\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    protected async insertExecutedMigration(\n        queryRunner: QueryRunner,\n        migration: Migration,\n    ): Promise<void> {\n        const values: ObjectLiteral = {}\n        if (this.connection.driver.options.type === \"mssql\") {\n            values[\"timestamp\"] = new MssqlParameter(\n                migration.timestamp,\n                this.connection.driver.normalizeType({\n                    type: this.connection.driver.mappedDataTypes\n                        .migrationTimestamp,\n                }) as any,\n            )\n            values[\"name\"] = new MssqlParameter(\n                migration.name,\n                this.connection.driver.normalizeType({\n                    type: this.connection.driver.mappedDataTypes.migrationName,\n                }) as any,\n            )\n        } else {\n            values[\"timestamp\"] = migration.timestamp\n            values[\"name\"] = migration.name\n        }\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const mongoRunner = queryRunner as MongoQueryRunner\n            await mongoRunner.databaseConnection\n                .db(this.connection.driver.database!)\n                .collection(this.migrationsTableName)\n                .insertOne(values)\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder()\n            await qb\n                .insert()\n                .into(this.migrationsTable)\n                .values(values)\n                .execute()\n        }\n    }\n\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    protected async deleteExecutedMigration(\n        queryRunner: QueryRunner,\n        migration: Migration,\n    ): Promise<void> {\n        const conditions: ObjectLiteral = {}\n        if (this.connection.driver.options.type === \"mssql\") {\n            conditions[\"timestamp\"] = new MssqlParameter(\n                migration.timestamp,\n                this.connection.driver.normalizeType({\n                    type: this.connection.driver.mappedDataTypes\n                        .migrationTimestamp,\n                }) as any,\n            )\n            conditions[\"name\"] = new MssqlParameter(\n                migration.name,\n                this.connection.driver.normalizeType({\n                    type: this.connection.driver.mappedDataTypes.migrationName,\n                }) as any,\n            )\n        } else {\n            conditions[\"timestamp\"] = migration.timestamp\n            conditions[\"name\"] = migration.name\n        }\n\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const mongoRunner = queryRunner as MongoQueryRunner\n            await mongoRunner.databaseConnection\n                .db(this.connection.driver.database!)\n                .collection(this.migrationsTableName)\n                .deleteOne(conditions)\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder()\n            await qb\n                .delete()\n                .from(this.migrationsTable)\n                .where(`${qb.escape(\"timestamp\")} = :timestamp`)\n                .andWhere(`${qb.escape(\"name\")} = :name`)\n                .setParameters(conditions)\n                .execute()\n        }\n    }\n\n    protected async withQueryRunner<T extends any>(\n        callback: (queryRunner: QueryRunner) => T | Promise<T>,\n    ) {\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n\n        try {\n            return await callback(queryRunner)\n        } finally {\n            if (!this.queryRunner) {\n                await queryRunner.release()\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9084, "column": 0}, "map": {"version":3,"file":"Repository.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/repository/Repository.ts"],"sourcesContent":["import { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { SaveOptions } from \"./SaveOptions\"\nimport { RemoveOptions } from \"./RemoveOptions\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { UpsertOptions } from \"./UpsertOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\nimport { buildSqlTag } from \"../util/SqlTagUtils\"\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity target that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    readonly target: EntityTarget<Entity>\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    get metadata() {\n        return this.manager.connection.getMetadata(this.target)\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        target: EntityTarget<Entity>,\n        manager: EntityManager,\n        queryRunner?: QueryRunner,\n    ) {\n        this.target = target\n        this.manager = manager\n        this.queryRunner = queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(\n            this.metadata.target as any,\n            alias || this.metadata.targetName,\n            queryRunner || this.queryRunner,\n        )\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity)\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity\n\n    /**\n     * Creates new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[]\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(\n        plainEntityLikeOrPlainEntityLikes?:\n            | DeepPartial<Entity>\n            | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        return this.manager.create(\n            this.metadata.target as any,\n            plainEntityLikeOrPlainEntityLikes as any,\n        )\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        return this.manager.merge(\n            this.metadata.target as any,\n            mergeIntoEntity,\n            ...entityLikes,\n        )\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike)\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.save<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(\n        entityOrEntities: Entity | Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        return this.manager.remove(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.softRemove<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.recover<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.manager.insert(this.metadata.target as any, entity)\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>\n            | FindOptionsWhere<Entity>[],\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.update(\n            this.metadata.target,\n            criteria,\n            partialEntity,\n        )\n    }\n\n    /**\n     * Updates all entities of target type, setting fields from supplied partial entity.\n     * This is a primitive operation without cascades, relations or other operations included.\n     * Executes fast and efficient UPDATE query without WHERE clause.\n     *\n     * WARNING! This method updates ALL rows in the target table.\n     */\n    updateAll(\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.updateAll(this.metadata.target, partialEntity)\n    }\n\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    upsert(\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        return this.manager.upsert(\n            this.metadata.target as any,\n            entityOrEntities,\n            conflictPathsOrOptions,\n        )\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>\n            | FindOptionsWhere<Entity>[],\n    ): Promise<DeleteResult> {\n        return this.manager.delete(this.metadata.target, criteria)\n    }\n\n    /**\n     * Deletes all entities of target type.\n     * This is a primitive operation without cascades, relations or other operations included.\n     * Executes fast and efficient DELETE query without WHERE clause.\n     *\n     * WARNING! This method deletes ALL rows in the target table.\n     */\n    deleteAll(): Promise<DeleteResult> {\n        return this.manager.deleteAll(this.metadata.target)\n    }\n\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    softDelete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>\n            | FindOptionsWhere<Entity>[],\n    ): Promise<UpdateResult> {\n        return this.manager.softDelete(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    restore(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>\n            | FindOptionsWhere<Entity>[],\n    ): Promise<UpdateResult> {\n        return this.manager.restore(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Checks whether any entity exists that matches the given options.\n     *\n     * @deprecated use `exists` method instead, for example:\n     *\n     * .exists()\n     */\n    exist(options?: FindManyOptions<Entity>): Promise<boolean> {\n        return this.manager.exists(this.metadata.target, options)\n    }\n\n    /**\n     * Checks whether any entity exists that matches the given options.\n     */\n    exists(options?: FindManyOptions<Entity>): Promise<boolean> {\n        return this.manager.exists(this.metadata.target, options)\n    }\n\n    /**\n     * Checks whether any entity exists that matches the given conditions.\n     */\n    existsBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<boolean> {\n        return this.manager.existsBy(this.metadata.target, where)\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        return this.manager.countBy(this.metadata.target, where)\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.sum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.average(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.minimum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.maximum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find(options?: FindManyOptions<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds(ids: any[]): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne(options: FindOneOptions<Entity>): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     *\n     * @see [Official docs](https://typeorm.io/repository-api) for examples.\n     */\n    query<T = any>(query: string, parameters?: any[]): Promise<T> {\n        return this.manager.query(query, parameters)\n    }\n\n    /**\n     * Tagged template function that executes raw SQL query and returns raw database results.\n     * Template expressions are automatically transformed into database parameters.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     * Note: Don't call this as a regular function, it is meant to be used with backticks to tag a template literal.\n     * Example: repository.sql`SELECT * FROM table_name WHERE id = ${id}`\n     */\n    async sql<T = any>(\n        strings: TemplateStringsArray,\n        ...values: unknown[]\n    ): Promise<T> {\n        const { query, parameters } = buildSqlTag({\n            driver: this.manager.connection.driver,\n            strings: strings,\n            expressions: values,\n        })\n\n        return await this.query(query, parameters)\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target)\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.increment(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.decrement(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Extends repository with provided functions.\n     */\n    extend<CustomRepository>(\n        customs: CustomRepository & ThisType<this & CustomRepository>,\n    ): this & CustomRepository {\n        // return {\n        //     ...this,\n        //     ...custom\n        // };\n        const thisRepo: any = this.constructor\n        const { target, manager, queryRunner } = this\n        const ChildClass = class extends thisRepo {\n            constructor(\n                target: EntityTarget<Entity>,\n                manager: EntityManager,\n                queryRunner?: QueryRunner,\n            ) {\n                super(target, manager, queryRunner)\n            }\n        }\n        for (const custom in customs)\n            ChildClass.prototype[custom] = customs[custom]\n        return new ChildClass(target, manager, queryRunner) as any\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9422, "column": 0}, "map": {"version":3,"file":"MongoRepository.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/repository/MongoRepository.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { Repository } from \"./Repository\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { TypeORMError } from \"../error/TypeORMError\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\n\nimport {\n    CreateIndexesOptions,\n    ObjectId,\n    ReplaceOptions,\n    //\n    AggregateOptions,\n    AggregationCursor,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    BulkWriteResult,\n    Collection,\n    CollStats,\n    CollStatsOptions,\n    CommandOperationOptions,\n    CountOptions,\n    DeleteOptions,\n    DeleteResult,\n    Document,\n    Filter,\n    FilterOperators,\n    FindCursor,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    FindOneAndUpdateOptions,\n    IndexDescription,\n    InsertManyResult,\n    InsertOneOptions,\n    InsertOneResult,\n    ListIndexesCursor,\n    ListIndexesOptions,\n    OrderedBulkOperation,\n    UnorderedBulkOperation,\n    UpdateFilter,\n    UpdateOptions,\n    UpdateResult,\n    CountDocumentsOptions,\n} from \"../driver/mongodb/typings\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\n\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nexport class MongoRepository<\n    Entity extends ObjectLiteral,\n> extends Repository<Entity> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: MongoEntityManager\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n    }\n\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    createQueryBuilder(\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(\n        options?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    findBy(where: any): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(where: any): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    findByIds(ids: any[], options?: any): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, options)\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    async findOne(\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy(where: any): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(where: any): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<T = any>(query?: Filter<Entity>): FindCursor<T> {\n        return this.manager.createCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor(query?: Filter<Entity>): FindCursor<Entity> {\n        return this.manager.createEntityCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<R = any>(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<R> {\n        return this.manager.aggregate<R>(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregateEntity(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite(\n        operations: AnyBulkWriteOperation[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        return this.manager.bulkWrite(this.metadata.target, operations, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.count(this.metadata.target, query || {}, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countDocuments(\n        query?: ObjectLiteral,\n        options?: CountDocumentsOptions,\n    ): Promise<number> {\n        return this.manager.countDocuments(\n            this.metadata.target,\n            query || {},\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.countBy(this.metadata.target, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex(\n        fieldOrSpec: string | any,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        return this.manager.createCollectionIndex(\n            this.metadata.target,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes(indexSpecs: IndexDescription[]): Promise<string[]> {\n        return this.manager.createCollectionIndexes(\n            this.metadata.target,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteMany(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteOne(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct(\n        key: string,\n        query: ObjectLiteral,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.distinct(\n            this.metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex(\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.dropCollectionIndex(\n            this.metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes(): Promise<any> {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete(\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document | null> {\n        return this.manager.findOneAndDelete(\n            this.metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace(\n        query: ObjectLiteral,\n        replacement: Object,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document | null> {\n        return this.manager.findOneAndReplace(\n            this.metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate(\n        query: ObjectLiteral,\n        update: Object,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document | null> {\n        return this.manager.findOneAndUpdate(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes(): Promise<any> {\n        return this.manager.collectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists(indexes: string | string[]): Promise<boolean> {\n        return this.manager.collectionIndexExists(\n            this.metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\n        return this.manager.collectionIndexInformation(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\n        return this.manager.initializeOrderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        return this.manager.initializeUnorderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany(\n        docs: ObjectLiteral[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult<Document>> {\n        return this.manager.insertMany(this.metadata.tableName, docs, options)\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne(\n        doc: ObjectLiteral,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        return this.manager.insertOne(this.metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped(): Promise<any> {\n        return this.manager.isCapped(this.metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(options?: ListIndexesOptions): ListIndexesCursor {\n        return this.manager.listCollectionIndexes(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename(\n        newName: string,\n        options?: { dropTarget?: boolean },\n    ): Promise<Collection<Document>> {\n        return this.manager.rename(this.metadata.tableName, newName, options)\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne(\n        query: ObjectLiteral,\n        doc: ObjectLiteral,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.replaceOne(\n            this.metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats(options?: CollStatsOptions): Promise<CollStats> {\n        return this.manager.stats(this.metadata.tableName, options)\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateMany(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateOne(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9687, "column": 0}, "map": {"version":3,"file":"TreeRepository.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/repository/TreeRepository.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { TypeORMError } from \"../error/TypeORMError\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { FindTreeOptions } from \"../find-options/FindTreeOptions\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { TreeRepositoryUtils } from \"../util/TreeRepositoryUtils\"\nimport { Repository } from \"./Repository\"\n\n/**\n * Repository with additional functions to work with trees.\n *\n * @see Repository\n */\nexport class TreeRepository<\n    Entity extends ObjectLiteral,\n> extends Repository<Entity> {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets complete trees for all roots in the table.\n     */\n    async findTrees(options?: FindTreeOptions): Promise<Entity[]> {\n        const roots = await this.findRoots(options)\n        await Promise.all(\n            roots.map((root) => this.findDescendantsTree(root, options)),\n        )\n        return roots\n    }\n\n    /**\n     * Roots are entities that have no ancestors. Finds them all.\n     */\n    findRoots(options?: FindTreeOptions): Promise<Entity[]> {\n        const escapeAlias = (alias: string) =>\n            this.manager.connection.driver.escape(alias)\n        const escapeColumn = (column: string) =>\n            this.manager.connection.driver.escape(column)\n\n        const joinColumn = this.metadata.treeParentRelation!.joinColumns[0]\n        const parentPropertyName =\n            joinColumn.givenDatabaseName || joinColumn.databaseName\n\n        const qb = this.createQueryBuilder(\"treeEntity\")\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options)\n\n        return qb\n            .where(\n                `${escapeAlias(\"treeEntity\")}.${escapeColumn(\n                    parentPropertyName,\n                )} IS NULL`,\n            )\n            .getMany()\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\n     */\n    findDescendants(\n        entity: Entity,\n        options?: FindTreeOptions,\n    ): Promise<Entity[]> {\n        const qb = this.createDescendantsQueryBuilder(\n            \"treeEntity\",\n            \"treeClosure\",\n            entity,\n        )\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options)\n        return qb.getMany()\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\n     */\n    async findDescendantsTree(\n        entity: Entity,\n        options?: FindTreeOptions,\n    ): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n\n        const qb: SelectQueryBuilder<Entity> =\n            this.createDescendantsQueryBuilder(\n                \"treeEntity\",\n                \"treeClosure\",\n                entity,\n            )\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options)\n\n        const entities = await qb.getRawAndEntities()\n        const relationMaps = TreeRepositoryUtils.createRelationMaps(\n            this.manager,\n            this.metadata,\n            \"treeEntity\",\n            entities.raw,\n        )\n        TreeRepositoryUtils.buildChildrenEntityTree(\n            this.metadata,\n            entity,\n            entities.entities,\n            relationMaps,\n            {\n                depth: -1,\n                ...options,\n            },\n        )\n\n        return entity\n    }\n\n    /**\n     * Gets number of descendants of the entity.\n     */\n    countDescendants(entity: Entity): Promise<number> {\n        return this.createDescendantsQueryBuilder(\n            \"treeEntity\",\n            \"treeClosure\",\n            entity,\n        ).getCount()\n    }\n\n    /**\n     * Creates a query builder used to get descendants of the entities in a tree.\n     */\n    createDescendantsQueryBuilder(\n        alias: string,\n        closureTableAlias: string,\n        entity: Entity,\n    ): SelectQueryBuilder<Entity> {\n        // create shortcuts for better readability\n        const escape = (alias: string) =>\n            this.manager.connection.driver.escape(alias)\n\n        if (this.metadata.treeType === \"closure-table\") {\n            const joinCondition =\n                this.metadata.closureJunctionTable.descendantColumns\n                    .map((column) => {\n                        return (\n                            escape(closureTableAlias) +\n                            \".\" +\n                            escape(column.propertyPath) +\n                            \" = \" +\n                            escape(alias) +\n                            \".\" +\n                            escape(column.referencedColumn!.propertyPath)\n                        )\n                    })\n                    .join(\" AND \")\n\n            const parameters: ObjectLiteral = {}\n            const whereCondition =\n                this.metadata.closureJunctionTable.ancestorColumns\n                    .map((column) => {\n                        parameters[column.referencedColumn!.propertyName] =\n                            column.referencedColumn!.getEntityValue(entity)\n                        return (\n                            escape(closureTableAlias) +\n                            \".\" +\n                            escape(column.propertyPath) +\n                            \" = :\" +\n                            column.referencedColumn!.propertyName\n                        )\n                    })\n                    .join(\" AND \")\n\n            return this.createQueryBuilder(alias)\n                .innerJoin(\n                    this.metadata.closureJunctionTable.tableName,\n                    closureTableAlias,\n                    joinCondition,\n                )\n                .where(whereCondition)\n                .setParameters(parameters)\n        } else if (this.metadata.treeType === \"nested-set\") {\n            const whereCondition =\n                alias +\n                \".\" +\n                this.metadata.nestedSetLeftColumn!.propertyPath +\n                \" BETWEEN \" +\n                \"joined.\" +\n                this.metadata.nestedSetLeftColumn!.propertyPath +\n                \" AND joined.\" +\n                this.metadata.nestedSetRightColumn!.propertyPath\n            const parameters: ObjectLiteral = {}\n            const joinCondition = this.metadata\n                .treeParentRelation!.joinColumns.map((joinColumn) => {\n                    const parameterName =\n                        joinColumn.referencedColumn!.propertyPath.replace(\n                            \".\",\n                            \"_\",\n                        )\n                    parameters[parameterName] =\n                        joinColumn.referencedColumn!.getEntityValue(entity)\n                    return (\n                        \"joined.\" +\n                        joinColumn.referencedColumn!.propertyPath +\n                        \" = :\" +\n                        parameterName\n                    )\n                })\n                .join(\" AND \")\n\n            return this.createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", whereCondition)\n                .where(joinCondition, parameters)\n        } else if (this.metadata.treeType === \"materialized-path\") {\n            return this.createQueryBuilder(alias).where((qb) => {\n                const subQuery = qb\n                    .subQuery()\n                    .select(\n                        `${this.metadata.targetName}.${\n                            this.metadata.materializedPathColumn!.propertyPath\n                        }`,\n                        \"path\",\n                    )\n                    .from(this.metadata.target, this.metadata.targetName)\n                    .whereInIds(this.metadata.getEntityIdMap(entity))\n\n                if (\n                    DriverUtils.isSQLiteFamily(this.manager.connection.driver)\n                ) {\n                    return `${alias}.${\n                        this.metadata.materializedPathColumn!.propertyPath\n                    } LIKE ${subQuery.getQuery()} || '%'`\n                } else {\n                    return `${alias}.${\n                        this.metadata.materializedPathColumn!.propertyPath\n                    } LIKE NULLIF(CONCAT(${subQuery.getQuery()}, '%'), '%')`\n                }\n            })\n        }\n\n        throw new TypeORMError(`Supported only in tree entities`)\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\n     */\n    findAncestors(\n        entity: Entity,\n        options?: FindTreeOptions,\n    ): Promise<Entity[]> {\n        const qb = this.createAncestorsQueryBuilder(\n            \"treeEntity\",\n            \"treeClosure\",\n            entity,\n        )\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options)\n        return qb.getMany()\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\n     */\n    async findAncestorsTree(\n        entity: Entity,\n        options?: FindTreeOptions,\n    ): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        const qb = this.createAncestorsQueryBuilder(\n            \"treeEntity\",\n            \"treeClosure\",\n            entity,\n        )\n        FindOptionsUtils.applyOptionsToTreeQueryBuilder(qb, options)\n\n        const entities = await qb.getRawAndEntities()\n        const relationMaps = TreeRepositoryUtils.createRelationMaps(\n            this.manager,\n            this.metadata,\n            \"treeEntity\",\n            entities.raw,\n        )\n        TreeRepositoryUtils.buildParentEntityTree(\n            this.metadata,\n            entity,\n            entities.entities,\n            relationMaps,\n        )\n        return entity\n    }\n\n    /**\n     * Gets number of ancestors of the entity.\n     */\n    countAncestors(entity: Entity): Promise<number> {\n        return this.createAncestorsQueryBuilder(\n            \"treeEntity\",\n            \"treeClosure\",\n            entity,\n        ).getCount()\n    }\n\n    /**\n     * Creates a query builder used to get ancestors of the entities in the tree.\n     */\n    createAncestorsQueryBuilder(\n        alias: string,\n        closureTableAlias: string,\n        entity: Entity,\n    ): SelectQueryBuilder<Entity> {\n        // create shortcuts for better readability\n        // const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n\n        if (this.metadata.treeType === \"closure-table\") {\n            const joinCondition =\n                this.metadata.closureJunctionTable.ancestorColumns\n                    .map((column) => {\n                        return (\n                            closureTableAlias +\n                            \".\" +\n                            column.propertyPath +\n                            \" = \" +\n                            alias +\n                            \".\" +\n                            column.referencedColumn!.propertyPath\n                        )\n                    })\n                    .join(\" AND \")\n\n            const parameters: ObjectLiteral = {}\n            const whereCondition =\n                this.metadata.closureJunctionTable.descendantColumns\n                    .map((column) => {\n                        parameters[column.referencedColumn!.propertyName] =\n                            column.referencedColumn!.getEntityValue(entity)\n                        return (\n                            closureTableAlias +\n                            \".\" +\n                            column.propertyPath +\n                            \" = :\" +\n                            column.referencedColumn!.propertyName\n                        )\n                    })\n                    .join(\" AND \")\n\n            return this.createQueryBuilder(alias)\n                .innerJoin(\n                    this.metadata.closureJunctionTable.tableName,\n                    closureTableAlias,\n                    joinCondition,\n                )\n                .where(whereCondition)\n                .setParameters(parameters)\n        } else if (this.metadata.treeType === \"nested-set\") {\n            const joinCondition =\n                \"joined.\" +\n                this.metadata.nestedSetLeftColumn!.propertyPath +\n                \" BETWEEN \" +\n                alias +\n                \".\" +\n                this.metadata.nestedSetLeftColumn!.propertyPath +\n                \" AND \" +\n                alias +\n                \".\" +\n                this.metadata.nestedSetRightColumn!.propertyPath\n            const parameters: ObjectLiteral = {}\n            const whereCondition = this.metadata\n                .treeParentRelation!.joinColumns.map((joinColumn) => {\n                    const parameterName =\n                        joinColumn.referencedColumn!.propertyPath.replace(\n                            \".\",\n                            \"_\",\n                        )\n                    parameters[parameterName] =\n                        joinColumn.referencedColumn!.getEntityValue(entity)\n                    return (\n                        \"joined.\" +\n                        joinColumn.referencedColumn!.propertyPath +\n                        \" = :\" +\n                        parameterName\n                    )\n                })\n                .join(\" AND \")\n\n            return this.createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", joinCondition)\n                .where(whereCondition, parameters)\n        } else if (this.metadata.treeType === \"materialized-path\") {\n            // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');\n            return this.createQueryBuilder(alias).where((qb) => {\n                const subQuery = qb\n                    .subQuery()\n                    .select(\n                        `${this.metadata.targetName}.${\n                            this.metadata.materializedPathColumn!.propertyPath\n                        }`,\n                        \"path\",\n                    )\n                    .from(this.metadata.target, this.metadata.targetName)\n                    .whereInIds(this.metadata.getEntityIdMap(entity))\n\n                if (\n                    DriverUtils.isSQLiteFamily(this.manager.connection.driver)\n                ) {\n                    return `${subQuery.getQuery()} LIKE ${alias}.${\n                        this.metadata.materializedPathColumn!.propertyPath\n                    } || '%'`\n                } else {\n                    return `${subQuery.getQuery()} LIKE CONCAT(${alias}.${\n                        this.metadata.materializedPathColumn!.propertyPath\n                    }, '%')`\n                }\n            })\n        }\n\n        throw new TypeORMError(`Supported only in tree entities`)\n    }\n\n    /**\n     * Moves entity to the children of then given entity.\n     *\n    move(entity: Entity, to: Entity): Promise<void> {\n        return Promise.resolve();\n    } */\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9852, "column": 0}, "map": {"version":3,"file":"AbstractRepository.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/repository/AbstractRepository.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { Repository } from \"./Repository\"\nimport { TreeRepository } from \"./TreeRepository\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { CustomRepositoryDoesNotHaveEntityError } from \"../error/CustomRepositoryDoesNotHaveEntityError\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { CustomRepositoryNotFoundError } from \"../error/CustomRepositoryNotFoundError\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\n\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @deprecated use Repository.extend function to create a custom repository\n */\nexport class AbstractRepository<Entity extends ObjectLiteral> {\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity.\n     */\n    protected manager: EntityManager\n\n    // -------------------------------------------------------------------------\n    // Protected Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the original ORM repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get repository(): Repository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any)\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\n\n        return this.manager.getRepository<Entity>(target)\n    }\n\n    /**\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get treeRepository(): TreeRepository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any)\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\n\n        return this.manager.getTreeRepository<Entity>(target)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a SQL query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected createQueryBuilder(alias: string): SelectQueryBuilder<Entity> {\n        const target = this.getCustomRepositoryTarget(this.constructor)\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\n\n        return this.manager\n            .getRepository<Entity>(target)\n            .createQueryBuilder(alias)\n    }\n\n    /**\n     * Creates a new query builder for the given entity that can be used to build a SQL query.\n     */\n    protected createQueryBuilderFor<T extends ObjectLiteral>(\n        entity: ObjectType<T>,\n        alias: string,\n    ): SelectQueryBuilder<T> {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias)\n    }\n\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    protected getRepositoryFor<T extends ObjectLiteral>(\n        entity: ObjectType<T>,\n    ): Repository<T> {\n        return this.manager.getRepository(entity)\n    }\n\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    protected getTreeRepositoryFor<T extends ObjectLiteral>(\n        entity: ObjectType<T>,\n    ): TreeRepository<T> {\n        return this.manager.getTreeRepository(entity)\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    private getCustomRepositoryTarget(\n        customRepository: any,\n    ): EntityTarget<any> | undefined {\n        const entityRepositoryMetadataArgs =\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\n                return (\n                    repository.target ===\n                    (typeof customRepository === \"function\"\n                        ? customRepository\n                        : (customRepository as any).constructor)\n                )\n            })\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository)\n\n        return entityRepositoryMetadataArgs.entity\n    }\n}\n"],"names":[],"mappings":";;;;;AAMA,MAAA,sGAAwG;AACxG,MAAA,kCAAmD;AACnD,MAAA,oFAAsF;AAGtF;;;;;;GAMG,CACH,MAAa,kBAAkB;IAU3B,4EAA4E;IAC5E,sBAAsB;IACtB,4EAA4E;IAE5E;;;OAGG,CACH,IAAc,UAAU,GAAA;QACpB,MAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAA;QAC1D,IAAI,CAAC,MAAM,EACP,MAAM,IAAI,yCAAA,sCAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAEtE,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAS,MAAM,CAAC,CAAA;IACrD,CAAC;IAED;;;OAGG,CACH,IAAc,cAAc,GAAA;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAA;QAC1D,IAAI,CAAC,MAAM,EACP,MAAM,IAAI,yCAAA,sCAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAEtE,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAS,MAAM,CAAC,CAAA;IACzD,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;;OAGG,CACO,kBAAkB,CAAC,KAAa,EAAA;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC/D,IAAI,CAAC,MAAM,EACP,MAAM,IAAI,yCAAA,sCAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAEtE,OAAO,IAAI,CAAC,OAAO,CACd,aAAa,CAAS,MAAM,CAAC,CAC7B,kBAAkB,CAAC,KAAK,CAAC,CAAA;IAClC,CAAC;IAED;;OAEG,CACO,qBAAqB,CAC3B,MAAqB,EACrB,KAAa,EAAA;QAEb,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;IAClE,CAAC;IAED;;OAEG,CACO,gBAAgB,CACtB,MAAqB,EAAA;QAErB,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IAC7C,CAAC;IAED;;OAEG,CACO,oBAAoB,CAC1B,MAAqB,EAAA;QAErB,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;IACjD,CAAC;IAED,4EAA4E;IAC5E,kBAAkB;IAClB,4EAA4E;IAE5E;;;OAGG,CACK,yBAAyB,CAC7B,gBAAqB,EAAA;QAErB,MAAM,4BAA4B,GAC9B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;YAC5D,OAAO,AACH,UAAU,CAAC,MAAM,KACjB,CAAC,OAAO,gBAAgB,KAAK,UAAU,GACjC,gBAAgB,GACf,gBAAwB,CAAC,WAAW,CAAC,CAC/C,CAAA;QACL,CAAC,CAAC,CAAA;QACN,IAAI,CAAC,4BAA4B,EAC7B,MAAM,IAAI,gCAAA,6BAA6B,CAAC,gBAAgB,CAAC,CAAA;QAE7D,OAAO,4BAA4B,CAAC,MAAM,CAAA;IAC9C,CAAC;CACJ;AA7GD,QAAA,kBAAA,GAAA,mBA6GC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9932, "column": 0}, "map": {"version":3,"file":"BaseEntity.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/repository/BaseEntity.ts"],"sourcesContent":["import { Repository } from \"./Repository\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { SaveOptions } from \"./SaveOptions\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { RemoveOptions } from \"./RemoveOptions\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { DataSource } from \"../data-source\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { UpsertOptions } from \"./UpsertOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Base abstract entity for all entities, used in ActiveRecord patterns.\n */\nexport class BaseEntity {\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * DataSource used in all static methods of the BaseEntity.\n     */\n    private static dataSource: DataSource | null\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(): boolean {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().hasId(this)\n    }\n\n    /**\n     * Saves current entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save(options?: SaveOptions): Promise<this> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().save(this, options)\n    }\n\n    /**\n     * Removes current entity from the database.\n     */\n    remove(options?: RemoveOptions): Promise<this> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().remove(this, options) as Promise<this>\n    }\n\n    /**\n     * Records the delete date of current entity.\n     */\n    softRemove(options?: SaveOptions): Promise<this> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().softRemove(this, options)\n    }\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover(options?: SaveOptions): Promise<this> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().recover(this, options)\n    }\n\n    /**\n     * Reloads entity data from the database.\n     */\n    async reload(): Promise<void> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        const id = baseEntity.getRepository().metadata.getEntityIdMap(this)\n        if (!id) {\n            throw new Error(\n                `Entity doesn't have id-s set, cannot reload entity`,\n            )\n        }\n        const reloadedEntity: BaseEntity = await baseEntity\n            .getRepository()\n            .findOneByOrFail(id)\n\n        ObjectUtils.assign(this, reloadedEntity)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets DataSource to be used by entity.\n     */\n    static useDataSource(dataSource: DataSource | null) {\n        this.dataSource = dataSource\n    }\n\n    /**\n     * Gets current entity's Repository.\n     */\n    static getRepository<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n    ): Repository<T> {\n        const dataSource = (this as typeof BaseEntity).dataSource\n        if (!dataSource)\n            throw new Error(`DataSource is not set for this entity.`)\n        return dataSource.getRepository<T>(this)\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    static get target(): EntityTarget<any> {\n        return this.getRepository().target\n    }\n\n    /**\n     * Checks entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    static hasId(entity: BaseEntity): boolean {\n        return this.getRepository().hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    static getId<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: T,\n    ): any {\n        return this.getRepository<T>().getId(entity)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    static createQueryBuilder<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        alias?: string,\n    ): SelectQueryBuilder<T> {\n        return this.getRepository<T>().createQueryBuilder(alias)\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    static create<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n    ): T\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityLikeArray: DeepPartial<T>[],\n    ): T[]\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityLike: DeepPartial<T>,\n    ): T\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities?: any,\n    ) {\n        return this.getRepository<T>().create(entityOrEntities)\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    static merge<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        mergeIntoEntity: T,\n        ...entityLikes: DeepPartial<T>[]\n    ): T {\n        return this.getRepository<T>().merge(\n            mergeIntoEntity,\n            ...entityLikes,\n        ) as T\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    static preload<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityLike: DeepPartial<T>,\n    ): Promise<T | undefined> {\n        const thisRepository = this.getRepository<T>()\n        return thisRepository.preload(entityLike)\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entities: DeepPartial<T>[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: DeepPartial<T>,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Saves one or many given entities.\n     */\n    static save<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities: DeepPartial<T> | DeepPartial<T>[],\n        options?: SaveOptions,\n    ) {\n        return this.getRepository<T>().save(entityOrEntities as any, options)\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    static remove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entities: T[],\n        options?: RemoveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    static remove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: T,\n        options?: RemoveOptions,\n    ): Promise<T>\n\n    /**\n     * Removes one or many given entities.\n     */\n    static remove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities: T | T[],\n        options?: RemoveOptions,\n    ) {\n        return this.getRepository<T>().remove(entityOrEntities as any, options)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ) {\n        return this.getRepository<T>().softRemove(\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    static insert<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: QueryDeepPartialEntity<T> | QueryDeepPartialEntity<T>[],\n    ): Promise<InsertResult> {\n        return this.getRepository<T>().insert(entity)\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    static update<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<T>,\n        partialEntity: QueryDeepPartialEntity<T>,\n    ): Promise<UpdateResult> {\n        return this.getRepository<T>().update(criteria, partialEntity)\n    }\n\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    static upsert<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities:\n            | QueryDeepPartialEntity<T>\n            | QueryDeepPartialEntity<T>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<T>,\n    ): Promise<InsertResult> {\n        return this.getRepository<T>().upsert(\n            entityOrEntities,\n            conflictPathsOrOptions,\n        )\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike remove method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    static delete<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<T>,\n    ): Promise<DeleteResult> {\n        return this.getRepository<T>().delete(criteria)\n    }\n\n    /**\n     * Checks whether any entity exists that matches the given options.\n     */\n    static exists<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options?: FindManyOptions<T>,\n    ): Promise<boolean> {\n        return this.getRepository<T>().exists(options)\n    }\n\n    /**\n     * Checks whether any entity exists that matches the given conditions.\n     */\n    static existsBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<boolean> {\n        return this.getRepository<T>().existsBy(where)\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    static count<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options?: FindManyOptions<T>,\n    ): Promise<number> {\n        return this.getRepository<T>().count(options)\n    }\n\n    /**\n     * Counts entities that match given WHERE conditions.\n     */\n    static countBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<number> {\n        return this.getRepository<T>().countBy(where)\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    static sum<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        columnName: PickKeysByType<T, number>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number | null> {\n        return this.getRepository<T>().sum(columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    static average<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        columnName: PickKeysByType<T, number>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number | null> {\n        return this.getRepository<T>().average(columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    static minimum<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        columnName: PickKeysByType<T, number>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number | null> {\n        return this.getRepository<T>().minimum(columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    static maximum<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        columnName: PickKeysByType<T, number>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number | null> {\n        return this.getRepository<T>().maximum(columnName, where)\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    static find<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options?: FindManyOptions<T>,\n    ): Promise<T[]> {\n        return this.getRepository<T>().find(options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     */\n    static findBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<T[]> {\n        return this.getRepository<T>().findBy(where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options?: FindManyOptions<T>,\n    ): Promise<[T[], number]> {\n        return this.getRepository<T>().findAndCount(options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCountBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<[T[], number]> {\n        return this.getRepository<T>().findAndCountBy(where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    static findByIds<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        ids: any[],\n    ): Promise<T[]> {\n        return this.getRepository<T>().findByIds(ids)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options: FindOneOptions<T>,\n    ): Promise<T | null> {\n        return this.getRepository<T>().findOne(options)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<T | null> {\n        return this.getRepository<T>().findOneBy(where)\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    static findOneById<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        id: string | number | Date | ObjectId,\n    ): Promise<T | null> {\n        return this.getRepository<T>().findOneById(id)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneOrFail<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options: FindOneOptions<T>,\n    ): Promise<T> {\n        return this.getRepository<T>().findOneOrFail(options)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneByOrFail<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<T> {\n        return this.getRepository<T>().findOneByOrFail(where)\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    static query<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        query: string,\n        parameters?: any[],\n    ): Promise<any> {\n        return this.getRepository<T>().query(query, parameters)\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     */\n    static clear<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n    ): Promise<void> {\n        return this.getRepository<T>().clear()\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10219, "column": 0}, "map": {"version":3,"file":"RemoveOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/repository/RemoveOptions.ts"],"sourcesContent":["/**\n * Special options passed to Repository#remove and Repository#delete methods.\n */\nexport interface RemoveOptions {\n    /**\n     * Additional data to be passed with remove method.\n     * This data can be used in subscribers then.\n     */\n    data?: any\n\n    /**\n     * Indicates if listeners and subscribers are called for this operation.\n     * By default they are enabled, you can disable them by setting { listeners: false } in save/remove options.\n     */\n    listeners?: boolean\n\n    /**\n     * By default transactions are enabled and all queries in persistence operation are wrapped into the transaction.\n     * You can disable this behaviour by setting { transaction: false } in the persistence options.\n     */\n    transaction?: boolean\n\n    /**\n     * Breaks save execution into given number of chunks.\n     * For example, if you want to save 100,000 objects but you have issues with saving them,\n     * you can break them into 10 groups of 10,000 objects (by setting { chunk: 10000 }) and save each group separately.\n     * This option is needed to perform very big insertions when you have issues with underlying driver parameter number limitation.\n     */\n    chunk?: number\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10228, "column": 0}, "map": {"version":3,"file":"SaveOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/repository/SaveOptions.ts"],"sourcesContent":["/**\n * Special options passed to Repository#save, Repository#insert and Repository#update methods.\n */\nexport interface SaveOptions {\n    /**\n     * Additional data to be passed with persist method.\n     * This data can be used in subscribers then.\n     */\n    data?: any\n\n    /**\n     * Indicates if listeners and subscribers are called for this operation.\n     * By default they are enabled, you can disable them by setting { listeners: false } in save/remove options.\n     */\n    listeners?: boolean\n\n    /**\n     * By default transactions are enabled and all queries in persistence operation are wrapped into the transaction.\n     * You can disable this behaviour by setting { transaction: false } in the persistence options.\n     */\n    transaction?: boolean\n\n    /**\n     * Breaks save execution into chunks of a given size.\n     * For example, if you want to save 100,000 objects but you have issues with saving them,\n     * you can break them into 10 groups of 10,000 objects (by setting { chunk: 10000 }) and save each group separately.\n     * This option is needed to perform very big insertions when you have issues with underlying driver parameter number limitation.\n     */\n    chunk?: number\n\n    /**\n     * Flag to determine whether the entity that is being persisted\n     * should be reloaded during the persistence operation.\n     *\n     * It will work only on databases which does not support RETURNING / OUTPUT statement.\n     * Enabled by default.\n     */\n    reload?: boolean\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10237, "column": 0}, "map": {"version":3,"file":"EntityMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/EntityMetadata.ts"],"sourcesContent":["import { QueryRunner, SelectQueryBuilder } from \"..\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { CannotCreateEntityIdMapError } from \"../error/CannotCreateEntityIdMapError\"\nimport { OrderByCondition } from \"../find-options/OrderByCondition\"\nimport { TableMetadataArgs } from \"../metadata-args/TableMetadataArgs\"\nimport { TreeMetadataArgs } from \"../metadata-args/TreeMetadataArgs\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { CheckMetadata } from \"./CheckMetadata\"\nimport { ColumnMetadata } from \"./ColumnMetadata\"\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\nimport { EntityListenerMetadata } from \"./EntityListenerMetadata\"\nimport { ExclusionMetadata } from \"./ExclusionMetadata\"\nimport { ForeignKeyMetadata } from \"./ForeignKeyMetadata\"\nimport { IndexMetadata } from \"./IndexMetadata\"\nimport { RelationCountMetadata } from \"./RelationCountMetadata\"\nimport { RelationIdMetadata } from \"./RelationIdMetadata\"\nimport { RelationMetadata } from \"./RelationMetadata\"\nimport { TableType } from \"./types/TableTypes\"\nimport { TreeType } from \"./types/TreeTypes\"\nimport { UniqueMetadata } from \"./UniqueMetadata\"\nimport { ClosureTreeOptions } from \"./types/ClosureTreeOptions\"\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { shorten } from \"../util/StringUtils\"\n\n/**\n * Contains all entity metadata.\n */\nexport class EntityMetadata {\n    readonly \"@instanceof\" = Symbol.for(\"EntityMetadata\")\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection where this entity metadata is created.\n     */\n    connection: DataSource\n\n    /**\n     * Metadata arguments used to build this entity metadata.\n     */\n    tableMetadataArgs: TableMetadataArgs\n\n    /**\n     * If entity's table is a closure-typed table, then this entity will have a closure junction table metadata.\n     */\n    closureJunctionTable: EntityMetadata\n\n    /**\n     * If this is entity metadata for a junction closure table then its owner closure table metadata will be set here.\n     */\n    parentClosureEntityMetadata: EntityMetadata\n\n    /**\n     * Parent's entity metadata. Used in inheritance patterns.\n     */\n    parentEntityMetadata: EntityMetadata\n\n    /**\n     * Children entity metadatas. Used in inheritance patterns.\n     */\n    childEntityMetadatas: EntityMetadata[] = []\n\n    /**\n     * All \"inheritance tree\" from a target entity.\n     * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].\n     * It also contains child entities for single table inheritance.\n     */\n    inheritanceTree: Function[] = []\n\n    /**\n     * Table type. Tables can be closure, junction, etc.\n     */\n    tableType: TableType = \"regular\"\n\n    /**\n     * Target class to which this entity metadata is bind.\n     * Note, that when using table inheritance patterns target can be different rather then table's target.\n     * For virtual tables which lack of real entity (like junction tables) target is equal to their table name.\n     */\n    target: Function | string\n\n    /**\n     * Gets the name of the target.\n     */\n    targetName: string\n\n    /**\n     * Entity's name.\n     * Equal to entity target class's name if target is set to table.\n     * If target class is not then then it equals to table name.\n     */\n    name: string\n\n    /**\n     * View's expression.\n     * Used in views\n     */\n    expression?: string | ((connection: DataSource) => SelectQueryBuilder<any>)\n\n    /**\n     * View's dependencies.\n     * Used in views\n     */\n    dependsOn?: Set<Function | string>\n\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n    withoutRowid?: boolean = false\n\n    /**\n     * Original user-given table name (taken from schema or @Entity(tableName) decorator).\n     * If user haven't specified a table name this property will be undefined.\n     */\n    givenTableName?: string\n\n    /**\n     * Entity table name in the database.\n     * This is final table name of the entity.\n     * This name already passed naming strategy, and generated based on\n     * multiple criteria, including user table name and global table prefix.\n     */\n    tableName: string\n\n    /**\n     * Entity table path. Contains database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    tablePath: string\n\n    /**\n     * Gets the table name without global table prefix.\n     * When querying table you need a table name with prefix, but in some scenarios,\n     * for example when you want to name a junction table that contains names of two other tables,\n     * you may want a table name without prefix.\n     */\n    tableNameWithoutPrefix: string\n\n    /**\n     * Indicates if schema will be synchronized for this entity or not.\n     */\n    synchronize: boolean = true\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     */\n    engine?: string\n\n    /**\n     * Database name.\n     */\n    database?: string\n\n    /**\n     * Schema name. Used in Postgres and Sql Server.\n     */\n    schema?: string\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    orderBy?: OrderByCondition\n\n    /**\n     * If this entity metadata's table using one of the inheritance patterns,\n     * then this will contain what pattern it uses.\n     */\n    inheritancePattern?: \"STI\" /*|\"CTI\"*/\n\n    /**\n     * Checks if there any non-nullable column exist in this entity.\n     */\n    hasNonNullableRelations: boolean = false\n\n    /**\n     * Indicates if this entity metadata of a junction table, or not.\n     * Junction table is a table created by many-to-many relationship.\n     *\n     * Its also possible to understand if entity is junction via tableType.\n     */\n    isJunction: boolean = false\n\n    /**\n     * Indicates if the entity should be instantiated using the constructor\n     * or via allocating a new object via `Object.create()`.\n     */\n    isAlwaysUsingConstructor: boolean = true\n\n    /**\n     * Indicates if this entity is a tree, what type of tree it is.\n     */\n    treeType?: TreeType\n\n    /**\n     * Indicates if this entity is a tree, what options of tree it has.\n     */\n    treeOptions?: ClosureTreeOptions\n\n    /**\n     * Checks if this table is a junction table of the closure table.\n     * This type is for tables that contain junction metadata of the closure tables.\n     */\n    isClosureJunction: boolean = false\n\n    /**\n     * Checks if entity's table has multiple primary columns.\n     */\n    hasMultiplePrimaryKeys: boolean = false\n\n    /**\n     * Indicates if this entity metadata has uuid generated columns.\n     */\n    hasUUIDGeneratedColumns: boolean = false\n\n    /**\n     * If this entity metadata is a child table of some table, it should have a discriminator value.\n     * Used to store a value in a discriminator column.\n     */\n    discriminatorValue?: string\n\n    /**\n     * Entity's column metadatas defined by user.\n     */\n    ownColumns: ColumnMetadata[] = []\n\n    /**\n     * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * Ancestor columns used only in closure junction tables.\n     */\n    ancestorColumns: ColumnMetadata[] = []\n\n    /**\n     * Descendant columns used only in closure junction tables.\n     */\n    descendantColumns: ColumnMetadata[] = []\n\n    /**\n     * All columns except for virtual columns.\n     */\n    nonVirtualColumns: ColumnMetadata[] = []\n\n    /**\n     * In the case if this entity metadata is junction table's entity metadata,\n     * this will contain all referenced columns of owner entity.\n     */\n    ownerColumns: ColumnMetadata[] = []\n\n    /**\n     * In the case if this entity metadata is junction table's entity metadata,\n     * this will contain all referenced columns of inverse entity.\n     */\n    inverseColumns: ColumnMetadata[] = []\n\n    /**\n     * Gets the column with generated flag.\n     */\n    generatedColumns: ColumnMetadata[] = []\n\n    /**\n     * Gets the object id column used with mongodb database.\n     */\n    objectIdColumn?: ColumnMetadata\n\n    /**\n     * Gets entity column which contains a create date value.\n     */\n    createDateColumn?: ColumnMetadata\n\n    /**\n     * Gets entity column which contains an update date value.\n     */\n    updateDateColumn?: ColumnMetadata\n\n    /**\n     * Gets entity column which contains a delete date value.\n     */\n    deleteDateColumn?: ColumnMetadata\n\n    /**\n     * Gets entity column which contains an entity version.\n     */\n    versionColumn?: ColumnMetadata\n\n    /**\n     * Gets the discriminator column used to store entity identificator in single-table inheritance tables.\n     */\n    discriminatorColumn?: ColumnMetadata\n\n    /**\n     * Special column that stores tree level in tree entities.\n     */\n    treeLevelColumn?: ColumnMetadata\n\n    /**\n     * Nested set's left value column.\n     * Used only in tree entities with nested set pattern applied.\n     */\n    nestedSetLeftColumn?: ColumnMetadata\n\n    /**\n     * Nested set's right value column.\n     * Used only in tree entities with nested set pattern applied.\n     */\n    nestedSetRightColumn?: ColumnMetadata\n\n    /**\n     * Materialized path column.\n     * Used only in tree entities with materialized path pattern applied.\n     */\n    materializedPathColumn?: ColumnMetadata\n\n    /**\n     * Gets the primary columns.\n     */\n    primaryColumns: ColumnMetadata[] = []\n\n    /**\n     * Entity's relation metadatas.\n     */\n    ownRelations: RelationMetadata[] = []\n\n    /**\n     * Relations of the entity, including relations that are coming from the embeddeds of this entity.\n     */\n    relations: RelationMetadata[] = []\n\n    /**\n     * List of eager relations this metadata has.\n     */\n    eagerRelations: RelationMetadata[] = []\n\n    /**\n     * List of eager relations this metadata has.\n     */\n    lazyRelations: RelationMetadata[] = []\n\n    /**\n     * Gets only one-to-one relations of the entity.\n     */\n    oneToOneRelations: RelationMetadata[] = []\n\n    /**\n     * Gets only owner one-to-one relations of the entity.\n     */\n    ownerOneToOneRelations: RelationMetadata[] = []\n\n    /**\n     * Gets only one-to-many relations of the entity.\n     */\n    oneToManyRelations: RelationMetadata[] = []\n\n    /**\n     * Gets only many-to-one relations of the entity.\n     */\n    manyToOneRelations: RelationMetadata[] = []\n\n    /**\n     * Gets only many-to-many relations of the entity.\n     */\n    manyToManyRelations: RelationMetadata[] = []\n\n    /**\n     * Gets only owner many-to-many relations of the entity.\n     */\n    ownerManyToManyRelations: RelationMetadata[] = []\n\n    /**\n     * Gets only owner one-to-one and many-to-one relations.\n     */\n    relationsWithJoinColumns: RelationMetadata[] = []\n\n    /**\n     * Tree parent relation. Used only in tree-tables.\n     */\n    treeParentRelation?: RelationMetadata\n\n    /**\n     * Tree children relation. Used only in tree-tables.\n     */\n    treeChildrenRelation?: RelationMetadata\n\n    /**\n     * Entity's relation id metadatas.\n     */\n    relationIds: RelationIdMetadata[] = []\n\n    /**\n     * Entity's relation id metadatas.\n     */\n    relationCounts: RelationCountMetadata[] = []\n\n    /**\n     * Entity's foreign key metadatas.\n     */\n    foreignKeys: ForeignKeyMetadata[] = []\n\n    /**\n     * Entity's embedded metadatas.\n     */\n    embeddeds: EmbeddedMetadata[] = []\n\n    /**\n     * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.\n     */\n    allEmbeddeds: EmbeddedMetadata[] = []\n\n    /**\n     * Entity's own indices.\n     */\n    ownIndices: IndexMetadata[] = []\n\n    /**\n     * Entity's index metadatas.\n     */\n    indices: IndexMetadata[] = []\n\n    /**\n     * Entity's unique metadatas.\n     */\n    uniques: UniqueMetadata[] = []\n\n    /**\n     * Entity's own uniques.\n     */\n    ownUniques: UniqueMetadata[] = []\n\n    /**\n     * Entity's check metadatas.\n     */\n    checks: CheckMetadata[] = []\n\n    /**\n     * Entity's exclusion metadatas.\n     */\n    exclusions: ExclusionMetadata[] = []\n\n    /**\n     * Entity's own listener metadatas.\n     */\n    ownListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Entity listener metadatas.\n     */\n    listeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"AFTER LOAD\" type.\n     */\n    afterLoadListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"BEFORE INSERT\" type.\n     */\n    beforeInsertListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"AFTER INSERT\" type.\n     */\n    afterInsertListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"BEFORE UPDATE\" type.\n     */\n    beforeUpdateListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"AFTER UPDATE\" type.\n     */\n    afterUpdateListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"BEFORE REMOVE\" type.\n     */\n    beforeRemoveListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"BEFORE SOFT REMOVE\" type.\n     */\n    beforeSoftRemoveListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"BEFORE RECOVER\" type.\n     */\n    beforeRecoverListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"AFTER REMOVE\" type.\n     */\n    afterRemoveListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"AFTER SOFT REMOVE\" type.\n     */\n    afterSoftRemoveListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Listener metadatas with \"AFTER RECOVER\" type.\n     */\n    afterRecoverListeners: EntityListenerMetadata[] = []\n\n    /**\n     * Map of columns and relations of the entity.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    propertiesMap: ObjectLiteral\n\n    /**\n     * Table comment. Not supported by all database types.\n     */\n    comment?: string\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        connection: DataSource\n        inheritanceTree?: Function[]\n        inheritancePattern?: \"STI\" /*|\"CTI\"*/\n        tableTree?: TreeMetadataArgs\n        parentClosureEntityMetadata?: EntityMetadata\n        args: TableMetadataArgs\n    }) {\n        this.connection = options.connection\n        this.inheritanceTree = options.inheritanceTree || []\n        this.inheritancePattern = options.inheritancePattern\n        this.treeType = options.tableTree ? options.tableTree.type : undefined\n        this.treeOptions = options.tableTree\n            ? options.tableTree.options\n            : undefined\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata!\n        this.tableMetadataArgs = options.args\n        this.target = this.tableMetadataArgs.target\n        this.tableType = this.tableMetadataArgs.type\n        this.expression = this.tableMetadataArgs.expression\n        this.withoutRowid = this.tableMetadataArgs.withoutRowid\n        this.dependsOn = this.tableMetadataArgs.dependsOn\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new entity.\n     */\n    create(\n        queryRunner?: QueryRunner,\n        options?: { fromDeserializer?: boolean; pojo?: boolean },\n    ): any {\n        const pojo = options && options.pojo === true ? true : false\n        // if target is set to a function (e.g. class) that can be created then create it\n        let ret: any\n        if (typeof this.target === \"function\" && !pojo) {\n            if (!options?.fromDeserializer || this.isAlwaysUsingConstructor) {\n                ret = new (<any>this.target)()\n            } else {\n                ret = Object.create(this.target.prototype)\n            }\n        } else {\n            // otherwise simply return a new empty object\n            ret = {}\n        }\n\n        // add \"typename\" property\n        if (this.connection.options.typename) {\n            ret[this.connection.options.typename] = this.targetName\n        }\n\n        this.lazyRelations.forEach((relation) =>\n            this.connection.relationLoader.enableLazyLoad(\n                relation,\n                ret,\n                queryRunner,\n            ),\n        )\n        return ret\n    }\n\n    /**\n     * Checks if given entity has an id.\n     */\n    hasId(entity: ObjectLiteral): boolean {\n        if (!entity) return false\n\n        return this.primaryColumns.every((primaryColumn) => {\n            const value = primaryColumn.getEntityValue(entity)\n            return value !== null && value !== undefined && value !== \"\"\n        })\n    }\n\n    /**\n     * Checks if given entity / object contains ALL primary keys entity must have.\n     * Returns true if it contains all of them, false if at least one of them is not defined.\n     */\n    hasAllPrimaryKeys(entity: ObjectLiteral): boolean {\n        return this.primaryColumns.every((primaryColumn) => {\n            const value = primaryColumn.getEntityValue(entity)\n            return value !== null && value !== undefined\n        })\n    }\n\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    ensureEntityIdMap(id: any): ObjectLiteral {\n        if (ObjectUtils.isObject(id)) return id\n\n        if (this.hasMultiplePrimaryKeys)\n            throw new CannotCreateEntityIdMapError(this, id)\n\n        return this.primaryColumns[0].createValueMap(id)\n    }\n\n    /**\n     * Gets primary keys of the entity and returns them in a literal object.\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\n     * For multiple primary keys it returns multiple keys in object.\n     * For primary keys inside embeds it returns complex object literal with keys in them.\n     */\n    getEntityIdMap(\n        entity: ObjectLiteral | undefined,\n    ): ObjectLiteral | undefined {\n        if (!entity) return undefined\n\n        return EntityMetadata.getValueMap(entity, this.primaryColumns, {\n            skipNulls: true,\n        })\n    }\n\n    /**\n     * Creates a \"mixed id map\".\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\n     * This is called mixed id map.\n     */\n    getEntityIdMixedMap(\n        entity: ObjectLiteral | undefined,\n    ): ObjectLiteral | undefined {\n        if (!entity) return entity\n\n        const idMap = this.getEntityIdMap(entity)\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap\n        } else if (idMap) {\n            return this.primaryColumns[0].getEntityValue(idMap) // todo: what about parent primary column?\n        }\n\n        return idMap\n    }\n\n    /**\n     * Compares two different entities by their ids.\n     * Returns true if they match, false otherwise.\n     */\n    compareEntities(\n        firstEntity: ObjectLiteral,\n        secondEntity: ObjectLiteral,\n    ): boolean {\n        const firstEntityIdMap = this.getEntityIdMap(firstEntity)\n        if (!firstEntityIdMap) return false\n\n        const secondEntityIdMap = this.getEntityIdMap(secondEntity)\n        if (!secondEntityIdMap) return false\n\n        return OrmUtils.compareIds(firstEntityIdMap, secondEntityIdMap)\n    }\n\n    /**\n     * Finds column with a given property name.\n     */\n    findColumnWithPropertyName(\n        propertyName: string,\n    ): ColumnMetadata | undefined {\n        return this.columns.find(\n            (column) => column.propertyName === propertyName,\n        )\n    }\n\n    /**\n     * Finds column with a given database name.\n     */\n    findColumnWithDatabaseName(\n        databaseName: string,\n    ): ColumnMetadata | undefined {\n        return this.columns.find(\n            (column) => column.databaseName === databaseName,\n        )\n    }\n\n    /**\n     * Checks if there is a column or relationship with a given property path.\n     */\n    hasColumnWithPropertyPath(propertyPath: string): boolean {\n        const hasColumn = this.columns.some(\n            (column) => column.propertyPath === propertyPath,\n        )\n        return hasColumn || this.hasRelationWithPropertyPath(propertyPath)\n    }\n\n    /**\n     * Finds column with a given property path.\n     */\n    findColumnWithPropertyPath(\n        propertyPath: string,\n    ): ColumnMetadata | undefined {\n        const column = this.columns.find(\n            (column) => column.propertyPath === propertyPath,\n        )\n        if (column) return column\n\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        const relation = this.relations.find(\n            (relation) => relation.propertyPath === propertyPath,\n        )\n        if (relation && relation.joinColumns.length === 1)\n            return relation.joinColumns[0]\n\n        return undefined\n    }\n\n    /**\n     * Finds column with a given property path.\n     * Does not search in relation unlike findColumnWithPropertyPath.\n     */\n    findColumnWithPropertyPathStrict(\n        propertyPath: string,\n    ): ColumnMetadata | undefined {\n        return this.columns.find(\n            (column) => column.propertyPath === propertyPath,\n        )\n    }\n\n    /**\n     * Finds columns with a given property path.\n     * Property path can match a relation, and relations can contain multiple columns.\n     */\n    findColumnsWithPropertyPath(propertyPath: string): ColumnMetadata[] {\n        const column = this.columns.find(\n            (column) => column.propertyPath === propertyPath,\n        )\n        if (column) return [column]\n\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        const relation = this.findRelationWithPropertyPath(propertyPath)\n        if (relation && relation.joinColumns) return relation.joinColumns\n\n        return []\n    }\n\n    /**\n     * Checks if there is a relation with the given property path.\n     */\n    hasRelationWithPropertyPath(propertyPath: string): boolean {\n        return this.relations.some(\n            (relation) => relation.propertyPath === propertyPath,\n        )\n    }\n\n    /**\n     * Finds relation with the given property path.\n     */\n    findRelationWithPropertyPath(\n        propertyPath: string,\n    ): RelationMetadata | undefined {\n        return this.relations.find(\n            (relation) => relation.propertyPath === propertyPath,\n        )\n    }\n\n    /**\n     * Checks if there is an embedded with a given property path.\n     */\n    hasEmbeddedWithPropertyPath(propertyPath: string): boolean {\n        return this.allEmbeddeds.some(\n            (embedded) => embedded.propertyPath === propertyPath,\n        )\n    }\n\n    /**\n     * Finds embedded with a given property path.\n     */\n    findEmbeddedWithPropertyPath(\n        propertyPath: string,\n    ): EmbeddedMetadata | undefined {\n        return this.allEmbeddeds.find(\n            (embedded) => embedded.propertyPath === propertyPath,\n        )\n    }\n\n    /**\n     * Returns an array of databaseNames mapped from provided propertyPaths\n     */\n    mapPropertyPathsToColumns(propertyPaths: string[]) {\n        return propertyPaths.map((propertyPath) => {\n            const column = this.findColumnWithPropertyPath(propertyPath)\n            if (column == null) {\n                throw new EntityPropertyNotFoundError(propertyPath, this)\n            }\n            return column\n        })\n    }\n\n    /**\n     * Iterates through entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    extractRelationValuesFromEntity(\n        entity: ObjectLiteral,\n        relations: RelationMetadata[],\n    ): [RelationMetadata, any, EntityMetadata][] {\n        const relationsAndValues: [RelationMetadata, any, EntityMetadata][] = []\n        relations.forEach((relation) => {\n            const value = relation.getEntityValue(entity)\n            if (Array.isArray(value)) {\n                value.forEach((subValue) =>\n                    relationsAndValues.push([\n                        relation,\n                        subValue,\n                        EntityMetadata.getInverseEntityMetadata(\n                            subValue,\n                            relation,\n                        ),\n                    ]),\n                )\n            } else if (value) {\n                relationsAndValues.push([\n                    relation,\n                    value,\n                    EntityMetadata.getInverseEntityMetadata(value, relation),\n                ])\n            }\n        })\n        return relationsAndValues\n    }\n\n    /**\n     * In the case of SingleTableInheritance, find the correct metadata\n     * for a given value.\n     *\n     * @param value The value to find the metadata for.\n     * @returns The found metadata for the entity or the base metadata if no matching metadata\n     *          was found in the whole inheritance tree.\n     */\n    findInheritanceMetadata(value: any): EntityMetadata {\n        // Check for single table inheritance and find the correct metadata in that case.\n        // Goal is to use the correct discriminator as we could have a repository\n        // for an (abstract) base class and thus the target would not match.\n\n        if (\n            this.inheritancePattern === \"STI\" &&\n            this.childEntityMetadatas.length > 0\n        ) {\n            // There could be a column on the base class that can manually be set to override the type.\n            let manuallySetDiscriminatorValue: unknown\n            if (this.discriminatorColumn) {\n                manuallySetDiscriminatorValue =\n                    value[this.discriminatorColumn.propertyName]\n            }\n            return (\n                this.childEntityMetadatas.find(\n                    (meta) =>\n                        manuallySetDiscriminatorValue ===\n                            meta.discriminatorValue ||\n                        value.constructor === meta.target,\n                ) || this\n            )\n        }\n        return this\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    private static getInverseEntityMetadata(\n        value: any,\n        relation: RelationMetadata,\n    ): EntityMetadata {\n        return relation.inverseEntityMetadata.findInheritanceMetadata(value)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a property paths for a given entity.\n     *\n     * @deprecated\n     */\n    static createPropertyPath(\n        metadata: EntityMetadata,\n        entity: ObjectLiteral,\n        prefix: string = \"\",\n    ) {\n        const paths: string[] = []\n        Object.keys(entity).forEach((key) => {\n            // check for function is needed in the cases when createPropertyPath used on values contain a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            const parentPath = prefix ? prefix + \".\" + key : key\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                const subPaths = this.createPropertyPath(\n                    metadata,\n                    entity[key],\n                    parentPath,\n                )\n                paths.push(...subPaths)\n            } else {\n                const path = prefix ? prefix + \".\" + key : key\n                paths.push(path)\n            }\n        })\n        return paths\n    }\n\n    /**\n     * Finds difference between two entity id maps.\n     * Returns items that exist in the first array and absent in the second array.\n     */\n    static difference(\n        firstIdMaps: ObjectLiteral[],\n        secondIdMaps: ObjectLiteral[],\n    ): ObjectLiteral[] {\n        return firstIdMaps.filter((firstIdMap) => {\n            return !secondIdMaps.find((secondIdMap) =>\n                OrmUtils.compareIds(firstIdMap, secondIdMap),\n            )\n        })\n    }\n\n    /**\n     * Creates value map from the given values and columns.\n     * Examples of usages are primary columns map and join columns map.\n     */\n    static getValueMap(\n        entity: ObjectLiteral,\n        columns: ColumnMetadata[],\n        options?: { skipNulls?: boolean },\n    ): ObjectLiteral | undefined {\n        return columns.reduce((map, column) => {\n            const value = column.getEntityValueMap(entity, options)\n\n            // make sure that none of the values of the columns are not missing\n            if (map === undefined || value === null || value === undefined)\n                return undefined\n\n            return OrmUtils.mergeDeep(map, value)\n        }, {} as ObjectLiteral | undefined)\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    build() {\n        const namingStrategy = this.connection.namingStrategy\n        const entityPrefix = this.connection.options.entityPrefix\n        const entitySkipConstructor =\n            this.connection.options.entitySkipConstructor\n\n        this.engine = this.tableMetadataArgs.engine\n        this.database =\n            this.tableMetadataArgs.type === \"entity-child\" &&\n            this.parentEntityMetadata\n                ? this.parentEntityMetadata.database\n                : this.tableMetadataArgs.database\n        if (this.tableMetadataArgs.schema) {\n            this.schema = this.tableMetadataArgs.schema\n        } else if (\n            this.tableMetadataArgs.type === \"entity-child\" &&\n            this.parentEntityMetadata\n        ) {\n            this.schema = this.parentEntityMetadata.schema\n        } else if (this.connection.options?.hasOwnProperty(\"schema\")) {\n            this.schema = (this.connection.options as any).schema\n        }\n        this.givenTableName =\n            this.tableMetadataArgs.type === \"entity-child\" &&\n            this.parentEntityMetadata\n                ? this.parentEntityMetadata.givenTableName\n                : this.tableMetadataArgs.name\n        this.synchronize =\n            this.tableMetadataArgs.synchronize === false ? false : true\n        this.targetName =\n            typeof this.tableMetadataArgs.target === \"function\"\n                ? (this.tableMetadataArgs.target as any).name\n                : this.tableMetadataArgs.target\n        if (this.tableMetadataArgs.type === \"closure-junction\") {\n            this.tableNameWithoutPrefix =\n                namingStrategy.closureJunctionTableName(this.givenTableName!)\n        } else if (\n            this.tableMetadataArgs.type === \"entity-child\" &&\n            this.parentEntityMetadata\n        ) {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(\n                this.parentEntityMetadata.targetName,\n                this.parentEntityMetadata.givenTableName,\n            )\n        } else {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(\n                this.targetName,\n                this.givenTableName,\n            )\n\n            if (\n                this.tableMetadataArgs.type === \"junction\" &&\n                this.connection.driver.maxAliasLength &&\n                this.connection.driver.maxAliasLength > 0 &&\n                this.tableNameWithoutPrefix.length >\n                    this.connection.driver.maxAliasLength\n            ) {\n                // note: we are not using DriverUtils.buildAlias here because we would like to avoid\n                // hashed table names. However, current algorithm also isn't perfect, but we cannot\n                // change it, since it's a big breaking change. Planned to 0.4.0\n                this.tableNameWithoutPrefix = shorten(\n                    this.tableNameWithoutPrefix,\n                    { separator: \"_\", segmentLength: 3 },\n                )\n            }\n        }\n        this.tableName = entityPrefix\n            ? namingStrategy.prefixTableName(\n                  entityPrefix,\n                  this.tableNameWithoutPrefix,\n              )\n            : this.tableNameWithoutPrefix\n        this.target = this.target ? this.target : this.tableName\n        this.name = this.targetName ? this.targetName : this.tableName\n        this.expression = this.tableMetadataArgs.expression\n        this.withoutRowid =\n            this.tableMetadataArgs.withoutRowid === true ? true : false\n        this.tablePath = this.connection.driver.buildTableName(\n            this.tableName,\n            this.schema,\n            this.database,\n        )\n        this.orderBy =\n            typeof this.tableMetadataArgs.orderBy === \"function\"\n                ? this.tableMetadataArgs.orderBy(this.propertiesMap)\n                : this.tableMetadataArgs.orderBy // todo: is propertiesMap available here? Looks like its not\n\n        if (entitySkipConstructor !== undefined) {\n            this.isAlwaysUsingConstructor = !entitySkipConstructor\n        }\n\n        this.isJunction =\n            this.tableMetadataArgs.type === \"closure-junction\" ||\n            this.tableMetadataArgs.type === \"junction\"\n        this.isClosureJunction =\n            this.tableMetadataArgs.type === \"closure-junction\"\n\n        this.comment = this.tableMetadataArgs.comment\n    }\n\n    /**\n     * Registers a new column in the entity and recomputes all depend properties.\n     */\n    registerColumn(column: ColumnMetadata) {\n        if (this.ownColumns.indexOf(column) !== -1) return\n\n        this.ownColumns.push(column)\n        this.columns = this.embeddeds.reduce(\n            (columns, embedded) => columns.concat(embedded.columnsFromTree),\n            this.ownColumns,\n        )\n        this.primaryColumns = this.columns.filter((column) => column.isPrimary)\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1\n        this.hasUUIDGeneratedColumns =\n            this.columns.filter(\n                (column) =>\n                    column.isGenerated || column.generationStrategy === \"uuid\",\n            ).length > 0\n        this.propertiesMap = this.createPropertiesMap()\n        if (this.childEntityMetadatas)\n            this.childEntityMetadatas.forEach((entityMetadata) =>\n                entityMetadata.registerColumn(column),\n            )\n    }\n\n    /**\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\n     * in a special format - { propertyName: propertyName }.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    createPropertiesMap(): { [name: string]: string | any } {\n        const map: { [name: string]: string | any } = {}\n        this.columns.forEach((column) =>\n            OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)),\n        )\n        this.relations.forEach((relation) =>\n            OrmUtils.mergeDeep(\n                map,\n                relation.createValueMap(relation.propertyPath),\n            ),\n        )\n        return map\n    }\n\n    /**\n     * Checks if entity has any column which rely on returning data,\n     * e.g. columns with auto generated value, DEFAULT values considered as dependant of returning data.\n     * For example, if we need to have RETURNING after INSERT (or we need returned id for DBs not supporting RETURNING),\n     * it means we cannot execute bulk inserts in some cases.\n     */\n    getInsertionReturningColumns(): ColumnMetadata[] {\n        return this.columns.filter((column) => {\n            return (\n                column.default !== undefined ||\n                column.asExpression !== undefined ||\n                column.isGenerated ||\n                column.isCreateDate ||\n                column.isUpdateDate ||\n                column.isDeleteDate ||\n                column.isVersion\n            )\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10793, "column": 0}, "map": {"version":3,"file":"ColumnMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/ColumnMetadata.ts"],"sourcesContent":["import { ColumnType } from \"../driver/types/ColumnTypes\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\nimport { RelationMetadata } from \"./RelationMetadata\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { ColumnMetadataArgs } from \"../metadata-args/ColumnMetadataArgs\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { ValueTransformer } from \"../decorator/options/ValueTransformer\"\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { VirtualColumnOptions } from \"../decorator/options/VirtualColumnOptions\"\n\n/**\n * This metadata contains all information about entity's column.\n */\nexport class ColumnMetadata {\n    readonly \"@instanceof\" = Symbol.for(\"ColumnMetadata\")\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Target class where column decorator is used.\n     * This may not be always equal to entity metadata (for example embeds or inheritance cases).\n     */\n    target: Function | string\n\n    /**\n     * Entity metadata where this column metadata is.\n     *\n     * For example for @Column() name: string in Post, entityMetadata will be metadata of Post entity.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Embedded metadata where this column metadata is.\n     * If this column is not in embed then this property value is undefined.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * If column is a foreign key of some relation then this relation's metadata will be there.\n     * If this column does not have a foreign key then this property value is undefined.\n     */\n    relationMetadata?: RelationMetadata\n\n    /**\n     * Class's property name on which this column is applied.\n     */\n    propertyName: string\n\n    /**\n     * The database type of the column.\n     */\n    type: ColumnType\n\n    /**\n     * Type's length in the database.\n     */\n    length: string = \"\"\n\n    /**\n     * Type's display width in the database.\n     */\n    width?: number\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string\n\n    /**\n     * Indicates if this column is a primary key.\n     */\n    isPrimary: boolean = false\n\n    /**\n     * Indicates if this column is generated (auto increment or generated other way).\n     */\n    isGenerated: boolean = false\n\n    /**\n     * Indicates if column can contain nulls or not.\n     */\n    isNullable: boolean = false\n\n    /**\n     * Indicates if column is selected by query builder or not.\n     */\n    isSelect: boolean = true\n\n    /**\n     * Indicates if column is inserted by default or not.\n     */\n    isInsert: boolean = true\n\n    /**\n     * Indicates if column allows updates or not.\n     */\n    isUpdate: boolean = true\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     */\n    generationStrategy?: \"uuid\" | \"increment\" | \"rowid\"\n\n    /**\n     * Identity column type. Supports only in Postgres 10+.\n     */\n    generatedIdentity?: \"ALWAYS\" | \"BY DEFAULT\"\n\n    /**\n     * Column comment.\n     * This feature is not supported by all databases.\n     */\n    comment?: string\n\n    /**\n     * Default database value.\n     */\n    default?:\n        | number\n        | boolean\n        | string\n        | null\n        | (number | boolean | string)[]\n        | Record<string, object>\n        | (() => string)\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column),\n     * which is the maximum number of digits that are stored for the values.\n     */\n    precision?: number | null\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column),\n     * which represents the number of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    zerofill: boolean = false\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned: boolean = false\n\n    /**\n     * Array of possible enumerated values.\n     *\n     * `postgres` and `mysql` store enum values as strings but we want to keep support\n     * for numeric and heterogeneous based typescript enums, so we need (string|number)[]\n     */\n    enum?: (string | number)[]\n\n    /**\n     * Exact name of enum\n     */\n    enumName?: string\n\n    /**\n     * Generated column expression.\n     */\n    asExpression?: string\n\n    /**\n     * Generated column type.\n     */\n    generatedType?: \"VIRTUAL\" | \"STORED\"\n\n    /**\n     * Return type of HSTORE column.\n     * Returns value as string or as object.\n     */\n    hstoreType?: \"object\" | \"string\"\n\n    /**\n     * Indicates if this column is an array.\n     */\n    isArray: boolean = false\n\n    /**\n     * Gets full path to this column property (including column property name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just property name of the column.\n     */\n    propertyPath: string\n\n    /**\n     * Same as property path, but dots are replaced with '_'.\n     * Used in query builder statements.\n     */\n    propertyAliasName: string\n\n    /**\n     * Gets full path to this column database name (including column database name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just database name of the column.\n     */\n    databasePath: string\n\n    /**\n     * Complete column name in the database including its embedded prefixes.\n     */\n    databaseName: string\n\n    /**\n     * Database name in the database without embedded prefixes applied.\n     */\n    databaseNameWithoutPrefixes: string\n\n    /**\n     * Database name set by entity metadata builder, not yet passed naming strategy process and without embedded prefixes.\n     */\n    givenDatabaseName?: string\n\n    /**\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n     */\n    isVirtual: boolean = false\n\n    /**\n     * Indicates if column is a virtual property. Virtual properties are not mapped to the entity.\n     * This property is used in tandem the virtual column decorator.\n     * @See https://typeorm.io/decorator-reference#virtualcolumn for more details.\n     */\n    isVirtualProperty: boolean = false\n\n    /**\n     * Query to be used to populate the column data. This query is used when generating the relational db script.\n     * The query function is called with the current entities alias either defined by the Entity Decorator or automatically\n     * @See https://typeorm.io/decorator-reference#virtualcolumn for more details.\n     */\n    query?: (alias: string) => string\n\n    /**\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n     */\n    isDiscriminator: boolean = false\n\n    /**\n     * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\n     */\n    isTreeLevel: boolean = false\n\n    /**\n     * Indicates if this column contains an entity creation date.\n     */\n    isCreateDate: boolean = false\n\n    /**\n     * Indicates if this column contains an entity update date.\n     */\n    isUpdateDate: boolean = false\n\n    /**\n     * Indicates if this column contains an entity delete date.\n     */\n    isDeleteDate: boolean = false\n\n    /**\n     * Indicates if this column contains an entity version.\n     */\n    isVersion: boolean = false\n\n    /**\n     * Indicates if this column contains an object id.\n     */\n    isObjectId: boolean = false\n\n    /**\n     * If this column is foreign key then it references some other column,\n     * and this property will contain reference to this column.\n     */\n    referencedColumn: ColumnMetadata | undefined\n\n    /**\n     * If this column is primary key then this specifies the name for it.\n     */\n    primaryKeyConstraintName?: string\n\n    /**\n     * If this column is foreign key then this specifies the name for it.\n     */\n    foreignKeyConstraintName?: string\n\n    /**\n     * Specifies a value transformer that is to be used to (un)marshal\n     * this column when reading or writing to the database.\n     */\n    transformer?: ValueTransformer | ValueTransformer[]\n\n    /**\n     * Column type in the case if this column is in the closure table.\n     * Column can be ancestor or descendant in the closure tables.\n     */\n    closureType?: \"ancestor\" | \"descendant\"\n\n    /**\n     * Indicates if this column is nested set's left column.\n     * Used only in tree entities with nested-set type.\n     */\n    isNestedSetLeft: boolean = false\n\n    /**\n     * Indicates if this column is nested set's right column.\n     * Used only in tree entities with nested-set type.\n     */\n    isNestedSetRight: boolean = false\n\n    /**\n     * Indicates if this column is materialized path's path column.\n     * Used only in tree entities with materialized path type.\n     */\n    isMaterializedPath: boolean = false\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        connection: DataSource\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        referencedColumn?: ColumnMetadata\n        args: ColumnMetadataArgs\n        closureType?: \"ancestor\" | \"descendant\"\n        nestedSetLeft?: boolean\n        nestedSetRight?: boolean\n        materializedPath?: boolean\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata!\n        this.referencedColumn = options.referencedColumn\n        if (options.args.target) this.target = options.args.target\n        if (options.args.propertyName)\n            this.propertyName = options.args.propertyName\n        if (options.args.options.name)\n            this.givenDatabaseName = options.args.options.name\n        if (options.args.options.type) this.type = options.args.options.type\n        if (options.args.options.length)\n            this.length = options.args.options.length\n                ? options.args.options.length.toString()\n                : \"\"\n        if (options.args.options.width) this.width = options.args.options.width\n        if (options.args.options.charset)\n            this.charset = options.args.options.charset\n        if (options.args.options.collation)\n            this.collation = options.args.options.collation\n        if (options.args.options.primary)\n            this.isPrimary = options.args.options.primary\n        if (options.args.options.default === null)\n            // to make sure default: null is the same as nullable: true\n            this.isNullable = true\n        if (options.args.options.nullable !== undefined)\n            this.isNullable = options.args.options.nullable\n        if (options.args.options.select !== undefined)\n            this.isSelect = options.args.options.select\n        if (options.args.options.insert !== undefined)\n            this.isInsert = options.args.options.insert\n        if (options.args.options.update !== undefined)\n            this.isUpdate = options.args.options.update\n        if (options.args.options.readonly !== undefined)\n            this.isUpdate = !options.args.options.readonly\n        if (options.args.options.comment)\n            this.comment = options.args.options.comment\n        if (options.args.options.default !== undefined)\n            this.default = options.args.options.default\n        if (options.args.options.onUpdate)\n            this.onUpdate = options.args.options.onUpdate\n        if (options.args.options.generatedIdentity)\n            this.generatedIdentity = options.args.options.generatedIdentity\n        if (\n            options.args.options.scale !== null &&\n            options.args.options.scale !== undefined\n        )\n            this.scale = options.args.options.scale\n        if (options.args.options.zerofill) {\n            this.zerofill = options.args.options.zerofill\n            this.unsigned = true // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n        }\n        if (options.args.options.unsigned)\n            this.unsigned = options.args.options.unsigned\n        if (options.args.options.precision !== null)\n            this.precision = options.args.options.precision\n        if (options.args.options.enum) {\n            if (\n                ObjectUtils.isObject(options.args.options.enum) &&\n                !Array.isArray(options.args.options.enum)\n            ) {\n                this.enum = Object.keys(options.args.options.enum)\n                    // remove numeric keys - typescript numeric enum types generate them\n                    // From the documentation: “declaration merging” means that the compiler merges two separate declarations\n                    // declared with the same name into a single definition. This concept is often used to merge enum with namespace\n                    // where in namespace we define e.g. utility methods for creating enum. This is well known in other languages\n                    // like Java (enum methods). Here in case if enum have function, we need to remove it from metadata, otherwise\n                    // generated SQL statements contains string representation of that function which leads into syntax error\n                    // at database side.\n                    .filter(\n                        (key) =>\n                            isNaN(+key) &&\n                            typeof (options.args.options.enum as ObjectLiteral)[\n                                key\n                            ] !== \"function\",\n                    )\n                    .map(\n                        (key) =>\n                            (options.args.options.enum as ObjectLiteral)[key],\n                    )\n            } else {\n                this.enum = options.args.options.enum\n            }\n        }\n        if (options.args.options.enumName) {\n            this.enumName = options.args.options.enumName\n        }\n        if (options.args.options.primaryKeyConstraintName) {\n            this.primaryKeyConstraintName =\n                options.args.options.primaryKeyConstraintName\n        }\n        if (options.args.options.foreignKeyConstraintName) {\n            this.foreignKeyConstraintName =\n                options.args.options.foreignKeyConstraintName\n        }\n        if (options.args.options.asExpression) {\n            this.asExpression = options.args.options.asExpression\n            this.generatedType = options.args.options.generatedType\n                ? options.args.options.generatedType\n                : \"VIRTUAL\"\n        }\n        if (options.args.options.hstoreType)\n            this.hstoreType = options.args.options.hstoreType\n        if (options.args.options.array)\n            this.isArray = options.args.options.array\n        if (options.args.mode) {\n            this.isVirtualProperty = options.args.mode === \"virtual-property\"\n            this.isVirtual = options.args.mode === \"virtual\"\n            this.isTreeLevel = options.args.mode === \"treeLevel\"\n            this.isCreateDate = options.args.mode === \"createDate\"\n            this.isUpdateDate = options.args.mode === \"updateDate\"\n            this.isDeleteDate = options.args.mode === \"deleteDate\"\n            this.isVersion = options.args.mode === \"version\"\n            this.isObjectId = options.args.mode === \"objectId\"\n        }\n        if (this.isVirtualProperty) {\n            this.isInsert = false\n            this.isUpdate = false\n        }\n        if (options.args.options.transformer)\n            this.transformer = options.args.options.transformer\n        if (options.args.options.spatialFeatureType)\n            this.spatialFeatureType = options.args.options.spatialFeatureType\n        if (options.args.options.srid !== undefined)\n            this.srid = options.args.options.srid\n        if ((options.args.options as VirtualColumnOptions).query)\n            this.query = (options.args.options as VirtualColumnOptions).query\n        if (this.isTreeLevel)\n            this.type = options.connection.driver.mappedDataTypes.treeLevel\n        if (this.isCreateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.createDate\n            if (!this.default)\n                this.default = () =>\n                    options.connection.driver.mappedDataTypes.createDateDefault\n            // skip precision if it was explicitly set to \"null\" in column options. Otherwise use default precision if it exist.\n            if (\n                this.precision === undefined &&\n                options.args.options.precision === undefined &&\n                options.connection.driver.mappedDataTypes.createDatePrecision\n            )\n                this.precision =\n                    options.connection.driver.mappedDataTypes.createDatePrecision\n        }\n        if (this.isUpdateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.updateDate\n            if (!this.default)\n                this.default = () =>\n                    options.connection.driver.mappedDataTypes.updateDateDefault\n            if (!this.onUpdate)\n                this.onUpdate =\n                    options.connection.driver.mappedDataTypes.updateDateDefault\n            // skip precision if it was explicitly set to \"null\" in column options. Otherwise use default precision if it exist.\n            if (\n                this.precision === undefined &&\n                options.args.options.precision === undefined &&\n                options.connection.driver.mappedDataTypes.updateDatePrecision\n            )\n                this.precision =\n                    options.connection.driver.mappedDataTypes.updateDatePrecision\n        }\n        if (this.isDeleteDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.deleteDate\n            if (!this.isNullable)\n                this.isNullable =\n                    options.connection.driver.mappedDataTypes.deleteDateNullable\n            // skip precision if it was explicitly set to \"null\" in column options. Otherwise use default precision if it exist.\n            if (\n                this.precision === undefined &&\n                options.args.options.precision === undefined &&\n                options.connection.driver.mappedDataTypes.deleteDatePrecision\n            )\n                this.precision =\n                    options.connection.driver.mappedDataTypes.deleteDatePrecision\n        }\n        if (this.isVersion)\n            this.type = options.connection.driver.mappedDataTypes.version\n        if (options.closureType) this.closureType = options.closureType\n        if (options.nestedSetLeft) this.isNestedSetLeft = options.nestedSetLeft\n        if (options.nestedSetRight)\n            this.isNestedSetRight = options.nestedSetRight\n        if (options.materializedPath)\n            this.isMaterializedPath = options.materializedPath\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value: any, useDatabaseName = false) {\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames]\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (\n                propertyNames: string[],\n                map: ObjectLiteral,\n            ): any => {\n                const propertyName = propertyNames.shift()\n                if (propertyName) {\n                    map[propertyName] = {}\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName])\n                    return map\n                }\n\n                // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n                if (\n                    (this.generationStrategy === \"increment\" ||\n                        this.generationStrategy === \"rowid\") &&\n                    this.type === \"bigint\" &&\n                    value !== null\n                )\n                    value = String(value)\n\n                map[useDatabaseName ? this.databaseName : this.propertyName] =\n                    value\n                return map\n            }\n            return extractEmbeddedColumnValue(propertyNames, {})\n        } else {\n            // no embeds - no problems. Simply return column property name and its value of the entity\n\n            // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n            if (\n                (this.generationStrategy === \"increment\" ||\n                    this.generationStrategy === \"rowid\") &&\n                this.type === \"bigint\" &&\n                value !== null\n            )\n                value = String(value)\n\n            return {\n                [useDatabaseName ? this.databaseName : this.propertyName]:\n                    value,\n            }\n        }\n    }\n\n    /**\n     * Extracts column value and returns its column name with this value in a literal object.\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\n     *\n     * Examples what this method can return depend if this column is in embeds.\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\n     */\n    getEntityValueMap(\n        entity: ObjectLiteral,\n        options?: { skipNulls?: boolean },\n    ): ObjectLiteral | undefined {\n        const returnNulls = false // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.\n\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames]\n            const isEmbeddedArray = this.embeddedMetadata.isArray\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (\n                propertyNames: string[],\n                value: ObjectLiteral,\n            ): ObjectLiteral => {\n                if (value === undefined) {\n                    return {}\n                }\n\n                const propertyName = propertyNames.shift()\n\n                if (propertyName) {\n                    const submap = extractEmbeddedColumnValue(\n                        propertyNames,\n                        value[propertyName],\n                    )\n                    if (Object.keys(submap).length > 0) {\n                        return { [propertyName]: submap }\n                    }\n                    return {}\n                }\n\n                if (isEmbeddedArray && Array.isArray(value)) {\n                    return value.map((v) => ({\n                        [this.propertyName]: v[this.propertyName],\n                    }))\n                }\n\n                if (\n                    value[this.propertyName] !== undefined &&\n                    (returnNulls === false || value[this.propertyName] !== null)\n                ) {\n                    return { [this.propertyName]: value[this.propertyName] }\n                }\n\n                return {}\n            }\n            const map = extractEmbeddedColumnValue(propertyNames, entity)\n\n            return Object.keys(map).length > 0 ? map : undefined\n        } else {\n            // no embeds - no problems. Simply return column property name and its value of the entity\n            /**\n             * Object.getOwnPropertyDescriptor checks if the relation is lazy, in which case value is a Promise\n             * DO NOT use `entity[\n                this.relationMetadata.propertyName] instanceof Promise`, which will invoke property getter and make unwanted DB request\n             * refer: https://github.com/typeorm/typeorm/pull/8676#issuecomment-1049906331\n             */\n            if (\n                this.relationMetadata &&\n                !Object.getOwnPropertyDescriptor(\n                    entity,\n                    this.relationMetadata.propertyName,\n                )?.get &&\n                entity[this.relationMetadata.propertyName] &&\n                ObjectUtils.isObject(entity[this.relationMetadata.propertyName])\n            ) {\n                if (this.relationMetadata.joinColumns.length > 1) {\n                    const map = this.relationMetadata.joinColumns.reduce(\n                        (map, joinColumn) => {\n                            const value =\n                                joinColumn.referencedColumn!.getEntityValueMap(\n                                    entity[this.relationMetadata!.propertyName],\n                                )\n                            if (value === undefined) return map\n                            return OrmUtils.mergeDeep(map, value)\n                        },\n                        {},\n                    )\n                    if (Object.keys(map).length > 0)\n                        return { [this.propertyName]: map }\n                } else {\n                    const value =\n                        this.relationMetadata.joinColumns[0].referencedColumn!.getEntityValue(\n                            entity[this.relationMetadata!.propertyName],\n                        )\n                    if (value) {\n                        return { [this.propertyName]: value }\n                    }\n                }\n\n                return undefined\n            } else {\n                if (\n                    entity[this.propertyName] !== undefined &&\n                    (returnNulls === false ||\n                        entity[this.propertyName] !== null)\n                ) {\n                    return { [this.propertyName]: entity[this.propertyName] }\n                }\n\n                return undefined\n            }\n        }\n    }\n\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(\n        entity: ObjectLiteral,\n        transform: boolean = false,\n    ): any | undefined {\n        if (entity === undefined || entity === null) return undefined\n\n        // extract column value from embeddeds of entity if column is in embedded\n        let value: any = undefined\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames]\n            const isEmbeddedArray = this.embeddedMetadata.isArray\n\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (\n                propertyNames: string[],\n                value: ObjectLiteral,\n            ): any => {\n                const propertyName = propertyNames.shift()\n                return propertyName && value\n                    ? extractEmbeddedColumnValue(\n                          propertyNames,\n                          value[propertyName],\n                      )\n                    : value\n            }\n\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(\n                propertyNames,\n                entity,\n            )\n            if (embeddedObject) {\n                if (this.relationMetadata && this.referencedColumn) {\n                    const relatedEntity =\n                        this.relationMetadata.getEntityValue(embeddedObject)\n                    if (\n                        relatedEntity &&\n                        ObjectUtils.isObject(relatedEntity) &&\n                        !InstanceChecker.isFindOperator(relatedEntity) &&\n                        !Buffer.isBuffer(relatedEntity)\n                    ) {\n                        value =\n                            this.referencedColumn.getEntityValue(relatedEntity)\n                    } else if (\n                        embeddedObject[this.propertyName] &&\n                        ObjectUtils.isObject(\n                            embeddedObject[this.propertyName],\n                        ) &&\n                        !InstanceChecker.isFindOperator(\n                            embeddedObject[this.propertyName],\n                        ) &&\n                        !Buffer.isBuffer(embeddedObject[this.propertyName]) &&\n                        !(embeddedObject[this.propertyName] instanceof Date)\n                    ) {\n                        value = this.referencedColumn.getEntityValue(\n                            embeddedObject[this.propertyName],\n                        )\n                    } else {\n                        value = embeddedObject[this.propertyName]\n                    }\n                } else if (this.referencedColumn) {\n                    value = this.referencedColumn.getEntityValue(\n                        embeddedObject[this.propertyName],\n                    )\n                } else if (isEmbeddedArray && Array.isArray(embeddedObject)) {\n                    value = embeddedObject.map((o) => o[this.propertyName])\n                } else {\n                    value = embeddedObject[this.propertyName]\n                }\n            }\n        } else {\n            // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.relationMetadata && this.referencedColumn) {\n                const relatedEntity =\n                    this.relationMetadata.getEntityValue(entity)\n                if (\n                    relatedEntity &&\n                    ObjectUtils.isObject(relatedEntity) &&\n                    !InstanceChecker.isFindOperator(relatedEntity) &&\n                    !(typeof relatedEntity === \"function\") &&\n                    !Buffer.isBuffer(relatedEntity)\n                ) {\n                    value = this.referencedColumn.getEntityValue(relatedEntity)\n                } else if (\n                    entity[this.propertyName] &&\n                    ObjectUtils.isObject(entity[this.propertyName]) &&\n                    !InstanceChecker.isFindOperator(\n                        entity[this.propertyName],\n                    ) &&\n                    !(typeof entity[this.propertyName] === \"function\") &&\n                    !Buffer.isBuffer(entity[this.propertyName]) &&\n                    !(entity[this.propertyName] instanceof Date)\n                ) {\n                    value = this.referencedColumn.getEntityValue(\n                        entity[this.propertyName],\n                    )\n                } else {\n                    value = entity[this.propertyName]\n                }\n            } else if (this.referencedColumn) {\n                value = this.referencedColumn.getEntityValue(\n                    entity[this.propertyName],\n                )\n            } else {\n                value = entity[this.propertyName]\n            }\n        }\n\n        if (transform && this.transformer)\n            value = ApplyValueTransformers.transformTo(this.transformer, value)\n\n        return value\n    }\n\n    /**\n     * Sets given entity's column value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    setEntityValue(entity: ObjectLiteral, value: any): void {\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (\n                embeddedMetadatas: EmbeddedMetadata[],\n                map: ObjectLiteral,\n            ): any => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                const embeddedMetadata = embeddedMetadatas.shift()\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] =\n                            embeddedMetadata.create()\n\n                    extractEmbeddedColumnValue(\n                        embeddedMetadatas,\n                        map[embeddedMetadata.propertyName],\n                    )\n                    return map\n                }\n                map[this.propertyName] = value\n                return map\n            }\n            return extractEmbeddedColumnValue(\n                [...this.embeddedMetadata.embeddedMetadataTree],\n                entity,\n            )\n        } else {\n            // we write a deep object in this entity only if the column is virtual\n            // because if its not virtual it means the user defined a real column for this relation\n            // also we don't do it if column is inside a junction table\n            if (\n                !this.entityMetadata.isJunction &&\n                this.isVirtual &&\n                this.referencedColumn &&\n                this.referencedColumn.propertyName !== this.propertyName\n            ) {\n                if (!(this.propertyName in entity)) {\n                    entity[this.propertyName] = {}\n                }\n\n                entity[this.propertyName][this.referencedColumn.propertyName] =\n                    value\n            } else {\n                entity[this.propertyName] = value\n            }\n        }\n    }\n\n    /**\n     * Compares given entity's column value with a given value.\n     */\n    compareEntityValue(entity: any, valueToCompareWith: any) {\n        const columnValue = this.getEntityValue(entity)\n        if (typeof columnValue?.equals === \"function\") {\n            return columnValue.equals(valueToCompareWith)\n        }\n        return columnValue === valueToCompareWith\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(connection: DataSource): this {\n        this.propertyPath = this.buildPropertyPath()\n        this.propertyAliasName = this.propertyPath.replace(\".\", \"_\")\n        this.databaseName = this.buildDatabaseName(connection)\n        this.databasePath = this.buildDatabasePath()\n        this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(\n            this.propertyName,\n            this.givenDatabaseName,\n            [],\n        )\n        return this\n    }\n\n    protected buildPropertyPath(): string {\n        let path = \"\"\n        if (\n            this.embeddedMetadata &&\n            this.embeddedMetadata.parentPropertyNames.length\n        )\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\"\n\n        path += this.propertyName\n\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (\n            !this.entityMetadata.isJunction &&\n            this.isVirtual &&\n            this.referencedColumn &&\n            this.referencedColumn.propertyName !== this.propertyName\n        )\n            path += \".\" + this.referencedColumn.propertyName\n\n        return path\n    }\n\n    protected buildDatabasePath(): string {\n        let path = \"\"\n        if (\n            this.embeddedMetadata &&\n            this.embeddedMetadata.parentPropertyNames.length\n        )\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\"\n\n        path += this.databaseName\n\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (\n            !this.entityMetadata.isJunction &&\n            this.isVirtual &&\n            this.referencedColumn &&\n            this.referencedColumn.databaseName !== this.databaseName\n        )\n            path += \".\" + this.referencedColumn.databaseName\n\n        return path\n    }\n\n    protected buildDatabaseName(connection: DataSource): string {\n        let propertyNames = this.embeddedMetadata\n            ? this.embeddedMetadata.parentPrefixes\n            : []\n        if (connection.driver.options.type === \"mongodb\")\n            // we don't need to include embedded name for the mongodb column names\n            propertyNames = []\n        return connection.namingStrategy.columnName(\n            this.propertyName,\n            this.givenDatabaseName,\n            propertyNames,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11263, "column": 0}, "map": {"version":3,"file":"IndexMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/IndexMetadata.ts"],"sourcesContent":["import { EntityMetadata } from \"./EntityMetadata\"\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { ColumnMetadata } from \"./ColumnMetadata\"\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this index is applied.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Embedded metadata if this index was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Indicates if this index must be unique.\n     */\n    isUnique: boolean = false\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean = false\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean = false\n\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n    isNullFiltered: boolean = false\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string\n\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n    synchronize: boolean = true\n\n    /**\n     * If true, the index only references documents with the specified field.\n     * These indexes use less space but behave differently in some situations (particularly sorts).\n     * This option is only supported for mongodb database.\n     */\n    isSparse?: boolean\n\n    /**\n     * Builds the index in the background so that building an index an does not block other database activities.\n     * This option is only supported for mongodb database.\n     */\n    isBackground?: boolean\n\n    /**\n     * Builds the index using the concurrently option.\n     * This options is only supported for postgres database.\n     */\n    isConcurrent?: boolean\n\n    /**\n     * Specifies a time to live, in seconds.\n     * This option is only supported for mongodb database.\n     */\n    expireAfterSeconds?: number\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function | string\n\n    /**\n     * Indexed columns.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * User specified index name.\n     */\n    givenName?: string\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?:\n        | ((object?: any) => any[] | { [key: string]: number })\n        | string[]\n\n    /**\n     * Final index name.\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If index name was not given then its generated.\n     */\n    name: string\n\n    /**\n     * Index filter condition.\n     */\n    where?: string\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {}\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        columns?: ColumnMetadata[]\n        args?: IndexMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata\n        if (options.columns) this.columns = options.columns\n\n        if (options.args) {\n            this.target = options.args.target\n            if (\n                options.args.synchronize !== null &&\n                options.args.synchronize !== undefined\n            )\n                this.synchronize = options.args.synchronize\n            this.isUnique = !!options.args.unique\n            this.isSpatial = !!options.args.spatial\n            this.isFulltext = !!options.args.fulltext\n            this.isNullFiltered = !!options.args.nullFiltered\n            this.parser = options.args.parser\n            this.where = options.args.where\n            this.isSparse = options.args.sparse\n            this.isBackground = options.args.background\n            this.isConcurrent = options.args.concurrent\n            this.expireAfterSeconds = options.args.expireAfterSeconds\n            this.givenName = options.args.name\n            this.givenColumnNames = options.args.columns\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        if (this.synchronize === false) {\n            this.name = this.givenName!\n            return this\n        }\n\n        const map: { [key: string]: number } = {}\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = []\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(\n                    (columnName) => {\n                        if (this.embeddedMetadata)\n                            return (\n                                this.embeddedMetadata.propertyPath +\n                                \".\" +\n                                columnName\n                            )\n\n                        return columnName.trim()\n                    },\n                )\n                columnPropertyPaths.forEach(\n                    (propertyPath) => (map[propertyPath] = 1),\n                )\n            } else {\n                // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(\n                    this.entityMetadata.propertiesMap,\n                )\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) =>\n                        String(i),\n                    )\n                    columnPropertyPaths.forEach((name) => (map[name] = 1))\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map(\n                        (i: any) => String(i),\n                    )\n                    Object.keys(columnsFnResult).forEach(\n                        (columnName) =>\n                            (map[columnName] = columnsFnResult[columnName]),\n                    )\n                }\n            }\n\n            this.columns = columnPropertyPaths\n                .map((propertyPath) => {\n                    const columnWithSameName = this.entityMetadata.columns.find(\n                        (column) => column.propertyPath === propertyPath,\n                    )\n                    if (columnWithSameName) {\n                        return [columnWithSameName]\n                    }\n                    const relationWithSameName =\n                        this.entityMetadata.relations.find(\n                            (relation) =>\n                                relation.isWithJoinColumn &&\n                                relation.propertyName === propertyPath,\n                        )\n                    if (relationWithSameName) {\n                        return relationWithSameName.joinColumns\n                    }\n                    const indexName = this.givenName\n                        ? '\"' + this.givenName + '\" '\n                        : \"\"\n                    const entityName = this.entityMetadata.targetName\n                    throw new TypeORMError(\n                        `Index ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                            propertyPath,\n                    )\n                })\n                .reduce((a, b) => a.concat(b))\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(\n            (updatedMap, key) => {\n                const column = this.entityMetadata.columns.find(\n                    (column) => column.propertyPath === key,\n                )\n                if (column) updatedMap[column.databasePath] = map[key]\n\n                return updatedMap\n            },\n            {} as { [key: string]: number },\n        )\n\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.indexName(\n                  this.entityMetadata.tableName,\n                  this.columns.map((column) => column.databaseName),\n                  this.where,\n              )\n        return this\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11388, "column": 0}, "map": {"version":3,"file":"RelationMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/RelationMetadata.ts"],"sourcesContent":["import { RelationType } from \"./types/RelationTypes\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { ForeignKeyMetadata } from \"./ForeignKeyMetadata\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"./ColumnMetadata\"\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\nimport { RelationMetadataArgs } from \"../metadata-args/RelationMetadataArgs\"\nimport { DeferrableType } from \"./types/DeferrableType\"\nimport { OnUpdateType } from \"./types/OnUpdateType\"\nimport { OnDeleteType } from \"./types/OnDeleteType\"\nimport { PropertyTypeFactory } from \"./types/PropertyTypeInFunction\"\nimport { TypeORMError } from \"../error\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Contains all information about some entity's relation.\n */\nexport class RelationMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity where this relation is placed.\n     *\n     * For example for @ManyToMany(type => Category) in Post, entityMetadata will be metadata of Post entity.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Entity metadata of the entity that is targeted by this relation.\n     *\n     * For example for @ManyToMany(type => Category) in Post, inverseEntityMetadata will be metadata of Category entity.\n     */\n    inverseEntityMetadata: EntityMetadata\n\n    /**\n     * Entity metadata of the junction table.\n     * Junction tables have their own entity metadata objects.\n     * Defined only for many-to-many relations.\n     */\n    junctionEntityMetadata?: EntityMetadata\n\n    /**\n     * Embedded metadata where this relation is.\n     * If this relation is not in embed then this property value is undefined.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Relation type, e.g. is it one-to-one, one-to-many, many-to-one or many-to-many.\n     */\n    relationType: RelationType\n\n    /**\n     * Target entity to which this relation is applied.\n     * Target IS NOT equal to entityMetadata.target, because relation\n     *\n     * For example for @ManyToMany(type => Category) in Post, target will be Post.\n     * If @ManyToMany(type => Category) is in Counters which is embedded into Post, target will be Counters.\n     * If @ManyToMany(type => Category) is in abstract class BaseUser which Post extends, target will be BaseUser.\n     * Target can be string if its defined in entity schema instead of class.\n     */\n    target: Function | string\n\n    /**\n     * Target's property name to which relation decorator is applied.\n     */\n    propertyName: string\n\n    /**\n     * Gets full path to this column property (including relation name).\n     * Full path is relevant when column is used in embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters.likes\".\n     * If property is not in embeds then it returns just property name of the column.\n     */\n    propertyPath: string\n\n    /**\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n     */\n    isTreeParent: boolean = false\n\n    /**\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n     */\n    isTreeChildren: boolean = false\n\n    /**\n     * Indicates if this relation's column is a primary key.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     */\n    isPrimary: boolean = false\n\n    /**\n     * Indicates if this relation is lazily loaded.\n     */\n    isLazy: boolean = false\n\n    /**\n     * Indicates if this relation is eagerly loaded.\n     */\n    isEager: boolean = false\n\n    /**\n     * Indicates if persistence is enabled for the relation.\n     * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\n     * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\n     * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\n     */\n    persistenceEnabled: boolean = true\n\n    /**\n     * When a parent is saved (with cascading but) without a child row that still exists in database, this will control what shall happen to them.\n     * delete will remove these rows from database. nullify will remove the relation key.\n     * skip will keep the relation intact. Removal of related item is only possible through its own repo.\n     */\n    orphanedRowAction?: \"nullify\" | \"delete\" | \"soft-delete\" | \"disable\"\n\n    /**\n     * If set to true then related objects are allowed to be inserted to the database.\n     */\n    isCascadeInsert: boolean = false\n\n    /**\n     * If set to true then related objects are allowed to be updated in the database.\n     */\n    isCascadeUpdate: boolean = false\n\n    /**\n     * If set to true then related objects are allowed to be remove from the database.\n     */\n    isCascadeRemove: boolean = false\n\n    /**\n     * If set to true then related objects are allowed to be soft-removed from the database.\n     */\n    isCascadeSoftRemove: boolean = false\n\n    /**\n     * If set to true then related objects are allowed to be recovered from the database.\n     */\n    isCascadeRecover: boolean = false\n\n    /**\n     * Indicates if relation column value can be nullable or not.\n     */\n    isNullable: boolean = true\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    onUpdate?: OnUpdateType\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    deferrable?: DeferrableType\n\n    /**\n     * Indicates whether foreign key constraints will be created for join columns.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     * Defaults to true.\n     */\n    createForeignKeyConstraints: boolean = true\n\n    /**\n     * Gets the property's type to which this relation is applied.\n     *\n     * For example for @ManyToMany(type => Category) in Post, target will be Category.\n     */\n    type: Function | string\n\n    /**\n     * Indicates if this side is an owner of this relation.\n     */\n    isOwning: boolean = false\n\n    /**\n     * Checks if this relation's type is \"one-to-one\".\n     */\n    isOneToOne: boolean = false\n\n    /**\n     * Checks if this relation is owner side of the \"one-to-one\" relation.\n     * Owner side means this side of relation has a join column in the table.\n     */\n    isOneToOneOwner: boolean = false\n\n    /**\n     * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\n     */\n    isWithJoinColumn: boolean = false\n\n    /**\n     * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n     * NOT owner side means this side of relation does not have a join column in the table.\n     */\n    isOneToOneNotOwner: boolean = false\n\n    /**\n     * Checks if this relation's type is \"one-to-many\".\n     */\n    isOneToMany: boolean = false\n\n    /**\n     * Checks if this relation's type is \"many-to-one\".\n     */\n    isManyToOne: boolean = false\n\n    /**\n     * Checks if this relation's type is \"many-to-many\".\n     */\n    isManyToMany: boolean = false\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n     * Owner side means this side of relation has a join table.\n     */\n    isManyToManyOwner: boolean = false\n\n    /**\n     * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n     * Not owner side means this side of relation does not have a join table.\n     */\n    isManyToManyNotOwner: boolean = false\n\n    /**\n     * Gets the property path of the inverse side of the relation.\n     */\n    inverseSidePropertyPath: string\n\n    /**\n     * Inverse side of the relation set by user.\n     *\n     * Inverse side set in the relation can be either string - property name of the column on inverse side,\n     * either can be a function that accepts a map of properties with the object and returns one of them.\n     * Second approach is used to achieve type-safety.\n     */\n    givenInverseSidePropertyFactory: PropertyTypeFactory<any>\n\n    /**\n     * Gets the relation metadata of the inverse side of this relation.\n     */\n    inverseRelation?: RelationMetadata\n\n    /**\n     * Join table name.\n     */\n    joinTableName: string\n\n    /**\n     * Foreign keys created for this relation.\n     */\n    foreignKeys: ForeignKeyMetadata[] = []\n\n    /**\n     * Join table columns.\n     * Join columns can be obtained only from owner side of the relation.\n     * From non-owner side of the relation join columns will be empty.\n     * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\n     * If this relation is many-to-many then it takes all owner join columns from the junction entity.\n     */\n    joinColumns: ColumnMetadata[] = []\n\n    /**\n     * Inverse join table columns.\n     * Inverse join columns are supported only for many-to-many relations\n     * and can be obtained only from owner side of the relation.\n     * From non-owner side of the relation join columns will be undefined.\n     */\n    inverseJoinColumns: ColumnMetadata[] = []\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        args: RelationMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata!\n        const args = options.args\n        this.target = args.target\n        this.propertyName = args.propertyName\n        this.relationType = args.relationType\n\n        if (args.inverseSideProperty)\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty\n\n        this.isLazy = args.isLazy || false\n        // this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"insert\") !== -1);\n        // this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"update\") !== -1);\n        // this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"remove\") !== -1);\n        // this.isCascadeSoftRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"soft-remove\") !== -1);\n        // this.isCascadeRecover = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"recover\") !== -1);\n        this.isCascadeInsert =\n            args.options.cascade === true ||\n            (Array.isArray(args.options.cascade) &&\n                args.options.cascade.indexOf(\"insert\") !== -1)\n        this.isCascadeUpdate =\n            args.options.cascade === true ||\n            (Array.isArray(args.options.cascade) &&\n                args.options.cascade.indexOf(\"update\") !== -1)\n        this.isCascadeRemove =\n            args.options.cascade === true ||\n            (Array.isArray(args.options.cascade) &&\n                args.options.cascade.indexOf(\"remove\") !== -1)\n        this.isCascadeSoftRemove =\n            args.options.cascade === true ||\n            (Array.isArray(args.options.cascade) &&\n                args.options.cascade.indexOf(\"soft-remove\") !== -1)\n        this.isCascadeRecover =\n            args.options.cascade === true ||\n            (Array.isArray(args.options.cascade) &&\n                args.options.cascade.indexOf(\"recover\") !== -1)\n        // this.isPrimary = args.options.primary || false;\n        this.isNullable =\n            args.options.nullable === false || this.isPrimary ? false : true\n        this.onDelete = args.options.onDelete\n        this.onUpdate = args.options.onUpdate\n        this.deferrable = args.options.deferrable\n        this.createForeignKeyConstraints =\n            args.options.createForeignKeyConstraints === false ? false : true\n        this.isEager = args.options.eager || false\n        this.persistenceEnabled =\n            args.options.persistence === false ? false : true\n        this.orphanedRowAction = args.options.orphanedRowAction || \"nullify\"\n        this.isTreeParent = args.isTreeParent || false\n        this.isTreeChildren = args.isTreeChildren || false\n\n        if (typeof args.type === \"function\") {\n            this.type =\n                typeof args.type === \"function\"\n                    ? (args.type as () => any)()\n                    : args.type\n        } else if (InstanceChecker.isEntitySchema(args.type)) {\n            this.type = args.type.options.name\n        } else if (\n            ObjectUtils.isObject(args.type) &&\n            typeof (args.type as any).name === \"string\"\n        ) {\n            this.type = (args.type as any).name\n        } else {\n            this.type = args.type as string | Function\n        }\n\n        this.isOneToOne = this.relationType === \"one-to-one\"\n        this.isOneToMany = this.relationType === \"one-to-many\"\n        this.isManyToOne = this.relationType === \"many-to-one\"\n        this.isManyToMany = this.relationType === \"many-to-many\"\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates join column ids map from the given related entity ids array.\n     */\n    getRelationIdMap(entity: ObjectLiteral): ObjectLiteral | undefined {\n        const joinColumns = this.isOwning\n            ? this.joinColumns\n            : this.inverseRelation!.joinColumns\n        const referencedColumns = joinColumns.map(\n            (joinColumn) => joinColumn.referencedColumn!,\n        )\n        // console.log(\"entity\", entity);\n        // console.log(\"referencedColumns\", referencedColumns);\n        return EntityMetadata.getValueMap(entity, referencedColumns)\n    }\n\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    ensureRelationIdMap(id: any): ObjectLiteral {\n        if (ObjectUtils.isObject(id)) return id\n\n        const joinColumns = this.isOwning\n            ? this.joinColumns\n            : this.inverseRelation!.joinColumns\n        const referencedColumns = joinColumns.map(\n            (joinColumn) => joinColumn.referencedColumn!,\n        )\n\n        if (referencedColumns.length > 1)\n            throw new TypeORMError(\n                `Cannot create relation id map for a single value because relation contains multiple referenced columns.`,\n            )\n\n        return referencedColumns[0].createValueMap(id)\n    }\n\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    getEntityValue(\n        entity: ObjectLiteral,\n        getLazyRelationsPromiseValue: boolean = false,\n    ): any | undefined {\n        if (entity === null || entity === undefined) return undefined\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames]\n\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            const extractEmbeddedColumnValue = (\n                propertyNames: string[],\n                value: ObjectLiteral,\n            ): any => {\n                const propertyName = propertyNames.shift()\n                if (propertyName) {\n                    if (value[propertyName]) {\n                        return extractEmbeddedColumnValue(\n                            propertyNames,\n                            value[propertyName],\n                        )\n                    }\n                    return undefined\n                }\n                return value\n            }\n\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            const embeddedObject = extractEmbeddedColumnValue(\n                propertyNames,\n                entity,\n            )\n\n            if (this.isLazy) {\n                if (\n                    embeddedObject[\"__\" + this.propertyName + \"__\"] !==\n                    undefined\n                )\n                    return embeddedObject[\"__\" + this.propertyName + \"__\"]\n\n                if (getLazyRelationsPromiseValue === true)\n                    return embeddedObject[this.propertyName]\n\n                return undefined\n            }\n            return embeddedObject\n                ? embeddedObject[\n                      this.isLazy\n                          ? \"__\" + this.propertyName + \"__\"\n                          : this.propertyName\n                  ]\n                : undefined\n        } else {\n            // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.isLazy) {\n                if (entity[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return entity[\"__\" + this.propertyName + \"__\"]\n\n                if (getLazyRelationsPromiseValue === true)\n                    return entity[this.propertyName]\n\n                return undefined\n            }\n            return entity[this.propertyName]\n        }\n    }\n\n    /**\n     * Sets given entity's relation's value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     *\n     * If merge is set to true, it merges given value into currently\n     */\n    setEntityValue(entity: ObjectLiteral, value: any): void {\n        const propertyName = this.isLazy\n            ? \"__\" + this.propertyName + \"__\"\n            : this.propertyName\n\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const extractEmbeddedColumnValue = (\n                embeddedMetadatas: EmbeddedMetadata[],\n                map: ObjectLiteral,\n            ): any => {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n\n                const embeddedMetadata = embeddedMetadatas.shift()\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] =\n                            embeddedMetadata.create()\n\n                    extractEmbeddedColumnValue(\n                        embeddedMetadatas,\n                        map[embeddedMetadata.propertyName],\n                    )\n                    return map\n                }\n                map[propertyName] = value\n                return map\n            }\n            return extractEmbeddedColumnValue(\n                [...this.embeddedMetadata.embeddedMetadataTree],\n                entity,\n            )\n        } else {\n            entity[propertyName] = value\n        }\n    }\n\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    createValueMap(value: any) {\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames]\n\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            const extractEmbeddedColumnValue = (\n                propertyNames: string[],\n                map: ObjectLiteral,\n            ): any => {\n                const propertyName = propertyNames.shift()\n                if (propertyName) {\n                    map[propertyName] = {}\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName])\n                    return map\n                }\n                map[this.propertyName] = value\n                return map\n            }\n            return extractEmbeddedColumnValue(propertyNames, {})\n        } else {\n            // no embeds - no problems. Simply return column property name and its value of the entity\n            return { [this.propertyName]: value }\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation metadata properties.\n     * This builder method should be used only after embedded metadata tree was build.\n     */\n    build() {\n        this.propertyPath = this.buildPropertyPath()\n    }\n\n    /**\n     * Registers given foreign keys in the relation.\n     * This builder method should be used to register foreign key in the relation.\n     */\n    registerForeignKeys(...foreignKeys: ForeignKeyMetadata[]) {\n        this.foreignKeys.push(...foreignKeys)\n    }\n\n    /**\n     * Registers given join columns in the relation.\n     * This builder method should be used to register join column in the relation.\n     */\n    registerJoinColumns(\n        joinColumns: ColumnMetadata[] = [],\n        inverseJoinColumns: ColumnMetadata[] = [],\n    ) {\n        this.joinColumns = joinColumns\n        this.inverseJoinColumns = inverseJoinColumns\n        this.isOwning =\n            this.isManyToOne ||\n            ((this.isManyToMany || this.isOneToOne) &&\n                this.joinColumns.length > 0)\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner\n    }\n\n    /**\n     * Registers a given junction entity metadata.\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\n     */\n    registerJunctionEntityMetadata(junctionEntityMetadata: EntityMetadata) {\n        this.junctionEntityMetadata = junctionEntityMetadata\n        this.joinTableName = junctionEntityMetadata.tableName\n        if (this.inverseRelation) {\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata\n            this.joinTableName = junctionEntityMetadata.tableName\n        }\n    }\n\n    /**\n     * Builds inverse side property path based on given inverse side property factory.\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\n     */\n    buildInverseSidePropertyPath(): string {\n        if (this.givenInverseSidePropertyFactory) {\n            const ownerEntityPropertiesMap =\n                this.inverseEntityMetadata.propertiesMap\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\n                return this.givenInverseSidePropertyFactory(\n                    ownerEntityPropertiesMap,\n                )\n\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\n                return this.givenInverseSidePropertyFactory\n        } else if (\n            this.isTreeParent &&\n            this.entityMetadata.treeChildrenRelation\n        ) {\n            return this.entityMetadata.treeChildrenRelation.propertyName\n        } else if (\n            this.isTreeChildren &&\n            this.entityMetadata.treeParentRelation\n        ) {\n            return this.entityMetadata.treeParentRelation.propertyName\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Builds relation's property path based on its embedded tree.\n     */\n    buildPropertyPath(): string {\n        if (\n            !this.embeddedMetadata ||\n            !this.embeddedMetadata.parentPropertyNames.length\n        )\n            return this.propertyName\n\n        return (\n            this.embeddedMetadata.parentPropertyNames.join(\".\") +\n            \".\" +\n            this.propertyName\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11741, "column": 0}, "map": {"version":3,"file":"EmbeddedMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/EmbeddedMetadata.ts"],"sourcesContent":["import { ColumnMetadata } from \"./ColumnMetadata\"\nimport { RelationMetadata } from \"./RelationMetadata\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { EmbeddedMetadataArgs } from \"../metadata-args/EmbeddedMetadataArgs\"\nimport { RelationIdMetadata } from \"./RelationIdMetadata\"\nimport { RelationCountMetadata } from \"./RelationCountMetadata\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { EntityListenerMetadata } from \"./EntityListenerMetadata\"\nimport { IndexMetadata } from \"./IndexMetadata\"\nimport { UniqueMetadata } from \"./UniqueMetadata\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this embedded is.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Parent embedded in the case if this embedded inside other embedded.\n     */\n    parentEmbeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Embedded target type.\n     */\n    type: Function | string\n\n    /**\n     * Property name on which this embedded is attached.\n     */\n    propertyName: string\n\n    /**\n     * Gets full path to this embedded property (including embedded property name).\n     * Full path is relevant when embedded is used inside other embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters\".\n     */\n    propertyPath: string\n\n    /**\n     * Columns inside this embed.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * Relations inside this embed.\n     */\n    relations: RelationMetadata[] = []\n\n    /**\n     * Entity listeners inside this embed.\n     */\n    listeners: EntityListenerMetadata[] = []\n\n    /**\n     * Indices applied to the embed columns.\n     */\n    indices: IndexMetadata[] = []\n\n    /**\n     * Uniques applied to the embed columns.\n     */\n    uniques: UniqueMetadata[] = []\n\n    /**\n     * Relation ids inside this embed.\n     */\n    relationIds: RelationIdMetadata[] = []\n\n    /**\n     * Relation counts inside this embed.\n     */\n    relationCounts: RelationCountMetadata[] = []\n\n    /**\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n     */\n    embeddeds: EmbeddedMetadata[] = []\n\n    /**\n     * Indicates if the entity should be instantiated using the constructor\n     * or via allocating a new object via `Object.create()`.\n     */\n    isAlwaysUsingConstructor: boolean = true\n\n    /**\n     * Indicates if this embedded is in array mode.\n     *\n     * This option works only in mongodb.\n     */\n    isArray: boolean = false\n\n    /**\n     * Prefix of the embedded, used instead of propertyName.\n     * If set to empty string or false, then prefix is not set at all.\n     */\n    customPrefix: string | boolean | undefined\n\n    /**\n     * Gets the prefix of the columns.\n     * By default its a property name of the class where this prefix is.\n     * But if custom prefix is set then it takes its value as a prefix.\n     * However if custom prefix is set to empty string or false, then prefix to column is not applied at all.\n     */\n    prefix: string\n\n    /**\n     * Returns array of property names of current embed and all its parent embeds.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * we need to get value of \"id\" column from the post real entity object.\n     * this method will return [\"data\", \"information\", \"counters\"]\n     */\n    parentPropertyNames: string[] = []\n\n    /**\n     * Returns array of prefixes of current embed and all its parent embeds.\n     */\n    parentPrefixes: string[] = []\n\n    /**\n     * Returns embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    embeddedMetadataTree: EmbeddedMetadata[] = []\n\n    /**\n     * Embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    columnsFromTree: ColumnMetadata[] = []\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    relationsFromTree: RelationMetadata[] = []\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    listenersFromTree: EntityListenerMetadata[] = []\n\n    /**\n     * Indices of this embed and all indices from its child embeds.\n     */\n    indicesFromTree: IndexMetadata[] = []\n\n    /**\n     * Uniques of this embed and all uniques from its child embeds.\n     */\n    uniquesFromTree: UniqueMetadata[] = []\n\n    /**\n     * Relation ids of this embed and all relation ids from its child embeds.\n     */\n    relationIdsFromTree: RelationIdMetadata[] = []\n\n    /**\n     * Relation counts of this embed and all relation counts from its child embeds.\n     */\n    relationCountsFromTree: RelationCountMetadata[] = []\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        args: EmbeddedMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.type = options.args.type()\n        this.propertyName = options.args.propertyName\n        this.customPrefix = options.args.prefix\n        this.isArray = options.args.isArray\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new embedded object.\n     */\n    create(options?: { fromDeserializer?: boolean }): any {\n        if (!(typeof this.type === \"function\")) {\n            return {}\n        }\n\n        if (options?.fromDeserializer || !this.isAlwaysUsingConstructor) {\n            return Object.create(this.type.prototype)\n        } else {\n            return new (this.type as any)()\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(connection: DataSource): this {\n        this.embeddeds.forEach((embedded) => embedded.build(connection))\n        this.prefix = this.buildPrefix(connection)\n        this.parentPropertyNames = this.buildParentPropertyNames()\n        this.parentPrefixes = this.buildParentPrefixes()\n        this.propertyPath = this.parentPropertyNames.join(\".\")\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree()\n        this.columnsFromTree = this.buildColumnsFromTree()\n        this.relationsFromTree = this.buildRelationsFromTree()\n        this.listenersFromTree = this.buildListenersFromTree()\n        this.indicesFromTree = this.buildIndicesFromTree()\n        this.uniquesFromTree = this.buildUniquesFromTree()\n        this.relationIdsFromTree = this.buildRelationIdsFromTree()\n        this.relationCountsFromTree = this.buildRelationCountsFromTree()\n\n        if (connection.options.entitySkipConstructor) {\n            this.isAlwaysUsingConstructor =\n                !connection.options.entitySkipConstructor\n        }\n\n        return this\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    protected buildPartialPrefix(): string[] {\n        // if prefix option was not set or explicitly set to true - default prefix\n        if (this.customPrefix === undefined || this.customPrefix === true) {\n            return [this.propertyName]\n        }\n\n        // if prefix option was set to empty string or explicity set to false - disable prefix\n        if (this.customPrefix === \"\" || this.customPrefix === false) {\n            return []\n        }\n\n        // use custom prefix\n        if (typeof this.customPrefix === \"string\") {\n            return [this.customPrefix]\n        }\n\n        throw new TypeORMError(\n            `Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`,\n        )\n    }\n\n    protected buildPrefix(connection: DataSource): string {\n        if (connection.driver.options.type === \"mongodb\")\n            return this.propertyName\n\n        const prefixes: string[] = []\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection))\n\n        prefixes.push(...this.buildPartialPrefix())\n\n        return prefixes.join(\"_\") // todo: use naming strategy instead of \"_\"  !!!\n    }\n\n    protected buildParentPropertyNames(): string[] {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                  .buildParentPropertyNames()\n                  .concat(this.propertyName)\n            : [this.propertyName]\n    }\n\n    protected buildParentPrefixes(): string[] {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                  .buildParentPrefixes()\n                  .concat(this.buildPartialPrefix())\n            : this.buildPartialPrefix()\n    }\n\n    protected buildEmbeddedMetadataTree(): EmbeddedMetadata[] {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                  .buildEmbeddedMetadataTree()\n                  .concat(this)\n            : [this]\n    }\n\n    protected buildColumnsFromTree(): ColumnMetadata[] {\n        return this.embeddeds.reduce(\n            (columns, embedded) =>\n                columns.concat(embedded.buildColumnsFromTree()),\n            this.columns,\n        )\n    }\n\n    protected buildRelationsFromTree(): RelationMetadata[] {\n        return this.embeddeds.reduce(\n            (relations, embedded) =>\n                relations.concat(embedded.buildRelationsFromTree()),\n            this.relations,\n        )\n    }\n\n    protected buildListenersFromTree(): EntityListenerMetadata[] {\n        return this.embeddeds.reduce(\n            (relations, embedded) =>\n                relations.concat(embedded.buildListenersFromTree()),\n            this.listeners,\n        )\n    }\n\n    protected buildIndicesFromTree(): IndexMetadata[] {\n        return this.embeddeds.reduce(\n            (relations, embedded) =>\n                relations.concat(embedded.buildIndicesFromTree()),\n            this.indices,\n        )\n    }\n\n    protected buildUniquesFromTree(): UniqueMetadata[] {\n        return this.embeddeds.reduce(\n            (relations, embedded) =>\n                relations.concat(embedded.buildUniquesFromTree()),\n            this.uniques,\n        )\n    }\n\n    protected buildRelationIdsFromTree(): RelationIdMetadata[] {\n        return this.embeddeds.reduce(\n            (relations, embedded) =>\n                relations.concat(embedded.buildRelationIdsFromTree()),\n            this.relationIds,\n        )\n    }\n\n    protected buildRelationCountsFromTree(): RelationCountMetadata[] {\n        return this.embeddeds.reduce(\n            (relations, embedded) =>\n                relations.concat(embedded.buildRelationCountsFromTree()),\n            this.relationCounts,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11940, "column": 0}, "map": {"version":3,"file":"RelationIdMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/RelationIdMetadata.ts"],"sourcesContent":["import { RelationIdMetadataArgs } from \"../metadata-args/RelationIdMetadataArgs\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { RelationMetadata } from \"./RelationMetadata\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Relation from which ids will be extracted.\n     */\n    relation: RelationMetadata\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string | ((object: any) => any)\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function | string\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (\n        qb: SelectQueryBuilder<any>,\n    ) => SelectQueryBuilder<any>\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        args: RelationIdMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.target = options.args.target\n        this.propertyName = options.args.propertyName\n        this.relationNameOrFactory = options.args.relation\n        this.alias = options.args.alias\n        this.queryBuilderFactory = options.args.queryBuilderFactory\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Sets relation id value from the given entity.\n     *\n     * todo: make it to work in embeds as well.\n     */\n    setValue(entity: ObjectLiteral) {\n        const inverseEntity = this.relation.getEntityValue(entity)\n\n        if (Array.isArray(inverseEntity)) {\n            entity[this.propertyName] = inverseEntity\n                .map((item) => {\n                    return this.relation.inverseEntityMetadata.getEntityIdMixedMap(\n                        item,\n                    )\n                })\n                .filter((item) => item !== null && item !== undefined)\n        } else {\n            const value =\n                this.relation.inverseEntityMetadata.getEntityIdMixedMap(\n                    inverseEntity,\n                )\n            if (value !== undefined) entity[this.propertyName] = value\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation id properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath =\n            typeof this.relationNameOrFactory === \"function\"\n                ? this.relationNameOrFactory(this.entityMetadata.propertiesMap)\n                : this.relationNameOrFactory\n        const relation =\n            this.entityMetadata.findRelationWithPropertyPath(propertyPath)\n        if (!relation)\n            throw new TypeORMError(\n                `Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`,\n            )\n\n        this.relation = relation\n    }\n}\n"],"names":[],"mappings":";;;;;AAKA,MAAA,8BAAuC;AAEvC;;GAEG,CACH,MAAa,kBAAkB;IA0C3B,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,YAAY,OAGX,CAAA;QACG,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAC5C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAA;QACjC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAA;QAC7C,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAA;QAClD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAA;QAC/B,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAA;IAC/D,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;;;OAIG,CACH,QAAQ,CAAC,MAAqB,EAAA;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QAE1D,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,aAAa,CACpC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,mBAAmB,CAC1D,IAAI,CACP,CAAA;YACL,CAAC,CAAC,CACD,MAAM,CAAC,CAAC,IAAI,EAAE,CAAG,CAAD,GAAK,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,CAAA;QAC9D,CAAC,MAAM,CAAC;YACJ,MAAM,KAAK,GACP,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,mBAAmB,CACnD,aAAa,CAChB,CAAA;YACL,IAAI,KAAK,KAAK,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,KAAK,CAAA;QAC9D,CAAC;IACL,CAAC;IAED,wEAAwE;IACxE,yBAAyB;IACzB,wEAAwE;IAExE;;;OAGG,CACH,KAAK,GAAA;QACD,MAAM,YAAY,GACd,OAAO,IAAI,CAAC,qBAAqB,KAAK,UAAU,GAC1C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,GAC7D,IAAI,CAAC,qBAAqB,CAAA;QACpC,MAAM,QAAQ,GACV,IAAI,CAAC,cAAc,CAAC,4BAA4B,CAAC,YAAY,CAAC,CAAA;QAClE,IAAI,CAAC,QAAQ,EACT,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,qBAAA,EAAwB,YAAY,CAAA,qDAAA,CAAuD,CAC9F,CAAA;QAEL,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC5B,CAAC;CACJ;AA7GD,QAAA,kBAAA,GAAA,mBA6GC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11997, "column": 0}, "map": {"version":3,"file":"RelationCountMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/RelationCountMetadata.ts"],"sourcesContent":["import { RelationCountMetadataArgs } from \"../metadata-args/RelationCountMetadataArgs\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { RelationMetadata } from \"./RelationMetadata\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationCountMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Relation which needs to be counted.\n     */\n    relation: RelationMetadata\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string | ((object: any) => any)\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function | string\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (\n        qb: SelectQueryBuilder<any>,\n    ) => SelectQueryBuilder<any>\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        args: RelationCountMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.target = options.args.target\n        this.propertyName = options.args.propertyName\n        this.relationNameOrFactory = options.args.relation\n        this.alias = options.args.alias\n        this.queryBuilderFactory = options.args.queryBuilderFactory\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation count metadata properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath =\n            typeof this.relationNameOrFactory === \"function\"\n                ? this.relationNameOrFactory(this.entityMetadata.propertiesMap)\n                : this.relationNameOrFactory\n        const relation =\n            this.entityMetadata.findRelationWithPropertyPath(propertyPath)\n        if (!relation)\n            throw new TypeORMError(\n                `Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`,\n            )\n\n        this.relation = relation\n    }\n}\n"],"names":[],"mappings":";;;;;AAIA,MAAA,8BAAuC;AAEvC;;GAEG,CACH,MAAa,qBAAqB;IA0C9B,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,YAAY,OAGX,CAAA;QACG,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAC5C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAA;QACjC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAA;QAC7C,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAA;QAClD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAA;QAC/B,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAA;IAC/D,CAAC;IAED,wEAAwE;IACxE,yBAAyB;IACzB,wEAAwE;IAExE;;;OAGG,CACH,KAAK,GAAA;QACD,MAAM,YAAY,GACd,OAAO,IAAI,CAAC,qBAAqB,KAAK,UAAU,GAC1C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,GAC7D,IAAI,CAAC,qBAAqB,CAAA;QACpC,MAAM,QAAQ,GACV,IAAI,CAAC,cAAc,CAAC,4BAA4B,CAAC,YAAY,CAAC,CAAA;QAClE,IAAI,CAAC,QAAQ,EACT,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,qBAAA,EAAwB,YAAY,CAAA,wDAAA,CAA0D,CACjG,CAAA;QAEL,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC5B,CAAC;CACJ;AAhFD,QAAA,qBAAA,GAAA,sBAgFC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12036, "column": 0}, "map": {"version":3,"file":"EventListenerTypes.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/metadata/types/EventListenerTypes.ts"],"sourcesContent":["/**\n * All types that entity listener can be.\n */\nexport type EventListenerType =\n    | \"after-load\"\n    | \"before-insert\"\n    | \"after-insert\"\n    | \"before-update\"\n    | \"after-update\"\n    | \"before-remove\"\n    | \"after-remove\"\n    | \"before-soft-remove\"\n    | \"after-soft-remove\"\n    | \"before-recover\"\n    | \"after-recover\"\n\n/**\n * Provides a constants for each entity listener type.\n */\nexport class EventListenerTypes {\n    static AFTER_LOAD = \"after-load\" as const\n    static BEFORE_INSERT = \"before-insert\" as const\n    static AFTER_INSERT = \"after-insert\" as const\n    static BEFORE_UPDATE = \"before-update\" as const\n    static AFTER_UPDATE = \"after-update\" as const\n    static BEFORE_REMOVE = \"before-remove\" as const\n    static AFTER_REMOVE = \"after-remove\" as const\n    static BEFORE_SOFT_REMOVE = \"before-soft-remove\" as const\n    static AFTER_SOFT_REMOVE = \"after-soft-remove\" as const\n    static BEFORE_RECOVER = \"before-recover\" as const\n    static AFTER_RECOVER = \"after-recover\" as const\n}\n"],"names":[],"mappings":";;;;;AAgBA;;GAEG,CACH,MAAa,kBAAkB;;AAA/B,QAAA,kBAAA,GAAA,mBAYC;AAXU,mBAAA,UAAU,GAAG,YAAqB,CAAA;AAClC,mBAAA,aAAa,GAAG,eAAwB,CAAA;AACxC,mBAAA,YAAY,GAAG,cAAuB,CAAA;AACtC,mBAAA,aAAa,GAAG,eAAwB,CAAA;AACxC,mBAAA,YAAY,GAAG,cAAuB,CAAA;AACtC,mBAAA,aAAa,GAAG,eAAwB,CAAA;AACxC,mBAAA,YAAY,GAAG,cAAuB,CAAA;AACtC,mBAAA,kBAAkB,GAAG,oBAA6B,CAAA;AAClD,mBAAA,iBAAiB,GAAG,mBAA4B,CAAA;AAChD,mBAAA,cAAc,GAAG,gBAAyB,CAAA;AAC1C,mBAAA,aAAa,GAAG,eAAwB,CAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12062, "column": 0}, "map": {"version":3,"file":"ForeignKeyMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/ForeignKeyMetadata.ts"],"sourcesContent":["import { ColumnMetadata } from \"./ColumnMetadata\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { DeferrableType } from \"./types/DeferrableType\"\nimport { OnDeleteType } from \"./types/OnDeleteType\"\nimport { OnUpdateType } from \"./types/OnUpdateType\"\n\n/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this foreign key is.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Entity metadata which this foreign key references.\n     */\n    referencedEntityMetadata: EntityMetadata\n\n    /**\n     * Array of columns of this foreign key.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * Array of referenced columns.\n     */\n    referencedColumns: ColumnMetadata[] = []\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    onUpdate?: OnUpdateType\n\n    /**\n     * When to check the constraints of a foreign key.\n     */\n    deferrable?: DeferrableType\n\n    /**\n     * Gets the table name to which this foreign key is referenced.\n     */\n    referencedTablePath: string\n\n    /**\n     * Gets foreign key name.\n     * If unique constraint name was given by a user then it stores givenName.\n     * If unique constraint name was not given then its generated.\n     */\n    name: string\n\n    /**\n     * Gets array of column names.\n     */\n    columnNames: string[] = []\n\n    /**\n     * Gets array of referenced column names.\n     */\n    referencedColumnNames: string[] = []\n\n    /**\n     * User specified unique constraint name.\n     */\n    givenName?: string\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        referencedEntityMetadata: EntityMetadata\n        namingStrategy?: NamingStrategyInterface\n        columns: ColumnMetadata[]\n        referencedColumns: ColumnMetadata[]\n        onDelete?: OnDeleteType\n        onUpdate?: OnUpdateType\n        deferrable?: DeferrableType\n        name?: string\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.referencedEntityMetadata = options.referencedEntityMetadata\n        this.columns = options.columns\n        this.referencedColumns = options.referencedColumns\n        this.onDelete = options.onDelete || \"NO ACTION\"\n        this.onUpdate = options.onUpdate || \"NO ACTION\"\n        this.deferrable = options.deferrable\n        this.givenName = options.name\n        if (options.namingStrategy) this.build(options.namingStrategy)\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy: NamingStrategyInterface) {\n        this.columnNames = this.columns.map((column) => column.databaseName)\n        this.referencedColumnNames = this.referencedColumns.map(\n            (column) => column.databaseName,\n        )\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.foreignKeyName(\n                  this.entityMetadata.tableName,\n                  this.columnNames,\n                  this.referencedEntityMetadata.tableName,\n                  this.referencedColumnNames,\n              )\n    }\n}\n"],"names":[],"mappings":";;;;;AAOA;;GAEG,CACH,MAAa,kBAAkB;IAmE3B,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,YAAY,OAUX,CAAA;QAlED;;WAEG,CACH,IAAA,CAAA,OAAO,GAAqB,EAAE,CAAA;QAE9B;;WAEG,CACH,IAAA,CAAA,iBAAiB,GAAqB,EAAE,CAAA;QA6BxC;;WAEG,CACH,IAAA,CAAA,WAAW,GAAa,EAAE,CAAA;QAE1B;;WAEG,CACH,IAAA,CAAA,qBAAqB,GAAa,EAAE,CAAA;QAsBhC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAC5C,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAA;QAChE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;QAC9B,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAA;QAClD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,WAAW,CAAA;QAC/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,WAAW,CAAA;QAC/C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;QACpC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAA;QAC7B,IAAI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;IAClE,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;;OAGG,CACH,KAAK,CAAC,cAAuC,EAAA;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,YAAY,CAAC,CAAA;QACpE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CACnD,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,YAAY,CAClC,CAAA;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAA;QAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,GACpB,IAAI,CAAC,SAAS,GACd,cAAc,CAAC,cAAc,CACzB,IAAI,CAAC,cAAc,CAAC,SAAS,EAC7B,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,wBAAwB,CAAC,SAAS,EACvC,IAAI,CAAC,qBAAqB,CAC7B,CAAA;IACX,CAAC;CACJ;AApHD,QAAA,kBAAA,GAAA,mBAoHC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12115, "column": 0}, "map": {"version":3,"file":"UniqueMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/UniqueMetadata.ts"],"sourcesContent":["import { EmbeddedMetadata } from \"./EmbeddedMetadata\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { ColumnMetadata } from \"./ColumnMetadata\"\nimport { UniqueMetadataArgs } from \"../metadata-args/UniqueMetadataArgs\"\nimport { TypeORMError } from \"../error\"\nimport { DeferrableType } from \"./types/DeferrableType\"\n\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\nexport class UniqueMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this unique constraint is applied.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Embedded metadata if this unique was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function | string\n\n    /**\n     * Unique columns.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * Indicate if unique constraints can be deferred.\n     */\n    deferrable?: DeferrableType\n\n    /**\n     * User specified unique constraint name.\n     */\n    givenName?: string\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?:\n        | ((object?: any) => any[] | { [key: string]: number })\n        | string[]\n\n    /**\n     * Final unique constraint name.\n     * If unique constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If unique constraint name was not given then its generated.\n     */\n    name: string\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {}\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        columns?: ColumnMetadata[]\n        args?: UniqueMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata\n        if (options.columns) this.columns = options.columns\n\n        if (options.args) {\n            this.target = options.args.target\n            this.givenName = options.args.name\n            this.givenColumnNames = options.args.columns\n            this.deferrable = options.args.deferrable\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend unique constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        const map: { [key: string]: number } = {}\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = []\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(\n                    (columnName) => {\n                        if (this.embeddedMetadata)\n                            return (\n                                this.embeddedMetadata.propertyPath +\n                                \".\" +\n                                columnName\n                            )\n\n                        return columnName.trim()\n                    },\n                )\n                columnPropertyPaths.forEach(\n                    (propertyPath) => (map[propertyPath] = 1),\n                )\n            } else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(\n                    this.entityMetadata.propertiesMap,\n                )\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) =>\n                        String(i),\n                    )\n                    columnPropertyPaths.forEach((name) => (map[name] = 1))\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map(\n                        (i: any) => String(i),\n                    )\n                    Object.keys(columnsFnResult).forEach(\n                        (columnName) =>\n                            (map[columnName] = columnsFnResult[columnName]),\n                    )\n                }\n            }\n\n            this.columns = columnPropertyPaths\n                .map((propertyName) => {\n                    const columnWithSameName = this.entityMetadata.columns.find(\n                        (column) => column.propertyPath === propertyName,\n                    )\n                    if (columnWithSameName) {\n                        return [columnWithSameName]\n                    }\n                    const relationWithSameName =\n                        this.entityMetadata.relations.find(\n                            (relation) =>\n                                relation.isWithJoinColumn &&\n                                relation.propertyName === propertyName,\n                        )\n                    if (relationWithSameName) {\n                        return relationWithSameName.joinColumns\n                    }\n                    const indexName = this.givenName\n                        ? '\"' + this.givenName + '\" '\n                        : \"\"\n                    const entityName = this.entityMetadata.targetName\n                    throw new TypeORMError(\n                        `Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                            propertyName,\n                    )\n                })\n                .reduce((a, b) => a.concat(b))\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(\n            (updatedMap, key) => {\n                const column = this.entityMetadata.columns.find(\n                    (column) => column.propertyPath === key,\n                )\n                if (column) updatedMap[column.databasePath] = map[key]\n\n                return updatedMap\n            },\n            {} as { [key: string]: number },\n        )\n\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.uniqueConstraintName(\n                  this.entityMetadata.tableName,\n                  this.columns.map((column) => column.databaseName),\n              )\n        return this\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12204, "column": 0}, "map": {"version":3,"file":"EntityListenerMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/EntityListenerMetadata.ts"],"sourcesContent":["import { EventListenerType } from \"./types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../metadata-args/EntityListenerMetadataArgs\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\n\n/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n    // ---------------------------------------------------------------------\n    // Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the listener.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Embedded metadata of the listener, in the case if listener is in embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Target class to which metadata is applied.\n     * This can be different then entityMetadata.target in the case if listener is in the embedded.\n     */\n    target: Function | string\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string\n\n    /**\n     * The type of the listener.\n     */\n    type: EventListenerType\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        args: EntityListenerMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata\n        this.target = options.args.target\n        this.propertyName = options.args.propertyName\n        this.type = options.args.type\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    isAllowed(entity: ObjectLiteral) {\n        // todo: create in entity metadata method like isInherited?\n        return (\n            this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n            (typeof this.entityMetadata.target === \"function\" &&\n                entity.constructor.prototype instanceof\n                    this.entityMetadata.target)\n        ) // todo: also need to implement entity schema inheritance\n    }\n\n    /**\n     * Executes listener method of the given entity.\n     */\n    execute(entity: ObjectLiteral) {\n        // Check if the Embedded Metadata does not exist\n        if (!this.embeddedMetadata) {\n            // Get the Entity's Method\n            const entityMethod = entity[this.propertyName]\n\n            // Check if the Entity Method does not exist\n            if (!entityMethod)\n                throw new Error(\n                    `Entity listener method \"${this.propertyName}\" does not exist in entity \"${entity.constructor.name}\".`,\n                )\n\n            // Check if the Entity Method is not a function\n            if (typeof entityMethod !== \"function\")\n                throw new Error(\n                    `Entity listener method \"${this.propertyName}\" in entity \"${\n                        entity.constructor.name\n                    }\" must be a function but got \"${typeof entityMethod}\".`,\n                )\n\n            // Call and return the Entity Method\n            return entityMethod.call(entity)\n        }\n\n        // Call the Embedded Method\n        this.callEntityEmbeddedMethod(\n            entity,\n            this.embeddedMetadata.propertyPath.split(\".\"),\n        )\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Calls embedded entity listener method no matter how nested it is.\n     */\n    protected callEntityEmbeddedMethod(\n        entity: ObjectLiteral,\n        propertyPaths: string[],\n    ): void {\n        const propertyPath = propertyPaths.shift()\n        if (!propertyPath || !entity[propertyPath]) return\n\n        if (propertyPaths.length === 0) {\n            if (Array.isArray(entity[propertyPath])) {\n                entity[propertyPath].map((embedded: ObjectLiteral) =>\n                    embedded[this.propertyName](),\n                )\n            } else {\n                entity[propertyPath][this.propertyName]()\n            }\n        } else {\n            if (entity[propertyPath])\n                this.callEntityEmbeddedMethod(\n                    entity[propertyPath],\n                    propertyPaths,\n                )\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12273, "column": 0}, "map": {"version":3,"file":"CheckMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/CheckMetadata.ts"],"sourcesContent":["import { EntityMetadata } from \"./EntityMetadata\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { CheckMetadataArgs } from \"../metadata-args/CheckMetadataArgs\"\n\n/**\n * Check metadata contains all information about table's check constraints.\n */\nexport class CheckMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this check constraint is applied.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function | string\n\n    /**\n     * Check expression.\n     */\n    expression: string\n\n    /**\n     * User specified check constraint name.\n     */\n    givenName?: string\n\n    /**\n     * Final check constraint name.\n     * If check constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If check constraint name was not given then its generated.\n     */\n    name: string\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        args?: CheckMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n\n        if (options.args) {\n            this.target = options.args.target\n            this.expression = options.args.expression\n            this.givenName = options.args.name\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend check constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.checkConstraintName(\n                  this.entityMetadata.tableName,\n                  this.expression,\n              )\n        return this\n    }\n}\n"],"names":[],"mappings":";;;;;AAIA;;GAEG,CACH,MAAa,aAAa;IAgCtB,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,YAAY,OAGX,CAAA;QACG,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAE5C,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAA;YACjC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAA;YACzC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAA;QACtC,CAAC;IACL,CAAC;IAED,wEAAwE;IACxE,uBAAuB;IACvB,wEAAwE;IAExE;;;OAGG,CACH,KAAK,CAAC,cAAuC,EAAA;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,GACpB,IAAI,CAAC,SAAS,GACd,cAAc,CAAC,mBAAmB,CAC9B,IAAI,CAAC,cAAc,CAAC,SAAS,EAC7B,IAAI,CAAC,UAAU,CAClB,CAAA;QACP,OAAO,IAAI,CAAA;IACf,CAAC;CACJ;AAlED,QAAA,aAAA,GAAA,cAkEC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12309, "column": 0}, "map": {"version":3,"file":"ExclusionMetadata.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/metadata/ExclusionMetadata.ts"],"sourcesContent":["import { EntityMetadata } from \"./EntityMetadata\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { ExclusionMetadataArgs } from \"../metadata-args/ExclusionMetadataArgs\"\n\n/**\n * Exclusion metadata contains all information about table's exclusion constraints.\n */\nexport class ExclusionMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this exclusion constraint is applied.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function | string\n\n    /**\n     * Exclusion expression.\n     */\n    expression: string\n\n    /**\n     * User specified exclusion constraint name.\n     */\n    givenName?: string\n\n    /**\n     * Final exclusion constraint name.\n     * If exclusion constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If exclusion constraint name was not given then its generated.\n     */\n    name: string\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        args?: ExclusionMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n\n        if (options.args) {\n            this.target = options.args.target\n            this.expression = options.args.expression\n            this.givenName = options.args.name\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend exclusion constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.exclusionConstraintName(\n                  this.entityMetadata.tableName,\n                  this.expression,\n              )\n        return this\n    }\n}\n"],"names":[],"mappings":";;;;;AAIA;;GAEG,CACH,MAAa,iBAAiB;IAgC1B,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,YAAY,OAGX,CAAA;QACG,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAE5C,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAA;YACjC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,CAAA;YACzC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAA;QACtC,CAAC;IACL,CAAC;IAED,wEAAwE;IACxE,uBAAuB;IACvB,wEAAwE;IAExE;;;OAGG,CACH,KAAK,CAAC,cAAuC,EAAA;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,GACpB,IAAI,CAAC,SAAS,GACd,cAAc,CAAC,uBAAuB,CAClC,IAAI,CAAC,cAAc,CAAC,SAAS,EAC7B,IAAI,CAAC,UAAU,CAClB,CAAA;QACP,OAAO,IAAI,CAAA;IACf,CAAC;CACJ;AAlED,QAAA,iBAAA,GAAA,kBAkEC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12345, "column": 0}, "map": {"version":3,"file":"EntityManager.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-manager/EntityManager.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\"\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { RemoveOptions } from \"../repository/RemoveOptions\"\nimport { SaveOptions } from \"../repository/SaveOptions\"\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { Repository } from \"../repository/Repository\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\"\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\"\nimport {\n    CustomRepositoryCannotInheritRepositoryError,\n    CustomRepositoryNotFoundError,\n    TreeRepositoryNotSupportedError,\n    TypeORMError,\n} from \"../error\"\nimport { AbstractRepository } from \"../repository/AbstractRepository\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { UpsertOptions } from \"../repository/UpsertOptions\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\nimport { buildSqlTag } from \"../util/SqlTagUtils\"\nimport { OrmUtils } from \"../util/OrmUtils\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"EntityManager\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by repositories.\n     * Created as a future replacement for the #repositories to provide a bit more perf optimization.\n     */\n    protected repositories = new Map<EntityTarget<any>, Repository<any>>()\n\n    /**\n     * Once created and then reused by repositories.\n     */\n    protected treeRepositories: TreeRepository<any>[] = []\n\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n    protected plainObjectToEntityTransformer =\n        new PlainObjectToNewEntityTransformer()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\n        this.connection = connection\n        if (queryRunner) {\n            this.queryRunner = queryRunner\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this })\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T> {\n        const isolation =\n            typeof isolationOrRunInTransaction === \"string\"\n                ? isolationOrRunInTransaction\n                : undefined\n        const runInTransaction =\n            typeof isolationOrRunInTransaction === \"function\"\n                ? isolationOrRunInTransaction\n                : runInTransactionParam\n\n        if (!runInTransaction) {\n            throw new TypeORMError(\n                `Transaction method requires callback in second parameter if isolation level is supplied.`,\n            )\n        }\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n\n        try {\n            await queryRunner.startTransaction(isolation)\n            const result = await runInTransaction(queryRunner.manager)\n            await queryRunner.commitTransaction()\n            return result\n        } catch (err) {\n            try {\n                // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw err\n        } finally {\n            if (!this.queryRunner)\n                // if we used a new query runner provider then release it\n                await queryRunner.release()\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     *\n     * @see [Official docs](https://typeorm.io/entity-manager-api) for examples.\n     */\n    async query<T = any>(query: string, parameters?: any[]): Promise<T> {\n        return this.connection.query(query, parameters, this.queryRunner)\n    }\n\n    /**\n     * Tagged template function that executes raw SQL query and returns raw database results.\n     * Template expressions are automatically transformed into database parameters.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     * Note: Don't call this as a regular function, it is meant to be used with backticks to tag a template literal.\n     * Example: entityManager.sql`SELECT * FROM table_name WHERE id = ${id}`\n     */\n    async sql<T = any>(\n        strings: TemplateStringsArray,\n        ...values: unknown[]\n    ): Promise<T> {\n        const { query, parameters } = buildSqlTag({\n            driver: this.connection.driver,\n            strings: strings,\n            expressions: values,\n        })\n\n        return await this.query(query, parameters)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(\n                entityClass as EntityTarget<Entity>,\n                alias,\n                queryRunner || this.queryRunner,\n            )\n        } else {\n            return this.connection.createQueryBuilder(\n                (entityClass as QueryRunner | undefined) ||\n                    queryRunner ||\n                    this.queryRunner,\n            )\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function | string, entity: any): boolean\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any | Function | string, maybeEntity?: any): boolean {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: EntityTarget<any>, entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any | EntityTarget<any>, maybeEntity?: any): any {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.getEntityIdMixedMap(entity)\n    }\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity, EntityLike extends DeepPartial<Entity>>(\n        entityClass: EntityTarget<Entity>,\n        plainObject?: EntityLike,\n    ): Entity\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity, EntityLike extends DeepPartial<Entity>>(\n        entityClass: EntityTarget<Entity>,\n        plainObjects?: EntityLike[],\n    ): Entity[]\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity, EntityLike extends DeepPartial<Entity>>(\n        entityClass: EntityTarget<Entity>,\n        plainObjectOrObjects?: EntityLike | EntityLike[],\n    ): Entity | Entity[] {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        if (!plainObjectOrObjects) return metadata.create(this.queryRunner)\n\n        if (Array.isArray(plainObjectOrObjects))\n            return (plainObjectOrObjects as EntityLike[]).map(\n                (plainEntityLike) => this.create(entityClass, plainEntityLike),\n            )\n\n        const mergeIntoEntity = metadata.create(this.queryRunner)\n        this.plainObjectToEntityTransformer.transform(\n            mergeIntoEntity,\n            plainObjectOrObjects,\n            metadata,\n            true,\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass)\n        entityLikes.forEach((object) =>\n            this.plainObjectToEntityTransformer.transform(\n                mergeIntoEntity,\n                object,\n                metadata,\n            ),\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const plainObjectToDatabaseEntityTransformer =\n            new PlainObjectToDatabaseEntityTransformer(this.connection.manager)\n        const transformedEntity =\n            await plainObjectToDatabaseEntityTransformer.transform(\n                entityLike,\n                metadata,\n            )\n        if (transformedEntity)\n            return this.merge(\n                entityClass as any,\n                transformedEntity as Entity,\n                entityLike,\n            )\n\n        return undefined\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"save\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity,\n        options?: RemoveOptions,\n    ): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity extends ObjectLiteral>(\n        targetOrEntity: (Entity | Entity[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: Entity | Entity[],\n        maybeOptions?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        // normalize mixed parameters\n        const target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: Entity | Entity[] = target\n            ? (maybeEntityOrOptions as Entity | Entity[])\n            : (targetOrEntity as Entity | Entity[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute soft-remove operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"soft-remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute recover operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"recover\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute()\n    }\n\n    async upsert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        const metadata = this.connection.getMetadata(target)\n\n        let options: UpsertOptions<Entity>\n\n        if (Array.isArray(conflictPathsOrOptions)) {\n            options = {\n                conflictPaths: conflictPathsOrOptions,\n            }\n        } else {\n            options = conflictPathsOrOptions\n        }\n\n        let entities: QueryDeepPartialEntity<Entity>[]\n\n        if (!Array.isArray(entityOrEntities)) {\n            entities = [entityOrEntities]\n        } else {\n            entities = entityOrEntities\n        }\n\n        const conflictColumns = metadata.mapPropertyPathsToColumns(\n            Array.isArray(options.conflictPaths)\n                ? options.conflictPaths\n                : Object.keys(options.conflictPaths),\n        )\n\n        const overwriteColumns = metadata.columns.filter(\n            (col) =>\n                !conflictColumns.includes(col) &&\n                entities.some(\n                    (entity) =>\n                        typeof col.getEntityValue(entity) !== \"undefined\",\n                ),\n        )\n\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entities)\n            .orUpdate(\n                [...conflictColumns, ...overwriteColumns].map(\n                    (col) => col.databaseName,\n                ),\n                conflictColumns.map((col) => col.databaseName),\n                {\n                    skipUpdateIfNoValuesChanged:\n                        options.skipUpdateIfNoValuesChanged,\n                    indexPredicate: options.indexPredicate,\n                    upsertType:\n                        options.upsertType ||\n                        this.connection.driver.supportedUpsertTypes[0],\n                },\n            )\n            .execute()\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (OrmUtils.isCriteriaNullOrEmpty(criteria)) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the update method.`,\n                ),\n            )\n        }\n\n        if (OrmUtils.isPrimitiveCriteria(criteria)) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Updates all entities of target type, setting fields from supplied partial entity.\n     * This is a primitive operation without cascades, relations or other operations included.\n     * Executes fast and efficient UPDATE query without WHERE clause.\n     *\n     * WARNING! This method updates ALL rows in the target table.\n     */\n    updateAll<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        return this.createQueryBuilder()\n            .update(target)\n            .set(partialEntity)\n            .execute()\n    }\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<DeleteResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (OrmUtils.isCriteriaNullOrEmpty(criteria)) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (OrmUtils.isPrimitiveCriteria(criteria)) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Deletes all entities of target type.\n     * This is a primitive operation without cascades, relations or other operations included.\n     * Executes fast and efficient DELETE query without WHERE clause.\n     *\n     * WARNING! This method deletes ALL rows in the target table.\n     */\n    deleteAll<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n    ): Promise<DeleteResult> {\n        return this.createQueryBuilder().delete().from(targetOrEntity).execute()\n    }\n\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (OrmUtils.isCriteriaNullOrEmpty(criteria)) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the softDelete method.`,\n                ),\n            )\n        }\n\n        if (OrmUtils.isPrimitiveCriteria(criteria)) {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (OrmUtils.isCriteriaNullOrEmpty(criteria)) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the restore method.`,\n                ),\n            )\n        }\n\n        if (OrmUtils.isPrimitiveCriteria(criteria)) {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Checks whether any entity exists with the given options.\n     */\n    exists<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getExists()\n    }\n\n    /**\n     * Checks whether any entity exists with the given conditions.\n     */\n    async existsBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getExists()\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getCount()\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getCount()\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"SUM\", columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"AVG\", columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MIN\", columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MAX\", columnName, where)\n    }\n\n    private async callAggregateFun<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        fnName: \"SUM\" | \"AVG\" | \"MIN\" | \"MAX\",\n        columnName: PickKeysByType<Entity, number>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[] = {},\n    ): Promise<number | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.columns.find(\n            (item) => item.propertyPath === columnName,\n        )\n        if (!column) {\n            throw new TypeORMError(\n                `Column \"${columnName}\" was not found in table \"${metadata.name}\"`,\n            )\n        }\n\n        const result = await this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .select(\n                `${fnName}(${this.connection.driver.escape(\n                    column.databaseName,\n                )})`,\n                fnName,\n            )\n            .getRawOne()\n        return result[fnName] === null ? null : parseFloat(result[fnName])\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where: where })\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where })\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        ids: any[],\n    ): Promise<Entity[]> {\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length) return Promise.resolve([])\n\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .andWhereInIds(ids)\n            .getMany()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // prepare alias for built query\n        let alias: string = metadata.name\n        if (options && options.join) {\n            alias = options.join.alias\n        }\n\n        if (!options.where) {\n            throw new Error(\n                `You must provide selection conditions in order to find a single row.`,\n            )\n        }\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, alias)\n            .setFindOptions({\n                ...options,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                where,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                take: 1,\n            })\n            .whereInIds(metadata.ensureEntityIdMap(id))\n            .getOne()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity> {\n        return this.findOne<Entity>(entityClass as any, options).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, options),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.findOneBy<Entity>(entityClass as any, where).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, where),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: EntityTarget<Entity>): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n        try {\n            return await queryRunner.clearTable(metadata.tablePath) // await is needed here because we are using finally\n        } finally {\n            if (!this.queryRunner) await queryRunner.release()\n        }\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embedded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" + \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embedded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" - \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        // find already created repository instance and return it if found\n        const repoFromMap = this.repositories.get(target)\n        if (repoFromMap) return repoFromMap\n\n        // if repository was not found then create it, store its instance and return it\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const newRepository = new MongoRepository(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        } else {\n            const newRepository = new Repository<any>(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        }\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver)\n\n        // find already created repository instance and return it if found\n        const repository = this.treeRepositories.find(\n            (repository) => repository.target === target,\n        )\n        if (repository) return repository\n\n        // check if repository is real tree repository\n        const newRepository = new TreeRepository(target, this, this.queryRunner)\n        this.treeRepositories.push(newRepository)\n        return newRepository\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(target)\n    }\n\n    /**\n     * Creates a new repository instance out of a given Repository and\n     * sets current EntityManager instance to it. Used to work with custom repositories\n     * in transactions.\n     */\n    withRepository<Entity extends ObjectLiteral, R extends Repository<any>>(\n        repository: R & Repository<Entity>,\n    ): R {\n        const repositoryConstructor =\n            repository.constructor as typeof Repository\n        const { target, manager, queryRunner, ...otherRepositoryProperties } =\n            repository\n        return Object.assign(\n            new repositoryConstructor(repository.target, this) as R,\n            {\n                ...otherRepositoryProperties,\n            },\n        )\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend to create custom repositories\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs =\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\n                return (\n                    repository.target ===\n                    (typeof customRepository === \"function\"\n                        ? customRepository\n                        : (customRepository as any).constructor)\n                )\n            })\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository)\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity\n            ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity)\n            : undefined\n        const entityRepositoryInstance =\n            new (entityRepositoryMetadataArgs.target as any)(\n                this,\n                entityMetadata,\n            )\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this\n        } else {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(\n                    customRepository,\n                )\n            ;(entityRepositoryInstance as any)[\"manager\"] = this\n            ;(entityRepositoryInstance as any)[\"metadata\"] = entityMetadata\n        }\n\n        return entityRepositoryInstance\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner) throw new NoNeedToReleaseEntityManagerError()\n\n        return this.queryRunner.release()\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12984, "column": 0}, "map": {"version":3,"file":"MongoEntityManager.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-manager/MongoEntityManager.ts"],"sourcesContent":["import { EntityManager } from \"./EntityManager\"\nimport { EntityTarget } from \"../common/EntityTarget\"\n\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\"\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\n\nimport {\n    BulkWriteResult,\n    AggregationCursor,\n    Collection,\n    FindCursor,\n    Document,\n    AggregateOptions,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    Filter,\n    CountOptions,\n    IndexSpecification,\n    CreateIndexesOptions,\n    IndexDescription,\n    DeleteResult as DeleteResultMongoDb,\n    DeleteOptions,\n    CommandOperationOptions,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    UpdateFilter,\n    FindOneAndUpdateOptions,\n    RenameOptions,\n    ReplaceOptions,\n    UpdateResult as UpdateResultMongoDb,\n    CollStats,\n    CollStatsOptions,\n    ChangeStreamOptions,\n    ChangeStream,\n    UpdateOptions,\n    ListIndexesOptions,\n    ListIndexesCursor,\n    OptionalId,\n    InsertOneOptions,\n    InsertOneResult,\n    InsertManyResult,\n    UnorderedBulkOperation,\n    OrderedBulkOperation,\n    IndexInformationOptions,\n    ObjectId,\n    FilterOperators,\n    CountDocumentsOptions,\n} from \"../driver/mongodb/typings\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport {\n    FindOptionsSelect,\n    FindOptionsSelectByString,\n} from \"../find-options/FindOptionsSelect\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"MongoEntityManager\")\n\n    get mongoQueryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver)\n            .queryRunner as MongoQueryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options.\n     */\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, options)\n    }\n\n    /**\n     * Finds entities that match given where conditions.\n     */\n    async findAndCountBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead.\n     */\n    async findByIds<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        ids: any[],\n        optionsOrConditions?: FindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            ) || {}\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        query[\"_id\"] = {\n            $in: ids.map((id) => {\n                if (typeof id === \"string\") {\n                    return new objectIdInstance(id)\n                }\n\n                if (typeof id === \"object\") {\n                    if (id instanceof objectIdInstance) {\n                        return id\n                    }\n\n                    const propertyName = metadata.objectIdColumn!.propertyName\n\n                    if (id[propertyName] instanceof objectIdInstance) {\n                        return id[propertyName]\n                    }\n                }\n            }),\n        }\n\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, id)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        // todo: convert entity to its database name\n        const result = new InsertResult()\n        if (Array.isArray(entity)) {\n            result.raw = await this.insertMany(target, entity)\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                const insertedId = result.raw.insertedIds[key]\n                result.generatedMaps.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n                result.identifiers.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n            })\n        } else {\n            result.raw = await this.insertOne(target, entity)\n            result.generatedMaps.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n            result.identifiers.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n        }\n\n        return result\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        const result = new UpdateResult()\n\n        if (Array.isArray(criteria)) {\n            const updateResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.update(target, criteriaItem, partialEntity)\n                }),\n            )\n\n            result.raw = updateResults.map((r) => r.raw)\n            result.affected = updateResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n            result.generatedMaps = updateResults.reduce(\n                (c, r) => c.concat(r.generatedMaps),\n                [] as ObjectLiteral[],\n            )\n        } else {\n            const metadata = this.connection.getMetadata(target)\n            const mongoResult = await this.updateMany(\n                target,\n                this.convertMixedCriteria(metadata, criteria),\n                { $set: partialEntity },\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.modifiedCount\n        }\n\n        return result\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral[],\n    ): Promise<DeleteResult> {\n        const result = new DeleteResult()\n\n        if (Array.isArray(criteria)) {\n            const deleteResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.delete(target, criteriaItem)\n                }),\n            )\n\n            result.raw = deleteResults.map((r) => r.raw)\n            result.affected = deleteResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n        } else {\n            const mongoResult = await this.deleteMany(\n                target,\n                this.convertMixedCriteria(\n                    this.connection.getMetadata(target),\n                    criteria,\n                ),\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.deletedCount\n        }\n\n        return result\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity, T = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<T> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.cursor(metadata.tableName, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.createCursor(entityClassOrName, query)\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity, R = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<R> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        operations: AnyBulkWriteOperation<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.bulkWrite(\n            metadata.tableName,\n            operations,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document> = {},\n        options: CountOptions = {},\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.count(metadata.tableName, query, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countDocuments<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document> = {},\n        options: CountDocumentsOptions = {},\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.countDocuments(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n        options?: CountOptions,\n    ): Promise<number> {\n        return this.count(entityClassOrName, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        fieldOrSpec: IndexSpecification,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndex(\n            metadata.tableName,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexSpecs: IndexDescription[],\n    ): Promise<string[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndexes(\n            metadata.tableName,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteMany(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteOne(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        key: string,\n        query: Filter<Document>,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.distinct(\n            metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndex(\n            metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document | null> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndDelete(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        replacement: Document,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document | null> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndReplace(\n            metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document | null> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndUpdate(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexes: string | string[],\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexExists(\n            metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: IndexInformationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexInformation(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeOrderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeUnorderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        docs: OptionalId<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertMany(\n            metadata.tableName,\n            docs,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        doc: OptionalId<Document>,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertOne(metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.isCapped(metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: ListIndexesOptions,\n    ): ListIndexesCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.listCollectionIndexes(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        newName: string,\n        options?: RenameOptions,\n    ): Promise<Collection<Document>> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.rename(\n            metadata.tableName,\n            newName,\n            options,\n        )\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        doc: Document,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.replaceOne(\n            metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: CollStatsOptions,\n    ): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.stats(metadata.tableName, options)\n    }\n\n    watch<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.watch(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateMany(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateOne(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts FindManyOptions to mongodb query.\n     */\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>\n            | any[]\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindManyOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindOneOptions<Entity>\n            | Partial<Entity>\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindOneOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1\n                    break\n                case \"ASC\":\n                    orderCriteria[key] = 1\n                    break\n                default:\n                    orderCriteria[key] = order[key]\n            }\n            return orderCriteria\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Converts FindOptions into mongodb select by criteria.\n     */\n    protected convertFindOptionsSelectToProjectCriteria(\n        selects: FindOptionsSelect<any> | FindOptionsSelectByString<any>,\n    ) {\n        if (Array.isArray(selects)) {\n            return selects.reduce((projectCriteria, key) => {\n                projectCriteria[key] = 1\n                return projectCriteria\n            }, {} as any)\n        } else {\n            // todo: implement\n            return {}\n        }\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    protected convertMixedCriteria(\n        metadata: EntityMetadata,\n        idMap: any,\n    ): ObjectLiteral {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n\n        // check first if it's ObjectId compatible:\n        // string, number, Buffer, ObjectId or ObjectId-like\n        if (objectIdInstance.isValid(idMap)) {\n            return {\n                _id: new objectIdInstance(idMap),\n            }\n        }\n\n        // if it's some other type of object build a query from the columns\n        // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance\n        if (ObjectUtils.isObject(idMap)) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap)\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue\n                return query\n            }, {} as any)\n        }\n\n        // last resort: try to convert it to an ObjectId anyway\n        // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.\n        // it can still pass with null/undefined\n        return {\n            _id: new objectIdInstance(idMap),\n        }\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    protected applyEntityTransformationToCursor<Entity extends ObjectLiteral>(\n        metadata: EntityMetadata,\n        cursor: FindCursor<Entity> | AggregationCursor<Entity>,\n    ) {\n        const queryRunner = this.mongoQueryRunner\n\n        ;(cursor as any)[\"__to_array_func\"] = cursor.toArray\n        cursor.toArray = async () =>\n            ((cursor as any)[\"__to_array_func\"] as CallableFunction)().then(\n                async (results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer()\n                    const entities = transformer.transformAll(results, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\n                        \"Load\",\n                        metadata,\n                        entities,\n                    )\n                    return entities\n                },\n            )\n        ;(cursor as any)[\"__next_func\"] = cursor.next\n        cursor.next = async () =>\n            ((cursor as any)[\"__next_func\"] as CallableFunction)().then(\n                async (result: Entity) => {\n                    if (!result) {\n                        return result\n                    }\n                    const transformer = new DocumentToEntityTransformer()\n                    const entity = transformer.transform(result, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\"Load\", metadata, [\n                        entity,\n                    ])\n                    return entity\n                },\n            )\n    }\n\n    protected filterSoftDeleted<Entity>(\n        cursor: FindCursor<Entity>,\n        deleteDateColumn: ColumnMetadata,\n        query?: ObjectLiteral,\n    ) {\n        const { $or, ...restQuery } = query ?? {}\n        cursor.filter({\n            $or: [\n                { [deleteDateColumn.propertyName]: { $eq: null } },\n                ...(Array.isArray($or) ? $or : []),\n            ],\n            ...restQuery,\n        })\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    protected async executeFindOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: any,\n        maybeOptions?: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        const id =\n            optionsOrConditions instanceof objectIdInstance ||\n            typeof optionsOrConditions === \"string\"\n                ? optionsOrConditions\n                : undefined\n        const findOneOptionsOrConditions = (\n            id ? maybeOptions : optionsOrConditions\n        ) as any\n        const query =\n            this.convertFindOneOptionsOrConditionsToMongodbQuery(\n                findOneOptionsOrConditions,\n            ) || {}\n        if (id) {\n            query[\"_id\"] =\n                id instanceof objectIdInstance ? id : new objectIdInstance(id)\n        }\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {\n            if (findOneOptionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        findOneOptionsOrConditions.select,\n                    ),\n                )\n            if (findOneOptionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        findOneOptionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !findOneOptionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray()\n        return result.length > 0 ? result[0] : null\n    }\n\n    protected async executeFind<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | any[],\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async executeFindAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: MongoFindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<[Entity[], number]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        const [results, count] = await Promise.all<any>([\n            cursor.toArray(),\n            this.count(entityClassOrName, query),\n        ])\n        return [results, parseInt(count)]\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13570, "column": 0}, "map": {"version":3,"file":"SqljsEntityManager.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-manager/SqljsEntityManager.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { EntityManager } from \"./EntityManager\"\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\"\n\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\nexport class SqljsEntityManager extends EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"SqljsEntityManager\")\n\n    private driver: SqljsDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\n        super(connection, queryRunner)\n        this.driver = connection.driver as SqljsDriver\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\n     * or uses the given definition to open a new database.\n     */\n    async loadDatabase(\n        fileNameOrLocalStorageOrData: string | Uint8Array,\n    ): Promise<void> {\n        await this.driver.load(fileNameOrLocalStorageOrData)\n    }\n\n    /**\n     * Saves the current database to a file (Node.js) or localstorage (browser)\n     * if fileNameOrLocalStorage is not set options.location is used.\n     */\n    async saveDatabase(fileNameOrLocalStorage?: string): Promise<void> {\n        await this.driver.save(fileNameOrLocalStorage)\n    }\n\n    /**\n     * Returns the current database definition.\n     */\n    exportDatabase(): Uint8Array {\n        return this.driver.export()\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,6CAA+C;AAG/C;;;GAGG,CACH,MAAa,kBAAmB,SAAQ,gBAAA,aAAa;IAKjD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB,EAAE,WAAyB,CAAA;QACzD,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAA;QATzB,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAA;QAUrD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAqB,CAAA;IAClD,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG,CACH,KAAK,CAAC,YAAY,CACd,4BAAiD,EAAA;QAEjD,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAA;IACxD,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,YAAY,CAAC,sBAA+B,EAAA;QAC9C,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG,CACH,cAAc,GAAA;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAA;IAC/B,CAAC;CACJ;AA1CD,QAAA,kBAAA,GAAA,mBA0CC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13615, "column": 0}, "map": {"version":3,"file":"EntityManagerFactory.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-manager/EntityManagerFactory.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { EntityManager } from \"./EntityManager\"\nimport { MongoEntityManager } from \"./MongoEntityManager\"\nimport { SqljsEntityManager } from \"./SqljsEntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\n\n/**\n * Helps to create entity managers.\n */\nexport class EntityManagerFactory {\n    /**\n     * Creates a new entity manager depend on a given connection's driver.\n     */\n    create(connection: DataSource, queryRunner?: QueryRunner): EntityManager {\n        if (connection.driver.options.type === \"mongodb\")\n            return new MongoEntityManager(connection)\n\n        if (connection.driver.options.type === \"sqljs\")\n            return new SqljsEntityManager(connection, queryRunner)\n\n        return new EntityManager(connection, queryRunner)\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,6CAA+C;AAC/C,MAAA,uDAAyD;AACzD,MAAA,uDAAyD;AAGzD;;GAEG,CACH,MAAa,oBAAoB;IAC7B;;OAEG,CACH,MAAM,CAAC,UAAsB,EAAE,WAAyB,EAAA;QACpD,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,EAC5C,OAAO,IAAI,qBAAA,kBAAkB,CAAC,UAAU,CAAC,CAAA;QAE7C,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,EAC1C,OAAO,IAAI,qBAAA,kBAAkB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAA;QAE1D,OAAO,IAAI,gBAAA,aAAa,CAAC,UAAU,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;CACJ;AAbD,QAAA,oBAAA,GAAA,qBAaC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13640, "column": 0}, "map": {"version":3,"file":"BaseQueryRunner.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/query-runner/BaseQueryRunner.ts"],"sourcesContent":["import { PostgresConnectionOptions } from \"../driver/postgres/PostgresConnectionOptions\"\nimport { Query } from \"../driver/Query\"\nimport { SqlInMemory } from \"../driver/SqlInMemory\"\nimport { SqlServerConnectionOptions } from \"../driver/sqlserver/SqlServerConnectionOptions\"\nimport { TableIndex } from \"../schema-builder/table/TableIndex\"\nimport { View } from \"../schema-builder/view/View\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { Table } from \"../schema-builder/table/Table\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { TableColumn } from \"../schema-builder/table/TableColumn\"\nimport { Broadcaster } from \"../subscriber/Broadcaster\"\nimport { ReplicationMode } from \"../driver/types/ReplicationMode\"\nimport { TypeORMError } from \"../error/TypeORMError\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { TableForeignKey } from \"../schema-builder/table/TableForeignKey\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { MetadataTableType } from \"../driver/types/MetadataTableType\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { buildSqlTag } from \"../util/SqlTagUtils\"\n\nexport abstract class BaseQueryRunner {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: DataSource\n\n    /**\n     * Entity manager working only with current query runner.\n     */\n    manager: EntityManager\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {}\n\n    /**\n     * All synchronized tables in the database.\n     */\n    loadedTables: Table[] = []\n\n    /**\n     * All synchronized views in the database.\n     */\n    loadedViews: View[] = []\n\n    /**\n     * Broadcaster used on this query runner to broadcast entity events.\n     */\n    broadcaster: Broadcaster\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlInMemory: SqlInMemory = new SqlInMemory()\n\n    /**\n     * Mode in which query runner executes.\n     * Used for replication.\n     * If replication is not setup its value is ignored.\n     */\n    protected mode: ReplicationMode\n\n    /**\n     * current depth of transaction.\n     * for transactionDepth > 0 will use SAVEPOINT to start and commit/rollback transaction blocks\n     */\n    protected transactionDepth = 0\n\n    private cachedTablePaths: Record<string, string> = {}\n\n    // -------------------------------------------------------------------------\n    // Public Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes a given SQL query.\n     */\n    abstract query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult?: boolean,\n    ): Promise<any>\n\n    /**\n     * Tagged template function that executes raw SQL query and returns raw database results.\n     * Template expressions are automatically transformed into database parameters.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     * Note: Don't call this as a regular function, it is meant to be used with backticks to tag a template literal.\n     * Example: queryRunner.sql`SELECT * FROM table_name WHERE id = ${id}`\n     */\n    async sql<T = any>(\n        strings: TemplateStringsArray,\n        ...values: unknown[]\n    ): Promise<T> {\n        const { query, parameters } = buildSqlTag({\n            driver: this.connection.driver,\n            strings: strings,\n            expressions: values,\n        })\n\n        return await this.query(query, parameters)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Abstract Methods\n    // -------------------------------------------------------------------------\n\n    protected abstract loadTables(tablePaths?: string[]): Promise<Table[]>\n\n    protected abstract loadViews(tablePaths?: string[]): Promise<View[]>\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        // Do nothing\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        // Do nothing\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async getTable(tablePath: string): Promise<Table | undefined> {\n        this.loadedTables = await this.loadTables([tablePath])\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined\n    }\n\n    /**\n     * Loads all tables (with given names) from the database.\n     */\n    async getTables(tableNames?: string[]): Promise<Table[]> {\n        if (!tableNames) {\n            // Don't cache in this case.\n            // This is the new case & isn't used anywhere else anyway.\n            return await this.loadTables(tableNames)\n        }\n\n        this.loadedTables = await this.loadTables(tableNames)\n        return this.loadedTables\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getView(viewPath: string): Promise<View | undefined> {\n        this.loadedViews = await this.loadViews([viewPath])\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getViews(viewPaths?: string[]): Promise<View[]> {\n        this.loadedViews = await this.loadViews(viewPaths)\n        return this.loadedViews\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory()\n        this.sqlMemoryMode = true\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory()\n        this.sqlMemoryMode = false\n    }\n\n    /**\n     * Flushes all memorized sqls.\n     */\n    clearSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory()\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): SqlInMemory {\n        return this.sqlInMemory\n    }\n\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql(): Promise<void> {\n        for (const { query, parameters } of this.sqlInMemory.upQueries) {\n            await this.query(query, parameters)\n        }\n    }\n\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql(): Promise<void> {\n        for (const {\n            query,\n            parameters,\n        } of this.sqlInMemory.downQueries.reverse()) {\n            await this.query(query, parameters)\n        }\n    }\n\n    getReplicationMode(): ReplicationMode {\n        return this.mode\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets view from previously loaded views, otherwise loads it from database.\n     */\n    protected async getCachedView(viewName: string): Promise<View> {\n        const view = this.loadedViews.find((view) => view.name === viewName)\n        if (view) return view\n\n        const foundViews = await this.loadViews([viewName])\n        if (foundViews.length > 0) {\n            this.loadedViews.push(foundViews[0])\n            return foundViews[0]\n        } else {\n            throw new TypeORMError(`View \"${viewName}\" does not exist.`)\n        }\n    }\n\n    /**\n     * Gets table from previously loaded tables, otherwise loads it from database.\n     */\n    protected async getCachedTable(tableName: string): Promise<Table> {\n        if (tableName in this.cachedTablePaths) {\n            const tablePath = this.cachedTablePaths[tableName]\n            const table = this.loadedTables.find(\n                (table) => this.getTablePath(table) === tablePath,\n            )\n\n            if (table) {\n                return table\n            }\n        }\n\n        const foundTables = await this.loadTables([tableName])\n\n        if (foundTables.length > 0) {\n            const foundTablePath = this.getTablePath(foundTables[0])\n\n            const cachedTable = this.loadedTables.find(\n                (table) => this.getTablePath(table) === foundTablePath,\n            )\n\n            if (!cachedTable) {\n                this.cachedTablePaths[tableName] = this.getTablePath(\n                    foundTables[0],\n                )\n                this.loadedTables.push(foundTables[0])\n                return foundTables[0]\n            } else {\n                return cachedTable\n            }\n        } else {\n            throw new TypeORMError(`Table \"${tableName}\" does not exist.`)\n        }\n    }\n\n    /**\n     * Replaces loaded table with given changed table.\n     */\n    protected replaceCachedTable(table: Table, changedTable: Table): void {\n        const oldTablePath = this.getTablePath(table)\n        const foundTable = this.loadedTables.find(\n            (loadedTable) => this.getTablePath(loadedTable) === oldTablePath,\n        )\n\n        // Clean up the lookup cache..\n        for (const [key, cachedPath] of Object.entries(this.cachedTablePaths)) {\n            if (cachedPath === oldTablePath) {\n                this.cachedTablePaths[key] = this.getTablePath(changedTable)\n            }\n        }\n\n        if (foundTable) {\n            foundTable.database = changedTable.database\n            foundTable.schema = changedTable.schema\n            foundTable.name = changedTable.name\n            foundTable.columns = changedTable.columns\n            foundTable.indices = changedTable.indices\n            foundTable.foreignKeys = changedTable.foreignKeys\n            foundTable.uniques = changedTable.uniques\n            foundTable.checks = changedTable.checks\n            foundTable.justCreated = changedTable.justCreated\n            foundTable.engine = changedTable.engine\n            foundTable.comment = changedTable.comment\n        }\n    }\n\n    protected getTablePath(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): string {\n        const parsed = this.connection.driver.parseTableName(target)\n\n        return this.connection.driver.buildTableName(\n            parsed.tableName,\n            parsed.schema,\n            parsed.database,\n        )\n    }\n\n    protected getTypeormMetadataTableName(): string {\n        const options = <\n            SqlServerConnectionOptions | PostgresConnectionOptions\n        >this.connection.driver.options\n        return this.connection.driver.buildTableName(\n            this.connection.metadataTableName,\n            options.schema,\n            options.database,\n        )\n    }\n\n    /**\n     * Generates SQL query to select record from typeorm metadata table.\n     */\n    protected selectTypeormMetadataSql({\n        database,\n        schema,\n        table,\n        type,\n        name,\n    }: {\n        database?: string\n        schema?: string\n        table?: string\n        type: MetadataTableType\n        name: string\n    }): Query {\n        const qb = this.connection.createQueryBuilder()\n        const selectQb = qb\n            .select()\n            .from(this.getTypeormMetadataTableName(), \"t\")\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\n\n        if (database) {\n            selectQb.andWhere(`${qb.escape(\"database\")} = :database`, {\n                database,\n            })\n        }\n\n        if (schema) {\n            selectQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\n        }\n\n        if (table) {\n            selectQb.andWhere(`${qb.escape(\"table\")} = :table`, { table })\n        }\n\n        const [query, parameters] = selectQb.getQueryAndParameters()\n        return new Query(query, parameters)\n    }\n\n    /**\n     * Generates SQL query to insert a record into typeorm metadata table.\n     */\n    protected insertTypeormMetadataSql({\n        database,\n        schema,\n        table,\n        type,\n        name,\n        value,\n    }: {\n        database?: string\n        schema?: string\n        table?: string\n        type: MetadataTableType\n        name: string\n        value?: string\n    }): Query {\n        const [query, parameters] = this.connection\n            .createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({\n                database: database,\n                schema: schema,\n                table: table,\n                type: type,\n                name: name,\n                value: value,\n            })\n            .getQueryAndParameters()\n\n        return new Query(query, parameters)\n    }\n\n    /**\n     * Generates SQL query to delete a record from typeorm metadata table.\n     */\n    protected deleteTypeormMetadataSql({\n        database,\n        schema,\n        table,\n        type,\n        name,\n    }: {\n        database?: string\n        schema?: string\n        table?: string\n        type: MetadataTableType\n        name: string\n    }): Query {\n        const qb = this.connection.createQueryBuilder()\n        const deleteQb = qb\n            .delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\n\n        if (database) {\n            deleteQb.andWhere(`${qb.escape(\"database\")} = :database`, {\n                database,\n            })\n        }\n\n        if (schema) {\n            deleteQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\n        }\n\n        if (table) {\n            deleteQb.andWhere(`${qb.escape(\"table\")} = :table`, { table })\n        }\n\n        const [query, parameters] = deleteQb.getQueryAndParameters()\n        return new Query(query, parameters)\n    }\n\n    /**\n     * Checks if at least one of column properties was changed.\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\n     */\n    protected isColumnChanged(\n        oldColumn: TableColumn,\n        newColumn: TableColumn,\n        checkDefault?: boolean,\n        checkComment?: boolean,\n        checkEnum = true,\n    ): boolean {\n        // this logs need to debug issues in column change detection. Do not delete it!\n\n        // console.log(\"charset ---------------\");\n        // console.log(oldColumn.charset !== newColumn.charset);\n        // console.log(oldColumn.charset, newColumn.charset);\n        // console.log(\"collation ---------------\");\n        // console.log(oldColumn.collation !== newColumn.collation);\n        // console.log(oldColumn.collation, newColumn.collation);\n        // console.log(\"precision ---------------\");\n        // console.log(oldColumn.precision !== newColumn.precision);\n        // console.log(oldColumn.precision, newColumn.precision);\n        // console.log(\"scale ---------------\");\n        // console.log(oldColumn.scale !== newColumn.scale);\n        // console.log(oldColumn.scale, newColumn.scale);\n        // console.log(\"default ---------------\");\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\n        // console.log(oldColumn.default, newColumn.default);\n        // console.log(\"isNullable ---------------\");\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\n        // console.log(\"comment ---------------\");\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n        // console.log(oldColumn.comment, newColumn.comment);\n        // console.log(\"enum ---------------\");\n        // console.log(!OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []));\n        // console.log(oldColumn.enum, newColumn.enum);\n\n        return (\n            oldColumn.charset !== newColumn.charset ||\n            oldColumn.collation !== newColumn.collation ||\n            oldColumn.precision !== newColumn.precision ||\n            oldColumn.scale !== newColumn.scale ||\n            oldColumn.width !== newColumn.width || // MySQL only\n            oldColumn.zerofill !== newColumn.zerofill || // MySQL only\n            oldColumn.unsigned !== newColumn.unsigned || // MySQL only\n            oldColumn.asExpression !== newColumn.asExpression ||\n            (checkDefault && oldColumn.default !== newColumn.default) ||\n            oldColumn.onUpdate !== newColumn.onUpdate || // MySQL only\n            oldColumn.isNullable !== newColumn.isNullable ||\n            (checkComment && oldColumn.comment !== newColumn.comment) ||\n            (checkEnum && this.isEnumChanged(oldColumn, newColumn))\n        )\n    }\n\n    protected isEnumChanged(oldColumn: TableColumn, newColumn: TableColumn) {\n        return !OrmUtils.isArraysEqual(\n            oldColumn.enum || [],\n            newColumn.enum || [],\n        )\n    }\n\n    /**\n     * Checks if column length is by default.\n     */\n    protected isDefaultColumnLength(\n        table: Table,\n        column: TableColumn,\n        length: string,\n    ): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name)\n            const columnMetadata = metadata.findColumnWithDatabaseName(\n                column.name,\n            )\n\n            if (columnMetadata) {\n                const columnMetadataLength =\n                    this.connection.driver.getColumnLength(columnMetadata)\n                if (columnMetadataLength) return false\n            }\n        }\n\n        if (\n            this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].length\n        ) {\n            return (\n                this.connection.driver.dataTypeDefaults[\n                    column.type\n                ].length!.toString() === length.toString()\n            )\n        }\n\n        return false\n    }\n\n    /**\n     * Checks if column precision is by default.\n     */\n    protected isDefaultColumnPrecision(\n        table: Table,\n        column: TableColumn,\n        precision: number,\n    ): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name)\n            const columnMetadata = metadata.findColumnWithDatabaseName(\n                column.name,\n            )\n            if (\n                columnMetadata &&\n                columnMetadata.precision !== null &&\n                columnMetadata.precision !== undefined\n            )\n                return false\n        }\n\n        if (\n            this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].precision !==\n                null &&\n            this.connection.driver.dataTypeDefaults[column.type].precision !==\n                undefined\n        )\n            return (\n                this.connection.driver.dataTypeDefaults[column.type]\n                    .precision === precision\n            )\n\n        return false\n    }\n\n    /**\n     * Checks if column scale is by default.\n     */\n    protected isDefaultColumnScale(\n        table: Table,\n        column: TableColumn,\n        scale: number,\n    ): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name)\n            const columnMetadata = metadata.findColumnWithDatabaseName(\n                column.name,\n            )\n            if (\n                columnMetadata &&\n                columnMetadata.scale !== null &&\n                columnMetadata.scale !== undefined\n            )\n                return false\n        }\n\n        if (\n            this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].scale !==\n                null &&\n            this.connection.driver.dataTypeDefaults[column.type].scale !==\n                undefined\n        )\n            return (\n                this.connection.driver.dataTypeDefaults[column.type].scale ===\n                scale\n            )\n\n        return false\n    }\n\n    /**\n     * Executes sql used special for schema build.\n     */\n    protected async executeQueries(\n        upQueries: Query | Query[],\n        downQueries: Query | Query[],\n    ): Promise<void> {\n        if (InstanceChecker.isQuery(upQueries)) upQueries = [upQueries]\n        if (InstanceChecker.isQuery(downQueries)) downQueries = [downQueries]\n\n        this.sqlInMemory.upQueries.push(...upQueries)\n        this.sqlInMemory.downQueries.push(...downQueries)\n\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve() as Promise<any>\n\n        for (const { query, parameters } of upQueries) {\n            await this.query(query, parameters)\n        }\n    }\n\n    /**\n     * Generated an index name for a table and index\n     */\n    protected generateIndexName(\n        table: Table | View,\n        index: TableIndex,\n    ): string {\n        // new index may be passed without name. In this case we generate index name manually.\n        return this.connection.namingStrategy.indexName(\n            table,\n            index.columnNames,\n            index.where,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14043, "column": 0}, "map": {"version":3,"file":"QueryResult.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/query-runner/QueryResult.ts"],"sourcesContent":["/**\n * Result object returned by UpdateQueryBuilder execution.\n */\nexport class QueryResult<T = any> {\n    /**\n     * Raw SQL result returned by executed query.\n     */\n    raw: any\n\n    /**\n     * Rows\n     */\n    records: T[] = []\n\n    /**\n     * Number of affected rows/documents\n     */\n    affected?: number\n}\n"],"names":[],"mappings":";;;;;AAAA;;GAEG,CACH,MAAa,WAAW;IAAxB,aAAA;QAMI;;WAEG,CACH,IAAA,CAAA,OAAO,GAAQ,EAAE,CAAA;IAMrB,CAAC;CAAA;AAfD,QAAA,WAAA,GAAA,YAeC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14063, "column": 0}, "map": {"version":3,"file":"QueryLock.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/query-runner/QueryLock.ts"],"sourcesContent":["export class QueryLock {\n    private readonly queue: Promise<void>[] = []\n\n    async acquire(): Promise<() => void> {\n        let release: Function\n        const waitingPromise = new Promise<void>((ok) => (release = ok))\n\n        // Get track of everyone we need to wait on..\n        const otherWaitingPromises = [...this.queue]\n        // Put ourselves onto the end of the queue\n        this.queue.push(waitingPromise)\n\n        if (otherWaitingPromises.length > 0) {\n            await Promise.all(otherWaitingPromises)\n        }\n\n        return () => {\n            release()\n\n            if (this.queue.includes(waitingPromise)) {\n                this.queue.splice(this.queue.indexOf(waitingPromise), 1)\n            }\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAa,SAAS;IAAtB,aAAA;QACqB,IAAA,CAAA,KAAK,GAAoB,EAAE,CAAA;IAuBhD,CAAC;IArBG,KAAK,CAAC,OAAO,GAAA;QACT,IAAI,OAAiB,CAAA;QACrB,MAAM,cAAc,GAAG,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,CAAI,CAAF,CAAC,KAAQ,GAAG,EAAE,CAAC,CAAC,CAAA;QAEhE,6CAA6C;QAC7C,MAAM,oBAAoB,GAAG,CAAC;eAAG,IAAI,CAAC,KAAK;SAAC,CAAA;QAC5C,0CAA0C;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;QAE/B,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClC,MAAM,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAA;QAC3C,CAAC;QAED,OAAO,GAAG,EAAE;YACR,OAAO,EAAE,CAAA;YAET,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;gBACtC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAA;YAC5D,CAAC;QACL,CAAC,CAAA;IACL,CAAC;CACJ;AAxBD,QAAA,SAAA,GAAA,UAwBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14098, "column": 0}, "map": {"version":3,"file":"container.js","sourceRoot":".","sources":["file:///home/user/studio/src/container.ts"],"sourcesContent":["/**\n * Container options.\n *\n * @deprecated\n */\nexport interface UseContainerOptions {\n    /**\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\n     */\n    fallback?: boolean\n\n    /**\n     * If set to true, then default container will be used in the case if given container thrown an exception.\n     */\n    fallbackOnErrors?: boolean\n}\n\n/**\n * @deprecated\n */\nexport type ContainedType<T> = { new (...args: any[]): T } | Function\n\n/**\n * @deprecated\n */\nexport interface ContainerInterface {\n    get<T>(someClass: ContainedType<T>): T\n}\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n *\n * @deprecated\n */\nconst defaultContainer: ContainerInterface = new (class\n    implements ContainerInterface\n{\n    private instances: { type: Function; object: any }[] = []\n\n    get<T>(someClass: ContainedType<T>): T {\n        let instance = this.instances.find((i) => i.type === someClass)\n        if (!instance) {\n            instance = {\n                type: someClass,\n                object: new (someClass as new () => T)(),\n            }\n            this.instances.push(instance)\n        }\n\n        return instance.object\n    }\n})()\n\nlet userContainer: ContainerInterface\nlet userContainerOptions: UseContainerOptions | undefined\n\n/**\n * Sets container to be used by this library.\n *\n * @deprecated\n */\nexport function useContainer(\n    iocContainer: ContainerInterface,\n    options?: UseContainerOptions,\n) {\n    userContainer = iocContainer\n    userContainerOptions = options\n}\n\n/**\n * Gets the IOC container used by this library.\n *\n * @deprecated\n */\nexport function getFromContainer<T>(someClass: ContainedType<T>): T {\n    if (userContainer) {\n        try {\n            const instance = userContainer.get(someClass)\n            if (instance) return instance\n\n            if (!userContainerOptions || !userContainerOptions.fallback)\n                return instance\n        } catch (error) {\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\n                throw error\n        }\n    }\n    return defaultContainer.get<T>(someClass)\n}\n"],"names":[],"mappings":";;;;AA8DA,QAAA,YAAA,GAAA,aAMC;AAOD,QAAA,gBAAA,GAAA,iBAcC;AA5DD;;;;;GAKG,CACH,MAAM,gBAAgB,GAAuB,IAAI,AAAC;IAAA,aAAA;QAGtC,IAAA,CAAA,SAAS,GAAsC,EAAE,CAAA;IAc7D,CAAC;IAZG,GAAG,CAAI,SAA2B,EAAA;QAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,IAAI,KAAK,SAAS,CAAC,CAAA;QAC/D,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,QAAQ,GAAG;gBACP,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,IAAK,SAAyB,EAAE;aAC3C,CAAA;YACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACjC,CAAC;QAED,OAAO,QAAQ,CAAC,MAAM,CAAA;IAC1B,CAAC;CACJ,CAAC,EAAE,CAAA;AAEJ,IAAI,aAAiC,CAAA;AACrC,IAAI,oBAAqD,CAAA;AAEzD;;;;GAIG,CACH,SAAgB,YAAY,CACxB,YAAgC,EAChC,OAA6B;IAE7B,aAAa,GAAG,YAAY,CAAA;IAC5B,oBAAoB,GAAG,OAAO,CAAA;AAClC,CAAC;AAED;;;;GAIG,CACH,SAAgB,gBAAgB,CAAI,SAA2B;IAC3D,IAAI,aAAa,EAAE,CAAC;QAChB,IAAI,CAAC;YACD,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YAC7C,IAAI,QAAQ,EAAE,OAAO,QAAQ,CAAA;YAE7B,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EACvD,OAAO,QAAQ,CAAA;QACvB,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,EAC/D,MAAM,KAAK,CAAA;QACnB,CAAC;IACL,CAAC;IACD,OAAO,gBAAgB,CAAC,GAAG,CAAI,SAAS,CAAC,CAAA;AAC7C,CAAC","debugId":null}},
    {"offset": {"line": 14156, "column": 0}, "map": {"version":3,"file":"EntitySchemaEmbeddedError.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-schema/EntitySchemaEmbeddedError.ts"],"sourcesContent":["import { TypeORMError } from \"../error\"\n\nexport class EntitySchemaEmbeddedError extends TypeORMError {\n    static createEntitySchemaIsRequiredException(\n        field: string,\n    ): EntitySchemaEmbeddedError {\n        return new EntitySchemaEmbeddedError(\n            `EntitySchema is required for ${field} embedded field`,\n        )\n    }\n\n    static createTargetIsRequired(field: string): EntitySchemaEmbeddedError {\n        return new EntitySchemaEmbeddedError(\n            `Target field is required for ${field} embedded EntitySchema`,\n        )\n    }\n\n    constructor(message: string) {\n        super(message)\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,8BAAuC;AAEvC,MAAa,yBAA0B,SAAQ,QAAA,YAAY;IACvD,MAAM,CAAC,qCAAqC,CACxC,KAAa,EAAA;QAEb,OAAO,IAAI,yBAAyB,CAChC,CAAA,6BAAA,EAAgC,KAAK,CAAA,eAAA,CAAiB,CACzD,CAAA;IACL,CAAC;IAED,MAAM,CAAC,sBAAsB,CAAC,KAAa,EAAA;QACvC,OAAO,IAAI,yBAAyB,CAChC,CAAA,6BAAA,EAAgC,KAAK,CAAA,sBAAA,CAAwB,CAChE,CAAA;IACL,CAAC;IAED,YAAY,OAAe,CAAA;QACvB,KAAK,CAAC,OAAO,CAAC,CAAA;IAClB,CAAC;CACJ;AAlBD,QAAA,yBAAA,GAAA,0BAkBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14179, "column": 0}, "map": {"version":3,"file":"EntitySchemaTransformer.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-schema/EntitySchemaTransformer.ts"],"sourcesContent":["import { EntitySchema } from \"./EntitySchema\"\nimport { MetadataArgsStorage } from \"../metadata-args/MetadataArgsStorage\"\nimport { TableMetadataArgs } from \"../metadata-args/TableMetadataArgs\"\nimport { ColumnMetadataArgs } from \"../metadata-args/ColumnMetadataArgs\"\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\nimport { RelationMetadataArgs } from \"../metadata-args/RelationMetadataArgs\"\nimport { JoinColumnMetadataArgs } from \"../metadata-args/JoinColumnMetadataArgs\"\nimport { JoinTableMetadataArgs } from \"../metadata-args/JoinTableMetadataArgs\"\nimport { JoinTableOptions } from \"../decorator/options/JoinTableOptions\"\nimport { JoinTableMultipleColumnsOptions } from \"../decorator/options/JoinTableMultipleColumnsOptions\"\nimport { ColumnMode } from \"../metadata-args/types/ColumnMode\"\nimport { GeneratedMetadataArgs } from \"../metadata-args/GeneratedMetadataArgs\"\nimport { UniqueMetadataArgs } from \"../metadata-args/UniqueMetadataArgs\"\nimport { CheckMetadataArgs } from \"../metadata-args/CheckMetadataArgs\"\nimport { ExclusionMetadataArgs } from \"../metadata-args/ExclusionMetadataArgs\"\nimport { EntitySchemaColumnOptions } from \"./EntitySchemaColumnOptions\"\nimport { EntitySchemaOptions } from \"./EntitySchemaOptions\"\nimport { EntitySchemaEmbeddedError } from \"./EntitySchemaEmbeddedError\"\nimport { InheritanceMetadataArgs } from \"../metadata-args/InheritanceMetadataArgs\"\nimport { RelationIdMetadataArgs } from \"../metadata-args/RelationIdMetadataArgs\"\nimport { ForeignKeyMetadataArgs } from \"../metadata-args/ForeignKeyMetadataArgs\"\n\n/**\n * Transforms entity schema into metadata args storage.\n * The result will be just like entities read from decorators.\n */\nexport class EntitySchemaTransformer {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Transforms entity schema into new metadata args storage object.\n     */\n    transform(schemas: EntitySchema<any>[]): MetadataArgsStorage {\n        const metadataArgsStorage = new MetadataArgsStorage()\n\n        schemas.forEach((entitySchema) => {\n            const options = entitySchema.options\n\n            // add table metadata args from the schema\n            const tableMetadata: TableMetadataArgs = {\n                target: options.target || options.name,\n                name: options.tableName,\n                database: options.database,\n                schema: options.schema,\n                type: options.type || \"regular\",\n                orderBy: options.orderBy,\n                synchronize: options.synchronize,\n                withoutRowid: !!options.withoutRowid,\n                expression: options.expression,\n            }\n            metadataArgsStorage.tables.push(tableMetadata)\n\n            const { inheritance } = options\n\n            if (inheritance) {\n                metadataArgsStorage.inheritances.push({\n                    target: options.target,\n                    pattern: inheritance.pattern ?? \"STI\",\n                    column: inheritance.column\n                        ? typeof inheritance.column === \"string\"\n                            ? { name: inheritance.column }\n                            : inheritance.column\n                        : undefined,\n                } as InheritanceMetadataArgs)\n            }\n\n            const { discriminatorValue } = options\n\n            if (discriminatorValue) {\n                metadataArgsStorage.discriminatorValues.push({\n                    target: options.target || options.name,\n                    value: discriminatorValue,\n                })\n            }\n\n            this.transformColumnsRecursive(options, metadataArgsStorage)\n        })\n\n        return metadataArgsStorage\n    }\n\n    private transformColumnsRecursive(\n        options: EntitySchemaOptions<any>,\n        metadataArgsStorage: MetadataArgsStorage,\n    ): void {\n        // add columns metadata args from the schema\n        Object.keys(options.columns).forEach((columnName) => {\n            const column = options.columns[columnName]!\n\n            const regularColumn = column as EntitySchemaColumnOptions\n            let mode: ColumnMode = \"regular\"\n            if (regularColumn.createDate) mode = \"createDate\"\n            if (regularColumn.updateDate) mode = \"updateDate\"\n            if (regularColumn.deleteDate) mode = \"deleteDate\"\n            if (regularColumn.version) mode = \"version\"\n            if (regularColumn.treeChildrenCount) mode = \"treeChildrenCount\"\n            if (regularColumn.treeLevel) mode = \"treeLevel\"\n            if (regularColumn.objectId) mode = \"objectId\"\n\n            const columnArgs: ColumnMetadataArgs = {\n                target: options.target || options.name,\n                mode: mode,\n                propertyName: columnName,\n                options: {\n                    type: regularColumn.type,\n                    name: regularColumn.objectId ? \"_id\" : regularColumn.name,\n                    primaryKeyConstraintName:\n                        regularColumn.primaryKeyConstraintName,\n                    length: regularColumn.length,\n                    width: regularColumn.width,\n                    nullable: regularColumn.nullable,\n                    readonly: regularColumn.readonly,\n                    update: regularColumn.update,\n                    select: regularColumn.select,\n                    insert: regularColumn.insert,\n                    primary: regularColumn.primary,\n                    unique: regularColumn.unique,\n                    comment: regularColumn.comment,\n                    default: regularColumn.default,\n                    onUpdate: regularColumn.onUpdate,\n                    precision: regularColumn.precision,\n                    scale: regularColumn.scale,\n                    zerofill: regularColumn.zerofill,\n                    unsigned: regularColumn.unsigned,\n                    charset: regularColumn.charset,\n                    collation: regularColumn.collation,\n                    enum: regularColumn.enum,\n                    enumName: regularColumn.enumName,\n                    asExpression: regularColumn.asExpression,\n                    generatedType: regularColumn.generatedType,\n                    hstoreType: regularColumn.hstoreType,\n                    array: regularColumn.array,\n                    transformer: regularColumn.transformer,\n                    spatialFeatureType: regularColumn.spatialFeatureType,\n                    srid: regularColumn.srid,\n                },\n            }\n            metadataArgsStorage.columns.push(columnArgs)\n\n            if (regularColumn.generated) {\n                const generationArgs: GeneratedMetadataArgs = {\n                    target: options.target || options.name,\n                    propertyName: columnName,\n                    strategy:\n                        typeof regularColumn.generated === \"string\"\n                            ? regularColumn.generated\n                            : \"increment\",\n                }\n                metadataArgsStorage.generations.push(generationArgs)\n            }\n\n            if (regularColumn.unique)\n                metadataArgsStorage.uniques.push({\n                    target: options.target || options.name,\n                    columns: [columnName],\n                })\n\n            if (regularColumn.foreignKey) {\n                const foreignKey = regularColumn.foreignKey\n\n                const foreignKeyArgs: ForeignKeyMetadataArgs = {\n                    target: options.target || options.name,\n                    type: foreignKey.target,\n                    propertyName: columnName,\n                    inverseSide: foreignKey.inverseSide,\n                    name: foreignKey.name,\n                    onDelete: foreignKey.onDelete,\n                    onUpdate: foreignKey.onUpdate,\n                    deferrable: foreignKey.deferrable,\n                }\n                metadataArgsStorage.foreignKeys.push(foreignKeyArgs)\n            }\n        })\n\n        // add relation metadata args from the schema\n        if (options.relations) {\n            Object.keys(options.relations).forEach((relationName) => {\n                const relationSchema = options.relations![relationName]!\n                const relation: RelationMetadataArgs = {\n                    target: options.target || options.name,\n                    propertyName: relationName,\n                    relationType: relationSchema.type,\n                    isLazy: relationSchema.lazy || false,\n                    type: relationSchema.target,\n                    inverseSideProperty: relationSchema.inverseSide,\n                    isTreeParent: relationSchema.treeParent,\n                    isTreeChildren: relationSchema.treeChildren,\n                    options: {\n                        eager: relationSchema.eager || false,\n                        cascade: relationSchema.cascade,\n                        nullable: relationSchema.nullable,\n                        onDelete: relationSchema.onDelete,\n                        onUpdate: relationSchema.onUpdate,\n                        deferrable: relationSchema.deferrable,\n                        // primary: relationSchema.primary,\n                        createForeignKeyConstraints:\n                            relationSchema.createForeignKeyConstraints,\n                        persistence: relationSchema.persistence,\n                        orphanedRowAction: relationSchema.orphanedRowAction,\n                    },\n                }\n\n                metadataArgsStorage.relations.push(relation)\n\n                // add join column\n                if (relationSchema.joinColumn) {\n                    if (typeof relationSchema.joinColumn === \"boolean\") {\n                        const joinColumn: JoinColumnMetadataArgs = {\n                            target: options.target || options.name,\n                            propertyName: relationName,\n                        }\n                        metadataArgsStorage.joinColumns.push(joinColumn)\n                    } else {\n                        const joinColumnsOptions = Array.isArray(\n                            relationSchema.joinColumn,\n                        )\n                            ? relationSchema.joinColumn\n                            : [relationSchema.joinColumn]\n\n                        for (const joinColumnOption of joinColumnsOptions) {\n                            const joinColumn: JoinColumnMetadataArgs = {\n                                target: options.target || options.name,\n                                propertyName: relationName,\n                                name: joinColumnOption.name,\n                                referencedColumnName:\n                                    joinColumnOption.referencedColumnName,\n                                foreignKeyConstraintName:\n                                    joinColumnOption.foreignKeyConstraintName,\n                            }\n                            metadataArgsStorage.joinColumns.push(joinColumn)\n                        }\n                    }\n                }\n\n                // add join table\n                if (relationSchema.joinTable) {\n                    if (typeof relationSchema.joinTable === \"boolean\") {\n                        const joinTable: JoinTableMetadataArgs = {\n                            target: options.target || options.name,\n                            propertyName: relationName,\n                        }\n                        metadataArgsStorage.joinTables.push(joinTable)\n                    } else {\n                        const joinTable: JoinTableMetadataArgs = {\n                            target: options.target || options.name,\n                            propertyName: relationName,\n                            name: relationSchema.joinTable.name,\n                            database: relationSchema.joinTable.database,\n                            schema: relationSchema.joinTable.schema,\n                            joinColumns: ((\n                                relationSchema.joinTable as JoinTableOptions\n                            ).joinColumn\n                                ? [\n                                      (\n                                          relationSchema.joinTable as JoinTableOptions\n                                      ).joinColumn!,\n                                  ]\n                                : (\n                                      relationSchema.joinTable as JoinTableMultipleColumnsOptions\n                                  ).joinColumns) as any,\n                            inverseJoinColumns: ((\n                                relationSchema.joinTable as JoinTableOptions\n                            ).inverseJoinColumn\n                                ? [\n                                      (\n                                          relationSchema.joinTable as JoinTableOptions\n                                      ).inverseJoinColumn!,\n                                  ]\n                                : (\n                                      relationSchema.joinTable as JoinTableMultipleColumnsOptions\n                                  ).inverseJoinColumns) as any,\n                        }\n                        metadataArgsStorage.joinTables.push(joinTable)\n                    }\n                }\n            })\n        }\n\n        // add relation id metadata args from the schema\n        if (options.relationIds) {\n            Object.keys(options.relationIds).forEach((relationIdName) => {\n                const relationIdOptions = options.relationIds![relationIdName]!\n                const relationId: RelationIdMetadataArgs = {\n                    propertyName: relationIdName,\n                    relation: relationIdOptions.relationName,\n                    target: options.target || options.name,\n                    alias: relationIdOptions.alias,\n                    queryBuilderFactory: relationIdOptions.queryBuilderFactory,\n                }\n                metadataArgsStorage.relationIds.push(relationId)\n            })\n        }\n\n        // add index metadata args from the schema\n        if (options.indices) {\n            options.indices.forEach((index) => {\n                const indexArgs: IndexMetadataArgs = {\n                    target: options.target || options.name,\n                    name: index.name,\n                    unique: index.unique === true ? true : false,\n                    spatial: index.spatial === true ? true : false,\n                    fulltext: index.fulltext === true ? true : false,\n                    nullFiltered: index.nullFiltered === true ? true : false,\n                    parser: index.parser,\n                    synchronize: index.synchronize === false ? false : true,\n                    where: index.where,\n                    sparse: index.sparse,\n                    columns: index.columns,\n                }\n                metadataArgsStorage.indices.push(indexArgs)\n            })\n        }\n\n        if (options.foreignKeys) {\n            options.foreignKeys.forEach((foreignKey) => {\n                const foreignKeyArgs: ForeignKeyMetadataArgs = {\n                    target: options.target || options.name,\n                    type: foreignKey.target,\n                    columnNames: foreignKey.columnNames,\n                    referencedColumnNames: foreignKey.referencedColumnNames,\n                    name: foreignKey.name,\n                    onDelete: foreignKey.onDelete,\n                    onUpdate: foreignKey.onUpdate,\n                    deferrable: foreignKey.deferrable,\n                }\n                metadataArgsStorage.foreignKeys.push(foreignKeyArgs)\n            })\n        }\n\n        // add unique metadata args from the schema\n        if (options.uniques) {\n            options.uniques.forEach((unique) => {\n                const uniqueArgs: UniqueMetadataArgs = {\n                    target: options.target || options.name,\n                    name: unique.name,\n                    columns: unique.columns,\n                    deferrable: unique.deferrable,\n                }\n                metadataArgsStorage.uniques.push(uniqueArgs)\n            })\n        }\n\n        // add check metadata args from the schema\n        if (options.checks) {\n            options.checks.forEach((check) => {\n                const checkArgs: CheckMetadataArgs = {\n                    target: options.target || options.name,\n                    name: check.name,\n                    expression: check.expression,\n                }\n                metadataArgsStorage.checks.push(checkArgs)\n            })\n        }\n\n        // add exclusion metadata args from the schema\n        if (options.exclusions) {\n            options.exclusions.forEach((exclusion) => {\n                const exclusionArgs: ExclusionMetadataArgs = {\n                    target: options.target || options.name,\n                    name: exclusion.name,\n                    expression: exclusion.expression,\n                }\n                metadataArgsStorage.exclusions.push(exclusionArgs)\n            })\n        }\n\n        if (options.embeddeds) {\n            Object.keys(options.embeddeds).forEach((columnName) => {\n                const embeddedOptions = options.embeddeds![columnName]\n\n                if (!embeddedOptions.schema)\n                    throw EntitySchemaEmbeddedError.createEntitySchemaIsRequiredException(\n                        columnName,\n                    )\n\n                const embeddedSchema = embeddedOptions.schema.options\n\n                metadataArgsStorage.embeddeds.push({\n                    target: options.target || options.name,\n                    propertyName: columnName,\n                    isArray: embeddedOptions.array === true,\n                    prefix:\n                        embeddedOptions.prefix !== undefined\n                            ? embeddedOptions.prefix\n                            : undefined,\n                    type: () => embeddedSchema?.target || embeddedSchema.name,\n                })\n\n                this.transformColumnsRecursive(\n                    embeddedSchema,\n                    metadataArgsStorage,\n                )\n            })\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14496, "column": 0}, "map": {"version":3,"file":"EntitySchema.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-schema/EntitySchema.ts"],"sourcesContent":["import { EntitySchemaOptions } from \"./EntitySchemaOptions\"\n\n/**\n * Interface for entity metadata mappings stored inside \"schemas\" instead of models decorated by decorators.\n */\nexport class EntitySchema<T = any> {\n    readonly \"@instanceof\" = Symbol.for(\"EntitySchema\")\n\n    constructor(public options: EntitySchemaOptions<T>) {}\n}\n"],"names":[],"mappings":";;;;;AAEA;;GAEG,CACH,MAAa,YAAY;IAGrB,YAAmB,OAA+B,CAAA;QAA/B,IAAA,CAAA,OAAO,GAAP,OAAO,CAAwB;QAFzC,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;IAEE,CAAC;CACzD;AAJD,QAAA,YAAA,GAAA,aAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14515, "column": 0}, "map": {"version":3,"file":"EntitySchemaEmbeddedColumnOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-schema/EntitySchemaEmbeddedColumnOptions.ts"],"sourcesContent":["import { EntitySchema } from \"./EntitySchema\"\n\nexport class EntitySchemaEmbeddedColumnOptions {\n    /**\n     * Schema of embedded entity\n     */\n    schema: EntitySchema\n\n    /**\n     * Embedded column prefix.\n     * If set to empty string or false, then prefix is not set at all.\n     */\n    prefix?: string | boolean\n\n    /**\n     * Indicates if this embedded is in array mode.\n     *\n     * This option works only in mongodb.\n     */\n    array?: boolean\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAa,iCAAiC;CAkB7C;AAlBD,QAAA,iCAAA,GAAA,kCAkBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14528, "column": 0}, "map": {"version":3,"file":"EntitySchemaOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/entity-schema/EntitySchemaOptions.ts"],"sourcesContent":["import {\n    DataSource,\n    EntitySchemaEmbeddedColumnOptions,\n    SelectQueryBuilder,\n} from \"..\"\nimport { EntitySchemaIndexOptions } from \"./EntitySchemaIndexOptions\"\nimport { EntitySchemaColumnOptions } from \"./EntitySchemaColumnOptions\"\nimport { EntitySchemaRelationOptions } from \"./EntitySchemaRelationOptions\"\nimport { OrderByCondition } from \"../find-options/OrderByCondition\"\nimport { TableType } from \"../metadata/types/TableTypes\"\nimport { EntitySchemaUniqueOptions } from \"./EntitySchemaUniqueOptions\"\nimport { EntitySchemaCheckOptions } from \"./EntitySchemaCheckOptions\"\nimport { EntitySchemaExclusionOptions } from \"./EntitySchemaExclusionOptions\"\nimport { EntitySchemaInheritanceOptions } from \"./EntitySchemaInheritanceOptions\"\nimport { EntitySchemaRelationIdOptions } from \"./EntitySchemaRelationIdOptions\"\nimport { EntitySchemaForeignKeyOptions } from \"./EntitySchemaForeignKeyOptions\"\n\n/**\n * Interface for entity metadata mappings stored inside \"schemas\" instead of models decorated by decorators.\n */\nexport class EntitySchemaOptions<T> {\n    /**\n     * Target bind to this entity schema. Optional.\n     */\n    target?: Function\n\n    /**\n     * Entity name.\n     */\n    name: string\n\n    /**\n     * Table name.\n     */\n    tableName?: string\n\n    /**\n     * Database name. Used in MySql and Sql Server.\n     */\n    database?: string\n\n    /**\n     * Schema name. Used in Postgres and Sql Server.\n     */\n    schema?: string\n\n    /**\n     * Table type.\n     */\n    type?: TableType\n\n    /**\n     * Specifies a property name by which queries will perform ordering by default when fetching rows.\n     */\n    orderBy?: OrderByCondition\n\n    /**\n     * Entity column's options.\n     */\n    columns: {\n        [P in keyof T]?: EntitySchemaColumnOptions\n    }\n\n    /**\n     * Entity relation's options.\n     */\n    relations?: {\n        [P in keyof T]?: EntitySchemaRelationOptions\n    }\n\n    /**\n     * Entity relation id options.\n     */\n    relationIds?: {\n        [P in keyof T]?: EntitySchemaRelationIdOptions\n    }\n\n    /**\n     * Entity indices options.\n     */\n    indices?: EntitySchemaIndexOptions[]\n\n    /**\n     * Entity foreign keys options.\n     */\n    foreignKeys?: EntitySchemaForeignKeyOptions[]\n\n    /**\n     * Entity uniques options.\n     */\n    uniques?: EntitySchemaUniqueOptions[]\n\n    /**\n     * Entity check options.\n     */\n    checks?: EntitySchemaCheckOptions[]\n\n    /**\n     * Entity exclusion options.\n     */\n    exclusions?: EntitySchemaExclusionOptions[]\n\n    /**\n     * Embedded Entities options\n     */\n    embeddeds?: {\n        [P in keyof Partial<T>]: EntitySchemaEmbeddedColumnOptions\n    }\n\n    /**\n     * Indicates if schema synchronization is enabled or disabled for this entity.\n     * If it will be set to false then schema sync will and migrations ignore this entity.\n     * By default schema synchronization is enabled for all entities.\n     */\n    synchronize?: boolean\n\n    /**\n     * If set to 'true' this option disables Sqlite's default behaviour of secretly creating\n     * an integer primary key column named 'rowid' on table creation.\n     * @see https://www.sqlite.org/withoutrowid.html.\n     */\n    withoutRowid?: boolean\n\n    /**\n     * View expression.\n     */\n    expression?: string | ((connection: DataSource) => SelectQueryBuilder<any>)\n\n    /**\n     * Inheritance options.\n     */\n    inheritance?: EntitySchemaInheritanceOptions\n\n    /**\n     * Custom discriminator value for Single Table Inheritance.\n     */\n    discriminatorValue?: string\n}\n"],"names":[],"mappings":";;;;;AAiBA;;GAEG,CACH,MAAa,mBAAmB;CAqH/B;AArHD,QAAA,mBAAA,GAAA,oBAqHC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14543, "column": 0}, "map": {"version":3,"file":"AbstractLogger.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/AbstractLogger.ts"],"sourcesContent":["import {\n    Logger,\n    LogLevel,\n    LogMessage,\n    LogMessageType,\n    PrepareLogMessagesOptions,\n} from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { LoggerOptions } from \"./LoggerOptions\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\n\nexport abstract class AbstractLogger implements Logger {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected options?: LoggerOptions) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (!this.isLogEnabledFor(\"query\")) {\n            return\n        }\n\n        this.writeLog(\n            \"query\",\n            {\n                type: \"query\",\n                prefix: \"query\",\n                message: query,\n                format: \"sql\",\n                parameters,\n            },\n            queryRunner,\n        )\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(\n        error: string,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (!this.isLogEnabledFor(\"query-error\")) {\n            return\n        }\n\n        this.writeLog(\n            \"warn\",\n            [\n                {\n                    type: \"query-error\",\n                    prefix: \"query failed\",\n                    message: query,\n                    format: \"sql\",\n                    parameters,\n                },\n                {\n                    type: \"query-error\",\n                    prefix: \"error\",\n                    message: error,\n                },\n            ],\n            queryRunner,\n        )\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(\n        time: number,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (!this.isLogEnabledFor(\"query-slow\")) {\n            return\n        }\n\n        this.writeLog(\n            \"warn\",\n            [\n                {\n                    type: \"query-slow\",\n                    prefix: \"query is slow\",\n                    message: query,\n                    format: \"sql\",\n                    parameters,\n                    additionalInfo: {\n                        time,\n                    },\n                },\n                {\n                    type: \"query-slow\",\n                    prefix: \"execution time\",\n                    message: time,\n                },\n            ],\n            queryRunner,\n        )\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (!this.isLogEnabledFor(\"schema-build\")) {\n            return\n        }\n\n        this.writeLog(\n            \"schema\",\n            {\n                type: \"schema-build\",\n                message,\n            },\n            queryRunner,\n        )\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        if (!this.isLogEnabledFor(\"migration\")) {\n            return\n        }\n\n        this.writeLog(\n            \"log\",\n            {\n                type: \"migration\",\n                message,\n            },\n            queryRunner,\n        )\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(\n        level: \"log\" | \"info\" | \"warn\",\n        message: any,\n        queryRunner?: QueryRunner,\n    ) {\n        switch (level) {\n            case \"log\":\n                if (!this.isLogEnabledFor(\"log\")) {\n                    return\n                }\n\n                this.writeLog(\n                    \"log\",\n                    {\n                        type: \"log\",\n                        message,\n                    },\n                    queryRunner,\n                )\n                break\n\n            case \"info\":\n                if (!this.isLogEnabledFor(\"info\")) {\n                    return\n                }\n\n                this.writeLog(\n                    \"info\",\n                    {\n                        type: \"info\",\n                        prefix: \"info\",\n                        message,\n                    },\n                    queryRunner,\n                )\n                break\n\n            case \"warn\":\n                if (!this.isLogEnabledFor(\"warn\")) {\n                    return\n                }\n\n                this.writeLog(\n                    \"warn\",\n                    {\n                        type: \"warn\",\n                        message,\n                    },\n                    queryRunner,\n                )\n                break\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Check is logging for level or message type is enabled.\n     */\n    protected isLogEnabledFor(type?: LogLevel | LogMessageType) {\n        switch (type) {\n            case \"query\":\n                return (\n                    this.options === \"all\" ||\n                    this.options === true ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"query\") !== -1)\n                )\n\n            case \"error\":\n            case \"query-error\":\n                return (\n                    this.options === \"all\" ||\n                    this.options === true ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"error\") !== -1)\n                )\n\n            case \"query-slow\":\n                return true\n\n            case \"schema\":\n            case \"schema-build\":\n                return (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"schema\") !== -1)\n                )\n\n            case \"migration\":\n                return true\n\n            case \"log\":\n                return (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"log\") !== -1)\n                )\n\n            case \"info\":\n                return (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"info\") !== -1)\n                )\n\n            case \"warn\":\n                return (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"warn\") !== -1)\n                )\n\n            default:\n                return false\n        }\n    }\n\n    /**\n     * Write log to specific output.\n     */\n    protected abstract writeLog(\n        level: LogLevel,\n        message:\n            | LogMessage\n            | string\n            | number\n            | (LogMessage | string | number)[],\n        queryRunner?: QueryRunner,\n    ): void\n\n    /**\n     * Prepare and format log messages\n     */\n    protected prepareLogMessages(\n        logMessage:\n            | LogMessage\n            | string\n            | number\n            | (LogMessage | string | number)[],\n        options?: Partial<PrepareLogMessagesOptions>,\n        queryRunner?: QueryRunner,\n    ): LogMessage[] {\n        options = {\n            ...{\n                addColonToPrefix: true,\n                appendParameterAsComment: true,\n                highlightSql: true,\n                formatSql: false,\n            },\n            ...options,\n        }\n        const messages = Array.isArray(logMessage) ? logMessage : [logMessage]\n\n        for (let message of messages) {\n            if (typeof message !== \"object\") {\n                message = {\n                    message,\n                }\n            }\n\n            if (message.format === \"sql\") {\n                let sql = String(message.message)\n\n                if (options.formatSql) {\n                    sql = PlatformTools.formatSql(\n                        sql,\n                        queryRunner?.connection?.options.type,\n                    )\n                }\n\n                if (\n                    options.appendParameterAsComment &&\n                    message.parameters &&\n                    message.parameters.length\n                ) {\n                    sql += ` -- PARAMETERS: ${this.stringifyParams(\n                        message.parameters,\n                    )}`\n                }\n\n                if (options.highlightSql) {\n                    sql = PlatformTools.highlightSql(sql)\n                }\n\n                message.message = sql\n            }\n\n            if (options.addColonToPrefix && message.prefix) {\n                message.prefix += \":\"\n            }\n        }\n\n        return messages as LogMessage[]\n    }\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters)\n        } catch (error) {\n            // most probably circular objects in parameters\n            return parameters\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14762, "column": 0}, "map": {"version":3,"file":"SimpleConsoleLogger.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/SimpleConsoleLogger.ts"],"sourcesContent":["import { AbstractLogger } from \"./AbstractLogger\"\nimport { LogLevel, LogMessage } from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and does not use syntax highlighting.\n */\nexport class SimpleConsoleLogger extends AbstractLogger {\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner,\n    ) {\n        const messages = this.prepareLogMessages(logMessage, {\n            highlightSql: false,\n        })\n\n        for (const message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                case \"schema-build\":\n                case \"migration\":\n                    console.log(message.message)\n                    break\n\n                case \"info\":\n                case \"query\":\n                    if (message.prefix) {\n                        console.info(message.prefix, message.message)\n                    } else {\n                        console.info(message.message)\n                    }\n                    break\n\n                case \"warn\":\n                case \"query-slow\":\n                    if (message.prefix) {\n                        console.warn(message.prefix, message.message)\n                    } else {\n                        console.warn(message.message)\n                    }\n                    break\n\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix) {\n                        console.error(message.prefix, message.message)\n                    } else {\n                        console.error(message.message)\n                    }\n                    break\n            }\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,+CAAiD;AAIjD;;;GAGG,CACH,MAAa,mBAAoB,SAAQ,iBAAA,cAAc;IACnD;;OAEG,CACO,QAAQ,CACd,KAAe,EACf,UAAqC,EACrC,WAAyB,EAAA;QAEzB,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE;YACjD,YAAY,EAAE,KAAK;SACtB,CAAC,CAAA;QAEF,KAAK,MAAM,OAAO,IAAI,QAAQ,CAAE,CAAC;YAC7B,OAAQ,OAAO,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC;gBAC5B,KAAK,KAAK,CAAC;gBACX,KAAK,cAAc,CAAC;gBACpB,KAAK,WAAW;oBACZ,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;oBAC5B,MAAK;gBAET,KAAK,MAAM,CAAC;gBACZ,KAAK,OAAO;oBACR,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;oBACjD,CAAC,MAAM,CAAC;wBACJ,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;oBACjC,CAAC;oBACD,MAAK;gBAET,KAAK,MAAM,CAAC;gBACZ,KAAK,YAAY;oBACb,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;oBACjD,CAAC,MAAM,CAAC;wBACJ,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;oBACjC,CAAC;oBACD,MAAK;gBAET,KAAK,OAAO,CAAC;gBACb,KAAK,aAAa;oBACd,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;oBAClD,CAAC,MAAM,CAAC;wBACJ,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;oBAClC,CAAC;oBACD,MAAK;YACb,CAAC;QACL,CAAC;IACL,CAAC;CACJ;AAlDD,QAAA,mBAAA,GAAA,oBAkDC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14819, "column": 0}, "map": {"version":3,"file":"AdvancedConsoleLogger.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/AdvancedConsoleLogger.ts"],"sourcesContent":["import { PlatformTools } from \"../platform/PlatformTools\"\nimport { AbstractLogger } from \"./AbstractLogger\"\nimport { LogLevel, LogMessage } from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger extends AbstractLogger {\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner,\n    ) {\n        const messages = this.prepareLogMessages(logMessage)\n\n        for (const message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                case \"schema-build\":\n                case \"migration\":\n                    PlatformTools.log(String(message.message))\n                    break\n\n                case \"info\":\n                case \"query\":\n                    if (message.prefix) {\n                        PlatformTools.logInfo(message.prefix, message.message)\n                    } else {\n                        PlatformTools.log(String(message.message))\n                    }\n                    break\n\n                case \"warn\":\n                case \"query-slow\":\n                    if (message.prefix) {\n                        PlatformTools.logWarn(message.prefix, message.message)\n                    } else {\n                        console.warn(\n                            PlatformTools.warn(String(message.message)),\n                        )\n                    }\n                    break\n\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix) {\n                        PlatformTools.logError(\n                            message.prefix,\n                            String(message.message),\n                        )\n                    } else {\n                        console.error(\n                            PlatformTools.error(String(message.message)),\n                        )\n                    }\n                    break\n            }\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,uDAAyD;AACzD,MAAA,+CAAiD;AAIjD;;;GAGG,CACH,MAAa,qBAAsB,SAAQ,iBAAA,cAAc;IACrD;;OAEG,CACO,QAAQ,CACd,KAAe,EACf,UAAqC,EACrC,WAAyB,EAAA;QAEzB,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAA;QAEpD,KAAK,MAAM,OAAO,IAAI,QAAQ,CAAE,CAAC;YAC7B,OAAQ,OAAO,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC;gBAC5B,KAAK,KAAK,CAAC;gBACX,KAAK,cAAc,CAAC;gBACpB,KAAK,WAAW;oBACZ,gBAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;oBAC1C,MAAK;gBAET,KAAK,MAAM,CAAC;gBACZ,KAAK,OAAO;oBACR,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,gBAAA,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;oBAC1D,CAAC,MAAM,CAAC;wBACJ,gBAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;oBAC9C,CAAC;oBACD,MAAK;gBAET,KAAK,MAAM,CAAC;gBACZ,KAAK,YAAY;oBACb,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,gBAAA,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;oBAC1D,CAAC,MAAM,CAAC;wBACJ,OAAO,CAAC,IAAI,CACR,gBAAA,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAC9C,CAAA;oBACL,CAAC;oBACD,MAAK;gBAET,KAAK,OAAO,CAAC;gBACb,KAAK,aAAa;oBACd,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,gBAAA,aAAa,CAAC,QAAQ,CAClB,OAAO,CAAC,MAAM,EACd,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAC1B,CAAA;oBACL,CAAC,MAAM,CAAC;wBACJ,OAAO,CAAC,KAAK,CACT,gBAAA,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAC/C,CAAA;oBACL,CAAC;oBACD,MAAK;YACb,CAAC;QACL,CAAC;IACL,CAAC;CACJ;AAvDD,QAAA,qBAAA,GAAA,sBAuDC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14875, "column": 0}, "map": {"version":3,"file":"FileLogger.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/FileLogger.ts"],"sourcesContent":["import { FileLoggerOptions, LoggerOptions } from \"./LoggerOptions\"\nimport { LogLevel, LogMessage } from \"./Logger\"\nimport appRootPath from \"app-root-path\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { AbstractLogger } from \"./AbstractLogger\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger logs everything into ormlogs.log file.\n */\nexport class FileLogger extends AbstractLogger {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        options?: LoggerOptions,\n        private fileLoggerOptions?: FileLoggerOptions,\n    ) {\n        super(options)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner,\n    ) {\n        const messages = this.prepareLogMessages(logMessage, {\n            highlightSql: false,\n            addColonToPrefix: false,\n        })\n\n        const strings: string[] = []\n\n        for (const message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                    strings.push(`[LOG]: ${message.message}`)\n                    break\n\n                case \"schema-build\":\n                case \"migration\":\n                    strings.push(String(message.message))\n                    break\n\n                case \"info\":\n                    strings.push(`[INFO]: ${message.message}`)\n                    break\n\n                case \"query\":\n                    strings.push(`[QUERY]: ${message.message}`)\n                    break\n\n                case \"warn\":\n                    strings.push(`[WARN]: ${message.message}`)\n                    break\n\n                case \"query-slow\":\n                    if (message.prefix === \"execution time\") {\n                        continue\n                    }\n\n                    this.write(\n                        `[SLOW QUERY: ${message.additionalInfo?.time} ms]: ${message.message}`,\n                    )\n                    break\n\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix === \"query failed\") {\n                        strings.push(`[FAILED QUERY]: ${message.message}`)\n                    } else if (message.type === \"query-error\") {\n                        strings.push(`[QUERY ERROR]: ${message.message}`)\n                    } else {\n                        strings.push(`[ERROR]: ${message.message}`)\n                    }\n                    break\n            }\n        }\n\n        this.write(strings)\n    }\n\n    /**\n     * Writes given strings into the log file.\n     */\n    protected write(strings: string | string[]) {\n        strings = Array.isArray(strings) ? strings : [strings]\n        const basePath = appRootPath.path + \"/\"\n        let logPath = \"ormlogs.log\"\n        if (this.fileLoggerOptions && this.fileLoggerOptions.logPath) {\n            logPath = PlatformTools.pathNormalize(\n                this.fileLoggerOptions.logPath,\n            )\n        }\n        strings = (strings as string[]).map(\n            (str) => \"[\" + new Date().toISOString() + \"]\" + str,\n        )\n        PlatformTools.appendFileSync(\n            basePath + logPath,\n            strings.join(\"\\r\\n\") + \"\\r\\n\",\n        ) // todo: use async or implement promises?\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14965, "column": 0}, "map": {"version":3,"file":"DebugLogger.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/DebugLogger.ts"],"sourcesContent":["import { AbstractLogger } from \"./AbstractLogger\"\nimport { debug, Debugger } from \"debug\"\nimport { LogLevel, LogMessage, LogMessageType } from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\n\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\nexport class DebugLogger extends AbstractLogger {\n    /**\n     * Object with all debug logger.\n     */\n    private logger: Record<string, Debugger> = {\n        log: debug(\"typeorm:log\"),\n        info: debug(\"typeorm:info\"),\n        warn: debug(\"typeorm:warn\"),\n        error: debug(\"typeorm:error\"),\n        query: debug(\"typeorm:query:log\"),\n        \"query-error\": debug(\"typeorm:query:error\"),\n        \"query-slow\": debug(\"typeorm:query:slow\"),\n        \"schema-build\": debug(\"typeorm:schema\"),\n        migration: debug(\"typeorm:migration\"),\n    }\n\n    /**\n     * Check is logging for level or message type is enabled.\n     */\n    protected isLogEnabledFor(type?: LogLevel | LogMessageType) {\n        switch (type) {\n            case \"query\":\n                return this.logger[\"query\"].enabled\n\n            case \"query-error\":\n                return this.logger[\"query-error\"].enabled\n\n            case \"query-slow\":\n                return true\n\n            case \"schema\":\n            case \"schema-build\":\n                return this.logger[\"schema-build\"].enabled\n\n            case \"migration\":\n                return this.logger[\"migration\"].enabled\n\n            case \"log\":\n                return this.logger[\"log\"].enabled\n\n            case \"info\":\n                return this.logger[\"info\"].enabled\n\n            case \"warn\":\n                return this.logger[\"warn\"].enabled\n\n            default:\n                return false\n        }\n    }\n\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner,\n    ) {\n        const messages = this.prepareLogMessages(logMessage, {\n            appendParameterAsComment: false,\n        })\n\n        for (const message of messages) {\n            const messageTypeOrLevel = message.type ?? level\n\n            if (messageTypeOrLevel in this.logger) {\n                if (message.prefix) {\n                    this.logger[messageTypeOrLevel](\n                        message.prefix,\n                        message.message,\n                    )\n                } else {\n                    this.logger[messageTypeOrLevel](message.message)\n                }\n\n                if (message.parameters && message.parameters.length) {\n                    this.logger[messageTypeOrLevel](\n                        \"parameters:\",\n                        message.parameters,\n                    )\n                }\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15043, "column": 0}, "map": {"version":3,"file":"FormattedConsoleLogger.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/FormattedConsoleLogger.ts"],"sourcesContent":["import { PlatformTools } from \"../platform/PlatformTools\"\nimport { AbstractLogger } from \"./AbstractLogger\"\nimport { LogLevel, LogMessage } from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events, syntax highlighting and formatting.\n */\nexport class FormattedConsoleLogger extends AbstractLogger {\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner,\n    ) {\n        const messages = this.prepareLogMessages(\n            logMessage,\n            {\n                highlightSql: true,\n                formatSql: true,\n            },\n            queryRunner,\n        )\n\n        for (let message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                case \"schema-build\":\n                case \"migration\":\n                    PlatformTools.log(String(message.message))\n                    break\n\n                case \"info\":\n                case \"query\":\n                    if (message.prefix) {\n                        PlatformTools.logInfo(message.prefix, message.message)\n                    } else {\n                        PlatformTools.log(String(message.message))\n                    }\n                    break\n\n                case \"warn\":\n                case \"query-slow\":\n                    if (message.prefix) {\n                        PlatformTools.logWarn(message.prefix, message.message)\n                    } else {\n                        console.warn(\n                            PlatformTools.warn(String(message.message)),\n                        )\n                    }\n                    break\n\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix) {\n                        PlatformTools.logError(\n                            message.prefix,\n                            String(message.message),\n                        )\n                    } else {\n                        console.error(\n                            PlatformTools.error(String(message.message)),\n                        )\n                    }\n                    break\n            }\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,uDAAyD;AACzD,MAAA,+CAAiD;AAIjD;;;GAGG,CACH,MAAa,sBAAuB,SAAQ,iBAAA,cAAc;IACtD;;OAEG,CACO,QAAQ,CACd,KAAe,EACf,UAAqC,EACrC,WAAyB,EAAA;QAEzB,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CACpC,UAAU,EACV;YACI,YAAY,EAAE,IAAI;YAClB,SAAS,EAAE,IAAI;SAClB,EACD,WAAW,CACd,CAAA;QAED,KAAK,IAAI,OAAO,IAAI,QAAQ,CAAE,CAAC;YAC3B,OAAQ,OAAO,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC;gBAC5B,KAAK,KAAK,CAAC;gBACX,KAAK,cAAc,CAAC;gBACpB,KAAK,WAAW;oBACZ,gBAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;oBAC1C,MAAK;gBAET,KAAK,MAAM,CAAC;gBACZ,KAAK,OAAO;oBACR,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,gBAAA,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;oBAC1D,CAAC,MAAM,CAAC;wBACJ,gBAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;oBAC9C,CAAC;oBACD,MAAK;gBAET,KAAK,MAAM,CAAC;gBACZ,KAAK,YAAY;oBACb,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,gBAAA,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;oBAC1D,CAAC,MAAM,CAAC;wBACJ,OAAO,CAAC,IAAI,CACR,gBAAA,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAC9C,CAAA;oBACL,CAAC;oBACD,MAAK;gBAET,KAAK,OAAO,CAAC;gBACb,KAAK,aAAa;oBACd,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,gBAAA,aAAa,CAAC,QAAQ,CAClB,OAAO,CAAC,MAAM,EACd,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAC1B,CAAA;oBACL,CAAC,MAAM,CAAC;wBACJ,OAAO,CAAC,KAAK,CACT,gBAAA,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAC/C,CAAA;oBACL,CAAC;oBACD,MAAK;YACb,CAAC;QACL,CAAC;IACL,CAAC;CACJ;AA9DD,QAAA,sBAAA,GAAA,uBA8DC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15102, "column": 0}, "map": {"version":3,"file":"LoggerFactory.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/LoggerFactory.ts"],"sourcesContent":["import { Logger } from \"./Logger\"\nimport { LoggerOptions } from \"./LoggerOptions\"\nimport { SimpleConsoleLogger } from \"./SimpleConsoleLogger\"\nimport { AdvancedConsoleLogger } from \"./AdvancedConsoleLogger\"\nimport { FileLogger } from \"./FileLogger\"\nimport { DebugLogger } from \"./DebugLogger\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { FormattedConsoleLogger } from \"./FormattedConsoleLogger\"\n\n/**\n * Helps to create logger instances.\n */\nexport class LoggerFactory {\n    /**\n     * Creates a new logger depend on a given connection's driver.\n     */\n    create(\n        logger?:\n            | \"advanced-console\"\n            | \"simple-console\"\n            | \"formatted-console\"\n            | \"file\"\n            | \"debug\"\n            | Logger,\n        options?: LoggerOptions,\n    ): Logger {\n        if (ObjectUtils.isObject(logger)) return logger as Logger\n\n        if (logger) {\n            switch (logger) {\n                case \"simple-console\":\n                    return new SimpleConsoleLogger(options)\n\n                case \"file\":\n                    return new FileLogger(options)\n\n                case \"advanced-console\":\n                    return new AdvancedConsoleLogger(options)\n\n                case \"formatted-console\":\n                    return new FormattedConsoleLogger(options)\n\n                case \"debug\":\n                    return new DebugLogger()\n            }\n        }\n\n        return new AdvancedConsoleLogger(options)\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAA,yDAA2D;AAC3D,MAAA,6DAA+D;AAC/D,MAAA,uCAAyC;AACzC,MAAA,yCAA2C;AAC3C,MAAA,+CAAiD;AACjD,MAAA,+DAAiE;AAEjE;;GAEG,CACH,MAAa,aAAa;IACtB;;OAEG,CACH,MAAM,CACF,MAMY,EACZ,OAAuB,EAAA;QAEvB,IAAI,cAAA,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO,MAAgB,CAAA;QAEzD,IAAI,MAAM,EAAE,CAAC;YACT,OAAQ,MAAM,EAAE,CAAC;gBACb,KAAK,gBAAgB;oBACjB,OAAO,IAAI,sBAAA,mBAAmB,CAAC,OAAO,CAAC,CAAA;gBAE3C,KAAK,MAAM;oBACP,OAAO,IAAI,aAAA,UAAU,CAAC,OAAO,CAAC,CAAA;gBAElC,KAAK,kBAAkB;oBACnB,OAAO,IAAI,wBAAA,qBAAqB,CAAC,OAAO,CAAC,CAAA;gBAE7C,KAAK,mBAAmB;oBACpB,OAAO,IAAI,yBAAA,sBAAsB,CAAC,OAAO,CAAC,CAAA;gBAE9C,KAAK,OAAO;oBACR,OAAO,IAAI,cAAA,WAAW,EAAE,CAAA;YAChC,CAAC;QACL,CAAC;QAED,OAAO,IAAI,wBAAA,qBAAqB,CAAC,OAAO,CAAC,CAAA;IAC7C,CAAC;CACJ;AArCD,QAAA,aAAA,GAAA,cAqCC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15143, "column": 0}, "map": {"version":3,"file":"Logger.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/Logger.ts"],"sourcesContent":["import { QueryRunner } from \"../query-runner/QueryRunner\"\n\n/**\n * Performs logging of the events in TypeORM.\n */\nexport interface Logger {\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner): any\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(\n        error: string | Error,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ): any\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(\n        time: number,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ): any\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner): any\n\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner): any\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(\n        level: \"log\" | \"info\" | \"warn\",\n        message: any,\n        queryRunner?: QueryRunner,\n    ): any\n}\n\n/**\n * Log level.\n */\nexport type LogLevel =\n    | \"query\"\n    | \"schema\"\n    | \"error\"\n    | \"warn\"\n    | \"info\"\n    | \"log\"\n    | \"migration\"\n\n/**\n * Log message.\n */\nexport type LogMessage = {\n    type?: LogMessageType\n    prefix?: string\n    message: string | number\n    format?: LogMessageFormat\n    parameters?: any[]\n    additionalInfo?: Record<string, any>\n}\n\n/**\n * Log message format.\n */\nexport type LogMessageFormat = \"sql\"\n\n/**\n * Log message type.\n */\nexport type LogMessageType =\n    | \"log\"\n    | \"info\"\n    | \"warn\"\n    | \"error\"\n    | \"query\"\n    | \"query-error\"\n    | \"query-slow\"\n    | \"schema-build\"\n    | \"migration\"\n\n/**\n * Options for prepare log messages\n */\nexport type PrepareLogMessagesOptions = {\n    highlightSql: boolean\n    formatSql: boolean\n    appendParameterAsComment: boolean\n    addColonToPrefix: boolean\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15152, "column": 0}, "map": {"version":3,"file":"LoggerOptions.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/logger/LoggerOptions.ts"],"sourcesContent":["import { LogLevel } from \"./Logger\"\n\n/**\n * Logging options.\n */\nexport type LoggerOptions = boolean | \"all\" | LogLevel[]\n\n/**\n * File logging option.\n */\nexport type FileLoggerOptions = {\n    /**\n     * Specify custom path for log file, relative to application root\n     */\n    logPath: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15161, "column": 0}, "map": {"version":3,"file":"RedisQueryResultCache.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/cache/RedisQueryResultCache.ts"],"sourcesContent":["import { QueryResultCache } from \"./QueryResultCache\"\nimport { QueryResultCacheOptions } from \"./QueryResultCacheOptions\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { TypeORMError } from \"../error/TypeORMError\"\n\n/**\n * Caches query result into Redis database.\n */\nexport class RedisQueryResultCache implements QueryResultCache {\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Redis module instance loaded dynamically.\n     */\n    protected redis: any\n\n    /**\n     * Connected redis client.\n     */\n    protected client: any\n\n    /**\n     * Type of the Redis Client (redis or ioredis).\n     */\n    protected clientType: \"redis\" | \"ioredis\" | \"ioredis/cluster\"\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        protected connection: DataSource,\n        clientType: \"redis\" | \"ioredis\" | \"ioredis/cluster\",\n    ) {\n        this.clientType = clientType\n        this.redis = this.loadRedis()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a connection with given cache provider.\n     */\n    async connect(): Promise<void> {\n        const cacheOptions: any = this.connection.options.cache\n        if (this.clientType === \"redis\") {\n            this.client = this.redis.createClient({\n                ...cacheOptions?.options,\n                legacyMode: true,\n            })\n            if (\n                typeof this.connection.options.cache === \"object\" &&\n                this.connection.options.cache.ignoreErrors\n            ) {\n                this.client.on(\"error\", (err: any) => {\n                    this.connection.logger.log(\"warn\", err)\n                })\n            }\n            if (\"connect\" in this.client) {\n                await this.client.connect()\n            }\n        } else if (this.clientType === \"ioredis\") {\n            if (cacheOptions && cacheOptions.port) {\n                if (cacheOptions.options) {\n                    this.client = new this.redis(\n                        cacheOptions.port,\n                        cacheOptions.options,\n                    )\n                } else {\n                    this.client = new this.redis(cacheOptions.port)\n                }\n            } else if (cacheOptions && cacheOptions.options) {\n                this.client = new this.redis(cacheOptions.options)\n            } else {\n                this.client = new this.redis()\n            }\n        } else if (this.clientType === \"ioredis/cluster\") {\n            if (\n                cacheOptions &&\n                cacheOptions.options &&\n                Array.isArray(cacheOptions.options)\n            ) {\n                this.client = new this.redis.Cluster(cacheOptions.options)\n            } else if (\n                cacheOptions &&\n                cacheOptions.options &&\n                cacheOptions.options.startupNodes\n            ) {\n                this.client = new this.redis.Cluster(\n                    cacheOptions.options.startupNodes,\n                    cacheOptions.options.options,\n                )\n            } else {\n                throw new TypeORMError(\n                    `options.startupNodes required for ${this.clientType}.`,\n                )\n            }\n        }\n    }\n\n    /**\n     * Disconnects the connection\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.quit((err: any, result: any) => {\n                if (err) return fail(err)\n                ok()\n                this.client = undefined\n            })\n        })\n    }\n\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner: QueryRunner): Promise<void> {}\n\n    /**\n     * Get data from cache.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(\n        options: QueryResultCacheOptions,\n        queryRunner?: QueryRunner,\n    ): Promise<QueryResultCacheOptions | undefined> {\n        return new Promise<QueryResultCacheOptions | undefined>((ok, fail) => {\n            if (options.identifier) {\n                this.client.get(options.identifier, (err: any, result: any) => {\n                    if (err) return fail(err)\n                    ok(JSON.parse(result))\n                })\n            } else if (options.query) {\n                this.client.get(options.query, (err: any, result: any) => {\n                    if (err) return fail(err)\n                    ok(JSON.parse(result))\n                })\n            } else {\n                ok(undefined)\n            }\n        })\n    }\n\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\n        return savedCache.time! + savedCache.duration < Date.now()\n    }\n\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(\n        options: QueryResultCacheOptions,\n        savedCache: QueryResultCacheOptions,\n        queryRunner?: QueryRunner,\n    ): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            if (options.identifier) {\n                this.client.set(\n                    options.identifier,\n                    JSON.stringify(options),\n                    \"PX\",\n                    options.duration,\n                    (err: any, result: any) => {\n                        if (err) return fail(err)\n                        ok()\n                    },\n                )\n            } else if (options.query) {\n                this.client.set(\n                    options.query,\n                    JSON.stringify(options),\n                    \"PX\",\n                    options.duration,\n                    (err: any, result: any) => {\n                        if (err) return fail(err)\n                        ok()\n                    },\n                )\n            }\n        })\n    }\n\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner?: QueryRunner): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.flushdb((err: any, result: any) => {\n                if (err) return fail(err)\n                ok()\n            })\n        })\n    }\n\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(\n        identifiers: string[],\n        queryRunner?: QueryRunner,\n    ): Promise<void> {\n        await Promise.all(\n            identifiers.map((identifier) => {\n                return this.deleteKey(identifier)\n            }),\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes a single key from redis database.\n     */\n    protected deleteKey(key: string): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.client.del(key, (err: any, result: any) => {\n                if (err) return fail(err)\n                ok()\n            })\n        })\n    }\n\n    /**\n     * Loads redis dependency.\n     */\n    protected loadRedis(): any {\n        try {\n            if (this.clientType === \"ioredis/cluster\") {\n                return PlatformTools.load(\"ioredis\")\n            } else {\n                return PlatformTools.load(this.clientType)\n            }\n        } catch (e) {\n            throw new TypeORMError(\n                `Cannot use cache because ${this.clientType} is not installed. Please run \"npm i ${this.clientType} --save\".`,\n            )\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15328, "column": 0}, "map": {"version":3,"file":"DbQueryResultCache.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/cache/DbQueryResultCache.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { Table } from \"../schema-builder/table/Table\"\nimport { QueryResultCache } from \"./QueryResultCache\"\nimport { QueryResultCacheOptions } from \"./QueryResultCacheOptions\"\nimport { v4 as uuidv4 } from \"uuid\"\n\n/**\n * Caches query result into current database, into separate table called \"query-result-cache\".\n */\nexport class DbQueryResultCache implements QueryResultCache {\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    private queryResultCacheTable: string\n\n    private queryResultCacheDatabase?: string\n\n    private queryResultCacheSchema?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: DataSource) {\n        const { schema } = this.connection.driver.options as any\n        const database = this.connection.driver.database\n        const cacheOptions =\n            typeof this.connection.options.cache === \"object\"\n                ? this.connection.options.cache\n                : {}\n        const cacheTableName = cacheOptions.tableName || \"query-result-cache\"\n\n        this.queryResultCacheDatabase = database\n        this.queryResultCacheSchema = schema\n        this.queryResultCacheTable = this.connection.driver.buildTableName(\n            cacheTableName,\n            schema,\n            database,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a connection with given cache provider.\n     */\n    async connect(): Promise<void> {}\n\n    /**\n     * Disconnects with given cache provider.\n     */\n    async disconnect(): Promise<void> {}\n\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner?: QueryRunner): Promise<void> {\n        queryRunner = this.getQueryRunner(queryRunner)\n        const driver = this.connection.driver\n        const tableExist = await queryRunner.hasTable(\n            this.queryResultCacheTable,\n        ) // todo: table name should be configurable\n        if (tableExist) return\n\n        await queryRunner.createTable(\n            new Table({\n                database: this.queryResultCacheDatabase,\n                schema: this.queryResultCacheSchema,\n                name: this.queryResultCacheTable,\n                columns: [\n                    {\n                        name: \"id\",\n                        isPrimary: true,\n                        isNullable: false,\n                        type: driver.normalizeType({\n                            type: driver.mappedDataTypes.cacheId,\n                        }),\n                        generationStrategy:\n                            driver.options.type === \"spanner\"\n                                ? \"uuid\"\n                                : \"increment\",\n                        isGenerated: true,\n                    },\n                    {\n                        name: \"identifier\",\n                        type: driver.normalizeType({\n                            type: driver.mappedDataTypes.cacheIdentifier,\n                        }),\n                        isNullable: true,\n                    },\n                    {\n                        name: \"time\",\n                        type: driver.normalizeType({\n                            type: driver.mappedDataTypes.cacheTime,\n                        }),\n                        isPrimary: false,\n                        isNullable: false,\n                    },\n                    {\n                        name: \"duration\",\n                        type: driver.normalizeType({\n                            type: driver.mappedDataTypes.cacheDuration,\n                        }),\n                        isPrimary: false,\n                        isNullable: false,\n                    },\n                    {\n                        name: \"query\",\n                        type: driver.normalizeType({\n                            type: driver.mappedDataTypes.cacheQuery,\n                        }),\n                        isPrimary: false,\n                        isNullable: false,\n                    },\n                    {\n                        name: \"result\",\n                        type: driver.normalizeType({\n                            type: driver.mappedDataTypes.cacheResult,\n                        }),\n                        isNullable: false,\n                    },\n                ],\n            }),\n        )\n    }\n\n    /**\n     * Get data from cache.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(\n        options: QueryResultCacheOptions,\n        queryRunner?: QueryRunner,\n    ): Promise<QueryResultCacheOptions | undefined> {\n        queryRunner = this.getQueryRunner(queryRunner)\n        const qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select()\n            .from(this.queryResultCacheTable, \"cache\")\n\n        if (options.identifier) {\n            return qb\n                .where(\n                    `${qb.escape(\"cache\")}.${qb.escape(\n                        \"identifier\",\n                    )} = :identifier`,\n                )\n                .setParameters({\n                    identifier:\n                        this.connection.driver.options.type === \"mssql\"\n                            ? new MssqlParameter(options.identifier, \"nvarchar\")\n                            : options.identifier,\n                })\n                .cache(false) // disable cache to avoid infinite loops when cache is alwaysEnable\n                .getRawOne()\n        } else if (options.query) {\n            if (this.connection.driver.options.type === \"oracle\") {\n                return qb\n                    .where(\n                        `dbms_lob.compare(${qb.escape(\"cache\")}.${qb.escape(\n                            \"query\",\n                        )}, :query) = 0`,\n                        { query: options.query },\n                    )\n                    .cache(false) // disable cache to avoid infinite loops when cache is alwaysEnable\n                    .getRawOne()\n            }\n\n            return qb\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"query\")} = :query`)\n                .setParameters({\n                    query:\n                        this.connection.driver.options.type === \"mssql\"\n                            ? new MssqlParameter(options.query, \"nvarchar\")\n                            : options.query,\n                })\n                .cache(false) // disable cache to avoid infinite loops when cache is alwaysEnable\n                .getRawOne()\n        }\n\n        return Promise.resolve(undefined)\n    }\n\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\n        const duration =\n            typeof savedCache.duration === \"string\"\n                ? parseInt(savedCache.duration)\n                : savedCache.duration\n        return (\n            (typeof savedCache.time === \"string\"\n                ? parseInt(savedCache.time as any)\n                : savedCache.time)! +\n                duration <\n            Date.now()\n        )\n    }\n\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(\n        options: QueryResultCacheOptions,\n        savedCache: QueryResultCacheOptions | undefined,\n        queryRunner?: QueryRunner,\n    ): Promise<void> {\n        const shouldCreateQueryRunner =\n            queryRunner === undefined ||\n            queryRunner?.getReplicationMode() === \"slave\"\n\n        if (queryRunner === undefined || shouldCreateQueryRunner) {\n            queryRunner = this.connection.createQueryRunner(\"master\")\n        }\n\n        let insertedValues: ObjectLiteral = options\n        if (this.connection.driver.options.type === \"mssql\") {\n            // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table\n            insertedValues = {\n                identifier: new MssqlParameter(options.identifier, \"nvarchar\"),\n                time: new MssqlParameter(options.time, \"bigint\"),\n                duration: new MssqlParameter(options.duration, \"int\"),\n                query: new MssqlParameter(options.query, \"nvarchar\"),\n                result: new MssqlParameter(options.result, \"nvarchar\"),\n            }\n        }\n\n        if (savedCache && savedCache.identifier) {\n            // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues)\n\n            qb.where(`${qb.escape(\"identifier\")} = :condition`, {\n                condition: insertedValues.identifier,\n            })\n            await qb.execute()\n        } else if (savedCache && savedCache.query) {\n            // if exist then update\n            const qb = queryRunner.manager\n                .createQueryBuilder()\n                .update(this.queryResultCacheTable)\n                .set(insertedValues)\n\n            if (this.connection.driver.options.type === \"oracle\") {\n                qb.where(`dbms_lob.compare(\"query\", :condition) = 0`, {\n                    condition: insertedValues.query,\n                })\n            } else {\n                qb.where(`${qb.escape(\"query\")} = :condition`, {\n                    condition: insertedValues.query,\n                })\n            }\n\n            await qb.execute()\n        } else {\n            // Spanner does not support auto-generated columns\n            if (\n                this.connection.driver.options.type === \"spanner\" &&\n                !insertedValues.id\n            ) {\n                insertedValues.id = uuidv4()\n            }\n\n            // otherwise insert\n            await queryRunner.manager\n                .createQueryBuilder()\n                .insert()\n                .into(this.queryResultCacheTable)\n                .values(insertedValues)\n                .execute()\n        }\n\n        if (shouldCreateQueryRunner) {\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner: QueryRunner): Promise<void> {\n        return this.getQueryRunner(queryRunner).clearTable(\n            this.queryResultCacheTable,\n        )\n    }\n\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(\n        identifiers: string[],\n        queryRunner?: QueryRunner,\n    ): Promise<void> {\n        const _queryRunner: QueryRunner = queryRunner || this.getQueryRunner()\n        await Promise.all(\n            identifiers.map((identifier) => {\n                const qb = _queryRunner.manager.createQueryBuilder()\n                return qb\n                    .delete()\n                    .from(this.queryResultCacheTable)\n                    .where(`${qb.escape(\"identifier\")} = :identifier`, {\n                        identifier,\n                    })\n                    .execute()\n            }),\n        )\n\n        if (!queryRunner) {\n            await _queryRunner.release()\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets a query runner to work with.\n     */\n    protected getQueryRunner(queryRunner?: QueryRunner): QueryRunner {\n        if (queryRunner) return queryRunner\n\n        return this.connection.createQueryRunner()\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15541, "column": 0}, "map": {"version":3,"file":"QueryResultCacheFactory.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/cache/QueryResultCacheFactory.ts"],"sourcesContent":["import { RedisQueryResultCache } from \"./RedisQueryResultCache\"\nimport { DbQueryResultCache } from \"./DbQueryResultCache\"\nimport { QueryResultCache } from \"./QueryResultCache\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { TypeORMError } from \"../error/TypeORMError\"\n\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create(): QueryResultCache {\n        if (!this.connection.options.cache)\n            throw new TypeORMError(\n                `To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`,\n            )\n\n        const cache: any = this.connection.options.cache\n\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection)\n        }\n\n        if (\n            cache.type === \"redis\" ||\n            cache.type === \"ioredis\" ||\n            cache.type === \"ioredis/cluster\"\n        ) {\n            return new RedisQueryResultCache(this.connection, cache.type)\n        } else {\n            return new DbQueryResultCache(this.connection)\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,6DAA+D;AAC/D,MAAA,uDAAyD;AAGzD,MAAA,kDAAoD;AAEpD;;GAEG,CACH,MAAa,uBAAuB;IAChC,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAsB,UAAsB,CAAA;QAAtB,IAAA,CAAA,UAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAEhD,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,MAAM,GAAA;QACF,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAC9B,MAAM,IAAI,eAAA,YAAY,CAClB,CAAA,qKAAA,CAAuK,CAC1K,CAAA;QAEL,MAAM,KAAK,GAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAA;QAEhD,IAAI,KAAK,CAAC,QAAQ,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC;YACzD,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAC1C,CAAC;QAED,IACI,KAAK,CAAC,IAAI,KAAK,OAAO,IACtB,KAAK,CAAC,IAAI,KAAK,SAAS,IACxB,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAClC,CAAC;YACC,OAAO,IAAI,wBAAA,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAA;QACjE,CAAC,MAAM,CAAC;YACJ,OAAO,IAAI,qBAAA,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAClD,CAAC;IACL,CAAC;CACJ;AApCD,QAAA,uBAAA,GAAA,wBAoCC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15582, "column": 0}, "map": {"version":3,"file":"DataSource.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/data-source/DataSource.ts"],"sourcesContent":["import { Driver } from \"../driver/Driver\"\nimport { registerQueryBuilders } from \"../query-builder\"\nimport { Repository } from \"../repository/Repository\"\nimport { EntitySubscriberInterface } from \"../subscriber/EntitySubscriberInterface\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { DefaultNamingStrategy } from \"../naming-strategy/DefaultNamingStrategy\"\nimport {\n    CannotConnectAlreadyConnectedError,\n    CannotExecuteNotConnectedError,\n    EntityMetadataNotFoundError,\n    QueryRunnerProviderAlreadyReleasedError,\n    TypeORMError,\n} from \"../error\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { Logger } from \"../logger/Logger\"\nimport { MigrationInterface } from \"../migration/MigrationInterface\"\nimport { MigrationExecutor } from \"../migration/MigrationExecutor\"\nimport { Migration } from \"../migration/Migration\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { EntityMetadataValidator } from \"../metadata-builder/EntityMetadataValidator\"\nimport { DataSourceOptions } from \"./DataSourceOptions\"\nimport { EntityManagerFactory } from \"../entity-manager/EntityManagerFactory\"\nimport { DriverFactory } from \"../driver/DriverFactory\"\nimport { ConnectionMetadataBuilder } from \"../connection/ConnectionMetadataBuilder\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { LoggerFactory } from \"../logger/LoggerFactory\"\nimport { QueryResultCacheFactory } from \"../cache/QueryResultCacheFactory\"\nimport { QueryResultCache } from \"../cache/QueryResultCache\"\nimport { SqljsEntityManager } from \"../entity-manager/SqljsEntityManager\"\nimport { RelationLoader } from \"../query-builder/RelationLoader\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ReplicationMode } from \"../driver/types/ReplicationMode\"\nimport { RelationIdLoader } from \"../query-builder/RelationIdLoader\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { buildSqlTag } from \"../util/SqlTagUtils\"\n\nregisterQueryBuilders()\n\n/**\n * DataSource is a pre-defined connection configuration to a specific database.\n * You can have multiple data sources connected (with multiple connections in it),\n * connected to multiple databases in your application.\n *\n * Before, it was called `Connection`, but now `Connection` is deprecated\n * because `Connection` isn't the best name for what it's actually is.\n */\nexport class DataSource {\n    readonly \"@instanceof\" = Symbol.for(\"DataSource\")\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     *\n     * @deprecated we don't need names anymore since we are going to drop all related methods relying on this property.\n     */\n    readonly name: string\n\n    /**\n     * Connection options.\n     */\n    readonly options: DataSourceOptions\n\n    /**\n     * Indicates if DataSource is initialized or not.\n     */\n    readonly isInitialized: boolean\n\n    /**\n     * Database driver used by this connection.\n     */\n    driver: Driver\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    namingStrategy: NamingStrategyInterface\n\n    /**\n     * Name for the metadata table\n     */\n    readonly metadataTableName: string\n\n    /**\n     * Logger used to log orm events.\n     */\n    logger: Logger\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = []\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     * This is a copy of #.entityMetadatas property -> used for more performant searches.\n     */\n    readonly entityMetadatasMap = new Map<EntityTarget<any>, EntityMetadata>()\n\n    /**\n     * Used to work with query result cache.\n     */\n    queryResultCache?: QueryResultCache\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader\n\n    readonly relationIdLoader: RelationIdLoader\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DataSourceOptions) {\n        registerQueryBuilders()\n        this.name = options.name || \"default\"\n        this.options = options\n        this.logger = new LoggerFactory().create(\n            this.options.logger,\n            this.options.logging,\n        )\n        this.driver = new DriverFactory().create(this)\n        this.manager = this.createEntityManager()\n        this.namingStrategy =\n            options.namingStrategy || new DefaultNamingStrategy()\n        this.metadataTableName = options.metadataTableName || \"typeorm_metadata\"\n        this.queryResultCache = options.cache\n            ? new QueryResultCacheFactory(this).create()\n            : undefined\n        this.relationLoader = new RelationLoader(this)\n        this.relationIdLoader = new RelationIdLoader(this)\n        this.isInitialized = false\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     Indicates if DataSource is initialized or not.\n     *\n     * @deprecated use .isInitialized instead\n     */\n    get isConnected() {\n        return this.isInitialized\n    }\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(\n                `MongoEntityManager is only available for MongoDB databases.`,\n            )\n\n        return this.manager as MongoEntityManager\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!InstanceChecker.isSqljsEntityManager(this.manager))\n            throw new TypeORMError(\n                `SqljsEntityManager is only available for Sqljs databases.`,\n            )\n\n        return this.manager\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates current connection options with provided options.\n     */\n    setOptions(options: Partial<DataSourceOptions>): this {\n        Object.assign(this.options, options)\n\n        if (options.logger || options.logging) {\n            this.logger = new LoggerFactory().create(\n                options.logger || this.options.logger,\n                options.logging || this.options.logging,\n            )\n        }\n\n        if (options.namingStrategy) {\n            this.namingStrategy = options.namingStrategy\n        }\n\n        if (options.cache) {\n            this.queryResultCache = new QueryResultCacheFactory(this).create()\n        }\n\n        // todo: we must update the database in the driver as well, if it was set by setOptions method\n        //  in the future we need to refactor the code and remove \"database\" from the driver, and instead\n        //  use database (and options) from a single place - data source.\n        if (options.database) {\n            this.driver.database = DriverUtils.buildDriverOptions(\n                this.options,\n            ).database\n        }\n\n        // todo: need to take a look if we need to update schema and other \"poor\" properties\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async initialize(): Promise<this> {\n        if (this.isInitialized)\n            throw new CannotConnectAlreadyConnectedError(this.name)\n\n        // connect to the database via its driver\n        await this.driver.connect()\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache) await this.queryResultCache.connect()\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isInitialized: true })\n\n        try {\n            // build all metadatas registered in the current connection\n            await this.buildMetadatas()\n\n            await this.driver.afterConnect()\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema) await this.dropDatabase()\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({\n                    transaction: this.options.migrationsTransactionMode,\n                })\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize) await this.synchronize()\n        } catch (error) {\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.destroy()\n            throw error\n        }\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     *\n     * @deprecated use .initialize method instead\n     */\n    async connect(): Promise<this> {\n        return this.initialize()\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async destroy(): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        await this.driver.disconnect()\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache) await this.queryResultCache.disconnect()\n\n        ObjectUtils.assign(this, { isInitialized: false })\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     *\n     * @deprecated use .destroy method instead\n     */\n    async close(): Promise<void> {\n        return this.destroy()\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        if (dropBeforeSync) await this.dropDatabase()\n\n        const schemaBuilder = this.driver.createSchemaBuilder()\n        await schemaBuilder.build()\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = this.createQueryRunner()\n        try {\n            if (\n                this.driver.options.type === \"mssql\" ||\n                DriverUtils.isMySQLFamily(this.driver) ||\n                this.driver.options.type === \"aurora-mysql\" ||\n                DriverUtils.isSQLiteFamily(this.driver)\n            ) {\n                const databases: string[] = []\n                this.entityMetadatas.forEach((metadata) => {\n                    if (\n                        metadata.database &&\n                        databases.indexOf(metadata.database) === -1\n                    )\n                        databases.push(metadata.database)\n                })\n                if (databases.length === 0 && this.driver.database) {\n                    databases.push(this.driver.database)\n                }\n\n                if (databases.length === 0) {\n                    await queryRunner.clearDatabase()\n                } else {\n                    for (const database of databases) {\n                        await queryRunner.clearDatabase(database)\n                    }\n                }\n            } else {\n                await queryRunner.clearDatabase()\n            }\n        } finally {\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<Migration[]> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            options?.transaction ||\n            this.options?.migrationsTransactionMode ||\n            \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        const successMigrations =\n            await migrationExecutor.executePendingMigrations()\n        return successMigrations\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        await migrationExecutor.undoLastMigration()\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isInitialized) {\n            throw new CannotExecuteNotConnectedError(this.name)\n        }\n        const migrationExecutor = new MigrationExecutor(this)\n        return await migrationExecutor.showMigrations()\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: EntityTarget<any>): boolean {\n        return !!this.findMetadata(target)\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: EntityTarget<any>): EntityMetadata {\n        const metadata = this.findMetadata(target)\n        if (!metadata) throw new EntityMetadataNotFoundError(target)\n\n        return metadata\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        return this.manager.getRepository(target)\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target)\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        if (!(this.driver.options.type === \"mongodb\"))\n            throw new TypeORMError(\n                `You can use getMongoRepository only for MongoDB connections.`,\n            )\n\n        return this.manager.getRepository(target) as any\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend function to create a custom repository\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository)\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any,\n        )\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     *\n     * @see [Official docs](https://typeorm.io/data-source-api) for examples.\n     */\n    async query<T = any>(\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ): Promise<T> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner()\n\n        try {\n            return await usedQueryRunner.query(query, parameters) // await is needed here because we are using finally\n        } finally {\n            if (!queryRunner) await usedQueryRunner.release()\n        }\n    }\n\n    /**\n     * Tagged template function that executes raw SQL query and returns raw database results.\n     * Template expressions are automatically transformed into database parameters.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     * Note: Don't call this as a regular function, it is meant to be used with backticks to tag a template literal.\n     * Example: dataSource.sql`SELECT * FROM table_name WHERE id = ${id}`\n     */\n    async sql<T = any>(\n        strings: TemplateStringsArray,\n        ...values: unknown[]\n    ): Promise<T> {\n        const { query, parameters } = buildSqlTag({\n            driver: this.driver,\n            strings: strings,\n            expressions: values,\n        })\n\n        return await this.query(query, parameters)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n\n        if (alias) {\n            alias = DriverUtils.buildAlias(this.driver, undefined, alias)\n            const metadata = this.getMetadata(\n                entityOrRunner as EntityTarget<Entity>,\n            )\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias)\n        } else {\n            return new SelectQueryBuilder(\n                this,\n                entityOrRunner as QueryRunner | undefined,\n            )\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: ReplicationMode = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode)\n        const manager = this.createEntityManager(queryRunner)\n        Object.assign(queryRunner, { manager: manager })\n        return queryRunner\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(\n        entityTarget: EntityTarget<any>,\n        relationPropertyPath: string,\n    ) {\n        const relationMetadata =\n            this.getMetadata(entityTarget).findRelationWithPropertyPath(\n                relationPropertyPath,\n            )\n        if (!relationMetadata)\n            throw new TypeORMError(\n                `Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`,\n            )\n        if (!relationMetadata.isManyToMany)\n            throw new TypeORMError(\n                `Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                    `You can use this method only on many-to-many relations.`,\n            )\n\n        return relationMetadata.junctionEntityMetadata\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(\n        target: EntityTarget<any>,\n    ): EntityMetadata | undefined {\n        const metadataFromMap = this.entityMetadatasMap.get(target)\n        if (metadataFromMap) return metadataFromMap\n\n        for (const [_, metadata] of this.entityMetadatasMap) {\n            if (\n                InstanceChecker.isEntitySchema(target) &&\n                metadata.name === target.options.name\n            ) {\n                return metadata\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target ||\n                        metadata.tableName === target\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n            if (\n                ObjectUtils.isObjectWithName(target) &&\n                typeof target.name === \"string\"\n            ) {\n                if (target.name.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target.name) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target.name ||\n                        metadata.tableName === target.name\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected async buildMetadatas(): Promise<void> {\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this)\n        const entityMetadataValidator = new EntityMetadataValidator()\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const flattenedSubscribers = ObjectUtils.mixedListToArray(\n            this.options.subscribers || [],\n        )\n        const subscribers = await connectionMetadataBuilder.buildSubscribers(\n            flattenedSubscribers,\n        )\n        ObjectUtils.assign(this, { subscribers: subscribers })\n\n        // build entity metadatas\n        const flattenedEntities = ObjectUtils.mixedListToArray(\n            this.options.entities || [],\n        )\n        const entityMetadatas =\n            await connectionMetadataBuilder.buildEntityMetadatas(\n                flattenedEntities,\n            )\n        ObjectUtils.assign(this, {\n            entityMetadatas: entityMetadatas,\n            entityMetadatasMap: new Map(\n                entityMetadatas.map((metadata) => [metadata.target, metadata]),\n            ),\n        })\n\n        // create migration instances\n        const flattenedMigrations = ObjectUtils.mixedListToArray(\n            this.options.migrations || [],\n        )\n        const migrations = await connectionMetadataBuilder.buildMigrations(\n            flattenedMigrations,\n        )\n        ObjectUtils.assign(this, { migrations: migrations })\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(\n            this.entityMetadatas.filter(\n                (metadata) => metadata.tableType !== \"view\",\n            ),\n            this.driver,\n        )\n\n        // set current data source to the entities\n        for (const entityMetadata of entityMetadatas) {\n            if (\n                InstanceChecker.isBaseEntityConstructor(entityMetadata.target)\n            ) {\n                entityMetadata.target.useDataSource(this)\n            }\n        }\n    }\n\n    /**\n     * Get the replication mode SELECT queries should use for this datasource by default\n     */\n    defaultReplicationModeForReads(): ReplicationMode {\n        if (\n            \"replication\" in this.driver.options &&\n            this.driver.options.replication\n        ) {\n            const value = (\n                this.driver.options.replication as {\n                    defaultMode?: ReplicationMode\n                }\n            ).defaultMode\n            if (value) {\n                return value\n            }\n        }\n        return \"slave\"\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16034, "column": 0}, "map": {"version":3,"file":"globals.js","sourceRoot":".","sources":["file:///home/user/studio/src/globals.ts"],"sourcesContent":["import { MetadataArgsStorage } from \"./metadata-args/MetadataArgsStorage\"\nimport { PlatformTools } from \"./platform/PlatformTools\"\nimport { DataSourceOptions } from \"./data-source/DataSourceOptions\"\nimport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\"\nimport { ConnectionManager } from \"./connection/ConnectionManager\"\nimport { getFromContainer } from \"./container\"\nimport { DataSource } from \"./data-source/DataSource\"\nimport { EntityManager } from \"./entity-manager/EntityManager\"\nimport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\"\nimport { SqljsEntityManager } from \"./entity-manager/SqljsEntityManager\"\nimport { EntityTarget } from \"./common/EntityTarget\"\nimport { Repository } from \"./repository/Repository\"\nimport { TreeRepository } from \"./repository/TreeRepository\"\nimport { ObjectType } from \"./common/ObjectType\"\nimport { MongoRepository } from \"./repository/MongoRepository\"\nimport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\"\nimport { ObjectUtils } from \"./util/ObjectUtils\"\nimport { ObjectLiteral } from \"./common/ObjectLiteral\"\n\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable()\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage()\n\n    return globalScope.typeormMetadataArgsStorage\n}\n\n/**\n * Reads connection options stored in ormconfig configuration file.\n *\n * @deprecated\n */\nexport async function getConnectionOptions(\n    connectionName: string = \"default\",\n): Promise<DataSourceOptions> {\n    return new ConnectionOptionsReader().get(connectionName)\n}\n\n/**\n * Gets a ConnectionManager which creates connections.\n *\n * @deprecated\n */\nexport function getConnectionManager(): ConnectionManager {\n    return getFromContainer(ConnectionManager)\n}\n\n/**\n * Creates a new connection and registers it in the manager.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n *\n * @deprecated\n */\nexport async function createConnection(): Promise<DataSource>\n\n/**\n * Creates a new connection from the ormconfig file with a given name.\n *\n * @deprecated\n */\nexport async function createConnection(name: string): Promise<DataSource>\n\n/**\n * Creates a new connection and registers it in the manager.\n *\n * @deprecated\n */\nexport async function createConnection(\n    options: DataSourceOptions,\n): Promise<DataSource>\n\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n *\n * @deprecated\n */\nexport async function createConnection(\n    optionsOrName?: any,\n): Promise<DataSource> {\n    const connectionName =\n        typeof optionsOrName === \"string\" ? optionsOrName : \"default\"\n    const options = ObjectUtils.isObject(optionsOrName)\n        ? (optionsOrName as DataSourceOptions)\n        : await getConnectionOptions(connectionName)\n    return getConnectionManager().create(options).connect()\n}\n\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/env) file or environment variables.\n * All connections from the ormconfig will be created.\n *\n * @deprecated\n */\nexport async function createConnections(\n    options?: DataSourceOptions[],\n): Promise<DataSource[]> {\n    if (!options) options = await new ConnectionOptionsReader().all()\n    const connections = options.map((options) =>\n        getConnectionManager().create(options),\n    )\n    // Do not use Promise.all or test 8522 will produce a dangling sqlite connection\n    for (const connection of connections) {\n        await connection.connect()\n    }\n    return connections\n}\n\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getConnection(connectionName: string = \"default\"): DataSource {\n    return getConnectionManager().get(connectionName)\n}\n\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getManager(connectionName: string = \"default\"): EntityManager {\n    return getConnectionManager().get(connectionName).manager\n}\n\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getMongoManager(\n    connectionName: string = \"default\",\n): MongoEntityManager {\n    return getConnectionManager().get(connectionName)\n        .manager as MongoEntityManager\n}\n\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n *\n * @deprecated\n */\nexport function getSqljsManager(\n    connectionName: string = \"default\",\n): SqljsEntityManager {\n    return getConnectionManager().get(connectionName)\n        .manager as SqljsEntityManager\n}\n\n/**\n * Gets repository for the given entity class.\n *\n * @deprecated\n */\nexport function getRepository<Entity extends ObjectLiteral>(\n    entityClass: EntityTarget<Entity>,\n    connectionName: string = \"default\",\n): Repository<Entity> {\n    return getConnectionManager()\n        .get(connectionName)\n        .getRepository<Entity>(entityClass)\n}\n\n/**\n * Gets tree repository for the given entity class.\n *\n * @deprecated\n */\nexport function getTreeRepository<Entity extends ObjectLiteral>(\n    entityClass: EntityTarget<Entity>,\n    connectionName: string = \"default\",\n): TreeRepository<Entity> {\n    return getConnectionManager()\n        .get(connectionName)\n        .getTreeRepository<Entity>(entityClass)\n}\n\n/**\n * Gets tree repository for the given entity class.\n *\n * @deprecated\n */\nexport function getCustomRepository<T>(\n    customRepository: ObjectType<T>,\n    connectionName: string = \"default\",\n): T {\n    return getConnectionManager()\n        .get(connectionName)\n        .getCustomRepository(customRepository)\n}\n\n/**\n * Gets mongodb repository for the given entity class or name.\n *\n * @deprecated\n */\nexport function getMongoRepository<Entity extends ObjectLiteral>(\n    entityClass: EntityTarget<Entity>,\n    connectionName: string = \"default\",\n): MongoRepository<Entity> {\n    return getConnectionManager()\n        .get(connectionName)\n        .getMongoRepository<Entity>(entityClass)\n}\n\n/**\n * Creates a new query builder.\n *\n * @deprecated\n */\nexport function createQueryBuilder<Entity extends ObjectLiteral>(\n    entityClass?: EntityTarget<Entity>,\n    alias?: string,\n    connectionName: string = \"default\",\n): SelectQueryBuilder<Entity> {\n    if (entityClass) {\n        return getRepository(entityClass, connectionName).createQueryBuilder(\n            alias,\n        )\n    }\n\n    return getConnection(connectionName).createQueryBuilder()\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 16193, "column": 0}, "map": {"version":3,"file":"EntityTarget.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/common/EntityTarget.ts"],"sourcesContent":["import { ObjectType } from \"./ObjectType\"\nimport { EntitySchema } from \"..\"\n\n/**\n * Entity target.\n */\nexport type EntityTarget<Entity> =\n    | ObjectType<Entity>\n    | EntitySchema<Entity>\n    | string\n    | { type: Entity; name: string }\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16202, "column": 0}, "map": {"version":3,"file":"ObjectType.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/common/ObjectType.ts"],"sourcesContent":["/**\n * Represents some Type of the Object.\n */\nexport type ObjectType<T> = { new (): T } | Function\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16211, "column": 0}, "map": {"version":3,"file":"ObjectLiteral.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/common/ObjectLiteral.ts"],"sourcesContent":["/**\n * Interface of the simple literal object with any string keys.\n */\nexport interface ObjectLiteral {\n    [key: string]: any\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16220, "column": 0}, "map": {"version":3,"file":"MixedList.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/common/MixedList.ts"],"sourcesContent":["/**\n * List of T-s passed as an array or object map.\n *\n * Example usage: entities as an array of imported using import * as syntax.\n */\nexport type MixedList<T> = T[] | { [key: string]: T }\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16229, "column": 0}, "map": {"version":3,"file":"DeepPartial.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/common/DeepPartial.ts"],"sourcesContent":["/**\n * Same as Partial<T> but goes deeper and makes Partial<T> all its properties and sub-properties.\n */\nexport type DeepPartial<T> =\n    | T\n    | (T extends Array<infer U>\n          ? DeepPartial<U>[]\n          : T extends Map<infer K, infer V>\n          ? Map<DeepPartial<K>, DeepPartial<V>>\n          : T extends Set<infer M>\n          ? Set<DeepPartial<M>>\n          : T extends object\n          ? { [K in keyof T]?: DeepPartial<T[K]> }\n          : T)\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16238, "column": 0}, "map": {"version":3,"file":"RelationType.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/common/RelationType.ts"],"sourcesContent":["/**\n * Wrapper type for relation type definitions in entities.\n * Used to circumvent ESM modules circular dependency issue caused by reflection metadata saving the type of the property.\n *\n * Usage example:\n * @Entity()\n * export default class User {\n *\n *     @OneToOne(() => Profile, profile => profile.user)\n *     profile: Relation<Profile>;\n *\n * }\n */\nexport type Relation<T> = T\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16247, "column": 0}, "map": {"version":3,"file":"Column.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/Column.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport {\n    ColumnType,\n    SimpleColumnType,\n    SpatialColumnType,\n    WithLengthColumnType,\n    WithPrecisionColumnType,\n    WithWidthColumnType,\n} from \"../../driver/types/ColumnTypes\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { ColumnCommonOptions } from \"../options/ColumnCommonOptions\"\nimport { SpatialColumnOptions } from \"../options/SpatialColumnOptions\"\nimport { ColumnWithLengthOptions } from \"../options/ColumnWithLengthOptions\"\nimport { ColumnNumericOptions } from \"../options/ColumnNumericOptions\"\nimport { ColumnEnumOptions } from \"../options/ColumnEnumOptions\"\nimport { ColumnEmbeddedOptions } from \"../options/ColumnEmbeddedOptions\"\nimport { EmbeddedMetadataArgs } from \"../../metadata-args/EmbeddedMetadataArgs\"\nimport { ColumnTypeUndefinedError } from \"../../error/ColumnTypeUndefinedError\"\nimport { ColumnHstoreOptions } from \"../options/ColumnHstoreOptions\"\nimport { ColumnWithWidthOptions } from \"../options/ColumnWithWidthOptions\"\nimport { GeneratedMetadataArgs } from \"../../metadata-args/GeneratedMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\n\n/**\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\n * decorator will be persisted to the database when entity be saved.\n */\nexport function Column(): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(options: ColumnOptions): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: SimpleColumnType,\n    options?: ColumnCommonOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: SpatialColumnType,\n    options?: ColumnCommonOptions & SpatialColumnOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: WithLengthColumnType,\n    options?: ColumnCommonOptions & ColumnWithLengthOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: WithWidthColumnType,\n    options?: ColumnCommonOptions & ColumnWithWidthOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: WithPrecisionColumnType,\n    options?: ColumnCommonOptions & ColumnNumericOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: \"enum\",\n    options?: ColumnCommonOptions & ColumnEnumOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: \"simple-enum\",\n    options?: ColumnCommonOptions & ColumnEnumOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: \"set\",\n    options?: ColumnCommonOptions & ColumnEnumOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    type: \"hstore\",\n    options?: ColumnCommonOptions & ColumnHstoreOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n *\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\n * embedded will be mapped to it from the single table.\n */\nexport function Column(\n    type: (type?: any) => Function,\n    options?: ColumnEmbeddedOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(\n    typeOrOptions?:\n        | ((type?: any) => Function)\n        | ColumnType\n        | (ColumnOptions & ColumnEmbeddedOptions),\n    options?: ColumnOptions & ColumnEmbeddedOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        // normalize parameters\n        let type: ColumnType | undefined\n        if (\n            typeof typeOrOptions === \"string\" ||\n            typeof typeOrOptions === \"function\"\n        ) {\n            type = <ColumnType>typeOrOptions\n        } else if (typeOrOptions) {\n            options = <ColumnOptions>typeOrOptions\n            type = typeOrOptions.type\n        }\n        if (!options) options = {} as ColumnOptions\n\n        // if type is not given explicitly then try to guess it\n        const reflectMetadataType =\n            Reflect && (Reflect as any).getMetadata\n                ? (Reflect as any).getMetadata(\n                      \"design:type\",\n                      object,\n                      propertyName,\n                  )\n                : undefined\n        if (!type && reflectMetadataType)\n            // if type is not given explicitly then try to guess it\n            type = reflectMetadataType\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type) options.type = type\n\n        // specify HSTORE type if column is HSTORE\n        if (options.type === \"hstore\" && !options.hstoreType)\n            options.hstoreType =\n                reflectMetadataType === Object ? \"object\" : \"string\"\n\n        if (typeof typeOrOptions === \"function\") {\n            // register an embedded\n            getMetadataArgsStorage().embeddeds.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                isArray:\n                    reflectMetadataType === Array || options.array === true,\n                prefix:\n                    options.prefix !== undefined ? options.prefix : undefined,\n                type: typeOrOptions as (type?: any) => Function,\n            } as EmbeddedMetadataArgs)\n        } else {\n            // register a regular column\n\n            // if we still don't have a type then we need to give error to user that type is required\n            if (!options.type)\n                throw new ColumnTypeUndefinedError(object, propertyName)\n\n            // create unique\n            if (options.unique === true)\n                getMetadataArgsStorage().uniques.push({\n                    target: object.constructor,\n                    columns: [propertyName],\n                })\n\n            getMetadataArgsStorage().columns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                mode: \"regular\",\n                options: options,\n            } as ColumnMetadataArgs)\n\n            if (options.generated) {\n                getMetadataArgsStorage().generations.push({\n                    target: object.constructor,\n                    propertyName: propertyName,\n                    strategy:\n                        typeof options.generated === \"string\"\n                            ? options.generated\n                            : \"increment\",\n                } as GeneratedMetadataArgs)\n            }\n        }\n    }\n}\n"],"names":[],"mappings":";;;;AAqIA,QAAA,MAAA,GAAA,OAsFC;AA3ND,MAAA,qCAAsD;AAiBtD,MAAA,6EAA+E;AAgH/E;;;GAGG,CACH,SAAgB,MAAM,CAClB,aAG6C,EAC7C,OAA+C;IAE/C,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,uBAAuB;QACvB,IAAI,IAA4B,CAAA;QAChC,IACI,OAAO,aAAa,KAAK,QAAQ,IACjC,OAAO,aAAa,KAAK,UAAU,EACrC,CAAC;YACC,IAAI,GAAe,aAAa,CAAA;QACpC,CAAC,MAAM,IAAI,aAAa,EAAE,CAAC;YACvB,OAAO,GAAkB,aAAa,CAAA;YACtC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAA;QAC7B,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAAmB,CAAA;QAE3C,uDAAuD;QACvD,MAAM,mBAAmB,GACrB,OAAO,IAAK,OAAe,CAAC,WAAW,GAChC,OAAe,CAAC,WAAW,CACxB,aAAa,EACb,MAAM,EACN,YAAY,CACf,GACD,SAAS,CAAA;QACnB,IAAI,CAAC,IAAI,IAAI,mBAAmB,EAC5B,uDAAuD;QACvD,IAAI,GAAG,mBAAmB,CAAA;QAE9B,yGAAyG;QACzG,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAA;QAE9C,0CAA0C;QAC1C,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,UAAU,EAChD,OAAO,CAAC,UAAU,GACd,mBAAmB,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAA;QAE5D,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE,CAAC;YACtC,uBAAuB;YACvB,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,SAAS,CAAC,IAAI,CAAC;gBACpC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,OAAO,EACH,mBAAmB,KAAK,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI;gBAC3D,MAAM,EACF,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;gBAC7D,IAAI,EAAE,aAAyC;aAC1B,CAAC,CAAA;QAC9B,CAAC,MAAM,CAAC;YACJ,4BAA4B;YAE5B,yFAAyF;YACzF,IAAI,CAAC,OAAO,CAAC,IAAI,EACb,MAAM,IAAI,2BAAA,wBAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;YAE5D,gBAAgB;YAChB,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,EACvB,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;gBAClC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,OAAO,EAAE;oBAAC,YAAY;iBAAC;aAC1B,CAAC,CAAA;YAEN,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;gBAClC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;aACG,CAAC,CAAA;YAExB,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;gBACpB,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,WAAW,CAAC,IAAI,CAAC;oBACtC,MAAM,EAAE,MAAM,CAAC,WAAW;oBAC1B,YAAY,EAAE,YAAY;oBAC1B,QAAQ,EACJ,OAAO,OAAO,CAAC,SAAS,KAAK,QAAQ,GAC/B,OAAO,CAAC,SAAS,GACjB,WAAW;iBACC,CAAC,CAAA;YAC/B,CAAC;QACL,CAAC;IACL,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16317, "column": 0}, "map": {"version":3,"file":"CreateDateColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/CreateDateColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\n\n/**\n * This column will store a creation date of the inserted object.\n * Creation date is generated and inserted only once,\n * at the first time when you create an object, the value is inserted into the table, and is never touched again.\n */\nexport function CreateDateColumn(options?: ColumnOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"createDate\",\n            options: options || {},\n        } as ColumnMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AASA,QAAA,gBAAA,GAAA,iBASC;AAlBD,MAAA,qCAAsD;AAItD;;;;GAIG,CACH,SAAgB,gBAAgB,CAAC,OAAuB;IACpD,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,YAAY;YAClB,OAAO,EAAE,OAAO,IAAI,CAAA,CAAE;SACH,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16342, "column": 0}, "map": {"version":3,"file":"DeleteDateColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/DeleteDateColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\n\n/**\n * This column will store a delete date of the soft-deleted object.\n * This date is being updated each time you soft-delete the object.\n */\nexport function DeleteDateColumn(options?: ColumnOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"deleteDate\",\n            options: options || {},\n        } as ColumnMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAQA,QAAA,gBAAA,GAAA,iBASC;AAjBD,MAAA,qCAAsD;AAItD;;;GAGG,CACH,SAAgB,gBAAgB,CAAC,OAAuB;IACpD,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,YAAY;YAClB,OAAO,EAAE,OAAO,IAAI,CAAA,CAAE;SACH,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16366, "column": 0}, "map": {"version":3,"file":"PrimaryGeneratedColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/PrimaryGeneratedColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { PrimaryGeneratedColumnNumericOptions } from \"../options/PrimaryGeneratedColumnNumericOptions\"\nimport { PrimaryGeneratedColumnUUIDOptions } from \"../options/PrimaryGeneratedColumnUUIDOptions\"\nimport { GeneratedMetadataArgs } from \"../../metadata-args/GeneratedMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\nimport { PrimaryGeneratedColumnIdentityOptions } from \"../options/PrimaryGeneratedColumnIdentityOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(\n    options: PrimaryGeneratedColumnNumericOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(\n    strategy: \"increment\",\n    options?: PrimaryGeneratedColumnNumericOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(\n    strategy: \"uuid\",\n    options?: PrimaryGeneratedColumnUUIDOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(\n    strategy: \"rowid\",\n    options?: PrimaryGeneratedColumnUUIDOptions,\n): PropertyDecorator\n\nexport function PrimaryGeneratedColumn(\n    strategy: \"identity\",\n    options?: PrimaryGeneratedColumnIdentityOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(\n    strategyOrOptions?:\n        | \"increment\"\n        | \"uuid\"\n        | \"rowid\"\n        | \"identity\"\n        | PrimaryGeneratedColumnNumericOptions\n        | PrimaryGeneratedColumnUUIDOptions\n        | PrimaryGeneratedColumnIdentityOptions,\n    maybeOptions?:\n        | PrimaryGeneratedColumnNumericOptions\n        | PrimaryGeneratedColumnUUIDOptions\n        | PrimaryGeneratedColumnIdentityOptions,\n): PropertyDecorator {\n    // normalize parameters\n    const options: ColumnOptions = {}\n    let strategy: \"increment\" | \"uuid\" | \"rowid\" | \"identity\"\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            strategy = strategyOrOptions as\n                | \"increment\"\n                | \"uuid\"\n                | \"rowid\"\n                | \"identity\"\n\n        if (ObjectUtils.isObject(strategyOrOptions)) {\n            strategy = \"increment\"\n            Object.assign(options, strategyOrOptions)\n        }\n    } else {\n        strategy = \"increment\"\n    }\n    if (ObjectUtils.isObject(maybeOptions)) Object.assign(options, maybeOptions)\n\n    return function (object: Object, propertyName: string) {\n        // if column type is not explicitly set then determine it based on generation strategy\n        if (!options.type) {\n            if (strategy === \"increment\" || strategy === \"identity\") {\n                options.type = Number\n            } else if (strategy === \"uuid\") {\n                options.type = \"uuid\"\n            } else if (strategy === \"rowid\") {\n                options.type = \"int\"\n            }\n        }\n\n        // explicitly set a primary and generated to column options\n        options.primary = true\n\n        // register column metadata args\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options,\n        })\n\n        // register generated metadata args\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy,\n        } as GeneratedMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAsDA,QAAA,sBAAA,GAAA,uBAgEC;AAtHD,MAAA,qCAAsD;AAMtD,MAAA,kDAAoD;AA2CpD;;;;GAIG,CACH,SAAgB,sBAAsB,CAClC,iBAO2C,EAC3C,YAG2C;IAE3C,uBAAuB;IACvB,MAAM,OAAO,GAAkB,CAAA,CAAE,CAAA;IACjC,IAAI,QAAqD,CAAA;IACzD,IAAI,iBAAiB,EAAE,CAAC;QACpB,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EACrC,QAAQ,GAAG,iBAIK,CAAA;QAEpB,IAAI,cAAA,WAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC;YAC1C,QAAQ,GAAG,WAAW,CAAA;YACtB,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAA;QAC7C,CAAC;IACL,CAAC,MAAM,CAAC;QACJ,QAAQ,GAAG,WAAW,CAAA;IAC1B,CAAC;IACD,IAAI,cAAA,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAA;IAE5E,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,sFAAsF;QACtF,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAChB,IAAI,QAAQ,KAAK,WAAW,IAAI,QAAQ,KAAK,UAAU,EAAE,CAAC;gBACtD,OAAO,CAAC,IAAI,GAAG,MAAM,CAAA;YACzB,CAAC,MAAM,IAAI,QAAQ,KAAK,MAAM,EAAE,CAAC;gBAC7B,OAAO,CAAC,IAAI,GAAG,MAAM,CAAA;YACzB,CAAC,MAAM,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;gBAC9B,OAAO,CAAC,IAAI,GAAG,KAAK,CAAA;YACxB,CAAC;QACL,CAAC;QAED,2DAA2D;QAC3D,OAAO,CAAC,OAAO,GAAG,IAAI,CAAA;QAEtB,gCAAgC;QAChC,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACnB,CAAC,CAAA;QAEF,mCAAmC;QACnC,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;SACI,CAAC,CAAA;IAC/B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16424, "column": 0}, "map": {"version":3,"file":"PrimaryColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/PrimaryColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnTypeUndefinedError } from \"../../error/ColumnTypeUndefinedError\"\nimport { PrimaryColumnCannotBeNullableError } from \"../../error/PrimaryColumnCannotBeNullableError\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { GeneratedMetadataArgs } from \"../../metadata-args/GeneratedMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\nimport { ColumnType } from \"../../driver/types/ColumnTypes\"\n\n/**\n * Describes all primary key column's options.\n * If specified, the nullable field must be set to false.\n */\nexport type PrimaryColumnOptions = ColumnOptions & { nullable?: false }\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(options?: PrimaryColumnOptions): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(\n    type?: ColumnType,\n    options?: PrimaryColumnOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(\n    typeOrOptions?: ColumnType | PrimaryColumnOptions,\n    options?: PrimaryColumnOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        // normalize parameters\n        let type: ColumnType | undefined\n        if (\n            typeof typeOrOptions === \"string\" ||\n            typeOrOptions === String ||\n            typeOrOptions === Boolean ||\n            typeOrOptions === Number\n        ) {\n            type = typeOrOptions as ColumnType\n        } else {\n            options = Object.assign({}, <PrimaryColumnOptions>typeOrOptions)\n        }\n        if (!options) options = {} as PrimaryColumnOptions\n\n        // if type is not given explicitly then try to guess it\n        const reflectMetadataType =\n            Reflect && (Reflect as any).getMetadata\n                ? (Reflect as any).getMetadata(\n                      \"design:type\",\n                      object,\n                      propertyName,\n                  )\n                : undefined\n        if (!type && reflectMetadataType) type = reflectMetadataType\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type) options.type = type\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName)\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName)\n\n        // explicitly set a primary to column options\n        options.primary = true\n\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options,\n        } as ColumnMetadataArgs)\n\n        if (options.generated) {\n            getMetadataArgsStorage().generations.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                strategy:\n                    typeof options.generated === \"string\"\n                        ? options.generated\n                        : \"increment\",\n            } as GeneratedMetadataArgs)\n        }\n    }\n}\n"],"names":[],"mappings":";;;;AAoCA,QAAA,aAAA,GAAA,cA+DC;AAnGD,MAAA,qCAAsD;AACtD,MAAA,6EAA+E;AAC/E,MAAA,iGAAmG;AA6BnG;;;;GAIG,CACH,SAAgB,aAAa,CACzB,aAAiD,EACjD,OAA8B;IAE9B,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,uBAAuB;QACvB,IAAI,IAA4B,CAAA;QAChC,IACI,OAAO,aAAa,KAAK,QAAQ,IACjC,aAAa,KAAK,MAAM,IACxB,aAAa,KAAK,OAAO,IACzB,aAAa,KAAK,MAAM,EAC1B,CAAC;YACC,IAAI,GAAG,aAA2B,CAAA;QACtC,CAAC,MAAM,CAAC;YACJ,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAwB,aAAa,CAAC,CAAA;QACpE,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAA0B,CAAA;QAElD,uDAAuD;QACvD,MAAM,mBAAmB,GACrB,OAAO,IAAK,OAAe,CAAC,WAAW,GAChC,OAAe,CAAC,WAAW,CACxB,aAAa,EACb,MAAM,EACN,YAAY,CACf,GACD,SAAS,CAAA;QACnB,IAAI,CAAC,IAAI,IAAI,mBAAmB,EAAE,IAAI,GAAG,mBAAmB,CAAA;QAE5D,yGAAyG;QACzG,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAA;QAE9C,yFAAyF;QACzF,IAAI,CAAC,OAAO,CAAC,IAAI,EACb,MAAM,IAAI,2BAAA,wBAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;QAE5D,wFAAwF;QACxF,IAAI,OAAO,CAAC,QAAQ,EAChB,MAAM,IAAI,qCAAA,kCAAkC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;QAEtE,6CAA6C;QAC7C,OAAO,CAAC,OAAO,GAAG,IAAI,CAAA;QAEtB,4CAA4C;QAC5C,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACG,CAAC,CAAA;QAExB,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;YACpB,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,QAAQ,EACJ,OAAO,OAAO,CAAC,SAAS,KAAK,QAAQ,GAC/B,OAAO,CAAC,SAAS,GACjB,WAAW;aACC,CAAC,CAAA;QAC/B,CAAC;IACL,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16478, "column": 0}, "map": {"version":3,"file":"UpdateDateColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/UpdateDateColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\n\n/**\n * This column will store an update date of the updated object.\n * This date is being updated each time you persist the object.\n */\nexport function UpdateDateColumn(options?: ColumnOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"updateDate\",\n            options: options ? options : {},\n        } as ColumnMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAQA,QAAA,gBAAA,GAAA,iBASC;AAjBD,MAAA,qCAAsD;AAItD;;;GAGG,CACH,SAAgB,gBAAgB,CAAC,OAAuB;IACpD,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,YAAY;YAClB,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA,CAAE;SACZ,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16502, "column": 0}, "map": {"version":3,"file":"VersionColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/VersionColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\n\n/**\n * This column will store a number - version of the entity.\n * Every time your entity will be persisted, this number will be increased by one -\n * so you can organize visioning and update strategies of your entity.\n */\nexport function VersionColumn(options?: ColumnOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"version\",\n            options: options || {},\n        } as ColumnMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AASA,QAAA,aAAA,GAAA,cASC;AAlBD,MAAA,qCAAsD;AAItD;;;;GAIG,CACH,SAAgB,aAAa,CAAC,OAAuB;IACjD,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO,IAAI,CAAA,CAAE;SACH,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16527, "column": 0}, "map": {"version":3,"file":"VirtualColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/VirtualColumn.ts"],"sourcesContent":["import { ColumnType } from \"../../driver/types/ColumnTypes\"\nimport { ColumnTypeUndefinedError } from \"../../error\"\nimport { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { VirtualColumnOptions } from \"../options/VirtualColumnOptions\"\n/**\n * VirtualColumn decorator is used to mark a specific class property as a Virtual column.\n */\nexport function VirtualColumn(options: VirtualColumnOptions): PropertyDecorator\n\n/**\n * VirtualColumn decorator is used to mark a specific class property as a Virtual column.\n */\nexport function VirtualColumn(\n    typeOrOptions: ColumnType,\n    options: VirtualColumnOptions,\n): PropertyDecorator\n\n/**\n * VirtualColumn decorator is used to mark a specific class property as a Virtual column.\n */\nexport function VirtualColumn(\n    typeOrOptions?: ColumnType | VirtualColumnOptions,\n    options?: VirtualColumnOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        // normalize parameters\n        let type: ColumnType | undefined\n        if (typeof typeOrOptions === \"string\") {\n            type = <ColumnType>typeOrOptions\n        } else {\n            options = <VirtualColumnOptions>typeOrOptions\n            type = options.type\n        }\n\n        if (!options?.query) {\n            throw new Error(\n                \"Column options must be defined for calculated columns.\",\n            )\n        }\n\n        // if type is not given explicitly then try to guess it\n        const reflectMetadataType =\n            Reflect && (Reflect as any).getMetadata\n                ? (Reflect as any).getMetadata(\n                      \"design:type\",\n                      object,\n                      propertyName,\n                  )\n                : undefined\n        if (!type && reflectMetadataType)\n            // if type is not given explicitly then try to guess it\n            type = reflectMetadataType\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (type) options.type = type\n\n        // specify HSTORE type if column is HSTORE\n        if (options.type === \"hstore\" && !options.hstoreType)\n            options.hstoreType =\n                reflectMetadataType === Object ? \"object\" : \"string\"\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName)\n\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"virtual-property\",\n            options: options || {},\n        } as ColumnMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAqBA,QAAA,aAAA,GAAA,cAoDC;AAxED,MAAA,iCAAsD;AACtD,MAAA,qCAAsD;AAgBtD;;GAEG,CACH,SAAgB,aAAa,CACzB,aAAiD,EACjD,OAA8B;IAE9B,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,uBAAuB;QACvB,IAAI,IAA4B,CAAA;QAChC,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE,CAAC;YACpC,IAAI,GAAe,aAAa,CAAA;QACpC,CAAC,MAAM,CAAC;YACJ,OAAO,GAAyB,aAAa,CAAA;YAC7C,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACvB,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CACX,wDAAwD,CAC3D,CAAA;QACL,CAAC;QAED,uDAAuD;QACvD,MAAM,mBAAmB,GACrB,OAAO,IAAK,OAAe,CAAC,WAAW,GAChC,OAAe,CAAC,WAAW,CACxB,aAAa,EACb,MAAM,EACN,YAAY,CACf,GACD,SAAS,CAAA;QACnB,IAAI,CAAC,IAAI,IAAI,mBAAmB,EAC5B,uDAAuD;QACvD,IAAI,GAAG,mBAAmB,CAAA;QAE9B,yGAAyG;QACzG,IAAI,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAA;QAE7B,0CAA0C;QAC1C,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,UAAU,EAChD,OAAO,CAAC,UAAU,GACd,mBAAmB,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAA;QAE5D,yFAAyF;QACzF,IAAI,CAAC,OAAO,CAAC,IAAI,EACb,MAAM,IAAI,QAAA,wBAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;QAE5D,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,kBAAkB;YACxB,OAAO,EAAE,OAAO,IAAI,CAAA,CAAE;SACH,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16572, "column": 0}, "map": {"version":3,"file":"ViewColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/ViewColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { ViewColumnOptions } from \"../options/ViewColumnOptions\"\n\n/**\n * ViewColumn decorator is used to mark a specific class property as a view column.\n */\nexport function ViewColumn(options?: ViewColumnOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options || {},\n        } as ColumnMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,UAAA,GAAA,WASC;AAhBD,MAAA,qCAAsD;AAItD;;GAEG,CACH,SAAgB,UAAU,CAAC,OAA2B;IAClD,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO,IAAI,CAAA,CAAE;SACH,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16595, "column": 0}, "map": {"version":3,"file":"ObjectIdColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/columns/ObjectIdColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\n\n/**\n * Special type of column that is available only for MongoDB database.\n * Marks your entity's column to be an object id.\n */\nexport function ObjectIdColumn(options?: ColumnOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions\n        options.primary = true\n        if (!options.name) options.name = \"_id\"\n\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"objectId\",\n            options: options,\n        } as ColumnMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAQA,QAAA,cAAA,GAAA,eAeC;AAvBD,MAAA,qCAAsD;AAItD;;;GAGG,CACH,SAAgB,cAAc,CAAC,OAAuB;IAClD,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,kEAAkE;QAClE,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAAmB,CAAA;QAC3C,OAAO,CAAC,OAAO,GAAG,IAAI,CAAA;QACtB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,GAAG,KAAK,CAAA;QAEvC,4CAA4C;QAC5C,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,OAAO;SACG,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16624, "column": 0}, "map": {"version":3,"file":"AfterInsert.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/AfterInsert.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied after this entity insertion.\n */\nexport function AfterInsert(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_INSERT,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,WAAA,GAAA,YAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,WAAW;IACvB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,YAAY;SACV,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16647, "column": 0}, "map": {"version":3,"file":"AfterLoad.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/AfterLoad.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied after entity is loaded.\n */\nexport function AfterLoad(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_LOAD,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,SAAA,GAAA,UAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,SAAS;IACrB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,UAAU;SACR,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16670, "column": 0}, "map": {"version":3,"file":"AfterRemove.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/AfterRemove.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied after this entity removal.\n */\nexport function AfterRemove(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_REMOVE,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,WAAA,GAAA,YAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,WAAW;IACvB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,YAAY;SACV,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16693, "column": 0}, "map": {"version":3,"file":"AfterSoftRemove.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/AfterSoftRemove.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied before this entity soft removal.\n */\nexport function AfterSoftRemove(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_SOFT_REMOVE,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,eAAA,GAAA,gBAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,eAAe;IAC3B,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,iBAAiB;SACf,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16716, "column": 0}, "map": {"version":3,"file":"AfterRecover.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/AfterRecover.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied before this entity soft removal.\n */\nexport function AfterRecover(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_RECOVER,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,YAAA,GAAA,aAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,YAAY;IACxB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,aAAa;SACX,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16739, "column": 0}, "map": {"version":3,"file":"AfterUpdate.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/AfterUpdate.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied after this entity update.\n */\nexport function AfterUpdate(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_UPDATE,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,WAAA,GAAA,YAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,WAAW;IACvB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,YAAY;SACV,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16762, "column": 0}, "map": {"version":3,"file":"BeforeInsert.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/BeforeInsert.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied before this entity insertion.\n */\nexport function BeforeInsert(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_INSERT,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,YAAA,GAAA,aAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,YAAY;IACxB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,aAAa;SACX,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16785, "column": 0}, "map": {"version":3,"file":"BeforeRemove.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/BeforeRemove.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied before this entity removal.\n */\nexport function BeforeRemove(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_REMOVE,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,YAAA,GAAA,aAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,YAAY;IACxB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,aAAa;SACX,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16808, "column": 0}, "map": {"version":3,"file":"BeforeSoftRemove.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/BeforeSoftRemove.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied before this entity soft removal.\n */\nexport function BeforeSoftRemove(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_SOFT_REMOVE,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,gBAAA,GAAA,iBAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,gBAAgB;IAC5B,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,kBAAkB;SAChB,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16831, "column": 0}, "map": {"version":3,"file":"BeforeRecover.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/BeforeRecover.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied before this entity soft removal.\n */\nexport function BeforeRecover(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_RECOVER,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,aAAA,GAAA,cAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,aAAa;IACzB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,cAAc;SACZ,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16854, "column": 0}, "map": {"version":3,"file":"BeforeUpdate.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/BeforeUpdate.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../../metadata-args/EntityListenerMetadataArgs\"\n\n/**\n * Calls a method on which this decorator is applied before this entity update.\n */\nexport function BeforeUpdate(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_UPDATE,\n        } as EntityListenerMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,YAAA,GAAA,aAQC;AAfD,MAAA,qCAAsD;AACtD,MAAA,0EAA4E;AAG5E;;GAEG,CACH,SAAgB,YAAY;IACxB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,eAAe,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,qBAAA,kBAAkB,CAAC,aAAa;SACX,CAAC,CAAA;IACpC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16877, "column": 0}, "map": {"version":3,"file":"EventSubscriber.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/listeners/EventSubscriber.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { EntitySubscriberMetadataArgs } from \"../../metadata-args/EntitySubscriberMetadataArgs\"\n\n/**\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\n * occurs. Those classes must implement EventSubscriberInterface interface.\n */\nexport function EventSubscriber(): ClassDecorator {\n    return function (target: Function) {\n        getMetadataArgsStorage().entitySubscribers.push({\n            target: target,\n        } as EntitySubscriberMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,eAAA,GAAA,gBAMC;AAbD,MAAA,qCAAsD;AAGtD;;;GAGG,CACH,SAAgB,eAAe;IAC3B,OAAO,SAAU,MAAgB;QAC7B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;YAC5C,MAAM,EAAE,MAAM;SACe,CAAC,CAAA;IACtC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16898, "column": 0}, "map": {"version":3,"file":"ColumnOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/options/ColumnOptions.ts"],"sourcesContent":["import { ColumnType } from \"../../driver/types/ColumnTypes\"\nimport { ValueTransformer } from \"./ValueTransformer\"\nimport { ColumnCommonOptions } from \"./ColumnCommonOptions\"\n\n/**\n * Describes all column's options.\n */\nexport interface ColumnOptions extends ColumnCommonOptions {\n    /**\n     * Column type. Must be one of the value from the ColumnTypes class.\n     */\n    type?: ColumnType\n\n    /**\n     * Column name in the database.\n     */\n    name?: string\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length?: string | number\n\n    /**\n     * Column type's display width. Used only on some column types in MySQL.\n     * For example, INT(4) specifies an INT with a display width of four digits.\n     */\n    width?: number\n\n    /**\n     * Indicates if column's value can be set to NULL.\n     * Default value is \"false\".\n     */\n    nullable?: boolean\n\n    /**\n     * Indicates if column value is not updated by \"save\" operation.\n     * It means you'll be able to write this value only when you first time insert the object.\n     * Default value is \"false\".\n     *\n     * @deprecated Please use the `update` option instead.  Careful, it takes\n     * the opposite value to readonly.\n     *\n     */\n    readonly?: boolean\n\n    /**\n     * Indicates if column value is updated by \"save\" operation.\n     * If false, you'll be able to write this value only when you first time insert the object.\n     * Default value is \"true\".\n     */\n    update?: boolean\n\n    /**\n     * Indicates if column is always selected by QueryBuilder and find operations.\n     * Default value is \"true\".\n     */\n    select?: boolean\n\n    /**\n     * Indicates if column is inserted by default.\n     * Default value is \"true\".\n     */\n    insert?: boolean\n\n    /**\n     * Default database value.\n     */\n    default?: any\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string\n\n    /**\n     * Indicates if this column is a primary key.\n     * Same can be achieved when @PrimaryColumn decorator is used.\n     */\n    primary?: boolean\n\n    /**\n     * Specifies if column's value must be unique or not.\n     */\n    unique?: boolean\n\n    /**\n     * Column comment. Not supported by all database types.\n     */\n    comment?: string\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number | null\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to this column\n     */\n    zerofill?: boolean\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned?: boolean\n\n    /**\n     * Defines a column character set.\n     * Not supported by all database types.\n     */\n    charset?: string\n\n    /**\n     * Defines a column collation.\n     */\n    collation?: string\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: (string | number)[] | Object\n\n    /**\n     * Exact name of enum\n     */\n    enumName?: string\n\n    /**\n     * If this column is primary key then this specifies the name for it.\n     */\n    primaryKeyConstraintName?: string\n\n    /**\n     * If this column is foreign key then this specifies the name for it.\n     */\n    foreignKeyConstraintName?: string\n\n    /**\n     * Generated column expression.\n     */\n    asExpression?: string\n\n    /**\n     * Generated column type.\n     */\n    generatedType?: \"VIRTUAL\" | \"STORED\"\n\n    /**\n     * Identity column type. Supports only in Postgres 10+.\n     */\n    generatedIdentity?: \"ALWAYS\" | \"BY DEFAULT\"\n\n    /**\n     * Return type of HSTORE column.\n     * Returns value as string or as object.\n     */\n    hstoreType?: \"object\" | \"string\"\n\n    /**\n     * Indicates if this column is an array.\n     * Can be simply set to true or array length can be specified.\n     * Supported only by postgres.\n     */\n    array?: boolean\n\n    /**\n     * Specifies a value transformer that is to be used to (un)marshal\n     * this column when reading or writing to the database.\n     */\n    transformer?: ValueTransformer | ValueTransformer[]\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16907, "column": 0}, "map": {"version":3,"file":"IndexOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/options/IndexOptions.ts"],"sourcesContent":["/**\n * Describes all index options.\n */\nexport interface IndexOptions {\n    /**\n     * Indicates if this composite index must be unique or not.\n     */\n    unique?: boolean\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL and PostgreSQL.\n     */\n    spatial?: boolean\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    fulltext?: boolean\n\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n    nullFiltered?: boolean\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string\n\n    /**\n     * Index filter condition.\n     */\n    where?: string\n\n    /**\n     * If true, the index only references documents with the specified field.\n     * These indexes use less space but behave differently in some situations (particularly sorts).\n     * This option is only supported for mongodb database.\n     */\n    sparse?: boolean\n\n    /**\n     * Builds the index in the background so that building an index an does not block other database activities.\n     * This option is only supported for mongodb database.\n     */\n    background?: boolean\n\n    /**\n     * Create the index using the CONCURRENTLY modifier\n     * Works only in postgres.\n     */\n    concurrent?: boolean\n\n    /**\n     * Specifies a time to live, in seconds.\n     * This option is only supported for mongodb database.\n     */\n    expireAfterSeconds?: number\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16916, "column": 0}, "map": {"version":3,"file":"JoinColumnOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/options/JoinColumnOptions.ts"],"sourcesContent":["/**\n * Describes join column options.\n */\nexport interface JoinColumnOptions {\n    /**\n     * Name of the column.\n     */\n    name?: string\n\n    /**\n     * Name of the column in the entity to which this column is referenced.\n     */\n    referencedColumnName?: string // TODO rename to referencedColumn\n\n    /**\n     * Name of the foreign key constraint.\n     */\n    foreignKeyConstraintName?: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16925, "column": 0}, "map": {"version":3,"file":"JoinTableOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/options/JoinTableOptions.ts"],"sourcesContent":["import { JoinColumnOptions } from \"./JoinColumnOptions\"\n\n/**\n * Describes join table options.\n */\nexport interface JoinTableOptions {\n    /**\n     * Name of the table that will be created to store values of the both tables (join table).\n     * By default is auto generated.\n     */\n    name?: string\n\n    /**\n     * First column of the join table.\n     */\n    joinColumn?: JoinColumnOptions\n\n    /**\n     * Second (inverse) column of the join table.\n     */\n    inverseJoinColumn?: JoinColumnOptions\n\n    /**\n     * Database where join table will be created.\n     * Works only in some databases (like mysql and mssql).\n     */\n    database?: string\n\n    /**\n     * Schema where join table will be created.\n     * Works only in some databases (like postgres and mssql).\n     */\n    schema?: string\n\n    /**\n     * Indicates if schema synchronization is enabled or disabled junction table.\n     * If it will be set to false then schema sync will and migrations ignores junction table.\n     * By default schema synchronization is enabled.\n     */\n    synchronize?: boolean\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16934, "column": 0}, "map": {"version":3,"file":"RelationOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/options/RelationOptions.ts"],"sourcesContent":["import { DeferrableType } from \"../../metadata/types/DeferrableType\"\nimport { OnDeleteType } from \"../../metadata/types/OnDeleteType\"\nimport { OnUpdateType } from \"../../metadata/types/OnUpdateType\"\n\n/**\n * Describes all relation's options.\n */\nexport interface RelationOptions {\n    /**\n     * Sets cascades options for the given relation.\n     * If set to true then it means that related object can be allowed to be inserted or updated in the database.\n     * You can separately restrict cascades to insertion or updation using following syntax:\n     *\n     * cascade: [\"insert\", \"update\", \"remove\", \"soft-remove\", \"recover\"] // include or exclude one of them\n     */\n    cascade?:\n        | boolean\n        | (\"insert\" | \"update\" | \"remove\" | \"soft-remove\" | \"recover\")[]\n\n    /**\n     * Indicates if relation column value can be nullable or not.\n     */\n    nullable?: boolean\n\n    /**\n     * Database cascade action on delete.\n     */\n    onDelete?: OnDeleteType\n\n    /**\n     * Database cascade action on update.\n     */\n    onUpdate?: OnUpdateType\n\n    /**\n     * Indicate if foreign key constraints can be deferred.\n     */\n    deferrable?: DeferrableType\n\n    /**\n     * Indicates whether foreign key constraints will be created for join columns.\n     * Can be used only for many-to-one and owner one-to-one relations.\n     * Defaults to true.\n     */\n    createForeignKeyConstraints?: boolean\n\n    /**\n     * Set this relation to be lazy. Note: lazy relations are promises. When you call them they return promise\n     * which resolve relation result then. If your property's type is Promise then this relation is set to lazy automatically.\n     */\n    lazy?: boolean\n\n    /**\n     * Set this relation to be eager.\n     * Eager relations are always loaded automatically when relation's owner entity is loaded using find* methods.\n     * Only using QueryBuilder prevents loading eager relations.\n     * Eager flag cannot be set from both sides of relation - you can eager load only one side of the relationship.\n     */\n    eager?: boolean\n\n    /**\n     * Indicates if persistence is enabled for the relation.\n     * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\n     * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\n     * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\n     */\n    persistence?: boolean\n\n    /**\n     * When a parent is saved (with cascading but) without a child row that still exists in database, this will control what shall happen to them.\n     * delete will remove these rows from database.\n     * nullify will remove the relation key.\n     * disable will keep the relation intact. Removal of related item is only possible through its own repo.\n     */\n    orphanedRowAction?: \"nullify\" | \"delete\" | \"soft-delete\" | \"disable\"\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16943, "column": 0}, "map": {"version":3,"file":"EntityOptions.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/options/EntityOptions.ts"],"sourcesContent":["import { OrderByCondition } from \"../../find-options/OrderByCondition\"\n\n/**\n * Describes all entity's options.\n */\nexport interface EntityOptions {\n    /**\n     * Table name.\n     * If not specified then naming strategy will generate table name from entity name.\n     */\n    name?: string\n\n    /**\n     * Specifies a default order by used for queries from this table when no explicit order by is specified.\n     */\n    orderBy?: OrderByCondition | ((object: any) => OrderByCondition | any)\n\n    /**\n     * Table's database engine type (like \"InnoDB\", \"MyISAM\", etc).\n     * It is used only during table creation.\n     * If you update this value and table is already created, it will not change table's engine type.\n     * Note that not all databases support this option.\n     */\n    engine?: string\n\n    /**\n     * Database name. Used in Mysql and Sql Server.\n     */\n    database?: string\n\n    /**\n     * Schema name. Used in Postgres and Sql Server.\n     */\n    schema?: string\n\n    /**\n     * Indicates if schema synchronization is enabled or disabled for this entity.\n     * If it will be set to false then schema sync will and migrations ignore this entity.\n     * By default schema synchronization is enabled for all entities.\n     */\n    synchronize?: boolean\n\n    /**\n     * If set to 'true' this option disables Sqlite's default behaviour of secretly creating\n     * an integer primary key column named 'rowid' on table creation.\n     * @see https://www.sqlite.org/withoutrowid.html.\n     */\n    withoutRowid?: boolean\n\n    /**\n     * Table comment. Not supported by all database types.\n     */\n    comment?: string\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16952, "column": 0}, "map": {"version":3,"file":"ValueTransformer.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/options/ValueTransformer.ts"],"sourcesContent":["/**\n * Interface for objects that deal with (un)marshalling data.\n */\nexport interface ValueTransformer {\n    /**\n     * Used to marshal data when writing to the database.\n     */\n    to(value: any): any\n\n    /**\n     * Used to unmarshal data when reading from the database.\n     */\n    from(value: any): any\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16961, "column": 0}, "map": {"version":3,"file":"JoinColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/relations/JoinColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { JoinColumnMetadataArgs } from \"../../metadata-args/JoinColumnMetadataArgs\"\nimport { JoinColumnOptions } from \"../options/JoinColumnOptions\"\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions[]): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(\n    optionsOrOptionsArray?: JoinColumnOptions | JoinColumnOptions[],\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        const options = Array.isArray(optionsOrOptionsArray)\n            ? optionsOrOptionsArray\n            : [optionsOrOptionsArray || {}]\n        options.forEach((options) => {\n            getMetadataArgsStorage().joinColumns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName,\n                foreignKeyConstraintName: options.foreignKeyConstraintName,\n            } as JoinColumnMetadataArgs)\n        })\n    }\n}\n"],"names":[],"mappings":";;;;AA8BA,QAAA,UAAA,GAAA,WAiBC;AA/CD,MAAA,qCAAsD;AAyBtD;;;;GAIG,CACH,SAAgB,UAAU,CACtB,qBAA+D;IAE/D,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC,GAC9C,qBAAqB,GACrB;YAAC,qBAAqB,IAAI,CAAA,CAAE;SAAC,CAAA;QACnC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACxB,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;gBAClD,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;aACnC,CAAC,CAAA;QAChC,CAAC,CAAC,CAAA;IACN,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16992, "column": 0}, "map": {"version":3,"file":"JoinTable.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/relations/JoinTable.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { JoinTableMetadataArgs } from \"../../metadata-args/JoinTableMetadataArgs\"\nimport { JoinTableMultipleColumnsOptions } from \"../options/JoinTableMultipleColumnsOptions\"\nimport { JoinTableOptions } from \"../options/JoinTableOptions\"\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableOptions): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(\n    options: JoinTableMultipleColumnsOptions,\n): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(\n    options?: JoinTableOptions | JoinTableMultipleColumnsOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        options =\n            options ||\n            ({} as JoinTableOptions | JoinTableMultipleColumnsOptions)\n        getMetadataArgsStorage().joinTables.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumns: (options && (options as JoinTableOptions).joinColumn\n                ? [(options as JoinTableOptions).joinColumn!]\n                : (options as JoinTableMultipleColumnsOptions)\n                      .joinColumns) as any,\n            inverseJoinColumns: (options &&\n            (options as JoinTableOptions).inverseJoinColumn\n                ? [(options as JoinTableOptions).inverseJoinColumn!]\n                : (options as JoinTableMultipleColumnsOptions)\n                      .inverseJoinColumns) as any,\n            schema: options && options.schema ? options.schema : undefined,\n            database:\n                options && options.database ? options.database : undefined,\n            synchronize: !(options && options.synchronize === false),\n        } as JoinTableMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AA6BA,QAAA,SAAA,GAAA,UA0BC;AAvDD,MAAA,qCAAsD;AAyBtD;;;GAGG,CACH,SAAgB,SAAS,CACrB,OAA4D;IAE5D,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,OAAO,GACH,OAAO,IACN,CAAA,CAAyD,CAAA;QAC9D,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,UAAU,CAAC,IAAI,CAAC;YACrC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,WAAW,EAAE,AAAC,OAAO,IAAK,OAA4B,CAAC,UAAU,GAC3D;gBAAE,OAA4B,CAAC,UAAW;aAAC,GAC1C,OAA2C,CACvC,WAAW,CAAQ;YAC9B,kBAAkB,EAAE,AAAC,OAAO,IAC3B,OAA4B,CAAC,iBAAiB,GACzC;gBAAE,OAA4B,CAAC,iBAAkB;aAAC,GACjD,OAA2C,CACvC,kBAAkB,CAAQ;YACrC,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YAC9D,QAAQ,EACJ,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;YAC9D,WAAW,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,KAAK,KAAK,CAAC;SAClC,CAAC,CAAA;IAC/B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17025, "column": 0}, "map": {"version":3,"file":"ManyToMany.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/relations/ManyToMany.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\nimport { ObjectType } from \"../../common/ObjectType\"\nimport { RelationOptions } from \"../options/RelationOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    options?: RelationOptions,\n): PropertyDecorator\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSide?: string | ((object: T) => any),\n    options?: RelationOptions,\n): PropertyDecorator\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSideOrOptions?: string | ((object: T) => any) | RelationOptions,\n    options?: RelationOptions,\n): PropertyDecorator {\n    // normalize parameters\n    let inverseSideProperty: string | ((object: T) => any)\n    if (ObjectUtils.isObject(inverseSideOrOptions)) {\n        options = <RelationOptions>inverseSideOrOptions\n    } else {\n        inverseSideProperty = inverseSideOrOptions as any\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions\n\n        // now try to determine it its lazy relation\n        let isLazy = options.lazy === true\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) {\n            // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\n                \"design:type\",\n                object,\n                propertyName,\n            )\n            if (\n                reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\"\n            )\n                isLazy = true\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-many\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options,\n        } as RelationMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAgCA,QAAA,UAAA,GAAA,WA4CC;AA5ED,MAAA,qCAAsD;AAItD,MAAA,kDAAoD;AAuBpD;;;;GAIG,CACH,SAAgB,UAAU,CACtB,oBAA8D,EAC9D,oBAAsE,EACtE,OAAyB;IAEzB,uBAAuB;IACvB,IAAI,mBAAkD,CAAA;IACtD,IAAI,cAAA,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE,CAAC;QAC7C,OAAO,GAAoB,oBAAoB,CAAA;IACnD,CAAC,MAAM,CAAC;QACJ,mBAAmB,GAAG,oBAA2B,CAAA;IACrD,CAAC;IAED,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAAqB,CAAA;QAE7C,4CAA4C;QAC5C,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,KAAK,IAAI,CAAA;QAClC,IAAI,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,EAAE,CAAC;YACrD,0BAA0B;YAC1B,MAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAC9C,aAAa,EACb,MAAM,EACN,YAAY,CACf,CAAA;YACD,IACI,aAAa,IACb,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IACtC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,EAE9C,MAAM,GAAG,IAAI,CAAA;QACrB,CAAC;QAED,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,YAAY,EAAE,cAAc;YAC5B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,oBAAoB;YAC1B,mBAAmB,EAAE,mBAAmB;YACxC,OAAO,EAAE,OAAO;SACK,CAAC,CAAA;IAC9B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17070, "column": 0}, "map": {"version":3,"file":"ManyToOne.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/relations/ManyToOne.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\nimport { ObjectType } from \"../../common/ObjectType\"\nimport { RelationOptions } from \"../options/RelationOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\n * Entity2 on its side of the relation.\n */\nexport function ManyToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    options?: RelationOptions,\n): PropertyDecorator\n\n/**\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\n * Entity2 on its side of the relation.\n */\nexport function ManyToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSide?: string | ((object: T) => any),\n    options?: RelationOptions,\n): PropertyDecorator\n\n/**\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\n * Entity2 on its side of the relation.\n */\nexport function ManyToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSideOrOptions?: string | ((object: T) => any) | RelationOptions,\n    options?: RelationOptions,\n): PropertyDecorator {\n    // Normalize parameters.\n    let inverseSideProperty: string | ((object: T) => any)\n    if (ObjectUtils.isObject(inverseSideOrOptions)) {\n        options = <RelationOptions>inverseSideOrOptions\n    } else {\n        inverseSideProperty = inverseSideOrOptions as any\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions\n\n        // Now try to determine if it is a lazy relation.\n        let isLazy = options && options.lazy === true\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) {\n            // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\n                \"design:type\",\n                object,\n                propertyName,\n            )\n            if (\n                reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\"\n            )\n                isLazy = true\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-one\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options,\n        } as RelationMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAgCA,QAAA,SAAA,GAAA,UA4CC;AA5ED,MAAA,qCAAsD;AAItD,MAAA,kDAAoD;AAuBpD;;;;GAIG,CACH,SAAgB,SAAS,CACrB,oBAA8D,EAC9D,oBAAsE,EACtE,OAAyB;IAEzB,wBAAwB;IACxB,IAAI,mBAAkD,CAAA;IACtD,IAAI,cAAA,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE,CAAC;QAC7C,OAAO,GAAoB,oBAAoB,CAAA;IACnD,CAAC,MAAM,CAAC;QACJ,mBAAmB,GAAG,oBAA2B,CAAA;IACrD,CAAC;IAED,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAAqB,CAAA;QAE7C,iDAAiD;QACjD,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAA;QAC7C,IAAI,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,EAAE,CAAC;YACrD,0BAA0B;YAC1B,MAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAC9C,aAAa,EACb,MAAM,EACN,YAAY,CACf,CAAA;YACD,IACI,aAAa,IACb,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IACtC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,EAE9C,MAAM,GAAG,IAAI,CAAA;QACrB,CAAC;QAED,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,YAAY,EAAE,aAAa;YAC3B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,oBAAoB;YAC1B,mBAAmB,EAAE,mBAAmB;YACxC,OAAO,EAAE,OAAO;SACK,CAAC,CAAA;IAC9B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17115, "column": 0}, "map": {"version":3,"file":"OneToMany.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/relations/OneToMany.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\nimport { ObjectType } from \"../../common/ObjectType\"\nimport { RelationOptions } from \"../options/RelationOptions\"\n\n/**\n * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,\n * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its\n * side of the relation.\n */\nexport function OneToMany<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSide: string | ((object: T) => any),\n    options?: RelationOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions\n\n        // Now try to determine if it is a lazy relation.\n        let isLazy = options && options.lazy === true\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) {\n            // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\n                \"design:type\",\n                object,\n                propertyName,\n            )\n            if (\n                reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\"\n            )\n                isLazy = true\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSide,\n            options: options,\n        } as RelationMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAUA,QAAA,SAAA,GAAA,UAoCC;AA9CD,MAAA,qCAAsD;AAKtD;;;;GAIG,CACH,SAAgB,SAAS,CACrB,oBAA8D,EAC9D,WAA0C,EAC1C,OAAyB;IAEzB,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAAqB,CAAA;QAE7C,iDAAiD;QACjD,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAA;QAC7C,IAAI,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,EAAE,CAAC;YACrD,0BAA0B;YAC1B,MAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAC9C,aAAa,EACb,MAAM,EACN,YAAY,CACf,CAAA;YACD,IACI,aAAa,IACb,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IACtC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,EAE9C,MAAM,GAAG,IAAI,CAAA;QACrB,CAAC;QAED,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,aAAa;YAC3B,IAAI,EAAE,oBAAoB;YAC1B,mBAAmB,EAAE,WAAW;YAChC,OAAO,EAAE,OAAO;SACK,CAAC,CAAA;IAC9B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17152, "column": 0}, "map": {"version":3,"file":"OneToOne.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/relations/OneToOne.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\nimport { ObjectType } from \"../../common/ObjectType\"\nimport { RelationOptions } from \"../options/RelationOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * One-to-one relation allows the creation of a direct relation between two entities. Entity1 has only one Entity2.\n * Entity1 is the owner of the relationship, and stores Entity2 id on its own side.\n */\nexport function OneToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    options?: RelationOptions,\n): PropertyDecorator\n\n/**\n * One-to-one relation allows the creation of a direct relation between two entities. Entity1 has only one Entity2.\n * Entity1 is the owner of the relationship, and stores Entity2 id on its own side.\n */\nexport function OneToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSide?: string | ((object: T) => any),\n    options?: RelationOptions,\n): PropertyDecorator\n\n/**\n * One-to-one relation allows the creation of a direct relation between two entities. Entity1 has only one Entity2.\n * Entity1 is the owner of the relationship, and stores Entity2 id on its own side.\n */\nexport function OneToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSideOrOptions?: string | ((object: T) => any) | RelationOptions,\n    options?: RelationOptions,\n): PropertyDecorator {\n    // normalize parameters\n    let inverseSideProperty: string | ((object: T) => any)\n    if (ObjectUtils.isObject(inverseSideOrOptions)) {\n        options = <RelationOptions>inverseSideOrOptions\n    } else {\n        inverseSideProperty = inverseSideOrOptions as any\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) {\n            // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\n                \"design:type\",\n                object,\n                propertyName,\n            )\n            if (\n                reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\"\n            )\n                isLazy = true\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-one\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options,\n        } as RelationMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AA6BA,QAAA,QAAA,GAAA,SA4CC;AAzED,MAAA,qCAAsD;AAItD,MAAA,kDAAoD;AAqBpD;;;GAGG,CACH,SAAgB,QAAQ,CACpB,oBAA8D,EAC9D,oBAAsE,EACtE,OAAyB;IAEzB,uBAAuB;IACvB,IAAI,mBAAkD,CAAA;IACtD,IAAI,cAAA,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE,CAAC;QAC7C,OAAO,GAAoB,oBAAoB,CAAA;IACnD,CAAC,MAAM,CAAC;QACJ,mBAAmB,GAAG,oBAA2B,CAAA;IACrD,CAAC;IAED,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAAqB,CAAA;QAE7C,4CAA4C;QAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;QAC5D,IAAI,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,EAAE,CAAC;YACrD,0BAA0B;YAC1B,MAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAC9C,aAAa,EACb,MAAM,EACN,YAAY,CACf,CAAA;YACD,IACI,aAAa,IACb,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IACtC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,EAE9C,MAAM,GAAG,IAAI,CAAA;QACrB,CAAC;QAED,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,oBAAoB;YAC1B,mBAAmB,EAAE,mBAAmB;YACxC,OAAO,EAAE,OAAO;SACK,CAAC,CAAA;IAC9B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17196, "column": 0}, "map": {"version":3,"file":"RelationCount.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/relations/RelationCount.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationCountMetadataArgs } from \"../../metadata-args/RelationCountMetadataArgs\"\nimport { SelectQueryBuilder } from \"../../query-builder/SelectQueryBuilder\"\n\n/**\n * Holds a number of children in the closure table of the column.\n *\n * @deprecated This decorator will removed in the future versions.\n * Use {@link VirtualColumn} to calculate the count instead.\n */\nexport function RelationCount<T>(\n    relation: string | ((object: T) => any),\n    alias?: string,\n    queryBuilderFactory?: (\n        qb: SelectQueryBuilder<any>,\n    ) => SelectQueryBuilder<any>,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().relationCounts.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory,\n        } as RelationCountMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAUA,QAAA,aAAA,GAAA,cAgBC;AA1BD,MAAA,qCAAsD;AAItD;;;;;GAKG,CACH,SAAgB,aAAa,CACzB,QAAuC,EACvC,KAAc,EACd,mBAE4B;IAE5B,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,cAAc,CAAC,IAAI,CAAC;YACzC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,mBAAmB,EAAE,mBAAmB;SACd,CAAC,CAAA;IACnC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17223, "column": 0}, "map": {"version":3,"file":"RelationId.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/relations/RelationId.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationIdMetadataArgs } from \"../../metadata-args/RelationIdMetadataArgs\"\nimport { SelectQueryBuilder } from \"../../query-builder/SelectQueryBuilder\"\n\n/**\n * Special decorator used to extract relation id into separate entity property.\n *\n * @experimental\n */\nexport function RelationId<T>(\n    relation: string | ((object: T) => any),\n    alias?: string,\n    queryBuilderFactory?: (\n        qb: SelectQueryBuilder<any>,\n    ) => SelectQueryBuilder<any>,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().relationIds.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory,\n        } as RelationIdMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AASA,QAAA,UAAA,GAAA,WAgBC;AAzBD,MAAA,qCAAsD;AAItD;;;;GAIG,CACH,SAAgB,UAAU,CACtB,QAAuC,EACvC,KAAc,EACd,mBAE4B;IAE5B,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,mBAAmB,EAAE,mBAAmB;SACjB,CAAC,CAAA;IAChC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17249, "column": 0}, "map": {"version":3,"file":"Entity.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/entity/Entity.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { TableMetadataArgs } from \"../../metadata-args/TableMetadataArgs\"\nimport { EntityOptions } from \"../options/EntityOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(options?: EntityOptions): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(name?: string, options?: EntityOptions): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(\n    nameOrOptions?: string | EntityOptions,\n    maybeOptions?: EntityOptions,\n): ClassDecorator {\n    const options =\n        (ObjectUtils.isObject(nameOrOptions)\n            ? (nameOrOptions as EntityOptions)\n            : maybeOptions) || {}\n    const name =\n        typeof nameOrOptions === \"string\" ? nameOrOptions : options.name\n\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options.orderBy ? options.orderBy : undefined,\n            engine: options.engine ? options.engine : undefined,\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize,\n            withoutRowid: options.withoutRowid,\n            comment: options.comment ? options.comment : undefined,\n        } as TableMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAqBA,QAAA,MAAA,GAAA,OAyBC;AA9CD,MAAA,qCAAsD;AAGtD,MAAA,kDAAoD;AAcpD;;;GAGG,CACH,SAAgB,MAAM,CAClB,aAAsC,EACtC,YAA4B;IAE5B,MAAM,OAAO,GACT,CAAC,cAAA,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,GAC7B,aAA+B,GAChC,YAAY,CAAC,IAAI,CAAA,CAAE,CAAA;IAC7B,MAAM,IAAI,GACN,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAA;IAEpE,OAAO,SAAU,MAAM;QACnB,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,MAAM,CAAC,IAAI,CAAC;YACjC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;YACtD,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YACnD,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;YACzD,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YACnD,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,YAAY,EAAE,OAAO,CAAC,YAAY;YAClC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;SACpC,CAAC,CAAA;IAC3B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17282, "column": 0}, "map": {"version":3,"file":"ChildEntity.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/entity/ChildEntity.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { TableMetadataArgs } from \"../../metadata-args/TableMetadataArgs\"\nimport { DiscriminatorValueMetadataArgs } from \"../../metadata-args/DiscriminatorValueMetadataArgs\"\n\n/**\n * Special type of the table used in the single-table inherited tables.\n */\nexport function ChildEntity(discriminatorValue?: any): ClassDecorator {\n    return function (target: Function) {\n        // register a table metadata\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            type: \"entity-child\",\n        } as TableMetadataArgs)\n\n        // register discriminator value if it was provided\n        if (typeof discriminatorValue !== \"undefined\") {\n            getMetadataArgsStorage().discriminatorValues.push({\n                target: target,\n                value: discriminatorValue,\n            } as DiscriminatorValueMetadataArgs)\n        }\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,WAAA,GAAA,YAgBC;AAvBD,MAAA,qCAAsD;AAItD;;GAEG,CACH,SAAgB,WAAW,CAAC,kBAAwB;IAChD,OAAO,SAAU,MAAgB;QAC7B,4BAA4B;QAC5B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,MAAM,CAAC,IAAI,CAAC;YACjC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,cAAc;SACF,CAAC,CAAA;QAEvB,kDAAkD;QAClD,IAAI,OAAO,kBAAkB,KAAK,WAAW,EAAE,CAAC;YAC5C,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC;gBAC9C,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,kBAAkB;aACM,CAAC,CAAA;QACxC,CAAC;IACL,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17311, "column": 0}, "map": {"version":3,"file":"TableInheritance.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/entity/TableInheritance.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { InheritanceMetadataArgs } from \"../../metadata-args/InheritanceMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\n\n/**\n * Sets for entity to use table inheritance pattern.\n */\nexport function TableInheritance(options?: {\n    pattern?: \"STI\" /*|\"CTI\"*/\n    column?: string | ColumnOptions\n}): ClassDecorator {\n    return function (target: Function) {\n        getMetadataArgsStorage().inheritances.push({\n            target: target,\n            pattern: options && options.pattern ? options.pattern : \"STI\",\n            column:\n                options && options.column\n                    ? typeof options.column === \"string\"\n                        ? { name: options.column }\n                        : options.column\n                    : undefined,\n        } as InheritanceMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAOA,QAAA,gBAAA,GAAA,iBAgBC;AAvBD,MAAA,qCAAsD;AAItD;;GAEG,CACH,SAAgB,gBAAgB,CAAC,OAGhC;IACG,OAAO,SAAU,MAAgB;QAC7B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,YAAY,CAAC,IAAI,CAAC;YACvC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;YAC7D,MAAM,EACF,OAAO,IAAI,OAAO,CAAC,MAAM,GACnB,OAAO,OAAO,CAAC,MAAM,KAAK,QAAQ,GAC9B;gBAAE,IAAI,EAAE,OAAO,CAAC,MAAM;YAAA,CAAE,GACxB,OAAO,CAAC,MAAM,GAClB,SAAS;SACK,CAAC,CAAA;IACjC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17335, "column": 0}, "map": {"version":3,"file":"ViewEntity.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/entity-view/ViewEntity.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { TableMetadataArgs } from \"../../metadata-args/TableMetadataArgs\"\nimport { ViewEntityOptions } from \"../options/ViewEntityOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(options?: ViewEntityOptions): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(\n    name?: string,\n    options?: ViewEntityOptions,\n): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(\n    nameOrOptions?: string | ViewEntityOptions,\n    maybeOptions?: ViewEntityOptions,\n): ClassDecorator {\n    const options =\n        (ObjectUtils.isObject(nameOrOptions)\n            ? (nameOrOptions as ViewEntityOptions)\n            : maybeOptions) || {}\n    const name =\n        typeof nameOrOptions === \"string\" ? nameOrOptions : options.name\n\n    return function (target: Function) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            expression: options.expression,\n            dependsOn: options.dependsOn\n                ? new Set(options.dependsOn)\n                : undefined,\n            type: \"view\",\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize === false ? false : true,\n            materialized: !!options.materialized,\n        } as TableMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAwBA,QAAA,UAAA,GAAA,WA0BC;AAlDD,MAAA,qCAAsD;AAGtD,MAAA,kDAAoD;AAiBpD;;;GAGG,CACH,SAAgB,UAAU,CACtB,aAA0C,EAC1C,YAAgC;IAEhC,MAAM,OAAO,GACT,CAAC,cAAA,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,GAC7B,aAAmC,GACpC,YAAY,CAAC,IAAI,CAAA,CAAE,CAAA;IAC7B,MAAM,IAAI,GACN,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAA;IAEpE,OAAO,SAAU,MAAgB;QAC7B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,MAAM,CAAC,IAAI,CAAC;YACjC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,SAAS,EAAE,OAAO,CAAC,SAAS,GACtB,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,GAC1B,SAAS;YACf,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;YACzD,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YACnD,WAAW,EAAE,OAAO,CAAC,WAAW,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;YACzD,YAAY,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY;SAClB,CAAC,CAAA;IAC3B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17367, "column": 0}, "map": {"version":3,"file":"TreeLevelColumn.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/tree/TreeLevelColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\n\n/**\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\n */\nexport function TreeLevelColumn(): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"treeLevel\",\n            options: {},\n        } as ColumnMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAMA,QAAA,eAAA,GAAA,gBASC;AAfD,MAAA,qCAAsD;AAGtD;;GAEG,CACH,SAAgB,eAAe;IAC3B,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,CAAA,CAAE;SACQ,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17390, "column": 0}, "map": {"version":3,"file":"TreeParent.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/tree/TreeParent.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\nimport { OnDeleteType } from \"../../metadata/types/OnDeleteType\"\nimport { RelationOptions } from \"../options/RelationOptions\"\n\n/**\n * Marks a entity property as a parent of the tree.\n * \"Tree parent\" indicates who owns (is a parent) of this entity in tree structure.\n */\nexport function TreeParent(options?: {\n    onDelete?: OnDeleteType\n}): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions\n\n        // now try to determine it its lazy relation\n        const reflectedType =\n            Reflect && (Reflect as any).getMetadata\n                ? Reflect.getMetadata(\"design:type\", object, propertyName)\n                : undefined\n        const isLazy =\n            (reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\") ||\n            false\n\n        getMetadataArgsStorage().relations.push({\n            isTreeParent: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            isLazy: isLazy,\n            relationType: \"many-to-one\",\n            type: () => object.constructor,\n            options: options,\n        } as RelationMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AASA,QAAA,UAAA,GAAA,WA2BC;AApCD,MAAA,qCAAsD;AAKtD;;;GAGG,CACH,SAAgB,UAAU,CAAC,OAE1B;IACG,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAAqB,CAAA;QAE7C,4CAA4C;QAC5C,MAAM,aAAa,GACf,OAAO,IAAK,OAAe,CAAC,WAAW,GACjC,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,GACxD,SAAS,CAAA;QACnB,MAAM,MAAM,GACR,AAAC,aAAa,IACV,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IACtC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,GACnD,KAAK,CAAA;QAET,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,aAAa;YAC3B,IAAI,EAAE,GAAG,CAAG,CAAD,KAAO,CAAC,WAAW;YAC9B,OAAO,EAAE,OAAO;SACK,CAAC,CAAA;IAC9B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17421, "column": 0}, "map": {"version":3,"file":"TreeChildren.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/tree/TreeChildren.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\nimport { RelationOptions } from \"../options/RelationOptions\"\n\n/**\n * Marks a entity property as a children of the tree.\n * \"Tree children\" will contain all children (bind) of this entity.\n */\nexport function TreeChildren(options?: {\n    cascade?:\n        | boolean\n        | (\"insert\" | \"update\" | \"remove\" | \"soft-remove\" | \"recover\")[]\n}): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions\n\n        // now try to determine it its lazy relation\n        const reflectedType =\n            Reflect && (Reflect as any).getMetadata\n                ? Reflect.getMetadata(\"design:type\", object, propertyName)\n                : undefined\n        const isLazy =\n            (reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\") ||\n            false\n\n        // add one-to-many relation for this\n        getMetadataArgsStorage().relations.push({\n            isTreeChildren: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: () => object.constructor,\n            options: options,\n        } as RelationMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAQA,QAAA,YAAA,GAAA,aA8BC;AAtCD,MAAA,qCAAsD;AAItD;;;GAGG,CACH,SAAgB,YAAY,CAAC,OAI5B;IACG,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,CAAA,CAAqB,CAAA;QAE7C,4CAA4C;QAC5C,MAAM,aAAa,GACf,OAAO,IAAK,OAAe,CAAC,WAAW,GACjC,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,GACxD,SAAS,CAAA;QACnB,MAAM,MAAM,GACR,AAAC,aAAa,IACV,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IACtC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,GACnD,KAAK,CAAA;QAET,oCAAoC;QACpC,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,cAAc,EAAE,IAAI;YACpB,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,aAAa;YAC3B,IAAI,EAAE,GAAG,CAAG,CAAD,KAAO,CAAC,WAAW;YAC9B,OAAO,EAAE,OAAO;SACK,CAAC,CAAA;IAC9B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17453, "column": 0}, "map": {"version":3,"file":"Tree.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/decorator/tree/Tree.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { TreeMetadataArgs } from \"../../metadata-args/TreeMetadataArgs\"\nimport { TreeType } from \"../../metadata/types/TreeTypes\"\nimport { ClosureTreeOptions } from \"../../metadata/types/ClosureTreeOptions\"\n\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(\n    type: TreeType,\n    options?: ClosureTreeOptions,\n): ClassDecorator {\n    return function (target: Function) {\n        getMetadataArgsStorage().trees.push({\n            target: target,\n            type: type,\n            options: type === \"closure-table\" ? options : undefined,\n        } as TreeMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAWA,QAAA,IAAA,GAAA,KAWC;AAtBD,MAAA,qCAAsD;AAKtD;;;;;GAKG,CACH,SAAgB,IAAI,CAChB,IAAc,EACd,OAA4B;IAE5B,OAAO,SAAU,MAAgB;QAC7B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,KAAK,CAAC,IAAI,CAAC;YAChC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;SACtC,CAAC,CAAA;IAC1B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17478, "column": 0}, "map": {"version":3,"file":"Index.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/decorator/Index.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\nimport { IndexOptions } from \"./options/IndexOptions\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    name: string,\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    name: string,\n    options: { synchronize: false },\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    name: string,\n    fields: string[],\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    fields: string[],\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    fields: (object?: any) => any[] | { [key: string]: number },\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    name: string,\n    fields: (object?: any) => any[] | { [key: string]: number },\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    nameOrFieldsOrOptions?:\n        | string\n        | string[]\n        | ((object: any) => any[] | { [key: string]: number })\n        | IndexOptions,\n    maybeFieldsOrOptions?:\n        | ((object?: any) => any[] | { [key: string]: number })\n        | IndexOptions\n        | string[]\n        | { synchronize: false },\n    maybeOptions?: IndexOptions,\n): ClassDecorator & PropertyDecorator {\n    // normalize parameters\n    const name =\n        typeof nameOrFieldsOrOptions === \"string\"\n            ? nameOrFieldsOrOptions\n            : undefined\n    const fields =\n        typeof nameOrFieldsOrOptions === \"string\"\n            ? <\n                  | ((object?: any) => any[] | { [key: string]: number })\n                  | string[]\n              >maybeFieldsOrOptions\n            : (nameOrFieldsOrOptions as string[])\n    let options =\n        ObjectUtils.isObject(nameOrFieldsOrOptions) &&\n        !Array.isArray(nameOrFieldsOrOptions)\n            ? (nameOrFieldsOrOptions as IndexOptions)\n            : maybeOptions\n    if (!options)\n        options =\n            ObjectUtils.isObject(maybeFieldsOrOptions) &&\n            !Array.isArray(maybeFieldsOrOptions)\n                ? (maybeFieldsOrOptions as IndexOptions)\n                : maybeOptions\n\n    return function (\n        clsOrObject: Function | Object,\n        propertyName?: string | symbol,\n    ) {\n        getMetadataArgsStorage().indices.push({\n            target: propertyName\n                ? clsOrObject.constructor\n                : (clsOrObject as Function),\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            synchronize:\n                options &&\n                (options as { synchronize: false }).synchronize === false\n                    ? false\n                    : true,\n            where: options ? options.where : undefined,\n            unique: options && options.unique ? true : false,\n            spatial: options && options.spatial ? true : false,\n            fulltext: options && options.fulltext ? true : false,\n            nullFiltered: options && options.nullFiltered ? true : false,\n            parser: options ? options.parser : undefined,\n            sparse: options && options.sparse ? true : false,\n            background: options && options.background ? true : false,\n            concurrent: options && options.concurrent ? true : false,\n            expireAfterSeconds: options\n                ? options.expireAfterSeconds\n                : undefined,\n        } as IndexMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAiFA,QAAA,KAAA,GAAA,MAkEC;AAnJD,MAAA,kCAAmD;AAGnD,MAAA,+CAAiD;AAyEjD;;;;GAIG,CACH,SAAgB,KAAK,CACjB,qBAIkB,EAClB,oBAI4B,EAC5B,YAA2B;IAE3B,uBAAuB;IACvB,MAAM,IAAI,GACN,OAAO,qBAAqB,KAAK,QAAQ,GACnC,qBAAqB,GACrB,SAAS,CAAA;IACnB,MAAM,MAAM,GACR,OAAO,qBAAqB,KAAK,QAAQ,GAIlC,oBAAoB,GACpB,qBAAkC,CAAA;IAC7C,IAAI,OAAO,GACP,cAAA,WAAW,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAC3C,CAAC,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC,GAC9B,qBAAsC,GACvC,YAAY,CAAA;IACtB,IAAI,CAAC,OAAO,EACR,OAAO,GACH,cAAA,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAC1C,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAC7B,oBAAqC,GACtC,YAAY,CAAA;IAE1B,OAAO,SACH,WAA8B,EAC9B,YAA8B;QAE9B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,YAAY,GACd,WAAW,CAAC,WAAW,GACtB,WAAwB;YAC/B,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;gBAAC,YAAY;aAAC,CAAC,CAAC,CAAC,MAAM;YAC/C,WAAW,EACP,OAAO,IACN,OAAkC,CAAC,WAAW,KAAK,KAAK,GACnD,KAAK,GACL,IAAI;YACd,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;YAC1C,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAChD,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAClD,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YACpD,YAAY,EAAE,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAC5D,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YAC5C,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAChD,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YACxD,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YACxD,kBAAkB,EAAE,OAAO,GACrB,OAAO,CAAC,kBAAkB,GAC1B,SAAS;SACG,CAAC,CAAA;IAC3B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17521, "column": 0}, "map": {"version":3,"file":"ForeignKey.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/decorator/ForeignKey.ts"],"sourcesContent":["import { ObjectType } from \"../common/ObjectType\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { ForeignKeyMetadataArgs } from \"../metadata-args/ForeignKeyMetadataArgs\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { ForeignKeyOptions } from \"./options/ForeignKeyOptions\"\n\n/**\n * Creates a database foreign key. Can be used on entity property or on entity.\n * Can create foreign key with composite columns when used on entity.\n * Warning! Don't use this with relations; relation decorators create foreign keys automatically.\n */\nexport function ForeignKey<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    options?: ForeignKeyOptions,\n): PropertyDecorator\n\n/**\n * Creates a database foreign key. Can be used on entity property or on entity.\n * Can create foreign key with composite columns when used on entity.\n * Warning! Don't use this with relations; relation decorators create foreign keys automatically.\n */\nexport function ForeignKey<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSide: string | ((object: T) => any),\n    options?: ForeignKeyOptions,\n): PropertyDecorator\n\n/**\n * Creates a database foreign key. Can be used on entity property or on entity.\n * Can create foreign key with composite columns when used on entity.\n * Warning! Don't use this with relations; relation decorators create foreign keys automatically.\n */\nexport function ForeignKey<\n    T,\n    C extends (readonly [] | readonly string[]) &\n        (number extends C[\"length\"] ? readonly [] : unknown),\n>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    columnNames: C,\n    referencedColumnNames: { [K in keyof C]: string },\n    options?: ForeignKeyOptions,\n): ClassDecorator\n\n/**\n * Creates a database foreign key. Can be used on entity property or on entity.\n * Can create foreign key with composite columns when used on entity.\n * Warning! Don't use this with relations; relation decorators create foreign keys automatically.\n */\nexport function ForeignKey<\n    T,\n    C extends (readonly [] | readonly string[]) &\n        (number extends C[\"length\"] ? readonly [] : unknown),\n>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSideOrColumnNamesOrOptions?:\n        | string\n        | ((object: T) => any)\n        | C\n        | ForeignKeyOptions,\n    referencedColumnNamesOrOptions?:\n        | { [K in keyof C]: string }\n        | ForeignKeyOptions,\n    maybeOptions?: ForeignKeyOptions,\n): ClassDecorator & PropertyDecorator {\n    const inverseSide =\n        typeof inverseSideOrColumnNamesOrOptions === \"string\" ||\n        typeof inverseSideOrColumnNamesOrOptions === \"function\"\n            ? inverseSideOrColumnNamesOrOptions\n            : undefined\n\n    const columnNames = Array.isArray(inverseSideOrColumnNamesOrOptions)\n        ? inverseSideOrColumnNamesOrOptions\n        : undefined\n\n    const referencedColumnNames = Array.isArray(referencedColumnNamesOrOptions)\n        ? referencedColumnNamesOrOptions\n        : undefined\n\n    const options =\n        ObjectUtils.isObject(inverseSideOrColumnNamesOrOptions) &&\n        !Array.isArray(inverseSideOrColumnNamesOrOptions)\n            ? inverseSideOrColumnNamesOrOptions\n            : ObjectUtils.isObject(referencedColumnNamesOrOptions) &&\n              !Array.isArray(referencedColumnNamesOrOptions)\n            ? referencedColumnNamesOrOptions\n            : maybeOptions\n\n    return function (\n        clsOrObject: Function | Object,\n        propertyName?: string | symbol,\n    ) {\n        getMetadataArgsStorage().foreignKeys.push({\n            target: propertyName\n                ? clsOrObject.constructor\n                : (clsOrObject as Function),\n            propertyName: propertyName,\n            type: typeFunctionOrTarget,\n            inverseSide,\n            columnNames,\n            referencedColumnNames,\n            ...(options as ForeignKeyOptions),\n        } as ForeignKeyMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAgDA,QAAA,UAAA,GAAA,WAuDC;AAtGD,MAAA,kCAAmD;AAEnD,MAAA,+CAAiD;AAwCjD;;;;GAIG,CACH,SAAgB,UAAU,CAKtB,oBAA8D,EAC9D,iCAIuB,EACvB,8BAEuB,EACvB,YAAgC;IAEhC,MAAM,WAAW,GACb,OAAO,iCAAiC,KAAK,QAAQ,IACrD,OAAO,iCAAiC,KAAK,UAAU,GACjD,iCAAiC,GACjC,SAAS,CAAA;IAEnB,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,iCAAiC,CAAC,GAC9D,iCAAiC,GACjC,SAAS,CAAA;IAEf,MAAM,qBAAqB,GAAG,KAAK,CAAC,OAAO,CAAC,8BAA8B,CAAC,GACrE,8BAA8B,GAC9B,SAAS,CAAA;IAEf,MAAM,OAAO,GACT,cAAA,WAAW,CAAC,QAAQ,CAAC,iCAAiC,CAAC,IACvD,CAAC,KAAK,CAAC,OAAO,CAAC,iCAAiC,CAAC,GAC3C,iCAAiC,GACjC,cAAA,WAAW,CAAC,QAAQ,CAAC,8BAA8B,CAAC,IACpD,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B,CAAC,GAC9C,8BAA8B,GAC9B,YAAY,CAAA;IAEtB,OAAO,SACH,WAA8B,EAC9B,YAA8B;QAE9B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,YAAY,GACd,WAAW,CAAC,WAAW,GACtB,WAAwB;YAC/B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,oBAAoB;YAC1B,WAAW;YACX,WAAW;YACX,qBAAqB;YACrB,GAAI,OAA6B;SACV,CAAC,CAAA;IAChC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17554, "column": 0}, "map": {"version":3,"file":"Unique.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/decorator/Unique.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { UniqueMetadataArgs } from \"../metadata-args/UniqueMetadataArgs\"\nimport { UniqueOptions } from \"./options/UniqueOptions\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(\n    name: string,\n    fields: string[],\n    options?: UniqueOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(\n    fields: string[],\n    options?: UniqueOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(\n    fields: (object?: any) => any[] | { [key: string]: number },\n    options?: UniqueOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(\n    name: string,\n    fields: (object?: any) => any[] | { [key: string]: number },\n    options?: UniqueOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(\n    nameOrFieldsOrOptions?:\n        | string\n        | string[]\n        | ((object: any) => any[] | { [key: string]: number })\n        | UniqueOptions,\n    maybeFieldsOrOptions?:\n        | ((object?: any) => any[] | { [key: string]: number })\n        | string[]\n        | UniqueOptions,\n    maybeOptions?: UniqueOptions,\n): ClassDecorator & PropertyDecorator {\n    const name =\n        typeof nameOrFieldsOrOptions === \"string\"\n            ? nameOrFieldsOrOptions\n            : undefined\n    const fields =\n        typeof nameOrFieldsOrOptions === \"string\"\n            ? <\n                  | ((object?: any) => any[] | { [key: string]: number })\n                  | string[]\n              >maybeFieldsOrOptions\n            : (nameOrFieldsOrOptions as string[])\n    let options =\n        ObjectUtils.isObject(nameOrFieldsOrOptions) &&\n        !Array.isArray(nameOrFieldsOrOptions)\n            ? (nameOrFieldsOrOptions as UniqueOptions)\n            : maybeOptions\n    if (!options)\n        options =\n            ObjectUtils.isObject(nameOrFieldsOrOptions) &&\n            !Array.isArray(maybeFieldsOrOptions)\n                ? (maybeFieldsOrOptions as UniqueOptions)\n                : maybeOptions\n\n    return function (\n        clsOrObject: Function | Object,\n        propertyName?: string | symbol,\n    ) {\n        let columns = fields\n\n        if (propertyName !== undefined) {\n            switch (typeof propertyName) {\n                case \"string\":\n                    columns = [propertyName]\n                    break\n\n                case \"symbol\":\n                    columns = [propertyName.toString()]\n                    break\n            }\n        }\n\n        const args: UniqueMetadataArgs = {\n            target: propertyName\n                ? clsOrObject.constructor\n                : (clsOrObject as Function),\n            name: name,\n            columns,\n            deferrable: options ? options.deferrable : undefined,\n        }\n        getMetadataArgsStorage().uniques.push(args)\n    }\n}\n"],"names":[],"mappings":";;;;AA0CA,QAAA,MAAA,GAAA,OA+DC;AAzGD,MAAA,kCAAmD;AAGnD,MAAA,+CAAiD;AAoCjD;;GAEG,CACH,SAAgB,MAAM,CAClB,qBAImB,EACnB,oBAGmB,EACnB,YAA4B;IAE5B,MAAM,IAAI,GACN,OAAO,qBAAqB,KAAK,QAAQ,GACnC,qBAAqB,GACrB,SAAS,CAAA;IACnB,MAAM,MAAM,GACR,OAAO,qBAAqB,KAAK,QAAQ,GAIlC,oBAAoB,GACpB,qBAAkC,CAAA;IAC7C,IAAI,OAAO,GACP,cAAA,WAAW,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAC3C,CAAC,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC,GAC9B,qBAAuC,GACxC,YAAY,CAAA;IACtB,IAAI,CAAC,OAAO,EACR,OAAO,GACH,cAAA,WAAW,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAC3C,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAC7B,oBAAsC,GACvC,YAAY,CAAA;IAE1B,OAAO,SACH,WAA8B,EAC9B,YAA8B;QAE9B,IAAI,OAAO,GAAG,MAAM,CAAA;QAEpB,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAQ,OAAO,YAAY,EAAE,CAAC;gBAC1B,KAAK,QAAQ;oBACT,OAAO,GAAG;wBAAC,YAAY;qBAAC,CAAA;oBACxB,MAAK;gBAET,KAAK,QAAQ;oBACT,OAAO,GAAG;wBAAC,YAAY,CAAC,QAAQ,EAAE;qBAAC,CAAA;oBACnC,MAAK;YACb,CAAC;QACL,CAAC;QAED,MAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,YAAY,GACd,WAAW,CAAC,WAAW,GACtB,WAAwB;YAC/B,IAAI,EAAE,IAAI;YACV,OAAO;YACP,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;SACvD,CAAA;QACD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC/C,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17598, "column": 0}, "map": {"version":3,"file":"Check.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/decorator/Check.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { CheckMetadataArgs } from \"../metadata-args/CheckMetadataArgs\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Creates a database check.\n * Can be used on entity property or on entity.\n * Can create checks with composite columns when used on entity.\n */\nexport function Check(expression: string): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database check.\n * Can be used on entity property or on entity.\n * Can create checks with composite columns when used on entity.\n */\nexport function Check(\n    name: string,\n    expression: string,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database check.\n * Can be used on entity property or on entity.\n * Can create checks with composite columns when used on entity.\n */\nexport function Check(\n    nameOrExpression: string,\n    maybeExpression?: string,\n): ClassDecorator & PropertyDecorator {\n    const name = maybeExpression ? nameOrExpression : undefined\n    const expression = maybeExpression ? maybeExpression : nameOrExpression\n\n    if (!expression) throw new TypeORMError(`Check expression is required`)\n\n    return function (\n        clsOrObject: Function | Object,\n        propertyName?: string | symbol,\n    ) {\n        getMetadataArgsStorage().checks.push({\n            target: propertyName\n                ? clsOrObject.constructor\n                : (clsOrObject as Function),\n            name: name,\n            expression: expression,\n        } as CheckMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AA0BA,QAAA,KAAA,GAAA,MAqBC;AA/CD,MAAA,kCAAmD;AAEnD,MAAA,8BAAuC;AAmBvC;;;;GAIG,CACH,SAAgB,KAAK,CACjB,gBAAwB,EACxB,eAAwB;IAExB,MAAM,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAA;IAC3D,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,gBAAgB,CAAA;IAEvE,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,QAAA,YAAY,CAAC,CAAA,4BAAA,CAA8B,CAAC,CAAA;IAEvE,OAAO,SACH,WAA8B,EAC9B,YAA8B;QAE9B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,MAAM,CAAC,IAAI,CAAC;YACjC,MAAM,EAAE,YAAY,GACd,WAAW,CAAC,WAAW,GACtB,WAAwB;YAC/B,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,UAAU;SACJ,CAAC,CAAA;IAC3B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17626, "column": 0}, "map": {"version":3,"file":"Exclusion.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/decorator/Exclusion.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { ExclusionMetadataArgs } from \"../metadata-args/ExclusionMetadataArgs\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(\n    expression: string,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(\n    name: string,\n    expression: string,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(\n    nameOrExpression: string,\n    maybeExpression?: string,\n): ClassDecorator & PropertyDecorator {\n    const name = maybeExpression ? nameOrExpression : undefined\n    const expression = maybeExpression ? maybeExpression : nameOrExpression\n\n    if (!expression) throw new TypeORMError(`Exclusion expression is required`)\n\n    return function (\n        clsOrObject: Function | Object,\n        propertyName?: string | symbol,\n    ) {\n        getMetadataArgsStorage().exclusions.push({\n            target: propertyName\n                ? clsOrObject.constructor\n                : (clsOrObject as Function),\n            name: name,\n            expression: expression,\n        } as ExclusionMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AA4BA,QAAA,SAAA,GAAA,UAqBC;AAjDD,MAAA,kCAAmD;AAEnD,MAAA,8BAAuC;AAqBvC;;;;GAIG,CACH,SAAgB,SAAS,CACrB,gBAAwB,EACxB,eAAwB;IAExB,MAAM,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAA;IAC3D,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,gBAAgB,CAAA;IAEvE,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,QAAA,YAAY,CAAC,CAAA,gCAAA,CAAkC,CAAC,CAAA;IAE3E,OAAO,SACH,WAA8B,EAC9B,YAA8B;QAE9B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,UAAU,CAAC,IAAI,CAAC;YACrC,MAAM,EAAE,YAAY,GACd,WAAW,CAAC,WAAW,GACtB,WAAwB;YAC/B,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,UAAU;SACA,CAAC,CAAA;IAC/B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17654, "column": 0}, "map": {"version":3,"file":"Generated.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/decorator/Generated.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { GeneratedMetadataArgs } from \"../metadata-args/GeneratedMetadataArgs\"\n\n/**\n * Marks a column to generate a value on entity insertion.\n * There are three types of generation strategy - increment, uuid and rowid (cockroachdb only).\n * Increment uses a number which increases by one on each insertion.\n * Uuid generates a special UUID token.\n * Rowid supports only in CockroachDB and uses `unique_rowid()` function\n *\n * Note, some databases do not support non-primary generation columns.\n */\nexport function Generated(\n    strategy: \"increment\" | \"uuid\" | \"rowid\" = \"increment\",\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy,\n        } as GeneratedMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAYA,QAAA,SAAA,GAAA,UAUC;AAtBD,MAAA,kCAAmD;AAGnD;;;;;;;;GAQG,CACH,SAAgB,SAAS,CACrB,WAA2C,WAAW;IAEtD,OAAO,SAAU,MAAc,EAAE,YAAoB;QACjD,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;SACI,CAAC,CAAA;IAC/B,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17682, "column": 0}, "map": {"version":3,"file":"EntityRepository.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/decorator/EntityRepository.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { EntityRepositoryMetadataArgs } from \"../metadata-args/EntityRepositoryMetadataArgs\"\nimport { EntitySchema } from \"../entity-schema/EntitySchema\"\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can manage some specific entity or just be generic.\n * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.\n *\n * @deprecated use Repository.extend function to create a custom repository\n */\nexport function EntityRepository(\n    entity?: Function | EntitySchema<any>,\n): ClassDecorator {\n    return function (target: Function) {\n        getMetadataArgsStorage().entityRepositories.push({\n            target: target,\n            entity: entity,\n        } as EntityRepositoryMetadataArgs)\n    }\n}\n"],"names":[],"mappings":";;;;AAWA,QAAA,gBAAA,GAAA,iBASC;AApBD,MAAA,kCAAmD;AAInD;;;;;;GAMG,CACH,SAAgB,gBAAgB,CAC5B,MAAqC;IAErC,OAAO,SAAU,MAAgB;QAC7B,CAAA,GAAA,UAAA,sBAAsB,GAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAC7C,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,MAAM;SACe,CAAC,CAAA;IACtC,CAAC,CAAA;AACL,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17707, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":".","sources":["file:///home/user/studio/src/index.ts"],"sourcesContent":["/*!\n */\nimport \"reflect-metadata\"\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./globals\"\nexport * from \"./container\"\nexport * from \"./common/EntityTarget\"\nexport * from \"./common/ObjectType\"\nexport * from \"./common/ObjectLiteral\"\nexport * from \"./common/MixedList\"\nexport * from \"./common/DeepPartial\"\nexport * from \"./common/RelationType\"\nexport * from \"./error\"\nexport * from \"./decorator/columns/Column\"\nexport * from \"./decorator/columns/CreateDateColumn\"\nexport * from \"./decorator/columns/DeleteDateColumn\"\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\"\nexport * from \"./decorator/columns/PrimaryColumn\"\nexport * from \"./decorator/columns/UpdateDateColumn\"\nexport * from \"./decorator/columns/VersionColumn\"\nexport * from \"./decorator/columns/VirtualColumn\"\nexport * from \"./decorator/columns/ViewColumn\"\nexport * from \"./decorator/columns/ObjectIdColumn\"\nexport * from \"./decorator/listeners/AfterInsert\"\nexport * from \"./decorator/listeners/AfterLoad\"\nexport * from \"./decorator/listeners/AfterRemove\"\nexport * from \"./decorator/listeners/AfterSoftRemove\"\nexport * from \"./decorator/listeners/AfterRecover\"\nexport * from \"./decorator/listeners/AfterUpdate\"\nexport * from \"./decorator/listeners/BeforeInsert\"\nexport * from \"./decorator/listeners/BeforeRemove\"\nexport * from \"./decorator/listeners/BeforeSoftRemove\"\nexport * from \"./decorator/listeners/BeforeRecover\"\nexport * from \"./decorator/listeners/BeforeUpdate\"\nexport * from \"./decorator/listeners/EventSubscriber\"\nexport * from \"./decorator/options/ColumnOptions\"\nexport * from \"./decorator/options/IndexOptions\"\nexport * from \"./decorator/options/JoinColumnOptions\"\nexport * from \"./decorator/options/JoinTableOptions\"\nexport * from \"./decorator/options/RelationOptions\"\nexport * from \"./decorator/options/EntityOptions\"\nexport * from \"./decorator/options/ValueTransformer\"\nexport * from \"./decorator/relations/JoinColumn\"\nexport * from \"./decorator/relations/JoinTable\"\nexport * from \"./decorator/relations/ManyToMany\"\nexport * from \"./decorator/relations/ManyToOne\"\nexport * from \"./decorator/relations/OneToMany\"\nexport * from \"./decorator/relations/OneToOne\"\nexport * from \"./decorator/relations/RelationCount\"\nexport * from \"./decorator/relations/RelationId\"\nexport * from \"./decorator/entity/Entity\"\nexport * from \"./decorator/entity/ChildEntity\"\nexport * from \"./decorator/entity/TableInheritance\"\nexport * from \"./decorator/entity-view/ViewEntity\"\nexport * from \"./decorator/tree/TreeLevelColumn\"\nexport * from \"./decorator/tree/TreeParent\"\nexport * from \"./decorator/tree/TreeChildren\"\nexport * from \"./decorator/tree/Tree\"\nexport * from \"./decorator/Index\"\nexport * from \"./decorator/ForeignKey\"\nexport * from \"./decorator/Unique\"\nexport * from \"./decorator/Check\"\nexport * from \"./decorator/Exclusion\"\nexport * from \"./decorator/Generated\"\nexport * from \"./decorator/EntityRepository\"\nexport * from \"./find-options/operator/And\"\nexport * from \"./find-options/operator/Or\"\nexport * from \"./find-options/operator/Any\"\nexport * from \"./find-options/operator/ArrayContainedBy\"\nexport * from \"./find-options/operator/ArrayContains\"\nexport * from \"./find-options/operator/ArrayOverlap\"\nexport * from \"./find-options/operator/Between\"\nexport * from \"./find-options/operator/Equal\"\nexport * from \"./find-options/operator/In\"\nexport * from \"./find-options/operator/IsNull\"\nexport * from \"./find-options/operator/LessThan\"\nexport * from \"./find-options/operator/LessThanOrEqual\"\nexport * from \"./find-options/operator/ILike\"\nexport * from \"./find-options/operator/Like\"\nexport * from \"./find-options/operator/MoreThan\"\nexport * from \"./find-options/operator/MoreThanOrEqual\"\nexport * from \"./find-options/operator/Not\"\nexport * from \"./find-options/operator/Raw\"\nexport * from \"./find-options/operator/JsonContains\"\nexport * from \"./find-options/EqualOperator\"\nexport * from \"./find-options/FindManyOptions\"\nexport * from \"./find-options/FindOneOptions\"\nexport * from \"./find-options/FindOperator\"\nexport * from \"./find-options/FindOperatorType\"\nexport * from \"./find-options/FindOptionsOrder\"\nexport * from \"./find-options/FindOptionsRelations\"\nexport * from \"./find-options/FindOptionsSelect\"\nexport * from \"./find-options/FindOptionsUtils\"\nexport * from \"./find-options/FindOptionsWhere\"\nexport * from \"./find-options/FindTreeOptions\"\nexport * from \"./find-options/JoinOptions\"\nexport * from \"./find-options/OrderByCondition\"\nexport * from \"./logger/AbstractLogger\"\nexport * from \"./logger/Logger\"\nexport * from \"./logger/LoggerOptions\"\nexport * from \"./logger/AdvancedConsoleLogger\"\nexport * from \"./logger/FormattedConsoleLogger\"\nexport * from \"./logger/SimpleConsoleLogger\"\nexport * from \"./logger/FileLogger\"\nexport * from \"./metadata/EntityMetadata\"\nexport * from \"./entity-manager/EntityManager\"\nexport * from \"./repository/AbstractRepository\"\nexport * from \"./repository/Repository\"\nexport * from \"./repository/BaseEntity\"\nexport * from \"./repository/TreeRepository\"\nexport * from \"./repository/MongoRepository\"\nexport * from \"./repository/RemoveOptions\"\nexport * from \"./repository/SaveOptions\"\nexport * from \"./schema-builder/table/TableCheck\"\nexport * from \"./schema-builder/table/TableColumn\"\nexport * from \"./schema-builder/table/TableExclusion\"\nexport * from \"./schema-builder/table/TableForeignKey\"\nexport * from \"./schema-builder/table/TableIndex\"\nexport * from \"./schema-builder/table/TableUnique\"\nexport * from \"./schema-builder/table/Table\"\nexport * from \"./schema-builder/view/View\"\nexport * from \"./schema-builder/options/TableCheckOptions\"\nexport * from \"./schema-builder/options/TableColumnOptions\"\nexport * from \"./schema-builder/options/TableExclusionOptions\"\nexport * from \"./schema-builder/options/TableForeignKeyOptions\"\nexport * from \"./schema-builder/options/TableIndexOptions\"\nexport * from \"./schema-builder/options/TableOptions\"\nexport * from \"./schema-builder/options/TableUniqueOptions\"\nexport * from \"./schema-builder/options/ViewOptions\"\nexport * from \"./driver/mongodb/typings\"\nexport * from \"./driver/types/DatabaseType\"\nexport * from \"./driver/types/GeoJsonTypes\"\nexport * from \"./driver/types/ReplicationMode\"\nexport * from \"./driver/sqlserver/MssqlParameter\"\nexport * from \"./subscriber/event/QueryEvent\"\n\n// export * from \"./data-source\";\n\nexport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\"\nexport { ConnectionOptions } from \"./connection/ConnectionOptions\"\nexport { DataSource } from \"./data-source/DataSource\"\nexport { Connection } from \"./connection/Connection\"\nexport { ConnectionManager } from \"./connection/ConnectionManager\"\nexport { DataSourceOptions } from \"./data-source/DataSourceOptions\"\nexport { Driver } from \"./driver/Driver\"\nexport { QueryBuilder } from \"./query-builder/QueryBuilder\"\nexport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\"\nexport { DeleteQueryBuilder } from \"./query-builder/DeleteQueryBuilder\"\nexport { InsertQueryBuilder } from \"./query-builder/InsertQueryBuilder\"\nexport { UpdateQueryBuilder } from \"./query-builder/UpdateQueryBuilder\"\nexport { RelationQueryBuilder } from \"./query-builder/RelationQueryBuilder\"\nexport { Brackets } from \"./query-builder/Brackets\"\nexport { NotBrackets } from \"./query-builder/NotBrackets\"\nexport { WhereExpressionBuilder } from \"./query-builder/WhereExpressionBuilder\"\nexport { WhereExpression } from \"./query-builder/WhereExpressionBuilder\"\nexport { InsertResult } from \"./query-builder/result/InsertResult\"\nexport { UpdateResult } from \"./query-builder/result/UpdateResult\"\nexport { DeleteResult } from \"./query-builder/result/DeleteResult\"\nexport { QueryResult } from \"./query-runner/QueryResult\"\nexport { QueryRunner } from \"./query-runner/QueryRunner\"\nexport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\"\nexport { Migration } from \"./migration/Migration\"\nexport { MigrationExecutor } from \"./migration/MigrationExecutor\"\nexport { MigrationInterface } from \"./migration/MigrationInterface\"\nexport { DefaultNamingStrategy } from \"./naming-strategy/DefaultNamingStrategy\"\nexport { NamingStrategyInterface } from \"./naming-strategy/NamingStrategyInterface\"\nexport { LegacyOracleNamingStrategy } from \"./naming-strategy/LegacyOracleNamingStrategy\"\nexport { InsertEvent } from \"./subscriber/event/InsertEvent\"\nexport { LoadEvent } from \"./subscriber/event/LoadEvent\"\nexport { UpdateEvent } from \"./subscriber/event/UpdateEvent\"\nexport { RemoveEvent } from \"./subscriber/event/RemoveEvent\"\nexport { SoftRemoveEvent } from \"./subscriber/event/SoftRemoveEvent\"\nexport { RecoverEvent } from \"./subscriber/event/RecoverEvent\"\nexport { TransactionCommitEvent } from \"./subscriber/event/TransactionCommitEvent\"\nexport { TransactionRollbackEvent } from \"./subscriber/event/TransactionRollbackEvent\"\nexport { TransactionStartEvent } from \"./subscriber/event/TransactionStartEvent\"\nexport { EntitySubscriberInterface } from \"./subscriber/EntitySubscriberInterface\"\nexport { EntitySchema } from \"./entity-schema/EntitySchema\"\nexport { EntitySchemaColumnOptions } from \"./entity-schema/EntitySchemaColumnOptions\"\nexport { EntitySchemaIndexOptions } from \"./entity-schema/EntitySchemaIndexOptions\"\nexport { EntitySchemaRelationOptions } from \"./entity-schema/EntitySchemaRelationOptions\"\nexport { EntitySchemaEmbeddedColumnOptions } from \"./entity-schema/EntitySchemaEmbeddedColumnOptions\"\nexport { ColumnType } from \"./driver/types/ColumnTypes\"\nexport { EntitySchemaOptions } from \"./entity-schema/EntitySchemaOptions\"\nexport { InstanceChecker } from \"./util/InstanceChecker\"\nexport { TreeRepositoryUtils } from \"./util/TreeRepositoryUtils\"\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 18038, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/typeorm/index.mjs"],"sourcesContent":["import TypeORM from \"./index.js\";\nconst {\n    ConnectionOptionsReader,\n    DataSource,\n    Connection,\n    ConnectionManager,\n    QueryBuilder,\n    SelectQueryBuilder,\n    DeleteQueryBuilder,\n    InsertQueryBuilder,\n    UpdateQueryBuilder,\n    RelationQueryBuilder,\n    Brackets,\n    NotBrackets,\n    InsertResult,\n    UpdateResult,\n    DeleteResult,\n    QueryResult,\n    MongoEntityManager,\n    Migration,\n    MigrationExecutor,\n    DefaultNamingStrategy,\n    LegacyOracleNamingStrategy,\n    EntitySchema,\n    EntitySchemaEmbeddedColumnOptions,\n    EntitySchemaOptions,\n    InstanceChecker,\n    TreeRepositoryUtils,\n    getMetadataArgsStorage,\n    getConnectionOptions,\n    getConnectionManager,\n    createConnection,\n    createConnections,\n    getConnection,\n    getManager,\n    getMongoManager,\n    getSqljsManager,\n    getRepository,\n    getTreeRepository,\n    getCustomRepository,\n    getMongoRepository,\n    createQueryBuilder,\n    useContainer,\n    getFromContainer,\n    CannotReflectMethodParameterTypeError,\n    AlreadyHasActiveConnectionError,\n    SubjectWithoutIdentifierError,\n    CannotConnectAlreadyConnectedError,\n    LockNotSupportedOnGivenDriverError,\n    ConnectionIsNotSetError,\n    CannotCreateEntityIdMapError,\n    MetadataAlreadyExistsError,\n    CannotDetermineEntityError,\n    UpdateValuesMissingError,\n    TreeRepositoryNotSupportedError,\n    CustomRepositoryNotFoundError,\n    TransactionNotStartedError,\n    TransactionAlreadyStartedError,\n    EntityNotFoundError,\n    EntityMetadataNotFoundError,\n    MustBeEntityError,\n    OptimisticLockVersionMismatchError,\n    LimitOnUpdateNotSupportedError,\n    PrimaryColumnCannotBeNullableError,\n    CustomRepositoryCannotInheritRepositoryError,\n    QueryRunnerProviderAlreadyReleasedError,\n    CannotAttachTreeChildrenEntityError,\n    CustomRepositoryDoesNotHaveEntityError,\n    MissingDeleteDateColumnError,\n    NoConnectionForRepositoryError,\n    CircularRelationsError,\n    ReturningStatementNotSupportedError,\n    UsingJoinTableIsNotAllowedError,\n    MissingJoinColumnError,\n    MissingPrimaryColumnError,\n    EntityPropertyNotFoundError,\n    MissingDriverError,\n    DriverPackageNotInstalledError,\n    CannotGetEntityManagerNotConnectedError,\n    ConnectionNotFoundError,\n    NoVersionOrUpdateDateColumnError,\n    InsertValuesMissingError,\n    OptimisticLockCanNotBeUsedError,\n    MetadataWithSuchNameAlreadyExistsError,\n    DriverOptionNotSetError,\n    FindRelationsNotFoundError,\n    PessimisticLockTransactionRequiredError,\n    RepositoryNotTreeError,\n    DataTypeNotSupportedError,\n    InitializedRelationError,\n    MissingJoinTableError,\n    QueryFailedError,\n    NoNeedToReleaseEntityManagerError,\n    UsingJoinColumnOnlyOnOneSideAllowedError,\n    UsingJoinTableOnlyOnOneSideAllowedError,\n    SubjectRemovedAndUpdatedError,\n    PersistedEntityNotFoundError,\n    UsingJoinColumnIsNotAllowedError,\n    ColumnTypeUndefinedError,\n    QueryRunnerAlreadyReleasedError,\n    OffsetWithoutLimitNotSupportedError,\n    CannotExecuteNotConnectedError,\n    NoConnectionOptionError,\n    TypeORMError,\n    ForbiddenTransactionModeOverrideError,\n    Column,\n    CreateDateColumn,\n    DeleteDateColumn,\n    PrimaryGeneratedColumn,\n    PrimaryColumn,\n    UpdateDateColumn,\n    VersionColumn,\n    VirtualColumn,\n    ViewColumn,\n    ObjectIdColumn,\n    AfterInsert,\n    AfterLoad,\n    AfterRemove,\n    AfterSoftRemove,\n    AfterRecover,\n    AfterUpdate,\n    BeforeInsert,\n    BeforeRemove,\n    BeforeSoftRemove,\n    BeforeRecover,\n    BeforeUpdate,\n    EventSubscriber,\n    JoinColumn,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    OneToMany,\n    OneToOne,\n    RelationCount,\n    RelationId,\n    Entity,\n    ChildEntity,\n    TableInheritance,\n    ViewEntity,\n    TreeLevelColumn,\n    TreeParent,\n    TreeChildren,\n    Tree,\n    Index,\n    ForeignKey,\n    Unique,\n    Check,\n    Exclusion,\n    Generated,\n    EntityRepository,\n    And,\n    Or,\n    Any,\n    ArrayContainedBy,\n    ArrayContains,\n    ArrayOverlap,\n    Between,\n    Equal,\n    In,\n    IsNull,\n    LessThan,\n    LessThanOrEqual,\n    ILike,\n    Like,\n    MoreThan,\n    MoreThanOrEqual,\n    Not,\n    Raw,\n    JsonContains,\n    EqualOperator,\n    FindOperator,\n    FindOptionsUtils,\n    AbstractLogger,\n    AdvancedConsoleLogger,\n    FormattedConsoleLogger,\n    SimpleConsoleLogger,\n    FileLogger,\n    EntityMetadata,\n    EntityManager,\n    AbstractRepository,\n    Repository,\n    BaseEntity,\n    TreeRepository,\n    MongoRepository,\n    TableCheck,\n    TableColumn,\n    TableExclusion,\n    TableForeignKey,\n    TableIndex,\n    TableUnique,\n    Table,\n    View,\n    Binary,\n    BSON,\n    BSONRegExp,\n    BSONSymbol,\n    BSONType,\n    Code,\n    DBRef,\n    Decimal128,\n    deserialize,\n    Double,\n    Int32,\n    Long,\n    MaxKey,\n    MinKey,\n    ObjectId,\n    serialize,\n    Timestamp,\n    MssqlParameter\n} = TypeORM;\nexport {\n    ConnectionOptionsReader,\n    DataSource,\n    Connection,\n    ConnectionManager,\n    QueryBuilder,\n    SelectQueryBuilder,\n    DeleteQueryBuilder,\n    InsertQueryBuilder,\n    UpdateQueryBuilder,\n    RelationQueryBuilder,\n    Brackets,\n    NotBrackets,\n    InsertResult,\n    UpdateResult,\n    DeleteResult,\n    QueryResult,\n    MongoEntityManager,\n    Migration,\n    MigrationExecutor,\n    DefaultNamingStrategy,\n    LegacyOracleNamingStrategy,\n    EntitySchema,\n    EntitySchemaEmbeddedColumnOptions,\n    EntitySchemaOptions,\n    InstanceChecker,\n    TreeRepositoryUtils,\n    getMetadataArgsStorage,\n    getConnectionOptions,\n    getConnectionManager,\n    createConnection,\n    createConnections,\n    getConnection,\n    getManager,\n    getMongoManager,\n    getSqljsManager,\n    getRepository,\n    getTreeRepository,\n    getCustomRepository,\n    getMongoRepository,\n    createQueryBuilder,\n    useContainer,\n    getFromContainer,\n    CannotReflectMethodParameterTypeError,\n    AlreadyHasActiveConnectionError,\n    SubjectWithoutIdentifierError,\n    CannotConnectAlreadyConnectedError,\n    LockNotSupportedOnGivenDriverError,\n    ConnectionIsNotSetError,\n    CannotCreateEntityIdMapError,\n    MetadataAlreadyExistsError,\n    CannotDetermineEntityError,\n    UpdateValuesMissingError,\n    TreeRepositoryNotSupportedError,\n    CustomRepositoryNotFoundError,\n    TransactionNotStartedError,\n    TransactionAlreadyStartedError,\n    EntityNotFoundError,\n    EntityMetadataNotFoundError,\n    MustBeEntityError,\n    OptimisticLockVersionMismatchError,\n    LimitOnUpdateNotSupportedError,\n    PrimaryColumnCannotBeNullableError,\n    CustomRepositoryCannotInheritRepositoryError,\n    QueryRunnerProviderAlreadyReleasedError,\n    CannotAttachTreeChildrenEntityError,\n    CustomRepositoryDoesNotHaveEntityError,\n    MissingDeleteDateColumnError,\n    NoConnectionForRepositoryError,\n    CircularRelationsError,\n    ReturningStatementNotSupportedError,\n    UsingJoinTableIsNotAllowedError,\n    MissingJoinColumnError,\n    MissingPrimaryColumnError,\n    EntityPropertyNotFoundError,\n    MissingDriverError,\n    DriverPackageNotInstalledError,\n    CannotGetEntityManagerNotConnectedError,\n    ConnectionNotFoundError,\n    NoVersionOrUpdateDateColumnError,\n    InsertValuesMissingError,\n    OptimisticLockCanNotBeUsedError,\n    MetadataWithSuchNameAlreadyExistsError,\n    DriverOptionNotSetError,\n    FindRelationsNotFoundError,\n    PessimisticLockTransactionRequiredError,\n    RepositoryNotTreeError,\n    DataTypeNotSupportedError,\n    InitializedRelationError,\n    MissingJoinTableError,\n    QueryFailedError,\n    NoNeedToReleaseEntityManagerError,\n    UsingJoinColumnOnlyOnOneSideAllowedError,\n    UsingJoinTableOnlyOnOneSideAllowedError,\n    SubjectRemovedAndUpdatedError,\n    PersistedEntityNotFoundError,\n    UsingJoinColumnIsNotAllowedError,\n    ColumnTypeUndefinedError,\n    QueryRunnerAlreadyReleasedError,\n    OffsetWithoutLimitNotSupportedError,\n    CannotExecuteNotConnectedError,\n    NoConnectionOptionError,\n    TypeORMError,\n    ForbiddenTransactionModeOverrideError,\n    Column,\n    CreateDateColumn,\n    DeleteDateColumn,\n    PrimaryGeneratedColumn,\n    PrimaryColumn,\n    UpdateDateColumn,\n    VersionColumn,\n    VirtualColumn,\n    ViewColumn,\n    ObjectIdColumn,\n    AfterInsert,\n    AfterLoad,\n    AfterRemove,\n    AfterSoftRemove,\n    AfterRecover,\n    AfterUpdate,\n    BeforeInsert,\n    BeforeRemove,\n    BeforeSoftRemove,\n    BeforeRecover,\n    BeforeUpdate,\n    EventSubscriber,\n    JoinColumn,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    OneToMany,\n    OneToOne,\n    RelationCount,\n    RelationId,\n    Entity,\n    ChildEntity,\n    TableInheritance,\n    ViewEntity,\n    TreeLevelColumn,\n    TreeParent,\n    TreeChildren,\n    Tree,\n    Index,\n    ForeignKey,\n    Unique,\n    Check,\n    Exclusion,\n    Generated,\n    EntityRepository,\n    And,\n    Or,\n    Any,\n    ArrayContainedBy,\n    ArrayContains,\n    ArrayOverlap,\n    Between,\n    Equal,\n    In,\n    IsNull,\n    LessThan,\n    LessThanOrEqual,\n    ILike,\n    Like,\n    MoreThan,\n    MoreThanOrEqual,\n    Not,\n    Raw,\n    JsonContains,\n    EqualOperator,\n    FindOperator,\n    FindOptionsUtils,\n    AbstractLogger,\n    AdvancedConsoleLogger,\n    FormattedConsoleLogger,\n    SimpleConsoleLogger,\n    FileLogger,\n    EntityMetadata,\n    EntityManager,\n    AbstractRepository,\n    Repository,\n    BaseEntity,\n    TreeRepository,\n    MongoRepository,\n    TableCheck,\n    TableColumn,\n    TableExclusion,\n    TableForeignKey,\n    TableIndex,\n    TableUnique,\n    Table,\n    View,\n    Binary,\n    BSON,\n    BSONRegExp,\n    BSONSymbol,\n    BSONType,\n    Code,\n    DBRef,\n    Decimal128,\n    deserialize,\n    Double,\n    Int32,\n    Long,\n    MaxKey,\n    MinKey,\n    ObjectId,\n    serialize,\n    Timestamp,\n    MssqlParameter\n};\nexport default TypeORM;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}