{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"file":"MssqlParameter.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqlserver/MssqlParameter.ts"],"sourcesContent":["/**\n * Sql server driver requires parameter types to be specified fo input parameters used in the query.\n *\n * @see https://github.com/patriksimek/node-mssql#data-types\n */\nexport class MssqlParameter {\n    readonly \"@instanceof\" = Symbol.for(\"MssqlParameter\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    public params: any[] = []\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(value: any, type: \"bit\")\n    constructor(value: any, type: \"bigint\")\n    constructor(value: any, type: \"decimal\", precision?: number, scale?: number)\n    constructor(value: any, type: \"float\")\n    constructor(value: any, type: \"int\")\n    constructor(value: any, type: \"money\")\n    constructor(value: any, type: \"numeric\", precision?: number, scale?: number)\n    constructor(value: any, type: \"smallint\")\n    constructor(value: any, type: \"smallmoney\")\n    constructor(value: any, type: \"real\")\n    constructor(value: any, type: \"tinyint\")\n    constructor(value: any, type: \"char\", length?: number)\n    constructor(value: any, type: \"nchar\", length?: number)\n    constructor(value: any, type: \"text\")\n    constructor(value: any, type: \"ntext\")\n    constructor(value: any, type: \"varchar\", length?: number)\n    constructor(value: any, type: \"nvarchar\", length?: number)\n    constructor(value: any, type: \"xml\")\n    constructor(value: any, type: \"time\", scale?: number)\n    constructor(value: any, type: \"date\")\n    constructor(value: any, type: \"datetime\")\n    constructor(value: any, type: \"datetime2\", scale?: number)\n    constructor(value: any, type: \"datetimeoffset\", scale?: number)\n    constructor(value: any, type: \"smalldatetime\")\n    constructor(value: any, type: \"uniqueidentifier\")\n    constructor(value: any, type: \"variant\")\n    constructor(value: any, type: \"binary\")\n    constructor(value: any, type: \"varbinary\", length?: number)\n    constructor(value: any, type: \"image\")\n    constructor(value: any, type: \"udt\")\n    constructor(value: any, type: \"geography\")\n    constructor(value: any, type: \"geometry\")\n    constructor(value: any, type: \"rowversion\")\n    constructor(public value: any, public type: string, ...params: number[]) {\n        this.params = params || []\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA;;;;GAIG,CACH,MAAa,cAAc;IA8CvB,YAAmB,KAAU,EAAS,IAAY,EAAE,GAAG,MAAgB,CAAA;QAApD,IAAA,CAAA,KAAK,GAAL,KAAK,CAAK;QAAS,IAAA,CAAA,IAAI,GAAJ,IAAI,CAAQ;QA7CzC,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;QAErD,4EAA4E;QAC5E,oBAAoB;QACpB,4EAA4E;QAErE,IAAA,CAAA,MAAM,GAAU,EAAE,CAAA;QAwCrB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAA;IAC9B,CAAC;CACJ;AAjDD,QAAA,cAAA,GAAA,eAiDC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"file":"SqlServerQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqlserver/SqlServerQueryRunner.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { TypeORMError } from \"../../error\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { QueryLock } from \"../../query-runner/QueryLock\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Query } from \"../Query\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { MssqlParameter } from \"./MssqlParameter\"\nimport { SqlServerDriver } from \"./SqlServerDriver\"\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner\n    extends BaseQueryRunner\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private lock: QueryLock = new QueryLock()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n        this.mode = mode\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true\n        return Promise.resolve()\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n        await new Promise<void>(async (ok, fail) => {\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false\n                    return fail(err)\n                }\n                ok()\n            }\n\n            if (this.transactionDepth === 0) {\n                const pool = await (this.mode === \"slave\"\n                    ? this.driver.obtainSlaveConnection()\n                    : this.driver.obtainMasterConnection())\n                this.databaseConnection = pool.transaction()\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\")\n                if (isolationLevel) {\n                    this.databaseConnection.begin(\n                        this.convertIsolationLevel(isolationLevel),\n                        transactionCallback,\n                    )\n                    this.connection.logger.logQuery(\n                        \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel,\n                    )\n                } else {\n                    this.databaseConnection.begin(transactionCallback)\n                }\n            } else {\n                await this.query(\n                    `SAVE TRANSACTION typeorm_${this.transactionDepth}`,\n                )\n                ok()\n            }\n            this.transactionDepth += 1\n        })\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth === 1) {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.commit(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"COMMIT\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n        this.transactionDepth -= 1\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TRANSACTION typeorm_${this.transactionDepth - 1}`,\n            )\n            this.transactionDepth -= 1\n        } else {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.rollback(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"ROLLBACK\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        await this.broadcaster.broadcast(\"BeforeQuery\", query, parameters)\n\n        const broadcasterResult = new BroadcasterResult()\n\n        try {\n            const pool = await (this.mode === \"slave\"\n                ? this.driver.obtainSlaveConnection()\n                : this.driver.obtainMasterConnection())\n            const request = new this.driver.mssql.Request(\n                this.isTransactionActive ? this.databaseConnection : pool,\n            )\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    const parameterName = index.toString()\n                    if (InstanceChecker.isMssqlParameter(parameter)) {\n                        const mssqlParameter =\n                            this.mssqlParameterToNativeParameter(parameter)\n                        if (mssqlParameter) {\n                            request.input(\n                                parameterName,\n                                mssqlParameter,\n                                parameter.value,\n                            )\n                        } else {\n                            request.input(parameterName, parameter.value)\n                        }\n                    } else {\n                        request.input(parameterName, parameter)\n                    }\n                })\n            }\n            const queryStartTime = Date.now()\n\n            const raw = await new Promise<any>((ok, fail) => {\n                request.query(query, (err: any, raw: any) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime =\n                        this.driver.options.maxQueryExecutionTime\n                    const queryEndTime = Date.now()\n                    const queryExecutionTime = queryEndTime - queryStartTime\n\n                    this.broadcaster.broadcastAfterQueryEvent(\n                        broadcasterResult,\n                        query,\n                        parameters,\n                        true,\n                        queryExecutionTime,\n                        raw,\n                        undefined,\n                    )\n\n                    if (\n                        maxQueryExecutionTime &&\n                        queryExecutionTime > maxQueryExecutionTime\n                    ) {\n                        this.driver.connection.logger.logQuerySlow(\n                            queryExecutionTime,\n                            query,\n                            parameters,\n                            this,\n                        )\n                    }\n\n                    if (err) {\n                        fail(new QueryFailedError(query, parameters, err))\n                    }\n\n                    ok(raw)\n                })\n            })\n\n            const result = new QueryResult()\n\n            if (raw?.hasOwnProperty(\"recordset\")) {\n                result.records = raw.recordset\n            }\n\n            if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                result.affected = raw.rowsAffected[0]\n            }\n\n            const queryType = query.slice(0, query.indexOf(\" \"))\n            switch (queryType) {\n                case \"DELETE\":\n                    // for DELETE query additionally return number of affected rows\n                    result.raw = [raw.recordset, raw.rowsAffected[0]]\n                    break\n                default:\n                    result.raw = raw.recordset\n            }\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                false,\n                undefined,\n                undefined,\n                err,\n            )\n\n            throw err\n        } finally {\n            await broadcasterResult.wait()\n\n            release()\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        const pool = await (this.mode === \"slave\"\n            ? this.driver.obtainSlaveConnection()\n            : this.driver.obtainMasterConnection())\n        const request = new this.driver.mssql.Request(\n            this.isTransactionActive ? this.databaseConnection : pool,\n        )\n        if (parameters && parameters.length) {\n            parameters.forEach((parameter, index) => {\n                const parameterName = index.toString()\n                if (InstanceChecker.isMssqlParameter(parameter)) {\n                    request.input(\n                        parameterName,\n                        this.mssqlParameterToNativeParameter(parameter),\n                        parameter.value,\n                    )\n                } else {\n                    request.input(parameterName, parameter)\n                }\n            })\n        }\n\n        request.query(query)\n\n        const streamRequest = request.toReadableStream()\n\n        streamRequest.on(\"error\", (err: any) => {\n            release()\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n        })\n\n        streamRequest.on(\"end\", () => {\n            release()\n        })\n\n        if (onEnd) {\n            streamRequest.on(\"end\", onEnd)\n        }\n\n        if (onError) {\n            streamRequest.on(\"error\", onError)\n        }\n\n        return streamRequest\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`)\n        return results.map((result) => result[\"DATABASE_NAME\"])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database\n            ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"`\n            : `SELECT * FROM \"sys\".\"schemas\"`\n        const results: ObjectLiteral[] = await this.query(query)\n        return results.map((result) => result[\"name\"])\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT DB_ID('${database}') as \"db_id\"`,\n        )\n        const dbId = result[0][\"db_id\"]\n        return !!dbId\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`)\n        return currentDBQuery[0][\"db_name\"]\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT SCHEMA_ID('${schema}') as \"schema_id\"`,\n        )\n        const schemaId = result[0][\"schema_id\"]\n        return !!schemaId\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(\n            `SELECT SCHEMA_NAME() AS \"schema_name\"`,\n        )\n        return currentSchemaQuery[0][\"schema_name\"]\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}' AND \"COLUMN_NAME\" = '${columnName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const up = ifNotExist\n            ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"`\n            : `CREATE DATABASE \"${database}\"`\n        const down = `DROP DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist\n            ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"`\n            : `DROP DATABASE \"${database}\"`\n        const down = `CREATE DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END`\n                : `CREATE SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END`\n                : `CREATE SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END`\n                : `DROP SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END`\n                : `DROP SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table,\n                        index.columnNames,\n                        index.where,\n                    )\n                upQueries.push(this.createIndexSql(table, index))\n                downQueries.push(this.dropIndexSql(table, index))\n            })\n        }\n\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true,\n    ): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(table, index))\n                downQueries.push(this.createIndexSql(table, index))\n            })\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        upQueries.push(this.dropTableSql(table))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(\n        view: View,\n        syncWithMetadata: boolean = false,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = InstanceChecker.isView(target) ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(await this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName)\n        const newTable = oldTable.clone()\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string | undefined = undefined\n        let schemaName: string | undefined = undefined\n        let oldTableName: string = oldTable.name\n        const splittedName = oldTable.name.split(\".\")\n        if (splittedName.length === 3) {\n            dbName = splittedName[0]\n            oldTableName = splittedName[2]\n            if (splittedName[1] !== \"\") schemaName = splittedName[1]\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0]\n            oldTableName = splittedName[1]\n        }\n\n        newTable.name = this.driver.buildTableName(\n            newTableName,\n            schemaName,\n            dbName,\n        )\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase()\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n        }\n\n        // rename table\n        upQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    oldTable,\n                )}\", \"${newTableName}\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    newTable,\n                )}\", \"${oldTableName}\"`,\n            ),\n        )\n\n        // rename primary key constraint\n        if (\n            newTable.primaryColumns.length > 0 &&\n            !newTable.primaryColumns[0].primaryKeyConstraintName\n        ) {\n            const columnNames = newTable.primaryColumns.map(\n                (column) => column.name,\n            )\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\n                oldTable,\n                columnNames,\n            )\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\n                newTable,\n                columnNames,\n            )\n\n            // rename primary constraint\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${oldPkName}\", \"${newPkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newPkName}\", \"${oldPkName}\"`,\n                ),\n            )\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    oldTable,\n                    unique.columnNames,\n                )\n\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName) return\n\n            // build new constraint name\n            const newUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    newTable,\n                    unique.columnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        unique.name\n                    }\", \"${newUniqueName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newUniqueName}\", \"${unique.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            unique.name = newUniqueName\n        })\n\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(\n                oldTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName) return\n\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        index.name\n                    }\", \"${newIndexName}\", \"INDEX\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                ),\n            )\n\n            // replace constraint name\n            index.name = newIndexName\n        })\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    oldTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName) return\n\n            // build new constraint name\n            const newForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    newTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        foreignKey.name!,\n                        schemaName,\n                        dbName,\n                    )}\", \"${newForeignKeyName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        newForeignKeyName,\n                        schemaName,\n                        dbName,\n                    )}\", \"${foreignKey.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName\n        })\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name\n        this.replaceCachedTable(oldTable, newTable)\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    true,\n                )}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = primaryColumns[0].primaryKeyConstraintName\n                    ? primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          primaryColumns.map((column) => column.name),\n                      )\n\n                const columnNames = primaryColumns\n                    .map((column) => `\"${column.name}\"`)\n                    .join(\", \")\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n            }\n\n            primaryColumns.push(column)\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex))\n            downQueries.push(this.dropIndexSql(table, columnIndex))\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    [column.name],\n                ),\n                columnNames: [column.name],\n            })\n            clonedTable.uniques.push(uniqueConstraint)\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\" UNIQUE (\"${column.name}\")`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\"`,\n                ),\n            )\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.addColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        let newColumn: TableColumn | undefined = undefined\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        let clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find(\n                  (column) => column.name === oldTableColumnOrName,\n              )\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        if (\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\n                newColumn.generationStrategy !== \"uuid\") ||\n            newColumn.type !== oldColumn.type ||\n            newColumn.length !== oldColumn.length ||\n            newColumn.asExpression !== oldColumn.asExpression ||\n            newColumn.generatedType !== oldColumn.generatedType\n        ) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn)\n            await this.addColumn(table, newColumn)\n\n            // update cloned table\n            clonedTable = table.clone()\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // we need database name and schema name to rename FK constraints\n                let dbName: string | undefined = undefined\n                let schemaName: string | undefined = undefined\n                const splittedName = table.name.split(\".\")\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0]\n                    if (splittedName[1] !== \"\") schemaName = splittedName[1]\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0]\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase()\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`))\n                    downQueries.push(new Query(`USE \"${currentDB}\"`))\n                }\n\n                // rename the column\n                upQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            oldColumn.name\n                        }\", \"${newColumn.name}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            newColumn.name\n                        }\", \"${oldColumn.name}\"`,\n                    ),\n                )\n\n                // rename column primary key constraint\n                if (\n                    oldColumn.isPrimary === true &&\n                    !oldColumn.primaryKeyConstraintName\n                ) {\n                    const primaryColumns = clonedTable.primaryColumns\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(\n                        (column) => column.name,\n                    )\n                    const oldPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1)\n                    columnNames.push(newColumn.name)\n\n                    // build new primary constraint name\n                    const newPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // rename primary constraint\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${oldPkName}\", \"${newPkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newPkName}\", \"${oldPkName}\"`,\n                        ),\n                    )\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    const oldIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // Skip renaming if Index has user defined constraint name\n                    if (index.name !== oldIndexName) return\n\n                    // build new constraint name\n                    index.columnNames.splice(\n                        index.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    index.columnNames.push(newColumn.name)\n                    const newIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${index.name}\", \"${newIndexName}\", \"INDEX\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    index.name = newIndexName\n                })\n\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                        const foreignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // Skip renaming if foreign key has user defined constraint name\n                        if (foreignKey.name !== foreignKeyName) return\n\n                        // build new constraint name\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(oldColumn.name),\n                            1,\n                        )\n                        foreignKey.columnNames.push(newColumn.name)\n                        const newForeignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // build queries\n                        upQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    foreignKey.name!,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${newForeignKeyName}\"`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    newForeignKeyName,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${foreignKey.name}\"`,\n                            ),\n                        )\n\n                        // replace constraint name\n                        foreignKey.name = newForeignKeyName\n                    })\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach((check) => {\n                    // build new constraint name\n                    check.columnNames!.splice(\n                        check.columnNames!.indexOf(oldColumn.name),\n                        1,\n                    )\n                    check.columnNames!.push(newColumn.name)\n                    const newCheckName =\n                        this.connection.namingStrategy.checkConstraintName(\n                            clonedTable,\n                            check.expression!,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${check.name}\", \"${newCheckName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newCheckName}\", \"${check.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    check.name = newCheckName\n                })\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\n                    const oldUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // Skip renaming if Unique has user defined constraint name\n                    if (unique.name !== oldUniqueName) return\n\n                    // build new constraint name\n                    unique.columnNames.splice(\n                        unique.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    unique.columnNames.push(newColumn.name)\n                    const newUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${unique.name}\", \"${newUniqueName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newUniqueName}\", \"${unique.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    unique.name = newUniqueName\n                })\n\n                // rename default constraints\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const oldDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    const newDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${oldDefaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${newDefaultName}\"`,\n                        ),\n                    )\n                }\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`))\n                    downQueries.push(new Query(`USE \"${dbName}\"`))\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(\n                    (column) => column.name === oldColumn.name,\n                )\n                clonedTable.columns[\n                    clonedTable.columns.indexOf(oldTableColumn!)\n                ].name = newColumn.name\n                oldColumn.name = newColumn.name\n            }\n\n            if (\n                this.isColumnChanged(oldColumn, newColumn, false, false, false)\n            ) {\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            newColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            oldColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n            }\n\n            if (this.isEnumChanged(oldColumn, newColumn)) {\n                const oldExpression = this.getEnumExpression(oldColumn)\n                const oldCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        oldExpression,\n                        true,\n                    ),\n                    expression: oldExpression,\n                })\n\n                const newExpression = this.getEnumExpression(newColumn)\n                const newCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        newExpression,\n                        true,\n                    ),\n                    expression: newExpression,\n                })\n\n                upQueries.push(this.dropCheckConstraintSql(table, oldCheck))\n                upQueries.push(this.createCheckConstraintSql(table, newCheck))\n\n                downQueries.push(this.dropCheckConstraintSql(table, newCheck))\n                downQueries.push(this.createCheckConstraintSql(table, oldCheck))\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn)\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = true\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                } else {\n                    const primaryColumn = primaryColumns.find(\n                        (c) => c.name === newColumn.name,\n                    )\n                    primaryColumns.splice(\n                        primaryColumns.indexOf(primaryColumn!),\n                        1,\n                    )\n\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = false\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = primaryColumns[0]\n                            .primaryKeyConstraintName\n                            ? primaryColumns[0].primaryKeyConstraintName\n                            : this.connection.namingStrategy.primaryKeyName(\n                                  clonedTable,\n                                  primaryColumns.map((column) => column.name),\n                              )\n\n                        const columnNames = primaryColumns\n                            .map((column) => `\"${column.name}\"`)\n                            .join(\", \")\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} DROP CONSTRAINT \"${pkName}\"`,\n                            ),\n                        )\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(\n                            table,\n                            [newColumn.name],\n                        ),\n                        columnNames: [newColumn.name],\n                    })\n                    clonedTable.uniques.push(uniqueConstraint)\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint.name}\"`,\n                        ),\n                    )\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(\n                        (unique) => {\n                            return (\n                                unique.columnNames.length === 1 &&\n                                !!unique.columnNames.find(\n                                    (columnName) =>\n                                        columnName === newColumn.name,\n                                )\n                            )\n                        },\n                    )\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\n                        1,\n                    )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint!.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                // (note) if there is a previous default, we need to drop its constraint first\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${oldColumn.name}\"`,\n                        ),\n                    )\n                }\n\n                if (\n                    newColumn.default !== null &&\n                    newColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                newColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries)\n            this.replaceCachedTable(table, clonedTable)\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\n            )\n\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = column.primaryKeyConstraintName\n                ? column.primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      clonedTable.primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name)\n            tableColumn!.isPrimary = false\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = clonedTable.primaryColumns[0]\n                    .primaryKeyConstraintName\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          clonedTable.primaryColumns.map(\n                              (column) => column.name,\n                          ),\n                      )\n\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                    .join(\", \")\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1,\n            )\n            upQueries.push(this.dropIndexSql(table, columnIndex))\n            downQueries.push(this.createIndexSql(table, columnIndex))\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(\n            (check) =>\n                !!check.columnNames &&\n                check.columnNames.length === 1 &&\n                check.columnNames[0] === column.name,\n        )\n        if (columnCheck) {\n            clonedTable.checks.splice(\n                clonedTable.checks.indexOf(columnCheck),\n                1,\n            )\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(\n            (unique) =>\n                unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name,\n        )\n        if (columnUnique) {\n            clonedTable.uniques.splice(\n                clonedTable.uniques.indexOf(columnUnique),\n                1,\n            )\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique))\n            downQueries.push(\n                this.createUniqueConstraintSql(table, columnUnique),\n            )\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                        column.default\n                    } FOR \"${column.name}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    false,\n                )}`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.removeColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName)\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n        const down = this.dropPrimaryKeySql(clonedTable)\n\n        await this.executeQueries(up, down)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const columnNames = columns.map((column) => column.name)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns\n        if (primaryColumns.length > 0) {\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNamesString = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n                ),\n            )\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true))\n\n        const pkName = primaryColumns[0].primaryKeyConstraintName\n            ? primaryColumns[0].primaryKeyConstraintName\n            : this.connection.namingStrategy.primaryKeyName(\n                  clonedTable,\n                  columnNames,\n              )\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} DROP CONSTRAINT \"${pkName}\"`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(\n        tableOrName: Table | string,\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const up = this.dropPrimaryKeySql(table)\n        const down = this.createPrimaryKeySql(\n            table,\n            table.primaryColumns.map((column) => column.name),\n            constraintName,\n        )\n        await this.executeQueries(up, down)\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    uniqueConstraint.columnNames,\n                )\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.addUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.createUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName)\n        if (!uniqueConstraint)\n            throw new TypeORMError(\n                `Supplied unique constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.removeUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.dropUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    checkConstraint.expression!,\n                )\n\n        const up = this.createCheckConstraintSql(table, checkConstraint)\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.addCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.createCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName)\n        if (!checkConstraint)\n            throw new TypeORMError(\n                `Supplied check constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\n        const down = this.createCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.removeCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.dropCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const metadata = this.connection.hasMetadata(table.name)\n            ? this.connection.getMetadata(table.name)\n            : undefined\n\n        if (\n            metadata &&\n            metadata.treeParentRelation &&\n            metadata.treeParentRelation!.isTreeParent &&\n            metadata.foreignKeys.find(\n                (foreignKey) => foreignKey.onDelete !== \"NO ACTION\",\n            )\n        )\n            throw new TypeORMError(\n                \"SqlServer does not support options in TreeParent.\",\n            )\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table,\n                foreignKey.columnNames,\n                this.getTablePath(foreignKey),\n                foreignKey.referencedColumnNames,\n            )\n\n        const up = this.createForeignKeySql(table, foreignKey)\n        const down = this.dropForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.addForeignKey(foreignKey)\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.createForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        const up = this.dropForeignKeySql(table, foreignKey)\n        const down = this.createForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.removeForeignKey(foreignKey)\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.dropForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.addIndex(index)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index was not found in table ${table.name}`,\n            )\n\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(table, index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database)\n            if (!isDatabaseExist) return Promise.resolve()\n        }\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            const allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`\n            const allViewsResults: ObjectLiteral[] = await this.query(\n                allViewsSql,\n            )\n\n            await Promise.all(\n                allViewsResults.map((viewResult) => {\n                    // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                    const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`\n                    return this.query(dropTableSql)\n                }),\n            )\n\n            const allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n            const allTablesResults: ObjectLiteral[] = await this.query(\n                allTablesSql,\n            )\n\n            if (allTablesResults.length > 0) {\n                const tablesByCatalog: {\n                    [key: string]: {\n                        TABLE_NAME: string\n                        TABLE_SCHEMA: string\n                    }[]\n                } = allTablesResults.reduce(\n                    (c, { TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME }) => {\n                        c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                        c[TABLE_CATALOG].push({ TABLE_SCHEMA, TABLE_NAME })\n                        return c\n                    },\n                    {},\n                )\n\n                const foreignKeysSql = Object.entries(tablesByCatalog)\n                    .map(([TABLE_CATALOG, tables]) => {\n                        const conditions = tables\n                            .map(({ TABLE_SCHEMA, TABLE_NAME }) => {\n                                return `(\"fk\".\"referenced_object_id\" = OBJECT_ID('\"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\"'))`\n                            })\n                            .join(\" OR \")\n\n                        return `\n                        SELECT DISTINCT '${TABLE_CATALOG}' AS                                              \"TABLE_CATALOG\",\n                                        OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\",\n                                                           DB_ID('${TABLE_CATALOG}')) AS                   \"TABLE_SCHEMA\",\n                                        OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${TABLE_CATALOG}')) AS \"TABLE_NAME\",\n                                        \"fk\".\"name\" AS                                                     \"CONSTRAINT_NAME\"\n                        FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" AS \"fk\"\n                        WHERE (${conditions})\n                    `\n                    })\n                    .join(\" UNION ALL \")\n\n                const foreignKeys: {\n                    TABLE_CATALOG: string\n                    TABLE_SCHEMA: string\n                    TABLE_NAME: string\n                    CONSTRAINT_NAME: string\n                }[] = await this.query(foreignKeysSql)\n\n                await Promise.all(\n                    foreignKeys.map(\n                        async ({\n                            TABLE_CATALOG,\n                            TABLE_SCHEMA,\n                            TABLE_NAME,\n                            CONSTRAINT_NAME,\n                        }) => {\n                            // Disable the constraint first.\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `NOCHECK CONSTRAINT \"${CONSTRAINT_NAME}\"`,\n                            )\n\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `DROP CONSTRAINT \"${CONSTRAINT_NAME}\" -- FROM CLEAR`,\n                            )\n                        },\n                    ),\n                )\n\n                await Promise.all(\n                    allTablesResults.map((tablesResult) => {\n                        if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                            // don't try to drop temporary tables\n                            return\n                        }\n\n                        const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`\n                        return this.query(dropTableSql)\n                    }),\n                )\n            }\n\n            if (!isAnotherTransactionActive) await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewPaths?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        if (!hasTable) {\n            return []\n        }\n\n        if (!viewPaths) {\n            viewPaths = []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbNames = viewPaths\n            .map((viewPath) => this.driver.parseTableName(viewPath).database)\n            .filter((database) => database)\n\n        if (\n            this.driver.database &&\n            !dbNames.find((dbName) => dbName === this.driver.database)\n        )\n            dbNames.push(this.driver.database)\n\n        const viewsCondition = viewPaths\n            .map((viewPath) => {\n                let { schema, tableName: name } =\n                    this.driver.parseTableName(viewPath)\n\n                if (!schema) {\n                    schema = currentSchema\n                }\n                return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`\n            })\n            .join(\" OR \")\n\n        const query = dbNames\n            .map((dbName) => {\n                return (\n                    `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(\n                        this.getTypeormMetadataTableName(),\n                    )} \"t\" ` +\n                    `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = '${\n                        MetadataTableType.VIEW\n                    }' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbViews = await this.query(query)\n        return dbViews.map((dbView: any) => {\n            const view = new View()\n            const db =\n                dbView[\"TABLE_CATALOG\"] === currentDatabase\n                    ? undefined\n                    : dbView[\"TABLE_CATALOG\"]\n            const schema =\n                dbView[\"schema\"] === currentSchema &&\n                !this.driver.options.schema\n                    ? undefined\n                    : dbView[\"schema\"]\n            view.database = dbView[\"TABLE_CATALOG\"]\n            view.schema = dbView[\"schema\"]\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db)\n            view.expression = dbView[\"value\"]\n            return view\n        })\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbTables: {\n            TABLE_CATALOG: string\n            TABLE_SCHEMA: string\n            TABLE_NAME: string\n        }[] = []\n\n        if (!tableNames) {\n            const databasesSql =\n                `SELECT DISTINCT \"name\" ` +\n                `FROM \"master\".\"dbo\".\"sysdatabases\" ` +\n                `WHERE \"name\" NOT IN ('master', 'model', 'msdb')`\n            const dbDatabases: { name: string }[] = await this.query(\n                databasesSql,\n            )\n\n            const tablesSql = dbDatabases\n                .map(({ name }) => {\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${name}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                      \"TABLE_TYPE\" = 'BASE TABLE'\n                      AND\n                      \"TABLE_CATALOG\" = '${name}'\n                      AND\n                      ISNULL(Objectproperty(Object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), 'IsMSShipped'), 0) = 0\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        } else {\n            const tableNamesByCatalog = tableNames\n                .map((tableName) => this.driver.parseTableName(tableName))\n                .reduce((c, { database, ...other }) => {\n                    database = database || currentDatabase\n                    c[database] = c[database] || []\n                    c[database].push({\n                        schema: other.schema || currentSchema,\n                        tableName: other.tableName,\n                    })\n                    return c\n                }, {} as { [key: string]: { schema: string; tableName: string }[] })\n\n            const tablesSql = Object.entries(tableNamesByCatalog)\n                .map(([database, tables]) => {\n                    const tablesCondition = tables\n                        .map(({ schema, tableName }) => {\n                            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${tableName}')`\n                        })\n                        .join(\" OR \")\n\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                          \"TABLE_TYPE\" = 'BASE TABLE' AND\n                          \"TABLE_CATALOG\" = '${database}' AND\n                          ${tablesCondition}\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return []\n        }\n\n        const dbTablesByCatalog = dbTables.reduce(\n            (c, { TABLE_CATALOG, ...other }) => {\n                c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                c[TABLE_CATALOG].push(other)\n                return c\n            },\n            {} as {\n                [key: string]: { TABLE_NAME: string; TABLE_SCHEMA: string }[]\n            },\n        )\n\n        const columnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const condition = tables\n                    .map(\n                        ({ TABLE_SCHEMA, TABLE_NAME }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\"OR\")\n\n                return (\n                    `SELECT \"COLUMNS\".*, \"cc\".\"is_persisted\", \"cc\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `LEFT JOIN \"sys\".\"computed_columns\" \"cc\" ON COL_NAME(\"cc\".\"object_id\", \"cc\".\"column_id\") = \"column_name\" ` +\n                    `WHERE (${condition})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const constraintsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"columnUsages\".\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"columnUsages\".\"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ` +\n                    `ON ` +\n                    `\"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" AND ` +\n                    `\"tableConstraints\".\"TABLE_SCHEMA\" = \"columnUsages\".\"TABLE_SCHEMA\" AND ` +\n                    `\"tableConstraints\".\"TABLE_NAME\" = \"columnUsages\".\"TABLE_NAME\" ` +\n                    `LEFT JOIN \"${TABLE_CATALOG}\".\"sys\".\"check_constraints\" \"chk\" ` +\n                    `ON ` +\n                    `\"chk\".\"object_id\" = OBJECT_ID(\"columnUsages\".\"TABLE_CATALOG\" + '.' + \"columnUsages\".\"TABLE_SCHEMA\" + '.' + \"columnUsages\".\"CONSTRAINT_NAME\") ` +\n                    `WHERE ` +\n                    `(${conditions}) AND ` +\n                    `\"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const foreignKeysSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s1\".\"name\" = '${TABLE_SCHEMA}' AND \"t1\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                    `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `WHERE (${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const identityColumnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `WHERE ` +\n                    `EXISTS(SELECT 1 FROM \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"S\" WHERE OBJECT_ID(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\") = \"S\".\"OBJECT_ID\" AND \"COLUMN_NAME\" = \"S\".\"NAME\" AND \"S\".\"is_identity\" = 1) AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`\n\n        const indicesSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s\".\"name\" = '${TABLE_SCHEMA}' AND \"t\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"indexes\" \"ind\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                    `WHERE ` +\n                    `\"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0 AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const [\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ])\n\n        // create table schemas for loaded tables\n        return await Promise.all(\n            dbTables.map(async (dbTable) => {\n                const table = new Table()\n\n                const getSchemaFromKey = (dbObject: any, key: string) => {\n                    return dbObject[key] === currentSchema &&\n                        (!this.driver.options.schema ||\n                            this.driver.options.schema === currentSchema)\n                        ? undefined\n                        : dbObject[key]\n                }\n\n                // We do not need to join schema and database names, when db or schema is by default.\n                const db =\n                    dbTable[\"TABLE_CATALOG\"] === currentDatabase\n                        ? undefined\n                        : dbTable[\"TABLE_CATALOG\"]\n                const schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\")\n                table.database = dbTable[\"TABLE_CATALOG\"]\n                table.schema = dbTable[\"TABLE_SCHEMA\"]\n                table.name = this.driver.buildTableName(\n                    dbTable[\"TABLE_NAME\"],\n                    schema,\n                    db,\n                )\n\n                const defaultCollation = dbCollations.find(\n                    (dbCollation) =>\n                        dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"],\n                )!\n\n                // create columns from the loaded columns\n                table.columns = await Promise.all(\n                    dbColumns\n                        .filter(\n                            (dbColumn) =>\n                                dbColumn[\"TABLE_NAME\"] ===\n                                    dbTable[\"TABLE_NAME\"] &&\n                                dbColumn[\"TABLE_SCHEMA\"] ===\n                                    dbTable[\"TABLE_SCHEMA\"] &&\n                                dbColumn[\"TABLE_CATALOG\"] ===\n                                    dbTable[\"TABLE_CATALOG\"],\n                        )\n                        .map(async (dbColumn) => {\n                            const columnConstraints = dbConstraints.filter(\n                                (dbConstraint) =>\n                                    dbConstraint[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    dbConstraint[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    dbConstraint[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    dbConstraint[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const uniqueConstraints = columnConstraints.filter(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                            )\n                            const isConstraintComposite =\n                                uniqueConstraints.every((uniqueConstraint) => {\n                                    return dbConstraints.some(\n                                        (dbConstraint) =>\n                                            dbConstraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"UNIQUE\" &&\n                                            dbConstraint[\"CONSTRAINT_NAME\"] ===\n                                                uniqueConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ] &&\n                                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            dbConstraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"],\n                                    )\n                                })\n\n                            const isGenerated = !!dbIdentityColumns.find(\n                                (column) =>\n                                    column[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    column[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    column[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    column[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const tableColumn = new TableColumn()\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\n                            tableColumn.type =\n                                dbColumn[\"DATA_TYPE\"].toLowerCase()\n\n                            // check only columns that have length property\n                            if (\n                                this.driver.withLengthColumnTypes.indexOf(\n                                    tableColumn.type as ColumnType,\n                                ) !== -1 &&\n                                dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]\n                            ) {\n                                const length =\n                                    dbColumn[\n                                        \"CHARACTER_MAXIMUM_LENGTH\"\n                                    ].toString()\n                                if (length === \"-1\") {\n                                    tableColumn.length = \"MAX\"\n                                } else {\n                                    tableColumn.length =\n                                        !this.isDefaultColumnLength(\n                                            table,\n                                            tableColumn,\n                                            length,\n                                        )\n                                            ? length\n                                            : \"\"\n                                }\n                            }\n\n                            if (\n                                tableColumn.type === \"decimal\" ||\n                                tableColumn.type === \"numeric\"\n                            ) {\n                                if (\n                                    dbColumn[\"NUMERIC_PRECISION\"] !== null &&\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_PRECISION\"],\n                                    )\n                                )\n                                    tableColumn.precision =\n                                        dbColumn[\"NUMERIC_PRECISION\"]\n                                if (\n                                    dbColumn[\"NUMERIC_SCALE\"] !== null &&\n                                    !this.isDefaultColumnScale(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_SCALE\"],\n                                    )\n                                )\n                                    tableColumn.scale =\n                                        dbColumn[\"NUMERIC_SCALE\"]\n                            }\n\n                            if (tableColumn.type === \"nvarchar\") {\n                                // Check if this is an enum\n                                const columnCheckConstraints =\n                                    columnConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                            \"CHECK\",\n                                    )\n                                if (columnCheckConstraints.length) {\n                                    // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                                    for (const checkConstraint of columnCheckConstraints) {\n                                        if (\n                                            this.isEnumCheckConstraint(\n                                                checkConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ],\n                                            )\n                                        ) {\n                                            // This is an enum constraint, make column into an enum\n                                            tableColumn.enum = []\n                                            const enumValueRegexp = new RegExp(\n                                                \"\\\\[\" +\n                                                    tableColumn.name +\n                                                    \"\\\\]='([^']+)'\",\n                                                \"g\",\n                                            )\n                                            let result\n                                            while (\n                                                (result = enumValueRegexp.exec(\n                                                    checkConstraint[\n                                                        \"definition\"\n                                                    ],\n                                                )) !== null\n                                            ) {\n                                                tableColumn.enum.unshift(\n                                                    result[1],\n                                                )\n                                            }\n                                            // Skip other column constraints\n                                            break\n                                        }\n                                    }\n                                }\n                            }\n\n                            const primaryConstraint = columnConstraints.find(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] ===\n                                    \"PRIMARY KEY\",\n                            )\n                            if (primaryConstraint) {\n                                tableColumn.isPrimary = true\n                                // find another columns involved in primary key constraint\n                                const anotherPrimaryConstraints =\n                                    dbConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"TABLE_NAME\"] ===\n                                                dbColumn[\"TABLE_NAME\"] &&\n                                            constraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            constraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            constraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"] &&\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"PRIMARY KEY\",\n                                    )\n\n                                // collect all column names\n                                const columnNames =\n                                    anotherPrimaryConstraints.map(\n                                        (constraint) =>\n                                            constraint[\"COLUMN_NAME\"],\n                                    )\n                                columnNames.push(dbColumn[\"COLUMN_NAME\"])\n\n                                // build default primary key constraint name\n                                const pkName =\n                                    this.connection.namingStrategy.primaryKeyName(\n                                        table,\n                                        columnNames,\n                                    )\n\n                                // if primary key has user-defined constraint name, write it in table column\n                                if (\n                                    primaryConstraint[\"CONSTRAINT_NAME\"] !==\n                                    pkName\n                                ) {\n                                    tableColumn.primaryKeyConstraintName =\n                                        primaryConstraint[\"CONSTRAINT_NAME\"]\n                                }\n                            }\n\n                            tableColumn.default =\n                                dbColumn[\"COLUMN_DEFAULT\"] !== null &&\n                                dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                                    ? this.removeParenthesisFromDefault(\n                                          dbColumn[\"COLUMN_DEFAULT\"],\n                                      )\n                                    : undefined\n                            tableColumn.isNullable =\n                                dbColumn[\"IS_NULLABLE\"] === \"YES\"\n                            tableColumn.isUnique =\n                                uniqueConstraints.length > 0 &&\n                                !isConstraintComposite\n                            tableColumn.isGenerated = isGenerated\n                            if (isGenerated)\n                                tableColumn.generationStrategy = \"increment\"\n                            if (tableColumn.default === \"newsequentialid()\") {\n                                tableColumn.isGenerated = true\n                                tableColumn.generationStrategy = \"uuid\"\n                                tableColumn.default = undefined\n                            }\n\n                            // todo: unable to get default charset\n                            // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                            if (dbColumn[\"COLLATION_NAME\"])\n                                tableColumn.collation =\n                                    dbColumn[\"COLLATION_NAME\"] ===\n                                    defaultCollation[\"COLLATION_NAME\"]\n                                        ? undefined\n                                        : dbColumn[\"COLLATION_NAME\"]\n\n                            if (\n                                tableColumn.type === \"datetime2\" ||\n                                tableColumn.type === \"time\" ||\n                                tableColumn.type === \"datetimeoffset\"\n                            ) {\n                                tableColumn.precision =\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"DATETIME_PRECISION\"],\n                                    )\n                                        ? dbColumn[\"DATETIME_PRECISION\"]\n                                        : undefined\n                            }\n\n                            if (\n                                dbColumn[\"is_persisted\"] !== null &&\n                                dbColumn[\"is_persisted\"] !== undefined &&\n                                dbColumn[\"definition\"]\n                            ) {\n                                tableColumn.generatedType =\n                                    dbColumn[\"is_persisted\"] === true\n                                        ? \"STORED\"\n                                        : \"VIRTUAL\"\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\n                                const asExpressionQuery =\n                                    this.selectTypeormMetadataSql({\n                                        database: dbTable[\"TABLE_CATALOG\"],\n                                        schema: dbTable[\"TABLE_SCHEMA\"],\n                                        table: dbTable[\"TABLE_NAME\"],\n                                        type: MetadataTableType.GENERATED_COLUMN,\n                                        name: tableColumn.name,\n                                    })\n\n                                const results = await this.query(\n                                    asExpressionQuery.query,\n                                    asExpressionQuery.parameters,\n                                )\n                                if (results[0] && results[0].value) {\n                                    tableColumn.asExpression = results[0].value\n                                } else {\n                                    tableColumn.asExpression = \"\"\n                                }\n                            }\n\n                            return tableColumn\n                        }),\n                )\n\n                // find unique constraints of table, group them by constraint name and build TableUnique.\n                const tableUniqueConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.uniques = tableUniqueConstraints.map((constraint) => {\n                    const uniques = dbConstraints.filter(\n                        (dbC) =>\n                            dbC[\"CONSTRAINT_NAME\"] ===\n                            constraint[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableUnique({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: uniques.map((u) => u[\"COLUMN_NAME\"]),\n                    })\n                })\n\n                // find check constraints of table, group them by constraint name and build TableCheck.\n                const tableCheckConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.checks = tableCheckConstraints\n                    .filter(\n                        (constraint) =>\n                            !this.isEnumCheckConstraint(\n                                constraint[\"CONSTRAINT_NAME\"],\n                            ),\n                    )\n                    .map((constraint) => {\n                        const checks = dbConstraints.filter(\n                            (dbC) =>\n                                dbC[\"CONSTRAINT_NAME\"] ===\n                                constraint[\"CONSTRAINT_NAME\"],\n                        )\n                        return new TableCheck({\n                            name: constraint[\"CONSTRAINT_NAME\"],\n                            columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                            expression: constraint[\"definition\"],\n                        })\n                    })\n\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n                const tableForeignKeyConstraints = OrmUtils.uniq(\n                    dbForeignKeys.filter(\n                        (dbForeignKey) =>\n                            dbForeignKey[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbForeignKey[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbForeignKey[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbForeignKey) => dbForeignKey[\"FK_NAME\"],\n                )\n\n                table.foreignKeys = tableForeignKeyConstraints.map(\n                    (dbForeignKey) => {\n                        const foreignKeys = dbForeignKeys.filter(\n                            (dbFk) =>\n                                dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"],\n                        )\n\n                        // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                        const db =\n                            dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase\n                                ? undefined\n                                : dbForeignKey[\"TABLE_CATALOG\"]\n                        const schema = getSchemaFromKey(\n                            dbForeignKey,\n                            \"REF_SCHEMA\",\n                        )\n                        const referencedTableName = this.driver.buildTableName(\n                            dbForeignKey[\"REF_TABLE\"],\n                            schema,\n                            db,\n                        )\n\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"FK_NAME\"],\n                            columnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"COLUMN_NAME\"],\n                            ),\n                            referencedDatabase: dbForeignKey[\"TABLE_CATALOG\"],\n                            referencedSchema: dbForeignKey[\"REF_SCHEMA\"],\n                            referencedTableName: referencedTableName,\n                            referencedColumnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"REF_COLUMN\"],\n                            ),\n                            onDelete: dbForeignKey[\"ON_DELETE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                            onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                        })\n                    },\n                )\n\n                // find index constraints of table, group them by constraint name and build TableIndex.\n                const tableIndexConstraints = OrmUtils.uniq(\n                    dbIndices.filter(\n                        (dbIndex) =>\n                            dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbIndex[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbIndex[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\n                )\n\n                table.indices = tableIndexConstraints.map((constraint) => {\n                    const indices = dbIndices.filter((index) => {\n                        return (\n                            index[\"TABLE_CATALOG\"] ===\n                                constraint[\"TABLE_CATALOG\"] &&\n                            index[\"TABLE_SCHEMA\"] ===\n                                constraint[\"TABLE_SCHEMA\"] &&\n                            index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                            index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\n                        )\n                    })\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: constraint[\"INDEX_NAME\"],\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                        isUnique: constraint[\"IS_UNIQUE\"],\n                        where: constraint[\"CONDITION\"],\n                    })\n                })\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) =>\n                this.buildCreateColumnSql(table, column, false, true),\n            )\n            .join(\", \")\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\n\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueExist = table.uniques.some(\n                    (unique) =>\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames[0] === column.name,\n                )\n                if (!isUniqueExist)\n                    table.uniques.push(\n                        new TableUnique({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                        }),\n                    )\n            })\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                    const uniqueName = unique.name\n                        ? unique.name\n                        : this.connection.namingStrategy.uniqueConstraintName(\n                              table,\n                              unique.columnNames,\n                          )\n                    const columnNames = unique.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${uniquesSql}`\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              table,\n                              check.expression!,\n                          )\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\n                })\n                .join(\", \")\n\n            sql += `, ${checksSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table,\n                            fk.columnNames,\n                            this.getTablePath(fk),\n                            fk.referencedColumnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n\n                    let constraint = `CONSTRAINT \"${\n                        fk.name\n                    }\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\n                        this.getTablePath(fk),\n                    )} (${referencedColumnNames})`\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\n\n                    return constraint\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary,\n        )\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      table,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`\n        }\n\n        sql += `)`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n    ): Query {\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}`\n            : `DROP TABLE ${this.escapePath(tableOrName)}`\n        return new Query(query)\n    }\n\n    protected createViewSql(view: View): Query {\n        const parsedName = this.driver.parseTableName(view)\n\n        // Can't use `escapePath` here because `CREATE VIEW` does not accept database names.\n        const viewIdentifier = parsedName.schema\n            ? `\"${parsedName.schema}\".\"${parsedName.tableName}\"`\n            : `\"${parsedName.tableName}\"`\n\n        if (typeof view.expression === \"string\") {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view.expression}`,\n            )\n        } else {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view\n                    .expression(this.connection)\n                    .getQuery()}`,\n            )\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(view)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View | string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`)\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(\n        viewOrPath: View | string,\n    ): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(viewOrPath)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n        })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\n                index.name\n            }\" ON ${this.escapePath(table)} (${columns}) ${\n                index.where ? \"WHERE \" + index.where : \"\"\n            }`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(\n        table: Table,\n        indexOrName: TableIndex | string,\n    ): Query {\n        const indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName\n        return new Query(\n            `DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`,\n        )\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(\n        table: Table,\n        columnNames: string[],\n        constraintName?: string,\n    ): Query {\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`,\n        )\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map((column) => column.name)\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${primaryKeyName}\"`,\n        )\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(\n        table: Table,\n        uniqueConstraint: TableUnique,\n    ): Query {\n        const columnNames = uniqueConstraint.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                uniqueConstraint.name\n            }\" UNIQUE (${columnNames})`,\n        )\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(\n        table: Table,\n        uniqueOrName: TableUnique | string,\n    ): Query {\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName.name\n            : uniqueOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${uniqueName}\"`,\n        )\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(\n        table: Table,\n        checkConstraint: TableCheck,\n    ): Query {\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                checkConstraint.name\n            }\" CHECK (${checkConstraint.expression})`,\n        )\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(\n        table: Table,\n        checkOrName: TableCheck | string,\n    ): Query {\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName.name\n            : checkOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${checkName}\"`,\n        )\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey,\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\",\")\n        let sql =\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                foreignKey.name\n            }\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(\n                this.getTablePath(foreignKey),\n            )}(${referencedColumnNames})`\n        if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`\n        if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Query {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\n            foreignKeyOrName,\n        )\n            ? foreignKeyOrName.name\n            : foreignKeyOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${foreignKeyName}\"`,\n        )\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table | View | string): string {\n        const { database, schema, tableName } =\n            this.driver.parseTableName(target)\n\n        if (database && database !== this.driver.database) {\n            if (schema && schema !== this.driver.searchSchema) {\n                return `\"${database}\".\"${schema}\".\"${tableName}\"`\n            }\n\n            return `\"${database}\"..\"${tableName}\"`\n        }\n\n        if (schema && schema !== this.driver.searchSchema) {\n            return `\"${schema}\".\"${tableName}\"`\n        }\n\n        return `\"${tableName}\"`\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(\n        fkName: string,\n        schemaName: string | undefined,\n        dbName: string | undefined,\n    ): string {\n        let joinedFkName = fkName\n        if (schemaName && schemaName !== this.driver.searchSchema)\n            joinedFkName = schemaName + \".\" + joinedFkName\n        if (dbName && dbName !== this.driver.database)\n            joinedFkName = dbName + \".\" + joinedFkName\n\n        return joinedFkName\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: string): any {\n        if (defaultValue.substr(0, 1) !== \"(\") return defaultValue\n        const normalizedDefault = defaultValue.substr(\n            1,\n            defaultValue.lastIndexOf(\")\") - 1,\n        )\n        return this.removeParenthesisFromDefault(normalizedDefault)\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(\n        table: Table,\n        column: TableColumn,\n        skipIdentity: boolean,\n        createDefault: boolean,\n        skipEnum?: boolean,\n    ) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(\n            column,\n        )}`\n\n        if (!skipEnum && column.enum) {\n            const expression = this.getEnumExpression(column)\n            const checkName =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    expression,\n                    true,\n                )\n            c += ` CONSTRAINT ${checkName} CHECK(${expression})`\n        }\n\n        if (column.collation) c += \" COLLATE \" + column.collation\n\n        if (column.asExpression) {\n            c += ` AS (${column.asExpression})`\n            if (column.generatedType === \"STORED\") {\n                c += ` PERSISTED`\n\n                // NOT NULL can be specified for computed columns only if PERSISTED is also specified\n                if (column.isNullable !== true) c += \" NOT NULL\"\n            }\n        } else {\n            if (column.isNullable !== true) c += \" NOT NULL\"\n        }\n\n        if (\n            column.isGenerated === true &&\n            column.generationStrategy === \"increment\" &&\n            !skipIdentity\n        )\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\"\n\n        if (\n            column.default !== undefined &&\n            column.default !== null &&\n            createDefault\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`\n        }\n\n        if (\n            column.isGenerated &&\n            column.generationStrategy === \"uuid\" &&\n            !column.default\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`\n        }\n        return c\n    }\n\n    private getEnumExpression(column: TableColumn) {\n        if (!column.enum) {\n            throw new Error(`Enum is not defined in column ${column.name}`)\n        }\n        return (\n            column.name +\n            \" IN (\" +\n            column.enum.map((val) => \"'\" + val + \"'\").join(\",\") +\n            \")\"\n        )\n    }\n\n    protected isEnumCheckConstraint(name: string): boolean {\n        return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit\n            case \"bigint\":\n                return this.driver.mssql.BigInt\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params)\n            case \"float\":\n                return this.driver.mssql.Float\n            case \"int\":\n                return this.driver.mssql.Int\n            case \"money\":\n                return this.driver.mssql.Money\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params)\n            case \"smallint\":\n                return this.driver.mssql.SmallInt\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney\n            case \"real\":\n                return this.driver.mssql.Real\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt\n            case \"char\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.Char(...parameter.params)\n                }\n                return this.driver.mssql.NChar(...parameter.params)\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params)\n            case \"text\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.Text\n                }\n                return this.driver.mssql.Ntext\n            case \"ntext\":\n                return this.driver.mssql.Ntext\n            case \"varchar\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.VarChar(...parameter.params)\n                }\n                return this.driver.mssql.NVarChar(...parameter.params)\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params)\n            case \"xml\":\n                return this.driver.mssql.Xml\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params)\n            case \"date\":\n                return this.driver.mssql.Date\n            case \"datetime\":\n                return this.driver.mssql.DateTime\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params)\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params)\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier\n            case \"variant\":\n                return this.driver.mssql.Variant\n            case \"binary\":\n                return this.driver.mssql.Binary\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params)\n            case \"image\":\n                return this.driver.mssql.Image\n            case \"udt\":\n                return this.driver.mssql.UDT\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED\n        }\n    }\n\n    /**\n     * Change table comment.\n     */\n    changeTableComment(\n        tableOrName: Table | string,\n        comment?: string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `sqlserver driver does not support change table comment.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,iCAA0C;AAC1C,MAAA,6DAA+D;AAC/D,MAAA,2FAA6F;AAC7F,MAAA,iFAAmF;AAEnF,MAAA,kEAAoE;AACpE,MAAA,sDAAwD;AACxD,MAAA,0DAA4D;AAG5D,MAAA,sDAAwD;AACxD,MAAA,gEAAkE;AAClE,MAAA,kEAAoE;AAEpE,MAAA,0EAA4E;AAC5E,MAAA,gEAAkE;AAClE,MAAA,kEAAoE;AACpE,MAAA,mDAAqD;AACrD,MAAA,wDAA0D;AAC1D,MAAA,oEAAsE;AACtE,MAAA,0DAA4D;AAC5D,MAAA,4CAA8C;AAC9C,MAAA,8BAAgC;AAGhC,MAAA,4DAA8D;AAK9D;;GAEG,CACH,MAAa,oBACT,SAAQ,kBAAA,eAAe;IAkBvB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,MAAuB,EAAE,IAAqB,CAAA;QACtD,KAAK,EAAE,CAAA;QAXX,4EAA4E;QAC5E,qBAAqB;QACrB,4EAA4E;QAEpE,IAAA,CAAA,IAAI,GAAc,IAAI,YAAA,SAAS,EAAE,CAAA;QAQrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAA;QACnC,IAAI,CAAC,WAAW,GAAG,IAAI,cAAA,WAAW,CAAC,IAAI,CAAC,CAAA;QACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IACpB,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG,CACH,OAAO,GAAA;QACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;;OAGG,CACH,OAAO,GAAA;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;QACtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,CAAC,cAA+B,EAAA;QAClD,IAAI,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,kCAAA,+BAA+B,EAAE,CAAA;QAEhE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAA;QAC/B,IAAI,CAAC;YACD,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAA;QAC9D,CAAC,CAAC,OAAO,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;YAChC,MAAM,GAAG,CAAA;QACb,CAAC;QACD,MAAM,IAAI,OAAO,CAAO,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE;YACvC,MAAM,mBAAmB,GAAG,CAAC,GAAQ,EAAE,EAAE;gBACrC,IAAI,GAAG,EAAE,CAAC;oBACN,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;oBAChC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;gBACpB,CAAC;gBACD,EAAE,EAAE,CAAA;YACR,CAAC,CAAA;YAED,IAAI,IAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE,CAAC;gBAC9B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,GACnC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,GACnC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAA;gBAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;gBAC5C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAA;gBACpD,IAAI,cAAc,EAAE,CAAC;oBACjB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CACzB,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,EAC1C,mBAAmB,CACtB,CAAA;oBACD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAC3B,kCAAkC,GAAG,cAAc,CACtD,CAAA;gBACL,CAAC,MAAM,CAAC;oBACJ,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAA;gBACtD,CAAC;YACL,CAAC,MAAM,CAAC;gBACJ,MAAM,IAAI,CAAC,KAAK,CACZ,CAAA,yBAAA,EAA4B,IAAI,CAAC,gBAAgB,EAAE,CACtD,CAAA;gBACD,EAAE,EAAE,CAAA;YACR,CAAC;YACD,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;QAEF,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAA;IAC7D,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,iBAAiB,GAAA;QACnB,IAAI,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,kCAAA,+BAA+B,EAAE,CAAA;QAEhE,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,MAAM,IAAI,6BAAA,0BAA0B,EAAE,CAAA;QAErE,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAA;QAE3D,IAAI,IAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE,CAAC;YAC9B,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;gBAClC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,EAAE,GAAQ,EAAE,EAAE;oBAC9C,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;oBACzB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;oBAChC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAA;oBAE9B,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAA;oBAE1D,EAAE,EAAE,CAAA;oBACJ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;oBACzC,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;gBAC9B,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC;QACD,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;IAC9B,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,mBAAmB,GAAA;QACrB,IAAI,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,kCAAA,+BAA+B,EAAE,CAAA;QAEhE,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,MAAM,IAAI,6BAAA,0BAA0B,EAAE,CAAA;QAErE,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAA;QAE7D,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,CAAC,KAAK,CACZ,CAAA,6BAAA,EAAgC,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE,CAC9D,CAAA;YACD,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;QAC9B,CAAC,MAAM,CAAC;YACJ,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;gBAClC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAQ,EAAE,EAAE;oBAChD,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;oBACzB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;oBAChC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAA;oBAE9B,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAA;oBAE5D,EAAE,EAAE,CAAA;oBACJ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;oBAC3C,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;gBAC9B,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,KAAK,CACP,KAAa,EACb,UAAkB,EAClB,mBAAmB,GAAG,KAAK,EAAA;QAE3B,IAAI,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,kCAAA,+BAA+B,EAAE,CAAA;QAEhE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;QAEzC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;QAC/D,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE,UAAU,CAAC,CAAA;QAElE,MAAM,iBAAiB,GAAG,IAAI,oBAAA,iBAAiB,EAAE,CAAA;QAEjD,IAAI,CAAC;YACD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,GACnC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,GACnC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAA;YAC3C,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CACzC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAC5D,CAAA;YACD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;gBAClC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;oBACpC,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAA;oBACtC,IAAI,kBAAA,eAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,CAAC;wBAC9C,MAAM,cAAc,GAChB,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAA;wBACnD,IAAI,cAAc,EAAE,CAAC;4BACjB,OAAO,CAAC,KAAK,CACT,aAAa,EACb,cAAc,EACd,SAAS,CAAC,KAAK,CAClB,CAAA;wBACL,CAAC,MAAM,CAAC;4BACJ,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,KAAK,CAAC,CAAA;wBACjD,CAAC;oBACL,CAAC,MAAM,CAAC;wBACJ,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,CAAA;oBAC3C,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC;YACD,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YAEjC,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,CAAM,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;gBAC5C,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;oBACxC,oDAAoD;oBACpD,MAAM,qBAAqB,GACvB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAA;oBAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;oBAC/B,MAAM,kBAAkB,GAAG,YAAY,GAAG,cAAc,CAAA;oBAExD,IAAI,CAAC,WAAW,CAAC,wBAAwB,CACrC,iBAAiB,EACjB,KAAK,EACL,UAAU,EACV,IAAI,EACJ,kBAAkB,EAClB,GAAG,EACH,SAAS,CACZ,CAAA;oBAED,IACI,qBAAqB,IACrB,kBAAkB,GAAG,qBAAqB,EAC5C,CAAC;wBACC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,YAAY,CACtC,kBAAkB,EAClB,KAAK,EACL,UAAU,EACV,IAAI,CACP,CAAA;oBACL,CAAC;oBAED,IAAI,GAAG,EAAE,CAAC;wBACN,IAAI,CAAC,IAAI,mBAAA,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC,CAAA;oBACtD,CAAC;oBAED,EAAE,CAAC,GAAG,CAAC,CAAA;gBACX,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEF,MAAM,MAAM,GAAG,IAAI,cAAA,WAAW,EAAE,CAAA;YAEhC,IAAI,GAAG,EAAE,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC;gBACnC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,SAAS,CAAA;YAClC,CAAC;YAED,IAAI,GAAG,EAAE,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC;gBACtC,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YACzC,CAAC;YAED,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;YACpD,OAAQ,SAAS,EAAE,CAAC;gBAChB,KAAK,QAAQ;oBACT,+DAA+D;oBAC/D,MAAM,CAAC,GAAG,GAAG;wBAAC,GAAG,CAAC,SAAS;wBAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;qBAAC,CAAA;oBACjD,MAAK;gBACT;oBACI,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,SAAS,CAAA;YAClC,CAAC;YAED,IAAI,mBAAmB,EAAE,CAAC;gBACtB,OAAO,MAAM,CAAA;YACjB,CAAC,MAAM,CAAC;gBACJ,OAAO,MAAM,CAAC,GAAG,CAAA;YACrB,CAAC;QACL,CAAC,CAAC,OAAO,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CACvC,GAAG,EACH,KAAK,EACL,UAAU,EACV,IAAI,CACP,CAAA;YACD,IAAI,CAAC,WAAW,CAAC,wBAAwB,CACrC,iBAAiB,EACjB,KAAK,EACL,UAAU,EACV,KAAK,EACL,SAAS,EACT,SAAS,EACT,GAAG,CACN,CAAA;YAED,MAAM,GAAG,CAAA;QACb,CAAC,QAAS,CAAC;YACP,MAAM,iBAAiB,CAAC,IAAI,EAAE,CAAA;YAE9B,OAAO,EAAE,CAAA;QACb,CAAC;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,MAAM,CACR,KAAa,EACb,UAAkB,EAClB,KAAgB,EAChB,OAAkB,EAAA;QAElB,IAAI,IAAI,CAAC,UAAU,EAAE,MAAM,IAAI,kCAAA,+BAA+B,EAAE,CAAA;QAEhE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;QAEzC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;QAC/D,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,GACnC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,GACnC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAA;QAC3C,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CACzC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAC5D,CAAA;QACD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;YAClC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;gBACpC,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAA;gBACtC,IAAI,kBAAA,eAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,CAAC;oBAC9C,OAAO,CAAC,KAAK,CACT,aAAa,EACb,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,EAC/C,SAAS,CAAC,KAAK,CAClB,CAAA;gBACL,CAAC,MAAM,CAAC;oBACJ,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,CAAA;gBAC3C,CAAC;YACL,CAAC,CAAC,CAAA;QACN,CAAC;QAED,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAEpB,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAA;QAEhD,aAAa,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAQ,EAAE,EAAE;YACnC,OAAO,EAAE,CAAA;YACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CACvC,GAAG,EACH,KAAK,EACL,UAAU,EACV,IAAI,CACP,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YACzB,OAAO,EAAE,CAAA;QACb,CAAC,CAAC,CAAA;QAEF,IAAI,KAAK,EAAE,CAAC;YACR,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAClC,CAAC;QAED,IAAI,OAAO,EAAE,CAAC;YACV,aAAa,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QACtC,CAAC;QAED,OAAO,aAAa,CAAA;IACxB,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,YAAY,GAAA;QACd,MAAM,OAAO,GAAoB,MAAM,IAAI,CAAC,KAAK,CAAC,CAAA,iBAAA,CAAmB,CAAC,CAAA;QACtE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,eAAe,CAAC,CAAC,CAAA;IAC3D,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,UAAU,CAAC,QAAiB,EAAA;QAC9B,MAAM,KAAK,GAAG,QAAQ,GAChB,CAAA,eAAA,EAAkB,QAAQ,CAAA,gBAAA,CAAkB,GAC5C,CAAA,6BAAA,CAA+B,CAAA;QACrC,MAAM,OAAO,GAAoB,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QACxD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,MAAM,CAAC,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CAAC,QAAgB,EAAA;QAC9B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAC3B,CAAA,cAAA,EAAiB,QAAQ,CAAA,aAAA,CAAe,CAC3C,CAAA;QACD,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;QAC/B,OAAO,CAAC,CAAC,IAAI,CAAA;IACjB,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,kBAAkB,GAAA;QACpB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,CAAA,6BAAA,CAA+B,CAAC,CAAA;QACxE,OAAO,cAAc,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;IACvC,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CAAC,MAAc,EAAA;QAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAC3B,CAAA,kBAAA,EAAqB,MAAM,CAAA,iBAAA,CAAmB,CACjD,CAAA;QACD,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAA;QACvC,OAAO,CAAC,CAAC,QAAQ,CAAA;IACrB,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,GAAA;QAClB,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,KAAK,CACvC,CAAA,qCAAA,CAAuC,CAC1C,CAAA;QACD,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,QAAQ,CAAC,WAA2B,EAAA;QACtC,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE/D,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;YAC5B,eAAe,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAC9D,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YAC1B,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAC1D,CAAC;QAED,MAAM,GAAG,GAAG,CAAA,eAAA,EAAkB,eAAe,CAAC,QAAQ,CAAA,sDAAA,EAAyD,eAAe,CAAC,SAAS,CAAA,wBAAA,EAA2B,eAAe,CAAC,MAAM,CAAA,CAAA,CAAG,CAAA;QAC5L,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACpC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;IACvC,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,UAAkB,EAAA;QAElB,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE/D,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;YAC5B,eAAe,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAC9D,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YAC1B,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAC1D,CAAC;QAED,MAAM,GAAG,GAAG,CAAA,eAAA,EAAkB,eAAe,CAAC,QAAQ,CAAA,uDAAA,EAA0D,eAAe,CAAC,SAAS,CAAA,wBAAA,EAA2B,eAAe,CAAC,MAAM,CAAA,uBAAA,EAA0B,UAAU,CAAA,CAAA,CAAG,CAAA;QACjO,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACpC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;IACvC,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,cAAc,CAChB,QAAgB,EAChB,UAAoB,EAAA;QAEpB,MAAM,EAAE,GAAG,UAAU,GACf,CAAA,UAAA,EAAa,QAAQ,CAAA,4BAAA,EAA+B,QAAQ,CAAA,CAAA,CAAG,GAC/D,CAAA,iBAAA,EAAoB,QAAQ,CAAA,CAAA,CAAG,CAAA;QACrC,MAAM,IAAI,GAAG,CAAA,eAAA,EAAkB,QAAQ,CAAA,CAAA,CAAG,CAAA;QAC1C,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,QAAA,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,QAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;IAC7D,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,OAAiB,EAAA;QAClD,MAAM,EAAE,GAAG,OAAO,GACZ,CAAA,UAAA,EAAa,QAAQ,CAAA,8BAAA,EAAiC,QAAQ,CAAA,CAAA,CAAG,GACjE,CAAA,eAAA,EAAkB,QAAQ,CAAA,CAAA,CAAG,CAAA;QACnC,MAAM,IAAI,GAAG,CAAA,iBAAA,EAAoB,QAAQ,CAAA,CAAA,CAAG,CAAA;QAC5C,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,QAAA,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,QAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;IAC7D,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,YAAY,CACd,UAAkB,EAClB,UAAoB,EAAA;QAEpB,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YACjC,MAAM,OAAO,GAAG,UAAU,GACpB,CAAA,cAAA,EAAiB,UAAU,CAAA,uCAAA,EAA0C,UAAU,CAAA,OAAA,CAAS,GACxF,CAAA,eAAA,EAAkB,UAAU,CAAA,CAAA,CAAG,CAAA;YACrC,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAClC,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,aAAA,EAAgB,UAAU,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;QAC9D,CAAC,MAAM,CAAC;YACJ,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACjD,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAEjD,MAAM,OAAO,GAAG,UAAU,GACpB,CAAA,cAAA,EAAiB,MAAM,CAAA,uCAAA,EAA0C,MAAM,CAAA,OAAA,CAAS,GAChF,CAAA,eAAA,EAAkB,MAAM,CAAA,CAAA,CAAG,CAAA;YACjC,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAClC,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,aAAA,EAAgB,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAEtD,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;QAClD,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,UAAU,CAAC,UAAkB,EAAE,OAAiB,EAAA;QAClD,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YACjC,MAAM,OAAO,GAAG,OAAO,GACjB,CAAA,cAAA,EAAiB,UAAU,CAAA,qCAAA,EAAwC,UAAU,CAAA,OAAA,CAAS,GACtF,CAAA,aAAA,EAAgB,UAAU,CAAA,CAAA,CAAG,CAAA;YACnC,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAClC,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,eAAA,EAAkB,UAAU,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;QAChE,CAAC,MAAM,CAAC;YACJ,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACjD,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAEjD,MAAM,OAAO,GAAG,OAAO,GACjB,CAAA,cAAA,EAAiB,MAAM,CAAA,qCAAA,EAAwC,MAAM,CAAA,OAAA,CAAS,GAC9E,CAAA,aAAA,EAAgB,MAAM,CAAA,CAAA,CAAG,CAAA;YAC/B,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAClC,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,eAAA,EAAkB,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAExD,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;QAClD,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,KAAY,EACZ,aAAsB,KAAK,EAC3B,oBAA6B,IAAI,EACjC,gBAAyB,IAAI,EAAA;QAE7B,IAAI,UAAU,EAAE,CAAC;YACb,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YAC/C,IAAI,YAAY,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;QAC9C,CAAC;QACD,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC,CAAA;QAC7D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAA;QAE1C,iFAAiF;QACjF,kIAAkI;QAClI,IAAI,iBAAiB,EACjB,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CACnC,CADqC,UAC1B,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAC9D,CAAA;QAEL,IAAI,aAAa,EAAE,CAAC;YAChB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC5B,sFAAsF;gBACtF,IAAI,CAAC,KAAK,CAAC,IAAI,EACX,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACjD,KAAK,EACL,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;gBACL,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;gBACjD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;YACrD,CAAC,CAAC,CAAA;QACN,CAAC;QAED,6FAA6F;QAC7F,MAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CACzC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,aAAa,IAAI,MAAM,CAAC,YAAY,CAC1D,CAAA;QAED,KAAK,MAAM,MAAM,IAAI,gBAAgB,CAAE,CAAC;YACpC,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEzD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;gBAC1B,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;YAC1D,CAAC;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,YAAY;aAC7B,CAAC,CAAA;YAEF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;aACpB,CAAC,CAAA;YAEF,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC3B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACjC,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,OAAiB,EACjB,kBAA2B,IAAI,EAC/B,cAAuB,IAAI,EAAA;QAE3B,IAAI,OAAO,EAAE,CAAC;YACV,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAA;YACrD,IAAI,CAAC,YAAY,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;QAC/C,CAAC;QAED,8FAA8F;QAC9F,MAAM,iBAAiB,GAAY,eAAe,CAAA;QAClD,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,qGAAqG;QACrG,wDAAwD;QAExD,IAAI,WAAW,EAAE,CAAC;YACd,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC5B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;gBAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;YACvD,CAAC,CAAC,CAAA;QACN,CAAC;QAED,iGAAiG;QACjG,kIAAkI;QAClI,IAAI,eAAe,EACf,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CACnC,CADqC,QAC5B,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAC5D,CAAA;QAEL,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAA;QACxC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC,CAAA;QAE/D,kGAAkG;QAClG,MAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CACzC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,aAAa,IAAI,MAAM,CAAC,YAAY,CAC1D,CAAA;QAED,KAAK,MAAM,MAAM,IAAI,gBAAgB,CAAE,CAAC;YACpC,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEzD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;gBAC1B,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;YAC1D,CAAC;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;aACpB,CAAC,CAAA;YAEF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,YAAY;aAC7B,CAAC,CAAA;YAEF,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC3B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACjC,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,IAAU,EACV,mBAA4B,KAAK,EAAA;QAEjC,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAC/B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAA;QACxC,IAAI,gBAAgB,EAChB,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAA;QAC5D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;QACxC,IAAI,gBAAgB,EAChB,WAAW,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAA;QAC9D,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,QAAQ,CAAC,MAAqB,EAAA;QAChC,MAAM,QAAQ,GAAG,kBAAA,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAA;QACtE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QAE/C,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAC/B,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAA;QACxD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;QACtC,WAAW,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAA;QAC1D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAA;QAC1C,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,cAA8B,EAC9B,YAAoB,EAAA;QAEpB,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAC/B,MAAM,QAAQ,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,cAAc,CAAC,GAClD,cAAc,GACd,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAA;QAC/C,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAA;QAEjC,iEAAiE;QACjE,IAAI,MAAM,GAAuB,SAAS,CAAA;QAC1C,IAAI,UAAU,GAAuB,SAAS,CAAA;QAC9C,IAAI,YAAY,GAAW,QAAQ,CAAC,IAAI,CAAA;QACxC,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC7C,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;YACxB,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;YAC9B,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;QAC5D,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACnC,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;YAC5B,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;QAClC,CAAC;QAED,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CACtC,YAAY,EACZ,UAAU,EACV,MAAM,CACT,CAAA;QAED,2HAA2H;QAC3H,qEAAqE;QACrE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QACjD,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACjC,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;QACrD,CAAC;QAED,eAAe;QACf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,CAAA,IAAA,EAAO,YAAY,CAAA,CAAA,CAAG,CAC1B,CACJ,CAAA;QACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,CAAA,IAAA,EAAO,YAAY,CAAA,CAAA,CAAG,CAC1B,CACJ,CAAA;QAED,gCAAgC;QAChC,IACI,QAAQ,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,IAClC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,EACtD,CAAC;YACC,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,GAAG,CAC3C,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAC1B,CAAA;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAC3D,QAAQ,EACR,WAAW,CACd,CAAA;YACD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAC3D,QAAQ,EACR,WAAW,CACd,CAAA;YAED,4BAA4B;YAC5B,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,CAAA,CAAA,EAAI,SAAS,CAAA,IAAA,EAAO,SAAS,CAAA,CAAA,CAAG,CACpC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,CAAA,CAAA,EAAI,SAAS,CAAA,IAAA,EAAO,SAAS,CAAA,CAAA,CAAG,CACpC,CACJ,CAAA;QACL,CAAC;QAED,4BAA4B;QAC5B,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAChC,MAAM,aAAa,GACf,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,QAAQ,EACR,MAAM,CAAC,WAAW,CACrB,CAAA;YAEL,2DAA2D;YAC3D,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE,OAAM;YAEzC,4BAA4B;YAC5B,MAAM,aAAa,GACf,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,QAAQ,EACR,MAAM,CAAC,WAAW,CACrB,CAAA;YAEL,gBAAgB;YAChB,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA,CAAA,EAC1C,MAAM,CAAC,IACX,CAAA,IAAA,EAAO,aAAa,CAAA,CAAA,CAAG,CAC1B,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,CAAA,CAAA,EAAI,aAAa,CAAA,IAAA,EAAO,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAC1C,CACJ,CAAA;YAED,0BAA0B;YAC1B,MAAM,CAAC,IAAI,GAAG,aAAa,CAAA;QAC/B,CAAC,CAAC,CAAA;QAEF,2BAA2B;QAC3B,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC/B,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACzD,QAAQ,EACR,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;YAED,0DAA0D;YAC1D,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,OAAM;YAEvC,4BAA4B;YAC5B,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACzD,QAAQ,EACR,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;YAED,gBAAgB;YAChB,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA,CAAA,EAC1C,KAAK,CAAC,IACV,CAAA,IAAA,EAAO,YAAY,CAAA,UAAA,CAAY,CAClC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,CAAA,CAAA,EAAI,YAAY,CAAA,IAAA,EAAO,KAAK,CAAC,IAAI,CAAA,UAAA,CAAY,CACjD,CACJ,CAAA;YAED,0BAA0B;YAC1B,KAAK,CAAC,IAAI,GAAG,YAAY,CAAA;QAC7B,CAAC,CAAC,CAAA;QAEF,iCAAiC;QACjC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACxC,MAAM,iBAAiB,GACnB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,QAAQ,EACR,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;YAEL,gEAAgE;YAChE,IAAI,UAAU,CAAC,IAAI,KAAK,iBAAiB,EAAE,OAAM;YAEjD,4BAA4B;YAC5B,MAAM,iBAAiB,GACnB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,QAAQ,EACR,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;YAEL,gBAAgB;YAChB,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,mBAAmB,CACvC,UAAU,CAAC,IAAK,EAChB,UAAU,EACV,MAAM,CACT,CAAA,IAAA,EAAO,iBAAiB,CAAA,CAAA,CAAG,CAC/B,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,mBAAmB,CACvC,iBAAiB,EACjB,UAAU,EACV,MAAM,CACT,CAAA,IAAA,EAAO,UAAU,CAAC,IAAI,CAAA,CAAA,CAAG,CAC7B,CACJ,CAAA;YAED,0BAA0B;YAC1B,UAAU,CAAC,IAAI,GAAG,iBAAiB,CAAA;QACvC,CAAC,CAAC,CAAA;QAEF,qDAAqD;QACrD,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACjC,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;YAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;QAClD,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QAEjD,oDAAoD;QACpD,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAA;QAC7B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,MAAmB,EAAA;QAEnB,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QACjC,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,KAAA,EAAQ,IAAI,CAAC,oBAAoB,CAC9B,KAAK,EACL,MAAM,EACN,KAAK,EACL,IAAI,CACP,EAAE,CACN,CACJ,CAAA;QACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,cAAA,EACjC,MAAM,CAAC,IACX,CAAA,CAAA,CAAG,CACN,CACJ,CAAA;QAED,0CAA0C;QAC1C,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;YACnB,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;YACjD,wEAAwE;YACxE,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GACnD,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAC9C,CAAA;gBAEP,MAAM,WAAW,GAAG,cAAc,CAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAA,AAAD,CAAC,EAAI,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;gBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,WAAW,CAAA,CAAA,CAAG,CAC9D,CACJ,CAAA;YACL,CAAC;YAED,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC3B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GACnD,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAC9C,CAAA;YAEP,MAAM,WAAW,GAAG,cAAc,CAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;YACf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,WAAW,CAAA,CAAA,CAAG,CAC9D,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;QACL,CAAC;QAED,sBAAsB;QACtB,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACxC,CAAC,KAAK,EAAE,CACJ,CADM,IACD,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAC9B,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC3C,CAAA;QACD,IAAI,WAAW,EAAE,CAAC;YACd,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;YACvD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;QAC3D,CAAC;QAED,2BAA2B;QAC3B,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,gBAAgB,GAAG,IAAI,cAAA,WAAW,CAAC;gBACrC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CACrD,KAAK,EACL;oBAAC,MAAM,CAAC,IAAI;iBAAC,CAChB;gBACD,WAAW,EAAE;oBAAC,MAAM,CAAC,IAAI;iBAAC;aAC7B,CAAC,CAAA;YACF,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAC1C,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,iBAAA,EACjC,gBAAgB,CAAC,IACrB,CAAA,WAAA,EAAc,MAAM,CAAC,IAAI,CAAA,EAAA,CAAI,CAChC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,kBAAA,EACjC,gBAAgB,CAAC,IACrB,CAAA,CAAA,CAAG,CACN,CACJ,CAAA;QACL,CAAC;QAED,4BAA4B;QAC5B,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YAC1D,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,MAAM,CAAC,IAAI,CACd,CAAA;YACL,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,WAAW,CAAA,CAAA,CAAG,CACvC,CACJ,CAAA;QACL,CAAC;QAED,IAAI,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC;YAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEzD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;gBAC1B,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;YAC1D,CAAC;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,YAAY;aAC7B,CAAC,CAAA;YAEF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;aACpB,CAAC,CAAA;YAEF,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC3B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACjC,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QAEjD,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QAC7B,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,WAA2B,EAC3B,OAAsB,EAAA;QAEtB,KAAK,MAAM,MAAM,IAAI,OAAO,CAAE,CAAC;YAC3B,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;QAC7C,CAAC;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,YAAY,CACd,WAA2B,EAC3B,oBAA0C,EAC1C,oBAA0C,EAAA;QAE1C,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,SAAS,GAAG,kBAAA,eAAe,CAAC,aAAa,CAAC,oBAAoB,CAAC,GAC/D,oBAAoB,GACpB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,IAAI,KAAK,oBAAoB,CAAC,CAAA;QAChE,IAAI,CAAC,SAAS,EACV,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,QAAA,EAAW,oBAAoB,CAAA,wBAAA,EAA2B,KAAK,CAAC,IAAI,CAAA,QAAA,CAAU,CACjF,CAAA;QAEL,IAAI,SAAS,GAA4B,SAAS,CAAA;QAClD,IAAI,kBAAA,eAAe,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,CAAC;YACtD,SAAS,GAAG,oBAAoB,CAAA;QACpC,CAAC,MAAM,CAAC;YACJ,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAA;YAC7B,SAAS,CAAC,IAAI,GAAG,oBAAoB,CAAA;QACzC,CAAC;QAED,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;IACxD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,YAAY,CACd,WAA2B,EAC3B,oBAA0C,EAC1C,SAAsB,EAAA;QAEtB,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,IAAI,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QAC/B,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,MAAM,SAAS,GAAG,kBAAA,eAAe,CAAC,aAAa,CAAC,oBAAoB,CAAC,GAC/D,oBAAoB,GACpB,KAAK,CAAC,OAAO,CAAC,IAAI,CACd,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,KAAK,oBAAoB,CACnD,CAAA;QACP,IAAI,CAAC,SAAS,EACV,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,QAAA,EAAW,oBAAoB,CAAA,wBAAA,EAA2B,KAAK,CAAC,IAAI,CAAA,QAAA,CAAU,CACjF,CAAA;QAEL,IACI,AAAC,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,WAAW,IAC5C,SAAS,CAAC,kBAAkB,KAAK,MAAM,CAAC,GAC5C,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,IACjC,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,IACrC,SAAS,CAAC,YAAY,KAAK,SAAS,CAAC,YAAY,IACjD,SAAS,CAAC,aAAa,KAAK,SAAS,CAAC,aAAa,EACrD,CAAC;YACC,yGAAyG;YACzG,kDAAkD;YAClD,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;YACvC,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;YAEtC,sBAAsB;YACtB,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QAC/B,CAAC,MAAM,CAAC;YACJ,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,EAAE,CAAC;gBACpC,iEAAiE;gBACjE,IAAI,MAAM,GAAuB,SAAS,CAAA;gBAC1C,IAAI,UAAU,GAAuB,SAAS,CAAA;gBAC9C,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;gBAC1C,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC5B,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;oBACxB,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;gBAC5D,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBACnC,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;gBAChC,CAAC;gBAED,2HAA2H;gBAC3H,qEAAqE;gBACrE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;gBACjD,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;oBACjC,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;oBAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;gBACrD,CAAC;gBAED,oBAAoB;gBACpB,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA,CAAA,EACvC,SAAS,CAAC,IACd,CAAA,IAAA,EAAO,SAAS,CAAC,IAAI,CAAA,CAAA,CAAG,CAC3B,CACJ,CAAA;gBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA,CAAA,EACvC,SAAS,CAAC,IACd,CAAA,IAAA,EAAO,SAAS,CAAC,IAAI,CAAA,CAAA,CAAG,CAC3B,CACJ,CAAA;gBAED,uCAAuC;gBACvC,IACI,SAAS,CAAC,SAAS,KAAK,IAAI,IAC5B,CAAC,SAAS,CAAC,wBAAwB,EACrC,CAAC;oBACC,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;oBAEjD,oCAAoC;oBACpC,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAClC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAC1B,CAAA;oBACD,MAAM,SAAS,GACX,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CACd,CAAA;oBAEL,+CAA+C;oBAC/C,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;oBAC1D,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBAEhC,oCAAoC;oBACpC,MAAM,SAAS,GACX,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CACd,CAAA;oBAEL,4BAA4B;oBAC5B,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,CAAA,CAAA,EAAI,SAAS,CAAA,IAAA,EAAO,SAAS,CAAA,CAAA,CAAG,CACpC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,CAAA,CAAA,EAAI,SAAS,CAAA,IAAA,EAAO,SAAS,CAAA,CAAA,CAAG,CACpC,CACJ,CAAA;gBACL,CAAC;gBAED,2BAA2B;gBAC3B,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;oBACvD,MAAM,YAAY,GACd,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACpC,WAAW,EACX,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;oBAEL,0DAA0D;oBAC1D,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,OAAM;oBAEvC,4BAA4B;oBAC5B,KAAK,CAAC,WAAW,CAAC,MAAM,CACpB,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EACzC,CAAC,CACJ,CAAA;oBACD,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBACtC,MAAM,YAAY,GACd,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACpC,WAAW,EACX,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;oBAEL,gBAAgB;oBAChB,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,CAAA,CAAA,EAAI,KAAK,CAAC,IAAI,CAAA,IAAA,EAAO,YAAY,CAAA,UAAA,CAAY,CACjD,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,CAAA,CAAA,EAAI,YAAY,CAAA,IAAA,EAAO,KAAK,CAAC,IAAI,CAAA,UAAA,CAAY,CACjD,CACJ,CAAA;oBAED,0BAA0B;oBAC1B,KAAK,CAAC,IAAI,GAAG,YAAY,CAAA;gBAC7B,CAAC,CAAC,CAAA;gBAEF,iCAAiC;gBACjC,WAAW,CACN,qBAAqB,CAAC,SAAS,CAAC,CAChC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;oBACpB,MAAM,cAAc,GAChB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;oBAEL,gEAAgE;oBAChE,IAAI,UAAU,CAAC,IAAI,KAAK,cAAc,EAAE,OAAM;oBAE9C,4BAA4B;oBAC5B,UAAU,CAAC,WAAW,CAAC,MAAM,CACzB,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAC9C,CAAC,CACJ,CAAA;oBACD,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBAC3C,MAAM,iBAAiB,GACnB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;oBAEL,gBAAgB;oBAChB,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,mBAAmB,CACvC,UAAU,CAAC,IAAK,EAChB,UAAU,EACV,MAAM,CACT,CAAA,IAAA,EAAO,iBAAiB,CAAA,CAAA,CAAG,CAC/B,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,mBAAmB,CACvC,iBAAiB,EACjB,UAAU,EACV,MAAM,CACT,CAAA,IAAA,EAAO,UAAU,CAAC,IAAI,CAAA,CAAA,CAAG,CAC7B,CACJ,CAAA;oBAED,0BAA0B;oBAC1B,UAAU,CAAC,IAAI,GAAG,iBAAiB,CAAA;gBACvC,CAAC,CAAC,CAAA;gBAEN,2BAA2B;gBAC3B,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;oBACtD,4BAA4B;oBAC5B,KAAK,CAAC,WAAY,CAAC,MAAM,CACrB,KAAK,CAAC,WAAY,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAC1C,CAAC,CACJ,CAAA;oBACD,KAAK,CAAC,WAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBACvC,MAAM,YAAY,GACd,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CAC9C,WAAW,EACX,KAAK,CAAC,UAAW,CACpB,CAAA;oBAEL,gBAAgB;oBAChB,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,CAAA,CAAA,EAAI,KAAK,CAAC,IAAI,CAAA,IAAA,EAAO,YAAY,CAAA,CAAA,CAAG,CACxC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,CAAA,CAAA,EAAI,YAAY,CAAA,IAAA,EAAO,KAAK,CAAC,IAAI,CAAA,CAAA,CAAG,CACxC,CACJ,CAAA;oBAED,0BAA0B;oBAC1B,KAAK,CAAC,IAAI,GAAG,YAAY,CAAA;gBAC7B,CAAC,CAAC,CAAA;gBAEF,4BAA4B;gBAC5B,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;oBACxD,MAAM,aAAa,GACf,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,WAAW,EACX,MAAM,CAAC,WAAW,CACrB,CAAA;oBAEL,2DAA2D;oBAC3D,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE,OAAM;oBAEzC,4BAA4B;oBAC5B,MAAM,CAAC,WAAW,CAAC,MAAM,CACrB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAC1C,CAAC,CACJ,CAAA;oBACD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBACvC,MAAM,aAAa,GACf,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,WAAW,EACX,MAAM,CAAC,WAAW,CACrB,CAAA;oBAEL,gBAAgB;oBAChB,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,CAAA,CAAA,EAAI,MAAM,CAAC,IAAI,CAAA,IAAA,EAAO,aAAa,CAAA,CAAA,CAAG,CAC1C,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,gBAAA,EAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,CAAA,CAAA,EAAI,aAAa,CAAA,IAAA,EAAO,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAC1C,CACJ,CAAA;oBAED,0BAA0B;oBAC1B,MAAM,CAAC,IAAI,GAAG,aAAa,CAAA;gBAC/B,CAAC,CAAC,CAAA;gBAEF,6BAA6B;gBAC7B,IACI,SAAS,CAAC,OAAO,KAAK,IAAI,IAC1B,SAAS,CAAC,OAAO,KAAK,SAAS,EACjC,CAAC;oBACC,MAAM,cAAc,GAChB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,SAAS,CAAC,IAAI,CACjB,CAAA;oBACL,MAAM,cAAc,GAChB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,SAAS,CAAC,IAAI,CACjB,CAAA;oBAEL,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,cAAc,CAAA,CAAA,CAAG,CAC1C,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,cAAc,CAAA,UAAA,EAC/B,SAAS,CAAC,OACd,CAAA,MAAA,EAAS,SAAS,CAAC,IAAI,CAAA,CAAA,CAAG,CAC7B,CACJ,CAAA;oBAED,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,cAAc,CAAA,UAAA,EAC/B,SAAS,CAAC,OACd,CAAA,MAAA,EAAS,SAAS,CAAC,IAAI,CAAA,CAAA,CAAG,CAC7B,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,cAAc,CAAA,CAAA,CAAG,CAC1C,CACJ,CAAA;gBACL,CAAC;gBAED,qDAAqD;gBACrD,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;oBACjC,SAAS,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;oBAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,QAAA,KAAK,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA,CAAG,CAAC,CAAC,CAAA;gBAClD,CAAC;gBAED,wCAAwC;gBACxC,MAAM,cAAc,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAC3C,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAC7C,CAAA;gBACD,WAAW,CAAC,OAAO,CACf,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,cAAe,CAAC,CAC/C,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAA;gBACvB,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAA;YACnC,CAAC;YAED,IACI,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EACjE,CAAC;gBACC,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,cAAA,EAAiB,IAAI,CAAC,oBAAoB,CACvC,KAAK,EACL,SAAS,EACT,IAAI,EACJ,KAAK,EACL,IAAI,CACP,EAAE,CACN,CACJ,CAAA;gBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,cAAA,EAAiB,IAAI,CAAC,oBAAoB,CACvC,KAAK,EACL,SAAS,EACT,IAAI,EACJ,KAAK,EACL,IAAI,CACP,EAAE,CACN,CACJ,CAAA;YACL,CAAC;YAED,IAAI,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC;gBAC3C,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;gBACvD,MAAM,QAAQ,GAAG,IAAI,aAAA,UAAU,CAAC;oBAC5B,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CACpD,KAAK,EACL,aAAa,EACb,IAAI,CACP;oBACD,UAAU,EAAE,aAAa;iBAC5B,CAAC,CAAA;gBAEF,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;gBACvD,MAAM,QAAQ,GAAG,IAAI,aAAA,UAAU,CAAC;oBAC5B,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CACpD,KAAK,EACL,aAAa,EACb,IAAI,CACP;oBACD,UAAU,EAAE,aAAa;iBAC5B,CAAC,CAAA;gBAEF,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;gBAC5D,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;gBAE9D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;gBAC9D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;YACpE,CAAC;YAED,IAAI,SAAS,CAAC,SAAS,KAAK,SAAS,CAAC,SAAS,EAAE,CAAC;gBAC9C,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;gBAEjD,2EAA2E;gBAC3E,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC5B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GACnD,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAC9C,CAAA;oBAEP,MAAM,WAAW,GAAG,cAAc,CAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;oBACf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,WAAW,CAAA,CAAA,CAAG,CAC9D,CACJ,CAAA;gBACL,CAAC;gBAED,IAAI,SAAS,CAAC,SAAS,KAAK,IAAI,EAAE,CAAC;oBAC/B,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;oBAC9B,yBAAyB;oBACzB,MAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACnC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAC7C,CAAA;oBACD,MAAO,CAAC,SAAS,GAAG,IAAI,CAAA;oBACxB,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GACnD,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAC9C,CAAA;oBAEP,MAAM,WAAW,GAAG,cAAc,CAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAA,AAAD,CAAC,EAAI,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;oBACf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,WAAW,CAAA,CAAA,CAAG,CAC9D,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;gBACL,CAAC,MAAM,CAAC;oBACJ,MAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CACrC,CAAC,CAAC,EAAE,CAAG,CAAC,AAAF,CAAG,IAAI,KAAK,SAAS,CAAC,IAAI,CACnC,CAAA;oBACD,cAAc,CAAC,MAAM,CACjB,cAAc,CAAC,OAAO,CAAC,aAAc,CAAC,EACtC,CAAC,CACJ,CAAA;oBAED,yBAAyB;oBACzB,MAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACnC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAC7C,CAAA;oBACD,MAAO,CAAC,SAAS,GAAG,KAAK,CAAA;oBAEzB,gEAAgE;oBAChE,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBAC5B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAC3B,wBAAwB,GACvB,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAC9C,CAAA;wBAEP,MAAM,WAAW,GAAG,cAAc,CAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;wBACf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,WAAW,CAAA,CAAA,CAAG,CAC9D,CACJ,CAAA;wBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;oBACL,CAAC;gBACL,CAAC;YACL,CAAC;YAED,IAAI,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,EAAE,CAAC;gBAC5C,IAAI,SAAS,CAAC,QAAQ,KAAK,IAAI,EAAE,CAAC;oBAC9B,MAAM,gBAAgB,GAAG,IAAI,cAAA,WAAW,CAAC;wBACrC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CACrD,KAAK,EACL;4BAAC,SAAS,CAAC,IAAI;yBAAC,CACnB;wBACD,WAAW,EAAE;4BAAC,SAAS,CAAC,IAAI;yBAAC;qBAChC,CAAC,CAAA;oBACF,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;oBAC1C,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EACG,gBAAgB,CAAC,IACrB,CAAA,WAAA,EAAc,SAAS,CAAC,IAAI,CAAA,EAAA,CAAI,CACnC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,gBAAgB,CAAC,IAAI,CAAA,CAAA,CAAG,CACjD,CACJ,CAAA;gBACL,CAAC,MAAM,CAAC;oBACJ,MAAM,gBAAgB,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAC7C,CAAC,MAAM,EAAE,EAAE;wBACP,OAAO,AACH,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAC/B,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CACrB,CAAC,UAAU,EAAE,CACT,CADW,SACD,KAAK,SAAS,CAAC,IAAI,CACpC,CACJ,CAAA;oBACL,CAAC,CACJ,CAAA;oBACD,WAAW,CAAC,OAAO,CAAC,MAAM,CACtB,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAiB,CAAC,EAC9C,CAAC,CACJ,CAAA;oBACD,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,gBAAiB,CAAC,IAAI,CAAA,CAAA,CAAG,CAClD,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EACG,gBAAiB,CAAC,IACtB,CAAA,WAAA,EAAc,SAAS,CAAC,IAAI,CAAA,EAAA,CAAI,CACnC,CACJ,CAAA;gBACL,CAAC;YACL,CAAC;YAED,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO,EAAE,CAAC;gBAC1C,8EAA8E;gBAC9E,IACI,SAAS,CAAC,OAAO,KAAK,IAAI,IAC1B,SAAS,CAAC,OAAO,KAAK,SAAS,EACjC,CAAC;oBACC,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,SAAS,CAAC,IAAI,CACjB,CAAA;oBACL,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,WAAW,CAAA,CAAA,CAAG,CACvC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,WAAW,CAAA,UAAA,EAC5B,SAAS,CAAC,OACd,CAAA,MAAA,EAAS,SAAS,CAAC,IAAI,CAAA,CAAA,CAAG,CAC7B,CACJ,CAAA;gBACL,CAAC;gBAED,IACI,SAAS,CAAC,OAAO,KAAK,IAAI,IAC1B,SAAS,CAAC,OAAO,KAAK,SAAS,EACjC,CAAC;oBACC,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,SAAS,CAAC,IAAI,CACjB,CAAA;oBACL,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,WAAW,CAAA,UAAA,EAC5B,SAAS,CAAC,OACd,CAAA,MAAA,EAAS,SAAS,CAAC,IAAI,CAAA,CAAA,CAAG,CAC7B,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,WAAW,CAAA,CAAA,CAAG,CACvC,CACJ,CAAA;gBACL,CAAC;YACL,CAAC;YAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;YACjD,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;QAC/C,CAAC;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,aAAa,CACf,WAA2B,EAC3B,cAAoE,EAAA;QAEpE,KAAK,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,cAAc,CAAE,CAAC;YACpD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;QAC9D,CAAC;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,WAA2B,EAC3B,YAAkC,EAAA;QAElC,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,MAAM,GAAG,kBAAA,eAAe,CAAC,aAAa,CAAC,YAAY,CAAC,GACpD,YAAY,GACZ,KAAK,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAA;QAC1C,IAAI,CAAC,MAAM,EACP,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,QAAA,EAAW,YAAY,CAAA,0BAAA,EAA6B,KAAK,CAAC,IAAI,CAAA,CAAA,CAAG,CACpE,CAAA;QAEL,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QACjC,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,8BAA8B;QAC9B,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;YACnB,MAAM,MAAM,GAAG,MAAM,CAAC,wBAAwB,GACxC,MAAM,CAAC,wBAAwB,GAC/B,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAC1D,CAAA;YAEP,MAAM,WAAW,GAAG,WAAW,CAAC,cAAc,CACzC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,aAAa,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACjD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,WAAW,CACd,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,WAAW,CACd,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,WAAW,CAAA,CAAA,CAAG,CAC9D,CACJ,CAAA;YAED,yBAAyB;YACzB,MAAM,WAAW,GAAG,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;YAC7D,WAAY,CAAC,SAAS,GAAG,KAAK,CAAA;YAE9B,mFAAmF;YACnF,IAAI,WAAW,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACxC,MAAM,MAAM,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CACvC,wBAAwB,GACvB,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GACtD,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CAAC,cAAc,CAAC,GAAG,CAC1B,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAC1B,CACJ,CAAA;gBAEP,MAAM,WAAW,GAAG,WAAW,CAAC,cAAc,CACzC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,aAAa,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACjD,IAAI,CAAC,IAAI,CAAC,CAAA;gBACf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,WAAW,CACd,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,WAAW,CAAA,CAAA,CAAG,CAC9D,CACJ,CAAA;gBACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,WAAW,CACd,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;YACL,CAAC;QACL,CAAC;QAED,oBAAoB;QACpB,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACxC,CAAC,KAAK,EAAE,CACJ,CADM,IACD,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAC9B,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC3C,CAAA;QACD,IAAI,WAAW,EAAE,CAAC;YACd,WAAW,CAAC,OAAO,CAAC,MAAM,CACtB,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,EACxC,CAAC,CACJ,CAAA;YACD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;YACrD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;QAC7D,CAAC;QAED,oBAAoB;QACpB,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CACvC,CAAC,KAAK,EAAE,CACJ,CADM,AACL,CAAC,KAAK,CAAC,WAAW,IACnB,KAAK,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAC9B,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC3C,CAAA;QACD,IAAI,WAAW,EAAE,CAAC;YACd,WAAW,CAAC,MAAM,CAAC,MAAM,CACrB,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EACvC,CAAC,CACJ,CAAA;YACD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;YAC/D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;QACvE,CAAC;QAED,qBAAqB;QACrB,MAAM,YAAY,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACzC,CAAC,MAAM,EAAE,CACL,CADO,KACD,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAC/B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC5C,CAAA;QACD,IAAI,YAAY,EAAE,CAAC;YACf,WAAW,CAAC,OAAO,CAAC,MAAM,CACtB,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EACzC,CAAC,CACJ,CAAA;YACD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAA;YACjE,WAAW,CAAC,IAAI,CACZ,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,YAAY,CAAC,CACtD,CAAA;QACL,CAAC;QAED,0BAA0B;QAC1B,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YAC1D,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,MAAM,CAAC,IAAI,CACd,CAAA;YACL,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,WAAW,CAAA,CAAA,CAAG,CACvC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,WAAW,CAAA,UAAA,EAC5B,MAAM,CAAC,OACX,CAAA,MAAA,EAAS,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAC1B,CACJ,CAAA;QACL,CAAC;QAED,IAAI,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC;YAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEzD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;gBAC1B,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;YAC1D,CAAC;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;aACpB,CAAC,CAAA;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,YAAY;aAC7B,CAAC,CAAA;YAEF,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC3B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACjC,CAAC;QAED,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,cAAA,EACjC,MAAM,CAAC,IACX,CAAA,CAAA,CAAG,CACN,CACJ,CAAA;QACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,KAAA,EAAQ,IAAI,CAAC,oBAAoB,CAC9B,KAAK,EACL,MAAM,EACN,KAAK,EACL,KAAK,CACR,EAAE,CACN,CACJ,CAAA;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QAEjD,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;QAChC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,OAAiC,EAAA;QAEjC,KAAK,MAAM,MAAM,IAAI,OAAO,CAAE,CAAC;YAC3B,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;QAC9C,CAAC;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,CAClB,WAA2B,EAC3B,WAAqB,EACrB,cAAuB,EAAA;QAEvB,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QAEjC,MAAM,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,WAAW,EAAE,cAAc,CAAC,CAAA;QAEvE,4GAA4G;QAC5G,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACnC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAG,CAAD,SAAW,KAAK,MAAM,CAAC,IAAI,CAAC,EAC5D,MAAM,CAAC,SAAS,GAAG,IAAI,CAAA;QAC/B,CAAC,CAAC,CAAA;QACF,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAA;QAEhD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,iBAAiB,CACnB,WAA2B,EAC3B,OAAsB,EAAA;QAEtB,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QACjC,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAAA;QACxD,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,4DAA4D;QAC5D,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;QACjD,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GACnD,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAC9C,CAAA;YAEP,MAAM,iBAAiB,GAAG,cAAc,CACnC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAA,AAAD,CAAC,EAAI,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,iBAAiB,CAAA,CAAA,CAAG,CACpE,CACJ,CAAA;QACL,CAAC;QAED,2BAA2B;QAC3B,WAAW,CAAC,OAAO,CACd,MAAM,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,UAAY,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAC3D,OAAO,CAAC,CAAC,MAAM,EAAE,CAAI,CAAF,CAAC,IAAO,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,CAAA;QAEnD,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GACnD,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CACd,CAAA;QAEP,MAAM,iBAAiB,GAAG,WAAW,CAChC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEf,SAAS,CAAC,IAAI,CACV,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,MAAM,CAAA,eAAA,EAAkB,iBAAiB,CAAA,CAAA,CAAG,CACpE,CACJ,CAAA;QACD,WAAW,CAAC,IAAI,CACZ,IAAI,QAAA,KAAK,CACL,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,MAAM,CAAA,CAAA,CAAG,CAClC,CACJ,CAAA;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QACjD,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,cAAc,CAChB,WAA2B,EAC3B,cAAuB,EAAA;QAEvB,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAA;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CACjC,KAAK,EACL,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,EACjD,cAAc,CACjB,CAAA;QACD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACpC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAA;QAC5B,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,sBAAsB,CACxB,WAA2B,EAC3B,gBAA6B,EAAA;QAE7B,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE5C,mGAAmG;QACnG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EACtB,gBAAgB,CAAC,IAAI,GACjB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,KAAK,EACL,gBAAgB,CAAC,WAAW,CAC/B,CAAA;QAET,MAAM,EAAE,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAA;QAClE,MAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAA;QAClE,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,uBAAuB,CACzB,WAA2B,EAC3B,iBAAgC,EAAA;QAEhC,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CACtD,CADwD,GACpD,CAAC,sBAAsB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAC7D,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,oBAAoB,CACtB,WAA2B,EAC3B,YAAkC,EAAA;QAElC,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,gBAAgB,GAAG,kBAAA,eAAe,CAAC,aAAa,CAAC,YAAY,CAAC,GAC9D,YAAY,GACZ,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,IAAI,KAAK,YAAY,CAAC,CAAA;QACxD,IAAI,CAAC,gBAAgB,EACjB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,kDAAA,EAAqD,KAAK,CAAC,IAAI,EAAE,CACpE,CAAA;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAA;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAA;QACpE,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,qBAAqB,CACvB,WAA2B,EAC3B,iBAAgC,EAAA;QAEhC,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CACtD,CADwD,GACpD,CAAC,oBAAoB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAC3D,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,qBAAqB,CACvB,WAA2B,EAC3B,eAA2B,EAAA;QAE3B,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE5C,mGAAmG;QACnG,IAAI,CAAC,eAAe,CAAC,IAAI,EACrB,eAAe,CAAC,IAAI,GAChB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CAC9C,KAAK,EACL,eAAe,CAAC,UAAW,CAC9B,CAAA;QAET,MAAM,EAAE,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;QAChE,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAA;IAC7C,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,sBAAsB,CACxB,WAA2B,EAC3B,gBAA8B,EAAA;QAE9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,CACpD,CADsD,GAClD,CAAC,qBAAqB,CAAC,WAAW,EAAE,eAAe,CAAC,CAC3D,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,mBAAmB,CACrB,WAA2B,EAC3B,WAAgC,EAAA;QAEhC,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,eAAe,GAAG,kBAAA,eAAe,CAAC,YAAY,CAAC,WAAW,CAAC,GAC3D,WAAW,GACX,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,IAAI,KAAK,WAAW,CAAC,CAAA;QACtD,IAAI,CAAC,eAAe,EAChB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,iDAAA,EAAoD,KAAK,CAAC,IAAI,EAAE,CACnE,CAAA;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;QAC9D,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;QAClE,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAA;IAChD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,oBAAoB,CACtB,WAA2B,EAC3B,gBAA8B,EAAA;QAE9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,CACpD,CADsD,GAClD,CAAC,mBAAmB,CAAC,WAAW,EAAE,eAAe,CAAC,CACzD,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,yBAAyB,CAC3B,WAA2B,EAC3B,mBAAmC,EAAA;QAEnC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,iDAAA,CAAmD,CACtD,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,0BAA0B,CAC5B,WAA2B,EAC3B,oBAAsC,EAAA;QAEtC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,iDAAA,CAAmD,CACtD,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,uBAAuB,CACzB,WAA2B,EAC3B,eAAwC,EAAA;QAExC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,iDAAA,CAAmD,CACtD,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,wBAAwB,CAC1B,WAA2B,EAC3B,oBAAsC,EAAA;QAEtC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,iDAAA,CAAmD,CACtD,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,CAClB,WAA2B,EAC3B,UAA2B,EAAA;QAE3B,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAClD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GACvC,SAAS,CAAA;QAEf,IACI,QAAQ,IACR,QAAQ,CAAC,kBAAkB,IAC3B,QAAQ,CAAC,kBAAmB,CAAC,YAAY,IACzC,QAAQ,CAAC,WAAW,CAAC,IAAI,CACrB,CAAC,UAAU,EAAE,CAAG,CAAD,SAAW,CAAC,QAAQ,KAAK,WAAW,CACtD,EAED,MAAM,IAAI,QAAA,YAAY,CAClB,mDAAmD,CACtD,CAAA;QAEL,gFAAgF;QAChF,IAAI,CAAC,UAAU,CAAC,IAAI,EAChB,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAC3D,KAAK,EACL,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACtD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;IACnC,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,iBAAiB,CACnB,WAA2B,EAC3B,WAA8B,EAAA;QAE9B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAC1C,CAD4C,GACxC,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAU,CAAC,CACjD,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,cAAc,CAChB,WAA2B,EAC3B,gBAA0C,EAAA;QAE1C,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,UAAU,GAAG,kBAAA,eAAe,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,GAChE,gBAAgB,GAChB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAG,CAAD,CAAG,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAA;QAClE,IAAI,CAAC,UAAU,EACX,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,4CAAA,EAA+C,KAAK,CAAC,IAAI,EAAE,CAC9D,CAAA;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACpD,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACxD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAA;IACtC,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,eAAe,CACjB,WAA2B,EAC3B,WAA8B,EAAA;QAE9B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAC1C,CAD4C,GACxC,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAC/C,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,KAAiB,EAAA;QAEjB,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE5C,sFAAsF;QACtF,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAElE,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC5C,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IACzB,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,aAAa,CACf,WAA2B,EAC3B,OAAqB,EAAA;QAErB,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CACjC,CADmC,GAC/B,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,CAAC,CACvC,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,WAAgC,EAAA;QAEhC,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,GACX,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,KAAK,GAAG,kBAAA,eAAe,CAAC,YAAY,CAAC,WAAW,CAAC,GACjD,WAAW,GACX,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,IAAI,KAAK,WAAW,CAAC,CAAA;QACvD,IAAI,CAAC,KAAK,EACN,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,sCAAA,EAAyC,KAAK,CAAC,IAAI,EAAE,CACxD,CAAA;QAEL,sFAAsF;QACtF,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAElE,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC9C,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;IAC5B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,OAAqB,EAAA;QAErB,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CACjC,CADmC,GAC/B,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,CAAC,CACrC,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,UAAU,CAAC,SAAiB,EAAA;QAC9B,MAAM,IAAI,CAAC,KAAK,CAAC,CAAA,eAAA,EAAkB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;IACpE,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,aAAa,CAAC,QAAiB,EAAA;QACjC,IAAI,QAAQ,EAAE,CAAC;YACX,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;YACxD,IAAI,CAAC,eAAe,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;QAClD,CAAC;QAED,MAAM,0BAA0B,GAAG,IAAI,CAAC,mBAAmB,CAAA;QAC3D,IAAI,CAAC,0BAA0B,EAAE,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAC9D,IAAI,CAAC;YACD,MAAM,WAAW,GAAG,QAAQ,GACtB,CAAA,eAAA,EAAkB,QAAQ,CAAA,8BAAA,CAAgC,GAC1D,CAAA,0CAAA,CAA4C,CAAA;YAClD,MAAM,eAAe,GAAoB,MAAM,IAAI,CAAC,KAAK,CACrD,WAAW,CACd,CAAA;YAED,MAAM,OAAO,CAAC,GAAG,CACb,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;gBAC/B,0FAA0F;gBAC1F,MAAM,YAAY,GAAG,CAAA,WAAA,EAAc,UAAU,CAAC,cAAc,CAAC,CAAA,GAAA,EAAM,UAAU,CAAC,YAAY,CAAC,CAAA,CAAA,CAAG,CAAA;gBAC9F,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;YACnC,CAAC,CAAC,CACL,CAAA;YAED,MAAM,YAAY,GAAG,QAAQ,GACvB,CAAA,eAAA,EAAkB,QAAQ,CAAA,iEAAA,CAAmE,GAC7F,CAAA,6EAAA,CAA+E,CAAA;YACrF,MAAM,gBAAgB,GAAoB,MAAM,IAAI,CAAC,KAAK,CACtD,YAAY,CACf,CAAA;YAED,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC9B,MAAM,eAAe,GAKjB,gBAAgB,CAAC,MAAM,CACvB,CAAC,CAAC,EAAE,EAAE,aAAa,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE;oBAC/C,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,EAAE,CAAA;oBACzC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC;wBAAE,YAAY;wBAAE,UAAU;oBAAA,CAAE,CAAC,CAAA;oBACnD,OAAO,CAAC,CAAA;gBACZ,CAAC,EACD,CAAA,CAAE,CACL,CAAA;gBAED,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CACjD,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;oBAC7B,MAAM,UAAU,GAAG,MAAM,CACpB,GAAG,CAAC,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE;wBAClC,OAAO,CAAA,2CAAA,EAA8C,aAAa,CAAA,GAAA,EAAM,YAAY,CAAA,GAAA,EAAM,UAAU,CAAA,IAAA,CAAM,CAAA;oBAC9G,CAAC,CAAC,CACD,IAAI,CAAC,MAAM,CAAC,CAAA;oBAEjB,OAAO,CAAA;2CACY,aAAa,CAAA;;oEAEY,aAAa,CAAA;sFACK,aAAa,CAAA;;gCAEnE,aAAa,CAAA;iCACZ,UAAU,CAAA;qBACtB,CAAA;gBACD,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;gBAExB,MAAM,WAAW,GAKX,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;gBAEtC,MAAM,OAAO,CAAC,GAAG,CACb,WAAW,CAAC,GAAG,CACX,KAAK,EAAE,EACH,aAAa,EACb,YAAY,EACZ,UAAU,EACV,eAAe,EAClB,EAAE,EAAE;oBACD,gCAAgC;oBAChC,MAAM,IAAI,CAAC,KAAK,CACZ,CAAA,aAAA,EAAgB,aAAa,CAAA,GAAA,EAAM,YAAY,CAAA,GAAA,EAAM,UAAU,CAAA,EAAA,CAAI,GAC/D,CAAA,oBAAA,EAAuB,eAAe,CAAA,CAAA,CAAG,CAChD,CAAA;oBAED,MAAM,IAAI,CAAC,KAAK,CACZ,CAAA,aAAA,EAAgB,aAAa,CAAA,GAAA,EAAM,YAAY,CAAA,GAAA,EAAM,UAAU,CAAA,EAAA,CAAI,GAC/D,CAAA,iBAAA,EAAoB,eAAe,CAAA,eAAA,CAAiB,CAC3D,CAAA;gBACL,CAAC,CACJ,CACJ,CAAA;gBAED,MAAM,OAAO,CAAC,GAAG,CACb,gBAAgB,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE;oBAClC,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;wBAC7C,qCAAqC;wBACrC,OAAM;oBACV,CAAC;oBAED,MAAM,YAAY,GAAG,CAAA,YAAA,EAAe,YAAY,CAAC,eAAe,CAAC,CAAA,GAAA,EAAM,YAAY,CAAC,cAAc,CAAC,CAAA,GAAA,EAAM,YAAY,CAAC,YAAY,CAAC,CAAA,CAAA,CAAG,CAAA;oBACtI,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;gBACnC,CAAC,CAAC,CACL,CAAA;YACL,CAAC;YAED,IAAI,CAAC,0BAA0B,EAAE,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAA;QACnE,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;YACb,IAAI,CAAC;gBACD,2DAA2D;gBAC3D,IAAI,CAAC,0BAA0B,EAC3B,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;YACxC,CAAC,CAAC,OAAO,aAAa,EAAE,CAAC,CAAC;YAC1B,MAAM,KAAK,CAAA;QACf,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAElE,KAAK,CAAC,SAAS,CAAC,SAAoB,EAAA;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC,CAAA;QACxE,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,OAAO,EAAE,CAAA;QACb,CAAC;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,SAAS,GAAG,EAAE,CAAA;QAClB,CAAC;QAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QACnD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAEvD,MAAM,OAAO,GAAG,SAAS,CACpB,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAG,CAAD,GAAK,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAChE,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAG,CAAD,OAAS,CAAC,CAAA;QAEnC,IACI,IAAI,CAAC,MAAM,CAAC,QAAQ,IACpB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAE1D,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAEtC,MAAM,cAAc,GAAG,SAAS,CAC3B,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YACd,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAC3B,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAA;YAExC,IAAI,CAAC,MAAM,EAAE,CAAC;gBACV,MAAM,GAAG,aAAa,CAAA;YAC1B,CAAC;YACD,OAAO,CAAA,iBAAA,EAAoB,MAAM,CAAA,oBAAA,EAAuB,IAAI,CAAA,EAAA,CAAI,CAAA;QACpE,CAAC,CAAC,CACD,IAAI,CAAC,MAAM,CAAC,CAAA;QAEjB,MAAM,KAAK,GAAG,OAAO,CAChB,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACZ,OACI,AADG,CACH,sCAAA,EAAyC,IAAI,CAAC,UAAU,CACpD,IAAI,CAAC,2BAA2B,EAAE,CACrC,CAAA,KAAA,CAAO,GACR,CAAA,YAAA,EAAe,MAAM,CAAA,8HAAA,EACjB,oBAAA,iBAAiB,CAAC,IACtB,CAAA,EAAA,EAAK,cAAc,CAAC,CAAC,CAAC,CAAA,KAAA,EAAQ,cAAc,CAAA,CAAA,CAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACzD,CAAA;QACL,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QACvC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE;YAC/B,MAAM,IAAI,GAAG,IAAI,OAAA,IAAI,EAAE,CAAA;YACvB,MAAM,EAAE,GACJ,MAAM,CAAC,eAAe,CAAC,KAAK,eAAe,GACrC,SAAS,GACT,MAAM,CAAC,eAAe,CAAC,CAAA;YACjC,MAAM,MAAM,GACR,MAAM,CAAC,QAAQ,CAAC,KAAK,aAAa,IAClC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,GACrB,SAAS,GACT,MAAM,CAAC,QAAQ,CAAC,CAAA;YAC1B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,eAAe,CAAC,CAAA;YACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAA;YAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,CAAA;YAClE,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;YACjC,OAAO,IAAI,CAAA;QACf,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACO,KAAK,CAAC,UAAU,CAAC,UAAqB,EAAA;QAC5C,6CAA6C;QAC7C,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxC,OAAO,EAAE,CAAA;QACb,CAAC;QAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QACnD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAEvD,MAAM,QAAQ,GAIR,EAAE,CAAA;QAER,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,MAAM,YAAY,GACd,CAAA,uBAAA,CAAyB,GACzB,CAAA,mCAAA,CAAqC,GACrC,CAAA,+CAAA,CAAiD,CAAA;YACrD,MAAM,WAAW,GAAuB,MAAM,IAAI,CAAC,KAAK,CACpD,YAAY,CACf,CAAA;YAED,MAAM,SAAS,GAAG,WAAW,CACxB,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;gBACd,OAAO,CAAA;;;4BAGC,IAAI,CAAA;;;;2CAIW,IAAI,CAAA;;;iBAG9B,CAAA;YACD,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;YAExB,QAAQ,CAAC,IAAI,CAAC,GAAG,AAAC,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;QACnD,CAAC,MAAM,CAAC;YACJ,MAAM,mBAAmB,GAAG,UAAU,CACjC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAG,CAAD,GAAK,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CACzD,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;gBAClC,QAAQ,GAAG,QAAQ,IAAI,eAAe,CAAA;gBACtC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;gBAC/B,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;oBACb,MAAM,EAAE,KAAK,CAAC,MAAM,IAAI,aAAa;oBACrC,SAAS,EAAE,KAAK,CAAC,SAAS;iBAC7B,CAAC,CAAA;gBACF,OAAO,CAAC,CAAA;YACZ,CAAC,EAAE,CAAA,CAAgE,CAAC,CAAA;YAExE,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAChD,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE;gBACxB,MAAM,eAAe,GAAG,MAAM,CACzB,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE;oBAC3B,OAAO,CAAA,mBAAA,EAAsB,MAAM,CAAA,sBAAA,EAAyB,SAAS,CAAA,EAAA,CAAI,CAAA;gBAC7E,CAAC,CAAC,CACD,IAAI,CAAC,MAAM,CAAC,CAAA;gBAEjB,OAAO,CAAA;;;4BAGC,QAAQ,CAAA;;;+CAGW,QAAQ,CAAA;4BAC3B,eAAe,CAAA;iBAC1B,CAAA;YACD,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;YAExB,QAAQ,CAAC,IAAI,CAAC,GAAG,AAAC,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;QACnD,CAAC;QAED,yDAAyD;QACzD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,OAAO,EAAE,CAAA;QACb,CAAC;QAED,MAAM,iBAAiB,GAAG,QAAQ,CAAC,MAAM,CACrC,CAAC,CAAC,EAAE,EAAE,aAAa,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;YAC/B,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,EAAE,CAAA;YACzC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAC5B,OAAO,CAAC,CAAA;QACZ,CAAC,EACD,CAAA,CAEC,CACJ,CAAA;QAED,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAC/C,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,SAAS,GAAG,MAAM,CACnB,GAAG,CACA,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,CAC3B,CAD6B,AAC7B,mBAAA,EAAsB,YAAY,CAAA,sBAAA,EAAyB,UAAU,CAAA,EAAA,CAAI,CAChF,CACA,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,OAAO,AACH,CAAA,2DAAA,CAA6D,GAC7D,CAAA,MAAA,EAAS,aAAa,CAAA,iCAAA,CAAmC,GACzD,CAAA,wGAAA,CAA0G,GAC1G,CAAA,OAAA,EAAU,SAAS,CAAA,CAAA,CAAG,CACzB,CAAA;QACL,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CACnD,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM,CACpB,GAAG,CACA,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,CAC3B,CAD6B,AAC7B,kCAAA,EAAqC,YAAY,CAAA,qCAAA,EAAwC,UAAU,CAAA,EAAA,CAAI,CAC9G,CACA,IAAI,CAAC,MAAM,CAAC,CAAA;YAEjB,OAAO,AACH,CAAA,kFAAA,CAAoF,GACpF,CAAA,MAAA,EAAS,aAAa,CAAA,gEAAA,CAAkE,GACxF,CAAA,YAAA,EAAe,aAAa,CAAA,8DAAA,CAAgE,GAC5F,CAAA,GAAA,CAAK,GACL,CAAA,4EAAA,CAA8E,GAC9E,CAAA,sEAAA,CAAwE,GACxE,CAAA,8DAAA,CAAgE,GAChE,CAAA,WAAA,EAAc,aAAa,CAAA,kCAAA,CAAoC,GAC/D,CAAA,GAAA,CAAK,GACL,CAAA,6IAAA,CAA+I,GAC/I,CAAA,MAAA,CAAQ,GACR,CAAA,CAAA,EAAI,UAAU,CAAA,MAAA,CAAQ,GACtB,CAAA,0EAAA,CAA4E,CAC/E,CAAA;QACL,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CACnD,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM,CACpB,GAAG,CACA,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,CAC3B,CAD6B,AAC7B,gBAAA,EAAmB,YAAY,CAAA,qBAAA,EAAwB,UAAU,CAAA,EAAA,CAAI,CAC5E,CACA,IAAI,CAAC,MAAM,CAAC,CAAA;YAEjB,OACI,AADG,CACH,kCAAA,EAAqC,aAAa,CAAA,kFAAA,CAAoF,GACtI,CAAA,wHAAA,CAA0H,GAC1H,CAAA,2GAAA,CAA6G,GAC7G,CAAA,MAAA,EAAS,aAAa,CAAA,4BAAA,CAA8B,GACpD,CAAA,YAAA,EAAe,aAAa,CAAA,uFAAA,CAAyF,GACrH,CAAA,YAAA,EAAe,aAAa,CAAA,oEAAA,CAAsE,GAClG,CAAA,YAAA,EAAe,aAAa,CAAA,8DAAA,CAAgE,GAC5F,CAAA,YAAA,EAAe,aAAa,CAAA,wEAAA,CAA0E,GACtG,CAAA,YAAA,EAAe,aAAa,CAAA,8DAAA,CAAgE,GAC5F,CAAA,YAAA,EAAe,aAAa,CAAA,2HAAA,CAA6H,GACzJ,CAAA,YAAA,EAAe,aAAa,CAAA,mIAAA,CAAqI,GACjK,CAAA,OAAA,EAAU,UAAU,CAAA,CAAA,CAAG,CAC1B,CAAA;QACL,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,kBAAkB,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CACvD,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM,CACpB,GAAG,CACA,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,CAC3B,CAD6B,AAC7B,mBAAA,EAAsB,YAAY,CAAA,sBAAA,EAAyB,UAAU,CAAA,EAAA,CAAI,CAChF,CACA,IAAI,CAAC,MAAM,CAAC,CAAA;YAEjB,OACI,AADG,CACH,oEAAA,CAAsE,GACtE,CAAA,MAAA,EAAS,aAAa,CAAA,iCAAA,CAAmC,GACzD,CAAA,MAAA,CAAQ,GACR,CAAA,sBAAA,EAAyB,aAAa,CAAA,mLAAA,CAAqL,GAC3N,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CACpB,CAAA;QACL,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,eAAe,GAAG,CAAA,sDAAA,CAAwD,CAAA;QAEhF,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAC/C,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM,CACpB,GAAG,CACA,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,CAC3B,CAD6B,AAC7B,eAAA,EAAkB,YAAY,CAAA,oBAAA,EAAuB,UAAU,CAAA,EAAA,CAAI,CAC1E,CACA,IAAI,CAAC,MAAM,CAAC,CAAA;YAEjB,OAAO,AACH,CAAA,QAAA,EAAW,aAAa,CAAA,gFAAA,CAAkF,GAC1G,CAAA,wIAAA,CAA0I,GAC1I,CAAA,MAAA,EAAS,aAAa,CAAA,wBAAA,CAA0B,GAChD,CAAA,YAAA,EAAe,aAAa,CAAA,4GAAA,CAA8G,GAC1I,CAAA,YAAA,EAAe,aAAa,CAAA,yGAAA,CAA2G,GACvI,CAAA,YAAA,EAAe,aAAa,CAAA,4DAAA,CAA8D,GAC1F,CAAA,YAAA,EAAe,aAAa,CAAA,2DAAA,CAA6D,GACzF,CAAA,MAAA,CAAQ,GACR,CAAA,gGAAA,CAAkG,GAClG,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CACpB,CAAA;QACL,CAAC,CAAC,CACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,CACF,SAAS,EACT,aAAa,EACb,aAAa,EACb,iBAAiB,EACjB,YAAY,EACZ,SAAS,CACZ,GAAsB,MAAM,OAAO,CAAC,GAAG,CAAC;YACrC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;YAC9B,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;SACzB,CAAC,CAAA;QAEF,yCAAyC;QACzC,OAAO,MAAM,OAAO,CAAC,GAAG,CACpB,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAC3B,MAAM,KAAK,GAAG,IAAI,QAAA,KAAK,EAAE,CAAA;YAEzB,MAAM,gBAAgB,GAAG,CAAC,QAAa,EAAE,GAAW,EAAE,EAAE;gBACpD,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,aAAa,IAClC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,IACxB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,aAAa,CAAC,GAC/C,SAAS,GACT,QAAQ,CAAC,GAAG,CAAC,CAAA;YACvB,CAAC,CAAA;YAED,qFAAqF;YACrF,MAAM,EAAE,GACJ,OAAO,CAAC,eAAe,CAAC,KAAK,eAAe,GACtC,SAAS,GACT,OAAO,CAAC,eAAe,CAAC,CAAA;YAClC,MAAM,MAAM,GAAG,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAA;YACxD,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,CAAA;YACzC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;YACtC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CACnC,OAAO,CAAC,YAAY,CAAC,EACrB,MAAM,EACN,EAAE,CACL,CAAA;YAED,MAAM,gBAAgB,GAAG,YAAY,CAAC,IAAI,CACtC,CAAC,WAAW,EAAE,CACV,CADY,UACD,CAAC,MAAM,CAAC,KAAK,OAAO,CAAC,eAAe,CAAC,CACtD,CAAA;YAEF,yCAAyC;YACzC,KAAK,CAAC,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAC7B,SAAS,CACJ,MAAM,CACH,CAAC,QAAQ,EAAE,CACP,CADS,OACD,CAAC,YAAY,CAAC,KAClB,OAAO,CAAC,YAAY,CAAC,IACzB,QAAQ,CAAC,cAAc,CAAC,KACpB,OAAO,CAAC,cAAc,CAAC,IAC3B,QAAQ,CAAC,eAAe,CAAC,KACrB,OAAO,CAAC,eAAe,CAAC,CACnC,CACA,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;gBACpB,MAAM,iBAAiB,GAAG,aAAa,CAAC,MAAM,CAC1C,CAAC,YAAY,EAAE,CACX,CADa,WACD,CAAC,YAAY,CAAC,KACtB,QAAQ,CAAC,YAAY,CAAC,IAC1B,YAAY,CAAC,cAAc,CAAC,KACxB,QAAQ,CAAC,cAAc,CAAC,IAC5B,YAAY,CAAC,eAAe,CAAC,KACzB,QAAQ,CAAC,eAAe,CAAC,IAC7B,YAAY,CAAC,aAAa,CAAC,KACvB,QAAQ,CAAC,aAAa,CAAC,CAClC,CAAA;gBAED,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,CAC9C,CAAC,UAAU,EAAE,CACT,CADW,SACD,CAAC,iBAAiB,CAAC,KAAK,QAAQ,CACjD,CAAA;gBACD,MAAM,qBAAqB,GACvB,iBAAiB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,EAAE;oBACzC,OAAO,aAAa,CAAC,IAAI,CACrB,CAAC,YAAY,EAAE,CACX,CADa,WACD,CAAC,iBAAiB,CAAC,KAC3B,QAAQ,IACZ,YAAY,CAAC,iBAAiB,CAAC,KAC3B,gBAAgB,CACZ,iBAAiB,CACpB,IACL,YAAY,CAAC,cAAc,CAAC,KACxB,QAAQ,CAAC,cAAc,CAAC,IAC5B,YAAY,CAAC,eAAe,CAAC,KACzB,QAAQ,CAAC,eAAe,CAAC,IAC7B,YAAY,CAAC,aAAa,CAAC,KACvB,QAAQ,CAAC,aAAa,CAAC,CAClC,CAAA;gBACL,CAAC,CAAC,CAAA;gBAEN,MAAM,WAAW,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,CACxC,CAAC,MAAM,EAAE,CACL,CADO,KACD,CAAC,YAAY,CAAC,KAChB,QAAQ,CAAC,YAAY,CAAC,IAC1B,MAAM,CAAC,cAAc,CAAC,KAClB,QAAQ,CAAC,cAAc,CAAC,IAC5B,MAAM,CAAC,eAAe,CAAC,KACnB,QAAQ,CAAC,eAAe,CAAC,IAC7B,MAAM,CAAC,aAAa,CAAC,KACjB,QAAQ,CAAC,aAAa,CAAC,CAClC,CAAA;gBAED,MAAM,WAAW,GAAG,IAAI,cAAA,WAAW,EAAE,CAAA;gBACrC,WAAW,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAA;gBAC1C,WAAW,CAAC,IAAI,GACZ,QAAQ,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;gBAEvC,+CAA+C;gBAC/C,IACI,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,OAAO,CACrC,WAAW,CAAC,IAAkB,CACjC,KAAK,CAAC,CAAC,IACR,QAAQ,CAAC,0BAA0B,CAAC,EACtC,CAAC;oBACC,MAAM,MAAM,GACR,QAAQ,CACJ,0BAA0B,CAC7B,CAAC,QAAQ,EAAE,CAAA;oBAChB,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;wBAClB,WAAW,CAAC,MAAM,GAAG,KAAK,CAAA;oBAC9B,CAAC,MAAM,CAAC;wBACJ,WAAW,CAAC,MAAM,GACd,CAAC,IAAI,CAAC,qBAAqB,CACvB,KAAK,EACL,WAAW,EACX,MAAM,CACT,GACK,MAAM,GACN,EAAE,CAAA;oBAChB,CAAC;gBACL,CAAC;gBAED,IACI,WAAW,CAAC,IAAI,KAAK,SAAS,IAC9B,WAAW,CAAC,IAAI,KAAK,SAAS,EAChC,CAAC;oBACC,IACI,QAAQ,CAAC,mBAAmB,CAAC,KAAK,IAAI,IACtC,CAAC,IAAI,CAAC,wBAAwB,CAC1B,KAAK,EACL,WAAW,EACX,QAAQ,CAAC,mBAAmB,CAAC,CAChC,EAED,WAAW,CAAC,SAAS,GACjB,QAAQ,CAAC,mBAAmB,CAAC,CAAA;oBACrC,IACI,QAAQ,CAAC,eAAe,CAAC,KAAK,IAAI,IAClC,CAAC,IAAI,CAAC,oBAAoB,CACtB,KAAK,EACL,WAAW,EACX,QAAQ,CAAC,eAAe,CAAC,CAC5B,EAED,WAAW,CAAC,KAAK,GACb,QAAQ,CAAC,eAAe,CAAC,CAAA;gBACrC,CAAC;gBAED,IAAI,WAAW,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;oBAClC,2BAA2B;oBAC3B,MAAM,sBAAsB,GACxB,iBAAiB,CAAC,MAAM,CACpB,CAAC,UAAU,EAAE,CACT,CADW,SACD,CAAC,iBAAiB,CAAC,KAC7B,OAAO,CACd,CAAA;oBACL,IAAI,sBAAsB,CAAC,MAAM,EAAE,CAAC;wBAChC,oIAAoI;wBACpI,KAAK,MAAM,eAAe,IAAI,sBAAsB,CAAE,CAAC;4BACnD,IACI,IAAI,CAAC,qBAAqB,CACtB,eAAe,CACX,iBAAiB,CACpB,CACJ,EACH,CAAC;gCACC,uDAAuD;gCACvD,WAAW,CAAC,IAAI,GAAG,EAAE,CAAA;gCACrB,MAAM,eAAe,GAAG,IAAI,MAAM,CAC9B,KAAK,GACD,WAAW,CAAC,IAAI,GAChB,eAAe,EACnB,GAAG,CACN,CAAA;gCACD,IAAI,MAAM,CAAA;gCACV,MACI,CAAC,MAAM,GAAG,eAAe,CAAC,IAAI,CAC1B,eAAe,CACX,YAAY,CACf,CACJ,CAAC,KAAK,IAAI,CACb,CAAC;oCACC,WAAW,CAAC,IAAI,CAAC,OAAO,CACpB,MAAM,CAAC,CAAC,CAAC,CACZ,CAAA;gCACL,CAAC;gCAED,MAAK;4BACT,CAAC;wBACL,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,IAAI,CAC5C,CAAC,UAAU,EAAE,CACT,CADW,SACD,CAAC,iBAAiB,CAAC,KAC7B,aAAa,CACpB,CAAA;gBACD,IAAI,iBAAiB,EAAE,CAAC;oBACpB,WAAW,CAAC,SAAS,GAAG,IAAI,CAAA;oBAC5B,0DAA0D;oBAC1D,MAAM,yBAAyB,GAC3B,aAAa,CAAC,MAAM,CAChB,CAAC,UAAU,EAAE,CACT,CADW,SACD,CAAC,YAAY,CAAC,KACpB,QAAQ,CAAC,YAAY,CAAC,IAC1B,UAAU,CAAC,cAAc,CAAC,KACtB,QAAQ,CAAC,cAAc,CAAC,IAC5B,UAAU,CAAC,eAAe,CAAC,KACvB,QAAQ,CAAC,eAAe,CAAC,IAC7B,UAAU,CAAC,aAAa,CAAC,KACrB,QAAQ,CAAC,aAAa,CAAC,IAC3B,UAAU,CAAC,iBAAiB,CAAC,KACzB,aAAa,CACxB,CAAA;oBAEL,2BAA2B;oBAC3B,MAAM,WAAW,GACb,yBAAyB,CAAC,GAAG,CACzB,CAAC,UAAU,EAAE,CACT,CADW,SACD,CAAC,aAAa,CAAC,CAChC,CAAA;oBACL,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAA;oBAEzC,4CAA4C;oBAC5C,MAAM,MAAM,GACR,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,KAAK,EACL,WAAW,CACd,CAAA;oBAEL,4EAA4E;oBAC5E,IACI,iBAAiB,CAAC,iBAAiB,CAAC,KACpC,MAAM,EACR,CAAC;wBACC,WAAW,CAAC,wBAAwB,GAChC,iBAAiB,CAAC,iBAAiB,CAAC,CAAA;oBAC5C,CAAC;gBACL,CAAC;gBAED,WAAW,CAAC,OAAO,GACf,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI,IACnC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,SAAS,GAClC,IAAI,CAAC,4BAA4B,CAC7B,QAAQ,CAAC,gBAAgB,CAAC,CAC7B,GACD,SAAS,CAAA;gBACnB,WAAW,CAAC,UAAU,GAClB,QAAQ,CAAC,aAAa,CAAC,KAAK,KAAK,CAAA;gBACrC,WAAW,CAAC,QAAQ,GAChB,iBAAiB,CAAC,MAAM,GAAG,CAAC,IAC5B,CAAC,qBAAqB,CAAA;gBAC1B,WAAW,CAAC,WAAW,GAAG,WAAW,CAAA;gBACrC,IAAI,WAAW,EACX,WAAW,CAAC,kBAAkB,GAAG,WAAW,CAAA;gBAChD,IAAI,WAAW,CAAC,OAAO,KAAK,mBAAmB,EAAE,CAAC;oBAC9C,WAAW,CAAC,WAAW,GAAG,IAAI,CAAA;oBAC9B,WAAW,CAAC,kBAAkB,GAAG,MAAM,CAAA;oBACvC,WAAW,CAAC,OAAO,GAAG,SAAS,CAAA;gBACnC,CAAC;gBAED,sCAAsC;gBACtC,wDAAwD;gBACxD,IAAI,QAAQ,CAAC,gBAAgB,CAAC,EAC1B,WAAW,CAAC,SAAS,GACjB,QAAQ,CAAC,gBAAgB,CAAC,KAC1B,gBAAgB,CAAC,gBAAgB,CAAC,GAC5B,SAAS,GACT,QAAQ,CAAC,gBAAgB,CAAC,CAAA;gBAExC,IACI,WAAW,CAAC,IAAI,KAAK,WAAW,IAChC,WAAW,CAAC,IAAI,KAAK,MAAM,IAC3B,WAAW,CAAC,IAAI,KAAK,gBAAgB,EACvC,CAAC;oBACC,WAAW,CAAC,SAAS,GACjB,CAAC,IAAI,CAAC,wBAAwB,CAC1B,KAAK,EACL,WAAW,EACX,QAAQ,CAAC,oBAAoB,CAAC,CACjC,GACK,QAAQ,CAAC,oBAAoB,CAAC,GAC9B,SAAS,CAAA;gBACvB,CAAC;gBAED,IACI,QAAQ,CAAC,cAAc,CAAC,KAAK,IAAI,IACjC,QAAQ,CAAC,cAAc,CAAC,KAAK,SAAS,IACtC,QAAQ,CAAC,YAAY,CAAC,EACxB,CAAC;oBACC,WAAW,CAAC,aAAa,GACrB,QAAQ,CAAC,cAAc,CAAC,KAAK,IAAI,GAC3B,QAAQ,GACR,SAAS,CAAA;oBACnB,0GAA0G;oBAC1G,MAAM,iBAAiB,GACnB,IAAI,CAAC,wBAAwB,CAAC;wBAC1B,QAAQ,EAAE,OAAO,CAAC,eAAe,CAAC;wBAClC,MAAM,EAAE,OAAO,CAAC,cAAc,CAAC;wBAC/B,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC;wBAC5B,IAAI,EAAE,oBAAA,iBAAiB,CAAC,gBAAgB;wBACxC,IAAI,EAAE,WAAW,CAAC,IAAI;qBACzB,CAAC,CAAA;oBAEN,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAC5B,iBAAiB,CAAC,KAAK,EACvB,iBAAiB,CAAC,UAAU,CAC/B,CAAA;oBACD,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;wBACjC,WAAW,CAAC,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;oBAC/C,CAAC,MAAM,CAAC;wBACJ,WAAW,CAAC,YAAY,GAAG,EAAE,CAAA;oBACjC,CAAC;gBACL,CAAC;gBAED,OAAO,WAAW,CAAA;YACtB,CAAC,CAAC,CACT,CAAA;YAED,yFAAyF;YACzF,MAAM,sBAAsB,GAAG,WAAA,QAAQ,CAAC,IAAI,CACxC,aAAa,CAAC,MAAM,CAChB,CAAC,YAAY,EAAE,CACX,CADa,WACD,CAAC,YAAY,CAAC,KACtB,OAAO,CAAC,YAAY,CAAC,IACzB,YAAY,CAAC,cAAc,CAAC,KACxB,OAAO,CAAC,cAAc,CAAC,IAC3B,YAAY,CAAC,eAAe,CAAC,KACzB,OAAO,CAAC,eAAe,CAAC,IAC5B,YAAY,CAAC,iBAAiB,CAAC,KAAK,QAAQ,CACnD,EACD,CAAC,YAAY,EAAE,CAAG,CAAD,WAAa,CAAC,iBAAiB,CAAC,CACpD,CAAA;YAED,KAAK,CAAC,OAAO,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;gBACtD,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAChC,CAAC,GAAG,EAAE,CACF,CADI,EACD,CAAC,iBAAiB,CAAC,KACtB,UAAU,CAAC,iBAAiB,CAAC,CACpC,CAAA;gBACD,OAAO,IAAI,cAAA,WAAW,CAAC;oBACnB,IAAI,EAAE,UAAU,CAAC,iBAAiB,CAAC;oBACnC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,aAAa,CAAC,CAAC;iBACpD,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEF,uFAAuF;YACvF,MAAM,qBAAqB,GAAG,WAAA,QAAQ,CAAC,IAAI,CACvC,aAAa,CAAC,MAAM,CAChB,CAAC,YAAY,EAAE,CACX,CADa,WACD,CAAC,YAAY,CAAC,KACtB,OAAO,CAAC,YAAY,CAAC,IACzB,YAAY,CAAC,cAAc,CAAC,KACxB,OAAO,CAAC,cAAc,CAAC,IAC3B,YAAY,CAAC,eAAe,CAAC,KACzB,OAAO,CAAC,eAAe,CAAC,IAC5B,YAAY,CAAC,iBAAiB,CAAC,KAAK,OAAO,CAClD,EACD,CAAC,YAAY,EAAE,CAAG,CAAD,WAAa,CAAC,iBAAiB,CAAC,CACpD,CAAA;YAED,KAAK,CAAC,MAAM,GAAG,qBAAqB,CAC/B,MAAM,CACH,CAAC,UAAU,EAAE,CACT,CADW,AACV,IAAI,CAAC,qBAAqB,CACvB,UAAU,CAAC,iBAAiB,CAAC,CAChC,CACR,CACA,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;gBAChB,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAC/B,CAAC,GAAG,EAAE,CACF,CADI,EACD,CAAC,iBAAiB,CAAC,KACtB,UAAU,CAAC,iBAAiB,CAAC,CACpC,CAAA;gBACD,OAAO,IAAI,aAAA,UAAU,CAAC;oBAClB,IAAI,EAAE,UAAU,CAAC,iBAAiB,CAAC;oBACnC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,aAAa,CAAC,CAAC;oBAChD,UAAU,EAAE,UAAU,CAAC,YAAY,CAAC;iBACvC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEN,kGAAkG;YAClG,MAAM,0BAA0B,GAAG,WAAA,QAAQ,CAAC,IAAI,CAC5C,aAAa,CAAC,MAAM,CAChB,CAAC,YAAY,EAAE,CACX,CADa,WACD,CAAC,YAAY,CAAC,KACtB,OAAO,CAAC,YAAY,CAAC,IACzB,YAAY,CAAC,cAAc,CAAC,KACxB,OAAO,CAAC,cAAc,CAAC,IAC3B,YAAY,CAAC,eAAe,CAAC,KACzB,OAAO,CAAC,eAAe,CAAC,CACnC,EACD,CAAC,YAAY,EAAE,CAAG,CAAD,WAAa,CAAC,SAAS,CAAC,CAC5C,CAAA;YAED,KAAK,CAAC,WAAW,GAAG,0BAA0B,CAAC,GAAG,CAC9C,CAAC,YAAY,EAAE,EAAE;gBACb,MAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CACpC,CAAC,IAAI,EAAE,CACH,CADK,GACD,CAAC,SAAS,CAAC,KAAK,YAAY,CAAC,SAAS,CAAC,CAClD,CAAA;gBAED,0HAA0H;gBAC1H,MAAM,EAAE,GACJ,YAAY,CAAC,eAAe,CAAC,KAAK,eAAe,GAC3C,SAAS,GACT,YAAY,CAAC,eAAe,CAAC,CAAA;gBACvC,MAAM,MAAM,GAAG,gBAAgB,CAC3B,YAAY,EACZ,YAAY,CACf,CAAA;gBACD,MAAM,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAClD,YAAY,CAAC,WAAW,CAAC,EACzB,MAAM,EACN,EAAE,CACL,CAAA;gBAED,OAAO,IAAI,kBAAA,eAAe,CAAC;oBACvB,IAAI,EAAE,YAAY,CAAC,SAAS,CAAC;oBAC7B,WAAW,EAAE,WAAW,CAAC,GAAG,CACxB,CAAC,IAAI,EAAE,CAAG,CAAD,GAAK,CAAC,aAAa,CAAC,CAChC;oBACD,kBAAkB,EAAE,YAAY,CAAC,eAAe,CAAC;oBACjD,gBAAgB,EAAE,YAAY,CAAC,YAAY,CAAC;oBAC5C,mBAAmB,EAAE,mBAAmB;oBACxC,qBAAqB,EAAE,WAAW,CAAC,GAAG,CAClC,CAAC,IAAI,EAAE,CAAG,CAAD,GAAK,CAAC,YAAY,CAAC,CAC/B;oBACD,QAAQ,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CACvC,GAAG,EACH,GAAG,CACN,EAAE,oDAAoD;oBACvD,QAAQ,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CACvC,GAAG,EACH,GAAG,CACN,EAAE,oDAAoD;iBAC1D,CAAC,CAAA;YACN,CAAC,CACJ,CAAA;YAED,uFAAuF;YACvF,MAAM,qBAAqB,GAAG,WAAA,QAAQ,CAAC,IAAI,CACvC,SAAS,CAAC,MAAM,CACZ,CAAC,OAAO,EAAE,CACN,CADQ,MACD,CAAC,YAAY,CAAC,KAAK,OAAO,CAAC,YAAY,CAAC,IAC/C,OAAO,CAAC,cAAc,CAAC,KACnB,OAAO,CAAC,cAAc,CAAC,IAC3B,OAAO,CAAC,eAAe,CAAC,KACpB,OAAO,CAAC,eAAe,CAAC,CACnC,EACD,CAAC,OAAO,EAAE,CAAG,CAAD,MAAQ,CAAC,YAAY,CAAC,CACrC,CAAA;YAED,KAAK,CAAC,OAAO,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;gBACrD,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;oBACvC,OAAO,AACH,KAAK,CAAC,eAAe,CAAC,KAClB,UAAU,CAAC,eAAe,CAAC,IAC/B,KAAK,CAAC,cAAc,CAAC,KACjB,UAAU,CAAC,cAAc,CAAC,IAC9B,KAAK,CAAC,YAAY,CAAC,KAAK,UAAU,CAAC,YAAY,CAAC,IAChD,KAAK,CAAC,YAAY,CAAC,KAAK,UAAU,CAAC,YAAY,CAAC,CACnD,CAAA;gBACL,CAAC,CAAC,CAAA;gBACF,OAAO,IAAI,aAAA,UAAU,CAAoB;oBACrC,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,UAAU,CAAC,YAAY,CAAC;oBAC9B,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,aAAa,CAAC,CAAC;oBACjD,QAAQ,EAAE,UAAU,CAAC,WAAW,CAAC;oBACjC,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC;iBACjC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEF,OAAO,KAAK,CAAA;QAChB,CAAC,CAAC,CACL,CAAA;IACL,CAAC;IAED;;OAEG,CACO,cAAc,CAAC,KAAY,EAAE,iBAA2B,EAAA;QAC9D,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAClC,GAAG,CAAC,CAAC,MAAM,EAAE,CACV,CADY,GACR,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CACxD,CACA,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,IAAI,GAAG,GAAG,CAAA,aAAA,EAAgB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,EAAA,EAAK,iBAAiB,EAAE,CAAA;QAExE,KAAK,CAAC,OAAO,CACR,MAAM,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,QAAQ,CAAC,CACnC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAChB,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CACpC,CAAC,MAAM,EAAE,CACL,CADO,KACD,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAC/B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC5C,CAAA;YACD,IAAI,CAAC,aAAa,EACd,KAAK,CAAC,OAAO,CAAC,IAAI,CACd,IAAI,cAAA,WAAW,CAAC;gBACZ,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CACrD,KAAK,EACL;oBAAC,MAAM,CAAC,IAAI;iBAAC,CAChB;gBACD,WAAW,EAAE;oBAAC,MAAM,CAAC,IAAI;iBAAC;aAC7B,CAAC,CACL,CAAA;QACT,CAAC,CAAC,CAAA;QAEN,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3B,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAC3B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBACZ,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,GACxB,MAAM,CAAC,IAAI,GACX,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,KAAK,EACL,MAAM,CAAC,WAAW,CACrB,CAAA;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CACjC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACf,OAAO,CAAA,YAAA,EAAe,UAAU,CAAA,UAAA,EAAa,WAAW,CAAA,CAAA,CAAG,CAAA;YAC/D,CAAC,CAAC,CACD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,GAAG,IAAI,CAAA,EAAA,EAAK,UAAU,EAAE,CAAA;QAC5B,CAAC;QAED,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CACzB,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBACX,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,GACtB,KAAK,CAAC,IAAI,GACV,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CAC9C,KAAK,EACL,KAAK,CAAC,UAAW,CACpB,CAAA;gBACP,OAAO,CAAA,YAAA,EAAe,SAAS,CAAA,SAAA,EAAY,KAAK,CAAC,UAAU,CAAA,CAAA,CAAG,CAAA;YAClE,CAAC,CAAC,CACD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,GAAG,IAAI,CAAA,EAAA,EAAK,SAAS,EAAE,CAAA;QAC3B,CAAC;QAED,IAAI,KAAK,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,iBAAiB,EAAE,CAAC;YACpD,MAAM,cAAc,GAAG,KAAK,CAAC,WAAW,CACnC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;gBACR,MAAM,WAAW,GAAG,EAAE,CAAC,WAAW,CAC7B,GAAG,CAAC,CAAC,UAAU,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACf,IAAI,CAAC,EAAE,CAAC,IAAI,EACR,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACnD,KAAK,EACL,EAAE,CAAC,WAAW,EACd,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EACrB,EAAE,CAAC,qBAAqB,CAC3B,CAAA;gBACL,MAAM,qBAAqB,GAAG,EAAE,CAAC,qBAAqB,CACjD,GAAG,CAAC,CAAC,UAAU,EAAE,CAAG,CAAA,AAAD,CAAC,EAAI,UAAU,CAAA,CAAA,CAAG,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEf,IAAI,UAAU,GAAG,CAAA,YAAA,EACb,EAAE,CAAC,IACP,CAAA,eAAA,EAAkB,WAAW,CAAA,aAAA,EAAgB,IAAI,CAAC,UAAU,CACxD,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CACxB,CAAA,EAAA,EAAK,qBAAqB,CAAA,CAAA,CAAG,CAAA;gBAC9B,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU,IAAI,CAAA,WAAA,EAAc,EAAE,CAAC,QAAQ,EAAE,CAAA;gBAC1D,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU,IAAI,CAAA,WAAA,EAAc,EAAE,CAAC,QAAQ,EAAE,CAAA;gBAE1D,OAAO,UAAU,CAAA;YACrB,CAAC,CAAC,CACD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,GAAG,IAAI,CAAA,EAAA,EAAK,cAAc,EAAE,CAAA;QAChC,CAAC;QAED,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CACvC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,SAAS,CAC/B,CAAA;QACD,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,MAAM,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC3D,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAC1C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,KAAK,EACL,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAC9C,CAAA;YAEP,MAAM,WAAW,GAAG,cAAc,CAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;YACf,GAAG,IAAI,CAAA,cAAA,EAAiB,cAAc,CAAA,eAAA,EAAkB,WAAW,CAAA,CAAA,CAAG,CAAA;QAC1E,CAAC;QAED,GAAG,IAAI,CAAA,CAAA,CAAG,CAAA;QAEV,OAAO,IAAI,QAAA,KAAK,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAED;;OAEG,CACO,YAAY,CAClB,WAA2B,EAC3B,OAAiB,EAAA;QAEjB,MAAM,KAAK,GAAG,OAAO,GACf,CAAA,qBAAA,EAAwB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,GACtD,CAAA,WAAA,EAAc,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAA;QAClD,OAAO,IAAI,QAAA,KAAK,CAAC,KAAK,CAAC,CAAA;IAC3B,CAAC;IAES,aAAa,CAAC,IAAU,EAAA;QAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QAEnD,oFAAoF;QACpF,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,GAClC,CAAA,CAAA,EAAI,UAAU,CAAC,MAAM,CAAA,GAAA,EAAM,UAAU,CAAC,SAAS,CAAA,CAAA,CAAG,GAClD,CAAA,CAAA,EAAI,UAAU,CAAC,SAAS,CAAA,CAAA,CAAG,CAAA;QAEjC,IAAI,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,EAAE,CAAC;YACtC,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,cAAc,CAAA,IAAA,EAAO,IAAI,CAAC,UAAU,EAAE,CACxD,CAAA;QACL,CAAC,MAAM,CAAC;YACJ,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,cAAc,CAAA,IAAA,EAAO,IAAI,CACnC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B,QAAQ,EAAE,EAAE,CACpB,CAAA;QACL,CAAC;IACL,CAAC;IAES,KAAK,CAAC,uBAAuB,CAAC,IAAU,EAAA;QAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QAExD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YAC1B,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAC1D,CAAC;QAED,MAAM,UAAU,GACZ,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,GAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,GACtB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAA;QACrD,OAAO,IAAI,CAAC,wBAAwB,CAAC;YACjC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,IAAI;YAC5B,QAAQ,EAAE,eAAe,CAAC,QAAQ;YAClC,MAAM,EAAE,eAAe,CAAC,MAAM;YAC9B,IAAI,EAAE,eAAe,CAAC,SAAS;YAC/B,KAAK,EAAE,UAAU;SACpB,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACO,WAAW,CAAC,UAAyB,EAAA;QAC3C,OAAO,IAAI,QAAA,KAAK,CAAC,CAAA,UAAA,EAAa,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;IAChE,CAAC;IAED;;OAEG,CACO,KAAK,CAAC,uBAAuB,CACnC,UAAyB,EAAA;QAEzB,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;QAE9D,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YAC1B,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAC1D,CAAC;QAED,OAAO,IAAI,CAAC,wBAAwB,CAAC;YACjC,IAAI,EAAE,oBAAA,iBAAiB,CAAC,IAAI;YAC5B,QAAQ,EAAE,eAAe,CAAC,QAAQ;YAClC,MAAM,EAAE,eAAe,CAAC,MAAM;YAC9B,IAAI,EAAE,eAAe,CAAC,SAAS;SAClC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACO,cAAc,CAAC,KAAY,EAAE,KAAiB,EAAA;QACpD,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAC5B,GAAG,CAAC,CAAC,UAAU,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,OAAA,EAAU,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAA,OAAA,EACrC,KAAK,CAAC,IACV,CAAA,KAAA,EAAQ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,EAAA,EAAK,OAAO,CAAA,EAAA,EACtC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAC3C,EAAE,CACL,CAAA;IACL,CAAC;IAED;;OAEG,CACO,YAAY,CAClB,KAAY,EACZ,WAAgC,EAAA;QAEhC,MAAM,SAAS,GAAG,kBAAA,eAAe,CAAC,YAAY,CAAC,WAAW,CAAC,GACrD,WAAW,CAAC,IAAI,GAChB,WAAW,CAAA;QACjB,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,SAAS,CAAA,KAAA,EAAQ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAC3D,CAAA;IACL,CAAC;IAED;;OAEG,CACO,mBAAmB,CACzB,KAAY,EACZ,WAAqB,EACrB,cAAuB,EAAA;QAEvB,MAAM,cAAc,GAAG,cAAc,GAC/B,cAAc,GACd,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;QAEvE,MAAM,iBAAiB,GAAG,WAAW,CAChC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAG,CAAD,AAAC,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,iBAAA,EAAoB,cAAc,CAAA,eAAA,EAAkB,iBAAiB,CAAA,CAAA,CAAG,CAC5E,CAAA;IACL,CAAC;IAED;;OAEG,CACO,iBAAiB,CAAC,KAAY,EAAA;QACpC,MAAM,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,KAAO,CAAC,IAAI,CAAC,CAAA;QACrE,MAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAA;QACvE,MAAM,cAAc,GAAG,cAAc,GAC/B,cAAc,GACd,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;QAEvE,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,cAAc,CAAA,CAAA,CAAG,CAC1C,CAAA;IACL,CAAC;IAED;;OAEG,CACO,yBAAyB,CAC/B,KAAY,EACZ,gBAA6B,EAAA;QAE7B,MAAM,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAC3C,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,AAAC,CAAA,CAAG,GAAG,MAAM,GAAG,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,iBAAA,EACjC,gBAAgB,CAAC,IACrB,CAAA,UAAA,EAAa,WAAW,CAAA,CAAA,CAAG,CAC9B,CAAA;IACL,CAAC;IAED;;OAEG,CACO,uBAAuB,CAC7B,KAAY,EACZ,YAAkC,EAAA;QAElC,MAAM,UAAU,GAAG,kBAAA,eAAe,CAAC,aAAa,CAAC,YAAY,CAAC,GACxD,YAAY,CAAC,IAAI,GACjB,YAAY,CAAA;QAClB,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,UAAU,CAAA,CAAA,CAAG,CACtC,CAAA;IACL,CAAC;IAED;;OAEG,CACO,wBAAwB,CAC9B,KAAY,EACZ,eAA2B,EAAA;QAE3B,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,iBAAA,EACjC,eAAe,CAAC,IACpB,CAAA,SAAA,EAAY,eAAe,CAAC,UAAU,CAAA,CAAA,CAAG,CAC5C,CAAA;IACL,CAAC;IAED;;OAEG,CACO,sBAAsB,CAC5B,KAAY,EACZ,WAAgC,EAAA;QAEhC,MAAM,SAAS,GAAG,kBAAA,eAAe,CAAC,YAAY,CAAC,WAAW,CAAC,GACrD,WAAW,CAAC,IAAI,GAChB,WAAW,CAAA;QACjB,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,SAAS,CAAA,CAAA,CAAG,CACrC,CAAA;IACL,CAAC;IAED;;OAEG,CACO,mBAAmB,CACzB,KAAY,EACZ,UAA2B,EAAA;QAE3B,MAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CACrC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,AAAC,CAAA,CAAG,GAAG,MAAM,GAAG,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,MAAM,qBAAqB,GAAG,UAAU,CAAC,qBAAqB,CACzD,GAAG,CAAC,CAAC,MAAM,EAAE,CAAG,CAAD,AAAC,CAAA,CAAG,GAAG,MAAM,GAAG,CAAA,CAAA,CAAG,CAAC,CACnC,IAAI,CAAC,GAAG,CAAC,CAAA;QACd,IAAI,GAAG,GACH,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA,iBAAA,EACjC,UAAU,CAAC,IACf,CAAA,eAAA,EAAkB,WAAW,CAAA,EAAA,CAAI,GACjC,CAAA,WAAA,EAAc,IAAI,CAAC,UAAU,CACzB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAChC,CAAA,CAAA,EAAI,qBAAqB,CAAA,CAAA,CAAG,CAAA;QACjC,IAAI,UAAU,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAA,WAAA,EAAc,UAAU,CAAC,QAAQ,EAAE,CAAA;QACnE,IAAI,UAAU,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAA,WAAA,EAAc,UAAU,CAAC,QAAQ,EAAE,CAAA;QAEnE,OAAO,IAAI,QAAA,KAAK,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAED;;OAEG,CACO,iBAAiB,CACvB,KAAY,EACZ,gBAA0C,EAAA;QAE1C,MAAM,cAAc,GAAG,kBAAA,eAAe,CAAC,iBAAiB,CACpD,gBAAgB,CACnB,GACK,gBAAgB,CAAC,IAAI,GACrB,gBAAgB,CAAA;QACtB,OAAO,IAAI,QAAA,KAAK,CACZ,CAAA,YAAA,EAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,CAAA,kBAAA,EAAqB,cAAc,CAAA,CAAA,CAAG,CAC1C,CAAA;IACL,CAAC;IAED;;OAEG,CACO,UAAU,CAAC,MAA6B,EAAA;QAC9C,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,GACjC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QAEtC,IAAI,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YAChD,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;gBAChD,OAAO,CAAA,CAAA,EAAI,QAAQ,CAAA,GAAA,EAAM,MAAM,CAAA,GAAA,EAAM,SAAS,CAAA,CAAA,CAAG,CAAA;YACrD,CAAC;YAED,OAAO,CAAA,CAAA,EAAI,QAAQ,CAAA,IAAA,EAAO,SAAS,CAAA,CAAA,CAAG,CAAA;QAC1C,CAAC;QAED,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAChD,OAAO,CAAA,CAAA,EAAI,MAAM,CAAA,GAAA,EAAM,SAAS,CAAA,CAAA,CAAG,CAAA;QACvC,CAAC;QAED,OAAO,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA,CAAG,CAAA;IAC3B,CAAC;IAED;;;OAGG,CACO,mBAAmB,CACzB,MAAc,EACd,UAA8B,EAC9B,MAA0B,EAAA;QAE1B,IAAI,YAAY,GAAG,MAAM,CAAA;QACzB,IAAI,UAAU,IAAI,UAAU,KAAK,IAAI,CAAC,MAAM,CAAC,YAAY,EACrD,YAAY,GAAG,UAAU,GAAG,GAAG,GAAG,YAAY,CAAA;QAClD,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,EACzC,YAAY,GAAG,MAAM,GAAG,GAAG,GAAG,YAAY,CAAA;QAE9C,OAAO,YAAY,CAAA;IACvB,CAAC;IAED;;;;;;OAMG,CACO,4BAA4B,CAAC,YAAoB,EAAA;QACvD,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE,OAAO,YAAY,CAAA;QAC1D,MAAM,iBAAiB,GAAG,YAAY,CAAC,MAAM,CACzC,CAAC,EACD,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CACpC,CAAA;QACD,OAAO,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,CAAA;IAC/D,CAAC;IAED;;OAEG,CACO,oBAAoB,CAC1B,KAAY,EACZ,MAAmB,EACnB,YAAqB,EACrB,aAAsB,EACtB,QAAkB,EAAA;QAElB,IAAI,CAAC,GAAG,CAAA,CAAA,EAAI,MAAM,CAAC,IAAI,CAAA,EAAA,EAAK,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAC7D,MAAM,CACT,EAAE,CAAA;QAEH,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;YAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;YACjD,MAAM,SAAS,GACX,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CAC9C,KAAK,EACL,UAAU,EACV,IAAI,CACP,CAAA;YACL,CAAC,IAAI,CAAA,YAAA,EAAe,SAAS,CAAA,OAAA,EAAU,UAAU,CAAA,CAAA,CAAG,CAAA;QACxD,CAAC;QAED,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAA;QAEzD,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC,IAAI,CAAA,KAAA,EAAQ,MAAM,CAAC,YAAY,CAAA,CAAA,CAAG,CAAA;YACnC,IAAI,MAAM,CAAC,aAAa,KAAK,QAAQ,EAAE,CAAC;gBACpC,CAAC,IAAI,CAAA,UAAA,CAAY,CAAA;gBAEjB,qFAAqF;gBACrF,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,EAAE,CAAC,IAAI,WAAW,CAAA;YACpD,CAAC;QACL,CAAC,MAAM,CAAC;YACJ,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,EAAE,CAAC,IAAI,WAAW,CAAA;QACpD,CAAC;QAED,IACI,MAAM,CAAC,WAAW,KAAK,IAAI,IAC3B,MAAM,CAAC,kBAAkB,KAAK,WAAW,IACzC,CAAC,YAAY,EAEb,8FAA8F;QAC9F,CAAC,IAAI,gBAAgB,CAAA;QAEzB,IACI,MAAM,CAAC,OAAO,KAAK,SAAS,IAC5B,MAAM,CAAC,OAAO,KAAK,IAAI,IACvB,aAAa,EACf,CAAC;YACC,2FAA2F;YAC3F,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,MAAM,CAAC,IAAI,CACd,CAAA;YACL,CAAC,IAAI,CAAA,aAAA,EAAgB,WAAW,CAAA,UAAA,EAAa,MAAM,CAAC,OAAO,EAAE,CAAA;QACjE,CAAC;QAED,IACI,MAAM,CAAC,WAAW,IAClB,MAAM,CAAC,kBAAkB,KAAK,MAAM,IACpC,CAAC,MAAM,CAAC,OAAO,EACjB,CAAC;YACC,2FAA2F;YAC3F,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,MAAM,CAAC,IAAI,CACd,CAAA;YACL,CAAC,IAAI,CAAA,aAAA,EAAgB,WAAW,CAAA,2BAAA,CAA6B,CAAA;QACjE,CAAC;QACD,OAAO,CAAC,CAAA;IACZ,CAAC;IAEO,iBAAiB,CAAC,MAAmB,EAAA;QACzC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,CAAA,8BAAA,EAAiC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAA;QACnE,CAAC;QACD,OAAO,AACH,MAAM,CAAC,IAAI,GACX,OAAO,GACP,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAG,CAAD,EAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GACnD,GAAG,CACN,CAAA;IACL,CAAC;IAES,qBAAqB,CAAC,IAAY,EAAA;QACxC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;IACtE,CAAC;IAED;;OAEG,CACO,+BAA+B,CAAC,SAAyB,EAAA;QAC/D,OAAQ,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;YAAE,IAAI,EAAE,SAAS,CAAC,IAAW;QAAA,CAAE,CAAC,EAAE,CAAC;YACjE,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAA;YAChC,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAA;YACnC,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACzD,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAA;YAChC,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACzD,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAA;YACrC,KAAK,YAAY;gBACb,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAA;YACvC,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAA;YACjC,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAA;YACpC,KAAK,MAAM;gBACP,IACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EACrB,oCAAoC,EAC5C,CAAC;oBACC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;gBACtD,CAAC;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACvD,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACvD,KAAK,MAAM;gBACP,IACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EACrB,oCAAoC,EAC5C,CAAC;oBACC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAA;gBACjC,CAAC;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,SAAS;gBACV,IACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EACrB,oCAAoC,EAC5C,CAAC;oBACC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;gBACzD,CAAC;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAC1D,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAC1D,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAA;YAChC,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACtD,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAA;YACjC,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAA;YACrC,KAAK,WAAW;gBACZ,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAC3D,KAAK,gBAAgB;gBACjB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAChE,KAAK,eAAe;gBAChB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAA;YAC1C,KAAK,kBAAkB;gBACnB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAA;YAC7C,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAA;YACpC,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAA;YACnC,KAAK,WAAW;gBACZ,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAC3D,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAA;YAChC,KAAK,YAAY;gBACb,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAA;QAC3C,CAAC;IACL,CAAC;IAED;;;OAGG,CACH,qBAAqB,CAAC,SAAyB,EAAA;QAC3C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAA;QACzD,OAAQ,SAAS,EAAE,CAAC;YAChB,KAAK,kBAAkB;gBACnB,OAAO,eAAe,CAAC,gBAAgB,CAAA;YAC3C,KAAK,iBAAiB;gBAClB,OAAO,eAAe,CAAC,eAAe,CAAA;YAC1C,KAAK,cAAc;gBACf,OAAO,eAAe,CAAC,YAAY,CAAA;YAEvC,KAAK,gBAAgB,CAAC;YACtB;gBACI,OAAO,eAAe,CAAC,cAAc,CAAA;QAC7C,CAAC;IACL,CAAC;IAED;;OAEG,CACH,kBAAkB,CACd,WAA2B,EAC3B,OAAgB,EAAA;QAEhB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,uDAAA,CAAyD,CAC5D,CAAA;IACL,CAAC;CACJ;AAxiID,QAAA,oBAAA,GAAA,qBAwiIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1969, "column": 0}, "map": {"version":3,"file":"SqlServerDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqlserver/SqlServerDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { SqlServerQueryRunner } from \"./SqlServerQueryRunner\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { SqlServerConnectionOptions } from \"./SqlServerConnectionOptions\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { MssqlParameter } from \"./MssqlParameter\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { SqlServerConnectionCredentialsOptions } from \"./SqlServerConnectionCredentialsOptions\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TypeORMError } from \"../../error\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\nimport { FindOperator } from \"../../find-options/FindOperator\"\n\n/**\n * Organizes communication with SQL Server DBMS.\n */\nexport class SqlServerDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * SQL Server library.\n     */\n    mssql: any\n\n    /**\n     * Pool for master database.\n     */\n    master: any\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = []\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SqlServerConnectionOptions\n\n    /**\n     * Database name used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Schema name used to perform all write queries.\n     */\n    schema?: string\n\n    /**\n     * Schema that's used internally by SQL Server for object resolution.\n     *\n     * Because we never set this we have to track it in separately from the `schema` so\n     * we know when we have to specify the full schema or not.\n     *\n     * In most cases this will be `dbo`.\n     */\n    searchSchema?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"simple\" as const\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"bigint\",\n        \"bit\",\n        \"decimal\",\n        \"money\",\n        \"numeric\",\n        \"smallint\",\n        \"smallmoney\",\n        \"tinyint\",\n        \"float\",\n        \"real\",\n        \"date\",\n        \"datetime2\",\n        \"datetime\",\n        \"datetimeoffset\",\n        \"smalldatetime\",\n        \"time\",\n        \"char\",\n        \"varchar\",\n        \"text\",\n        \"nchar\",\n        \"nvarchar\",\n        \"ntext\",\n        \"binary\",\n        \"image\",\n        \"varbinary\",\n        \"hierarchyid\",\n        \"sql_variant\",\n        \"timestamp\",\n        \"uniqueidentifier\",\n        \"xml\",\n        \"geometry\",\n        \"geography\",\n        \"rowversion\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = []\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\"geometry\", \"geography\"]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"varchar\",\n        \"nchar\",\n        \"nvarchar\",\n        \"binary\",\n        \"varbinary\",\n    ]\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"numeric\",\n        \"time\",\n        \"datetime2\",\n        \"datetimeoffset\",\n    ]\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\"decimal\", \"numeric\"]\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime2\",\n        createDateDefault: \"getdate()\",\n        updateDate: \"datetime2\",\n        updateDateDefault: \"getdate()\",\n        deleteDate: \"datetime2\",\n        deleteDateNullable: true,\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationId: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"nvarchar(MAX)\" as any,\n        cacheResult: \"nvarchar(MAX)\" as any,\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"nvarchar(MAX)\" as any,\n    }\n\n    /**\n     * The prefix used for the parameters\n     */\n    parametersPrefix: string = \"@\"\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        char: { length: 1 },\n        nchar: { length: 1 },\n        varchar: { length: 255 },\n        nvarchar: { length: 255 },\n        binary: { length: 1 },\n        varbinary: { length: 1 },\n        decimal: { precision: 18, scale: 0 },\n        numeric: { precision: 18, scale: 0 },\n        time: { precision: 7 },\n        datetime2: { precision: 7 },\n        datetimeoffset: { precision: 7 },\n    }\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n        // todo: enable it for SQL Server - it's partially supported, but there are issues with generation of non-standard OUTPUT clause\n        writable: false,\n    }\n\n    /**\n     * Max length allowed by MSSQL Server for aliases (identifiers).\n     * @see https://docs.microsoft.com/en-us/sql/sql-server/maximum-capacity-specifications-for-sql-server\n     */\n    maxAliasLength = 128\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as SqlServerConnectionOptions\n        this.isReplicated = this.options.replication ? true : false\n\n        // load mssql package\n        this.loadDependencies()\n\n        this.database = DriverUtils.buildDriverOptions(\n            this.options.replication\n                ? this.options.replication.master\n                : this.options,\n        ).database\n        this.schema = DriverUtils.buildDriverOptions(this.options).schema\n\n        // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        // throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        if (this.options.replication) {\n            this.slaves = await Promise.all(\n                this.options.replication.slaves.map((slave) => {\n                    return this.createPool(this.options, slave)\n                }),\n            )\n            this.master = await this.createPool(\n                this.options,\n                this.options.replication.master,\n            )\n        } else {\n            this.master = await this.createPool(this.options, this.options)\n        }\n\n        if (!this.database || !this.searchSchema) {\n            const queryRunner = this.createQueryRunner(\"master\")\n\n            if (!this.database) {\n                this.database = await queryRunner.getCurrentDatabase()\n            }\n\n            if (!this.searchSchema) {\n                this.searchSchema = await queryRunner.getCurrentSchema()\n            }\n\n            await queryRunner.release()\n        }\n\n        if (!this.schema) {\n            this.schema = this.searchSchema\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"))\n\n        await this.closePool(this.master)\n        await Promise.all(this.slaves.map((slave) => this.closePool(slave)))\n        this.master = undefined\n        this.slaves = []\n    }\n\n    /**\n     * Closes connection pool.\n     */\n    protected async closePool(pool: any): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            pool.close((err: any) => (err ? fail(err) : ok()))\n        })\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SqlServerQueryRunner(this, mode)\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => nativeParameters[key],\n        )\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        const parameterIndexMap = new Map<string, number>()\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                if (parameterIndexMap.has(key)) {\n                    return this.parametersPrefix + parameterIndexMap.get(key)\n                }\n\n                const value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                }\n\n                escapedParameters.push(value)\n                parameterIndexMap.set(key, escapedParameters.length - 1)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(\n        tableName: string,\n        schema?: string,\n        database?: string,\n    ): string {\n        const tablePath = [tableName]\n\n        if (schema) {\n            tablePath.unshift(schema)\n        }\n\n        if (database) {\n            if (!schema) {\n                tablePath.unshift(\"\")\n            }\n\n            tablePath.unshift(database)\n        }\n\n        return tablePath.join(\".\")\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = this.schema\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name)\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        if (parts.length === 3) {\n            return {\n                database: parts[0] || driverDatabase,\n                schema: parts[1] || driverSchema,\n                tableName: parts[2],\n            }\n        } else if (parts.length === 2) {\n            return {\n                database: driverDatabase,\n                schema: parts[0],\n                tableName: parts[1],\n            }\n        } else {\n            return {\n                database: driverDatabase,\n                schema: driverSchema,\n                tableName: target,\n            }\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDate(value)\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToDate(value)\n        } else if (\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === \"smalldatetime\" ||\n            columnMetadata.type === Date\n        ) {\n            return DateUtils.mixedDateToDate(value, false, false)\n        } else if (\n            columnMetadata.type === \"datetime2\" ||\n            columnMetadata.type === \"datetimeoffset\"\n        ) {\n            return DateUtils.mixedDateToDate(value, false, true)\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value)\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date ||\n            columnMetadata.type === \"datetime2\" ||\n            columnMetadata.type === \"smalldatetime\" ||\n            columnMetadata.type === \"datetimeoffset\"\n        ) {\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\"\n        } else if (column.type === String) {\n            return \"nvarchar\"\n        } else if (column.type === Date) {\n            return \"datetime\"\n        } else if (column.type === Boolean) {\n            return \"bit\"\n        } else if ((column.type as any) === Buffer) {\n            return \"binary\"\n        } else if (column.type === \"uuid\") {\n            return \"uniqueidentifier\"\n        } else if (\n            column.type === \"simple-array\" ||\n            column.type === \"simple-json\"\n        ) {\n            return \"ntext\"\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\"\n        } else if (column.type === \"dec\") {\n            return \"decimal\"\n        } else if (column.type === \"double precision\") {\n            return \"float\"\n        } else if (column.type === \"rowversion\") {\n            return \"timestamp\" // the rowversion type's name in SQL server metadata is timestamp\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (typeof defaultValue === \"number\") {\n            return `${defaultValue}`\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            const value = defaultValue()\n            if (value.toUpperCase() === \"CURRENT_TIMESTAMP\") {\n                return \"getdate()\"\n            }\n            return value\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === undefined || defaultValue === null) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(\n            (uq) => uq.columns.length === 1 && uq.columns[0] === column,\n        )\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString()\n\n        if (\n            column.type === \"varchar\" ||\n            column.type === \"nvarchar\" ||\n            column.type === String\n        )\n            return \"255\"\n\n        return \"\"\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        // The Database Engine determines the data type of the computed column by applying the rules\n        // of data type precedence to the expressions specified in the formula.\n        if (column.asExpression) return \"\"\n\n        let type = column.type\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += `(${column.precision},${column.scale})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += `(${column.precision})`\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        if (!this.master) {\n            return Promise.reject(new TypeORMError(\"Driver not Connected\"))\n        }\n\n        return Promise.resolve(this.master)\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.slaves.length) return this.obtainMasterConnection()\n\n        const random = Math.floor(Math.random() * this.slaves.length)\n        return Promise.resolve(this.slaves[random])\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        if (!insertResult) return undefined\n\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key)\n            if (column) {\n                OrmUtils.mergeDeep(\n                    map,\n                    column.createValueMap(\n                        this.prepareHydratedValue(insertResult[key], column),\n                    ),\n                )\n            }\n            return map\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            const isColumnChanged =\n                tableColumn.name !== columnMetadata.databaseName ||\n                this.compareColumnType(tableColumn, columnMetadata) ||\n                this.compareColumnLength(tableColumn, columnMetadata) ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                tableColumn.isGenerated !== columnMetadata.isGenerated ||\n                (!tableColumn.isGenerated &&\n                    this.lowerDefaultValueIfNecessary(\n                        this.normalizeDefault(columnMetadata),\n                    ) !==\n                        this.lowerDefaultValueIfNecessary(\n                            tableColumn.default,\n                        )) || // we included check for generated here, because generated columns already can have default values\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(\n                        tableColumn.enum,\n                        columnMetadata.enum.map((val) => val + \"\"),\n                    ))\n\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //         this.compareColumnType(tableColumn, columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         columnMetadata.length,\n            //         this.compareColumnLength(tableColumn, columnMetadata),\n            //     )\n            //     console.log(\n            //         \"precision:\",\n            //         tableColumn.precision,\n            //         columnMetadata.precision,\n            //     )\n            //     console.log(\"scale:\", tableColumn.scale, columnMetadata.scale)\n            //     console.log(\n            //         \"isGenerated:\",\n            //         tableColumn.isGenerated,\n            //         columnMetadata.isGenerated,\n            //     )\n            //     console.log(\n            //         \"isGenerated 2:\",\n            //         !tableColumn.isGenerated &&\n            //             this.lowerDefaultValueIfNecessary(\n            //                 this.normalizeDefault(columnMetadata),\n            //             ) !==\n            //                 this.lowerDefaultValueIfNecessary(\n            //                     tableColumn.default,\n            //                 ),\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         tableColumn.asExpression,\n            //         columnMetadata.asExpression,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\"==========================================\")\n            // }\n\n            return isColumnChanged\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        if (\n            this.options.options &&\n            this.options.options.disableOutputReturning\n        ) {\n            return false\n        }\n        return true\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return this.parametersPrefix + index\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sql server's parameters needs to be wrapped into special object with type information about this value.\n     * This method wraps given value into MssqlParameter based on its column definition.\n     */\n    parametrizeValue(column: ColumnMetadata, value: any) {\n        // if its already MssqlParameter then simply return it\n        if (InstanceChecker.isMssqlParameter(value)) return value\n\n        const normalizedType = this.normalizeType({ type: column.type })\n        if (column.length) {\n            return new MssqlParameter(\n                value,\n                normalizedType as any,\n                column.length as any,\n            )\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            return new MssqlParameter(\n                value,\n                normalizedType as any,\n                column.precision,\n                column.scale,\n            )\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            return new MssqlParameter(\n                value,\n                normalizedType as any,\n                column.precision,\n            )\n        } else if (column.scale !== null && column.scale !== undefined) {\n            return new MssqlParameter(\n                value,\n                normalizedType as any,\n                column.scale,\n            )\n        }\n\n        return new MssqlParameter(value, normalizedType as any)\n    }\n\n    /**\n     * Recursively wraps values (including those inside FindOperators) into MssqlParameter instances,\n     * ensuring correct type metadata is passed to the SQL Server driver.\n     *\n     * - If the value is a FindOperator containing an array, all elements are individually parametrized.\n     * - If the value is a non-raw FindOperator, a transformation is applied to its internal value.\n     * - Otherwise, the value is passed directly to parametrizeValue for wrapping.\n     *\n     * This ensures SQL Server receives properly typed parameters for queries involving operators like\n     * In, MoreThan, Between, etc.\n     */\n    parametrizeValues(column: ColumnMetadata, value: any) {\n        if (value instanceof FindOperator) {\n            if (value.type !== \"raw\") {\n                value.transformValue({\n                    to: (v) => this.parametrizeValues(column, v),\n                    from: (v) => v,\n                })\n            }\n\n            return value\n        }\n\n        return this.parametrizeValue(column, value)\n    }\n\n    /**\n     * Sql server's parameters needs to be wrapped into special object with type information about this value.\n     * This method wraps all values of the given object into MssqlParameter based on their column definitions in the given table.\n     */\n    parametrizeMap(tablePath: string, map: ObjectLiteral): ObjectLiteral {\n        // find metadata for the given table\n        if (!this.connection.hasMetadata(tablePath))\n            // if no metadata found then we can't proceed because we don't have columns and their types\n            return map\n        const metadata = this.connection.getMetadata(tablePath)\n\n        return Object.keys(map).reduce((newMap, key) => {\n            const value = map[key]\n\n            // find column metadata\n            const column = metadata.findColumnWithDatabaseName(key)\n            if (!column)\n                // if we didn't find a column then we can't proceed because we don't have a column type\n                return value\n\n            newMap[key] = this.parametrizeValue(column, value)\n            return newMap\n        }, {} as ObjectLiteral)\n    }\n\n    buildTableVariableDeclaration(\n        identifier: string,\n        columns: ColumnMetadata[],\n    ): string {\n        const outputColumns = columns.map((column) => {\n            return `${this.escape(column.databaseName)} ${this.createFullType(\n                new TableColumn({\n                    name: column.databaseName,\n                    type: this.normalizeType(column),\n                    length: column.length,\n                    isNullable: column.isNullable,\n                    isArray: column.isArray,\n                }),\n            )}`\n        })\n\n        return `DECLARE ${identifier} TABLE (${outputColumns.join(\", \")})`\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const mssql = this.options.driver || PlatformTools.load(\"mssql\")\n            this.mssql = mssql\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\")\n        }\n    }\n\n    protected compareColumnType(\n        tableColumn: TableColumn,\n        columnMetadata: ColumnMetadata,\n    ): boolean {\n        // The Database Engine determines the data type of the computed column by applying the rules\n        // of data type precedence to the expressions specified in the formula.\n        if (columnMetadata.asExpression) return false\n\n        return tableColumn.type !== this.normalizeType(columnMetadata)\n    }\n\n    protected compareColumnLength(\n        tableColumn: TableColumn,\n        columnMetadata: ColumnMetadata,\n    ): boolean {\n        // The Database Engine determines the data type of the computed column by applying the rules\n        // of data type precedence to the expressions specified in the formula.\n        if (columnMetadata.asExpression) return false\n\n        return (\n            tableColumn.length.toUpperCase() !==\n            this.getColumnLength(columnMetadata).toUpperCase()\n        )\n    }\n\n    protected lowerDefaultValueIfNecessary(value: string | undefined) {\n        // SqlServer saves function calls in default value as lowercase https://github.com/typeorm/typeorm/issues/2733\n        if (!value) {\n            return value\n        }\n        return value\n            .split(`'`)\n            .map((v, i) => {\n                return i % 2 === 1 ? v : v.toLowerCase()\n            })\n            .join(`'`)\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected createPool(\n        options: SqlServerConnectionOptions,\n        credentials: SqlServerConnectionCredentialsOptions,\n    ): Promise<any> {\n        credentials = Object.assign(\n            {},\n            credentials,\n            DriverUtils.buildDriverOptions(credentials),\n        ) // todo: do it better way\n\n        // todo: credentials.domain is deprecation. remove it in future\n        const authentication = !credentials.domain\n            ? credentials.authentication\n            : {\n                  type: \"ntlm\",\n                  options: {\n                      domain: credentials.domain,\n                      userName: credentials.username,\n                      password: credentials.password,\n                  },\n              }\n        // build connection options for the driver\n        const connectionOptions = Object.assign(\n            {},\n            {\n                connectionTimeout: this.options.connectionTimeout,\n                requestTimeout: this.options.requestTimeout,\n                stream: this.options.stream,\n                pool: this.options.pool,\n                options: this.options.options,\n            },\n            {\n                server: credentials.host,\n                database: credentials.database,\n                port: credentials.port,\n                user: credentials.username,\n                password: credentials.password,\n                authentication: authentication,\n            },\n            options.extra || {},\n        )\n\n        // set default useUTC option if it hasn't been set\n        if (!connectionOptions.options) {\n            connectionOptions.options = { useUTC: false }\n        } else if (!connectionOptions.options.useUTC) {\n            Object.assign(connectionOptions.options, { useUTC: false })\n        }\n\n        // Match the next release of tedious for configuration options\n        // Also prevents warning messages.\n        Object.assign(connectionOptions.options, { enableArithAbort: true })\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            const pool = new this.mssql.ConnectionPool(connectionOptions)\n\n            const { logger } = this.connection\n\n            const poolErrorHandler =\n                (options.pool && options.pool.errorHandler) ||\n                ((error: any) =>\n                    logger.log(\"warn\", `MSSQL pool raised an error. ${error}`))\n            /**\n             * Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and\n             * cause the hosting app to crash.\n             */\n            pool.on(\"error\", poolErrorHandler)\n\n            const connection = pool.connect((err: any) => {\n                if (err) return fail(err)\n                ok(connection)\n            })\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}