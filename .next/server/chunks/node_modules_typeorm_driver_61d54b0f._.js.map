{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"file":"DriverUtils.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/driver/DriverUtils.ts"],"sourcesContent":["import { Driver } from \"./Driver\"\nimport { hash, shorten } from \"../util/StringUtils\"\nimport { VersionUtils } from \"../util/VersionUtils\"\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver: Driver): boolean {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type)\n    }\n\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver: Driver): boolean {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type)\n    }\n\n    static isReleaseVersionOrGreater(driver: Driver, version: string): boolean {\n        return VersionUtils.isGreaterOrEqual(driver.version, version)\n    }\n\n    static isPostgresFamily(driver: Driver): boolean {\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(\n            driver.options.type,\n        )\n    }\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as {\n                [key: string]: any\n            }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(\n                options.url,\n            ) as { [key: string]: any }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | undefined,\n        ...alias: string[]\n    ): string {\n        const joiner =\n            buildOptions && buildOptions.joiner ? buildOptions.joiner : \"_\"\n\n        const newAlias = alias.length === 1 ? alias[0] : alias.join(joiner)\n\n        if (\n            maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength\n        ) {\n            if (buildOptions && buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias)\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias\n                }\n            }\n\n            return hash(newAlias, { length: maxAliasLength })\n        }\n\n        return newAlias\n    }\n\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\n        ...alias: string[]\n    ) {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions)\n            buildOptions = { shorten: false, joiner: \"_\" }\n        } else {\n            buildOptions = Object.assign(\n                { shorten: false, joiner: \"_\" },\n                buildOptions,\n            )\n        }\n        return this.buildAlias(\n            { maxAliasLength } as Driver,\n            buildOptions,\n            ...alias,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n        const [host, port] = hostAndPort.split(\":\")\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n    }\n\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    private static parseMongoDBConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        let afterQuestionMark = \"\"\n        let host = undefined\n        let port = undefined\n        let hostReplicaSet = undefined\n        let replicaSet = undefined\n\n        const optionsObject: any = {}\n\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(\n                afterBase.indexOf(\"?\") + 1,\n                afterBase.length,\n            )\n\n            const optionsList = afterQuestionMark.split(\"&\")\n            let optionKey: string\n            let optionValue: string\n\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0]\n                optionValue = optionItem.split(\"=\")[1]\n                optionsObject[optionKey] = optionValue\n            })\n\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"]\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort\n        } else {\n            ;[host, port] = hostAndPort.split(\":\")\n        }\n\n        const connectionUrl: any = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value\n        }\n\n        return connectionUrl\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"file":"Query.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/driver/Query.ts"],"sourcesContent":["/**\n * This class stores query and its parameters\n */\nexport class Query {\n    readonly \"@instanceof\" = Symbol.for(\"Query\")\n\n    constructor(public query: string, public parameters?: any[]) {}\n}\n"],"names":[],"mappings":";;;;;AAAA;;GAEG,CACH,MAAa,KAAK;IAGd,YAAmB,KAAa,EAAS,UAAkB,CAAA;QAAxC,IAAA,CAAA,KAAK,GAAL,KAAK,CAAQ;QAAS,IAAA,CAAA,UAAU,GAAV,UAAU,CAAQ;QAFlD,IAAA,CAAA,cAAa,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAEkB,CAAC;CAClE;AAJD,QAAA,KAAA,GAAA,MAIC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"file":"SqlInMemory.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/driver/SqlInMemory.ts"],"sourcesContent":["import { Query } from \"./Query\"\n\n/**\n * This class stores up and down queries needed for migrations functionality.\n */\nexport class SqlInMemory {\n    upQueries: Query[] = []\n    downQueries: Query[] = []\n}\n"],"names":[],"mappings":";;;;;AAEA;;GAEG,CACH,MAAa,WAAW;IAAxB,aAAA;QACI,IAAA,CAAA,SAAS,GAAY,EAAE,CAAA;QACvB,IAAA,CAAA,WAAW,GAAY,EAAE,CAAA;IAC7B,CAAC;CAAA;AAHD,QAAA,WAAA,GAAA,YAGC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"file":"MetadataTableType.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/types/MetadataTableType.ts"],"sourcesContent":["export enum MetadataTableType {\n    VIEW = \"VIEW\",\n    MATERIALIZED_VIEW = \"MATERIALIZED_VIEW\",\n    GENERATED_COLUMN = \"GENERATED_COLUMN\",\n}\n"],"names":[],"mappings":";;;;;AAAA,IAAY,iBAIX;AAJD,CAAA,SAAY,iBAAiB;IACzB,iBAAA,CAAA,OAAA,GAAA,MAAa,CAAA;IACb,iBAAA,CAAA,oBAAA,GAAA,mBAAuC,CAAA;IACvC,iBAAA,CAAA,mBAAA,GAAA,kBAAqC,CAAA;AACzC,CAAC,EAJW,iBAAiB,IAAA,CAAA,QAAA,iBAAA,GAAjB,iBAAiB,GAAA,CAAA,CAAA,GAI5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"file":"DatabaseType.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/types/DatabaseType.ts"],"sourcesContent":["/**\n * Database type.\n */\nexport type DatabaseType =\n    | \"mysql\"\n    | \"postgres\"\n    | \"cockroachdb\"\n    | \"sap\"\n    | \"mariadb\"\n    | \"sqlite\"\n    | \"cordova\"\n    | \"react-native\"\n    | \"nativescript\"\n    | \"sqljs\"\n    | \"oracle\"\n    | \"mssql\"\n    | \"mongodb\"\n    | \"aurora-mysql\"\n    | \"aurora-postgres\"\n    | \"expo\"\n    | \"better-sqlite3\"\n    | \"capacitor\"\n    | \"spanner\"\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"file":"GeoJsonTypes.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/types/GeoJsonTypes.ts"],"sourcesContent":["/**\n * Position object.\n * https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.1\n */\nexport type Position = number[]\n\n/**\n * Point geometry object.\n * https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2\n */\nexport type Point = {\n    type: \"Point\"\n    coordinates: Position\n}\n\n/**\n * LineString geometry object.\n * https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4\n */\nexport type LineString = {\n    type: \"LineString\"\n    coordinates: Position[]\n}\n\n/**\n * Polygon geometry object.\n * https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6\n */\nexport type Polygon = {\n    type: \"Polygon\"\n    coordinates: Position[][]\n}\n\n/**\n * MultiPoint geometry object.\n *  https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.3\n */\nexport type MultiPoint = {\n    type: \"MultiPoint\"\n    coordinates: Position[]\n}\n\n/**\n * MultiLineString geometry object.\n * https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.5\n */\nexport type MultiLineString = {\n    type: \"MultiLineString\"\n    coordinates: Position[][]\n}\n\n/**\n * MultiPolygon geometry object.\n * https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.7\n */\nexport type MultiPolygon = {\n    type: \"MultiPolygon\"\n    coordinates: Position[][][]\n}\n\n/**\n * Geometry Collection\n * https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.8\n */\nexport type GeometryCollection = {\n    type: \"GeometryCollection\"\n    geometries: (\n        | Point\n        | LineString\n        | Polygon\n        | MultiPoint\n        | MultiLineString\n        | MultiPolygon\n    )[]\n}\n\n/**\n * Union of Geometry objects.\n */\nexport type Geometry =\n    | Point\n    | LineString\n    | Polygon\n    | MultiPoint\n    | MultiLineString\n    | MultiPolygon\n    | GeometryCollection\nexport type Geography = Geometry\n\n/**\n * A feature object which contains a geometry and associated properties.\n * https://datatracker.ietf.org/doc/html/rfc7946#section-3.2\n */\nexport type Feature = {\n    type: \"Feature\"\n    geometry: Geometry\n    id?: string | number\n    bbox?: number[]\n    properties: { [name: string]: any } | null\n}\n\n/**\n * A collection of feature objects.\n *  https://datatracker.ietf.org/doc/html/rfc7946#section-3.3\n */\nexport type FeatureCollection = {\n    type: \"FeatureCollection\"\n    bbox?: number[]\n    features: Feature[]\n}\n\n/**\n * Union of GeoJSON objects.\n */\nexport type GeoJSON = Geometry | Feature | FeatureCollection\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"file":"ReplicationMode.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/types/ReplicationMode.ts"],"sourcesContent":["export type ReplicationMode = \"master\" | \"slave\"\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"file":"MongoQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/mongodb/MongoQueryRunner.ts"],"sourcesContent":["import { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { View } from \"../../schema-builder/view/View\"\n// import {Connection} from \"../../connection/Connection\";\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { MongoEntityManager } from \"../../entity-manager/MongoEntityManager\"\nimport { SqlInMemory } from \"../SqlInMemory\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TypeORMError } from \"../../error\"\n\nimport {\n    BulkWriteResult,\n    AggregationCursor,\n    MongoClient,\n    Collection,\n    FindCursor,\n    Document,\n    AggregateOptions,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    Filter,\n    CountOptions,\n    CountDocumentsOptions,\n    IndexSpecification,\n    CreateIndexesOptions,\n    IndexDescription,\n    DeleteResult,\n    DeleteOptions,\n    CommandOperationOptions,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    UpdateFilter,\n    FindOneAndUpdateOptions,\n    RenameOptions,\n    ReplaceOptions,\n    UpdateResult,\n    CollStats,\n    CollStatsOptions,\n    ChangeStreamOptions,\n    ChangeStream,\n    UpdateOptions,\n    ListIndexesOptions,\n    ListIndexesCursor,\n    OptionalId,\n    InsertOneOptions,\n    InsertOneResult,\n    InsertManyResult,\n    UnorderedBulkOperation,\n    OrderedBulkOperation,\n    IndexInformationOptions,\n} from \"../../driver/mongodb/typings\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\n/**\n * Runs queries on a single MongoDB connection.\n */\nexport class MongoQueryRunner implements QueryRunner {\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: DataSource\n\n    /**\n     * Broadcaster used on this query runner to broadcast entity events.\n     */\n    broadcaster: Broadcaster\n\n    /**\n     * Entity manager working only with current query runner.\n     */\n    manager: MongoEntityManager\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     * Always false for mongodb since mongodb has a single query executor instance.\n     */\n    isReleased = false\n\n    /**\n     * Indicates if transaction is active in this query executor.\n     * Always false for mongodb since mongodb does not support transactions.\n     */\n    isTransactionActive = false\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {}\n\n    /**\n     * All synchronized tables in the database.\n     */\n    loadedTables: Table[]\n\n    /**\n     * All synchronized views in the database.\n     */\n    loadedViews: View[]\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    databaseConnection: MongoClient\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, databaseConnection: MongoClient) {\n        this.connection = connection\n        this.databaseConnection = databaseConnection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        // Do nothing\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        // Do nothing\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    cursor(collectionName: string, filter: Filter<Document>): FindCursor<any> {\n        return this.getCollection(collectionName).find(filter || {})\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate(\n        collectionName: string,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<any> {\n        return this.getCollection(collectionName).aggregate(\n            pipeline,\n            options || {},\n        )\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    async bulkWrite(\n        collectionName: string,\n        operations: AnyBulkWriteOperation<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        return await this.getCollection(collectionName).bulkWrite(\n            operations,\n            options || {},\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    async count(\n        collectionName: string,\n        filter: Filter<Document>,\n        options?: CountOptions,\n    ): Promise<number> {\n        return this.getCollection(collectionName).count(\n            filter || {},\n            options || {},\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    async countDocuments(\n        collectionName: string,\n        filter: Filter<Document>,\n        options?: CountDocumentsOptions,\n    ): Promise<any> {\n        return this.getCollection(collectionName).countDocuments(\n            filter || {},\n            options || {},\n        )\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    async createCollectionIndex(\n        collectionName: string,\n        indexSpec: IndexSpecification,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        return this.getCollection(collectionName).createIndex(\n            indexSpec,\n            options || {},\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    async createCollectionIndexes(\n        collectionName: string,\n        indexSpecs: IndexDescription[],\n    ): Promise<string[]> {\n        return this.getCollection(collectionName).createIndexes(indexSpecs)\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    async deleteMany(\n        collectionName: string,\n        filter: Filter<Document>,\n        options: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.getCollection(collectionName).deleteMany(\n            filter,\n            options || {},\n        )\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    async deleteOne(\n        collectionName: string,\n        filter: Filter<Document>,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.getCollection(collectionName).deleteOne(\n            filter,\n            options || {},\n        )\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    async distinct(\n        collectionName: string,\n        key: any,\n        filter: Filter<Document>,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.getCollection(collectionName).distinct(\n            key,\n            filter,\n            options || {},\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    async dropCollectionIndex(\n        collectionName: string,\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<Document> {\n        return this.getCollection(collectionName).dropIndex(\n            indexName,\n            options || {},\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    async dropCollectionIndexes(collectionName: string): Promise<Document> {\n        return this.getCollection(collectionName).dropIndexes()\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    async findOneAndDelete(\n        collectionName: string,\n        filter: Filter<Document>,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document | null> {\n        return this.getCollection(collectionName).findOneAndDelete(\n            filter,\n            options || {},\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    async findOneAndReplace(\n        collectionName: string,\n        filter: Filter<Document>,\n        replacement: Document,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document | null> {\n        return this.getCollection(collectionName).findOneAndReplace(\n            filter,\n            replacement,\n            options || {},\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    async findOneAndUpdate(\n        collectionName: string,\n        filter: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document | null> {\n        return this.getCollection(collectionName).findOneAndUpdate(\n            filter,\n            update,\n            options || {},\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    async collectionIndexes(collectionName: string): Promise<Document> {\n        return this.getCollection(collectionName).indexes()\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    async collectionIndexExists(\n        collectionName: string,\n        indexes: string | string[],\n    ): Promise<boolean> {\n        return this.getCollection(collectionName).indexExists(indexes)\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    async collectionIndexInformation(\n        collectionName: string,\n        options?: IndexInformationOptions,\n    ): Promise<any> {\n        return this.getCollection(collectionName).indexInformation(\n            options || {},\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(\n        collectionName: string,\n        options?: BulkWriteOptions,\n    ): OrderedBulkOperation {\n        return this.getCollection(collectionName).initializeOrderedBulkOp(\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(\n        collectionName: string,\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        return this.getCollection(collectionName).initializeUnorderedBulkOp(\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    async insertMany(\n        collectionName: string,\n        docs: OptionalId<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult> {\n        return this.getCollection(collectionName).insertMany(\n            docs,\n            options || {},\n        )\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    async insertOne(\n        collectionName: string,\n        doc: OptionalId<Document>,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        return this.getCollection(collectionName).insertOne(doc, options || {})\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    async isCapped(collectionName: string): Promise<boolean> {\n        return this.getCollection(collectionName).isCapped()\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(\n        collectionName: string,\n        options?: ListIndexesOptions,\n    ): ListIndexesCursor {\n        return this.getCollection(collectionName).listIndexes(options)\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    async rename(\n        collectionName: string,\n        newName: string,\n        options?: RenameOptions,\n    ): Promise<Collection<Document>> {\n        return this.getCollection(collectionName).rename(newName, options || {})\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    async replaceOne(\n        collectionName: string,\n        filter: Filter<Document>,\n        replacement: Document,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.getCollection(collectionName).replaceOne(\n            filter,\n            replacement,\n            options || {},\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    async stats(\n        collectionName: string,\n        options?: CollStatsOptions,\n    ): Promise<CollStats> {\n        return this.getCollection(collectionName).stats(options || {})\n    }\n\n    /**\n     * Watching new changes as stream.\n     */\n    watch(\n        collectionName: string,\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream {\n        return this.getCollection(collectionName).watch(pipeline, options)\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    async updateMany(\n        collectionName: string,\n        filter: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.getCollection(collectionName).updateMany(\n            filter,\n            update,\n            options || {},\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    async updateOne(\n        collectionName: string,\n        filter: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return await this.getCollection(collectionName).updateOne(\n            filter,\n            update,\n            options || {},\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods (from QueryRunner)\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes all collections from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(): Promise<void> {\n        await this.databaseConnection\n            .db(this.connection.driver.database!)\n            .dropDatabase()\n    }\n\n    /**\n     * For MongoDB database we don't create connection, because its single connection already created by a driver.\n     */\n    async connect(): Promise<any> {}\n\n    /**\n     * For MongoDB database we don't release connection, because its single connection.\n     */\n    async release(): Promise<void> {\n        // releasing connection are not supported by mongodb driver, so simply don't do anything here\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(): Promise<void> {\n        // transactions are not supported by mongodb driver, so simply don't do anything here\n    }\n\n    /**\n     * Commits transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        // transactions are not supported by mongodb driver, so simply don't do anything here\n    }\n\n    /**\n     * Rollbacks transaction.\n     */\n    async rollbackTransaction(): Promise<void> {\n        // transactions are not supported by mongodb driver, so simply don't do anything here\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new TypeORMError(\n            `Executing SQL query is not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Unsupported - Executing SQL query is not supported by MongoDB driver.\n     */\n    async sql(\n        strings: TemplateStringsArray,\n        ...values: unknown[]\n    ): Promise<any> {\n        throw new TypeORMError(\n            `Executing SQL query is not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        throw new TypeORMError(\n            `Stream is not supported by MongoDB driver. Use watch instead.`,\n        )\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of inserted object id.\n\n    async insert(collectionName: string, keyValues: ObjectLiteral): Promise<any> { // todo: fix any\n        const results = await this.databaseConnection\n            .collection(collectionName)\n            .insertOne(keyValues);\n        const generatedMap = this.connection.getMetadata(collectionName).objectIdColumn!.createValueMap(results.insertedId);\n        return {\n            result: results,\n            generatedMap: generatedMap\n        };\n    }*/\n\n    /**\n     * Updates rows that match given conditions in the given table.\n\n    async update(collectionName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<any> { // todo: fix any\n        await this.databaseConnection\n            .collection(collectionName)\n            .updateOne(conditions, valuesMap);\n    }*/\n\n    /**\n     * Deletes from the given table by a given conditions.\n\n    async delete(collectionName: string, conditions: ObjectLiteral|ObjectLiteral[]|string, maybeParameters?: any[]): Promise<any> { // todo: fix any\n        if (typeof conditions === \"string\")\n            throw new TypeORMError(`String condition is not supported by MongoDB driver.`);\n\n        await this.databaseConnection\n            .collection(collectionName)\n            .deleteOne(conditions);\n    }*/\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async getTable(collectionName: string): Promise<Table | undefined> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    async getTables(collectionNames: string[]): Promise<Table[]> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Loads given views's data from the database.\n     */\n    async getView(collectionName: string): Promise<View | undefined> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Loads all views (with given names) from the database and creates a Table from them.\n     */\n    async getViews(collectionNames: string[]): Promise<View[]> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    getReplicationMode(): ReplicationMode {\n        return \"master\"\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        throw new TypeORMError(\n            `Check database queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<undefined> {\n        throw new TypeORMError(\n            `Check database queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        throw new TypeORMError(\n            `Check schema queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<undefined> {\n        throw new TypeORMError(\n            `Check schema queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(collectionName: string): Promise<boolean> {\n        throw new TypeORMError(\n            `Check schema queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a database if it's not created.\n     */\n    async createDatabase(database: string): Promise<void> {\n        throw new TypeORMError(\n            `Database create queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        throw new TypeORMError(\n            `Database drop queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema create queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        throw new TypeORMError(\n            `Schema drop queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new table from the given table and columns inside it.\n     */\n    async createTable(table: Table): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableName: Table | string): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableOrName: Table | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table | string): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(collectionName: string, indexName: string): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema update queries are not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Drops collection.\n     */\n    async clearTable(collectionName: string): Promise<void> {\n        await this.databaseConnection\n            .db(this.connection.driver.database!)\n            .dropCollection(collectionName)\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        throw new TypeORMError(\n            `This operation is not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        throw new TypeORMError(\n            `This operation is not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Flushes all memorized sqls.\n     */\n    clearSqlMemory(): void {\n        throw new TypeORMError(\n            `This operation is not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): SqlInMemory {\n        throw new TypeORMError(\n            `This operation is not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql(): Promise<void> {\n        throw new TypeORMError(\n            `This operation is not supported by MongoDB driver.`,\n        )\n    }\n\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql(): Promise<void> {\n        throw new TypeORMError(\n            `This operation is not supported by MongoDB driver.`,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets collection from the database with a given name.\n     */\n    protected getCollection(collectionName: string): Collection<any> {\n        return this.databaseConnection\n            .db(this.connection.driver.database!)\n            .collection(collectionName)\n    }\n\n    /**\n     * Change table comment.\n     */\n    changeTableComment(\n        tableOrName: Table | string,\n        comment?: string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `mongodb driver does not support change table comment.`,\n        )\n    }\n}\n"],"names":[],"mappings":";;;;;AAWA,MAAA,wDAA0D;AAG1D,MAAA,iCAA0C;AA8C1C;;GAEG,CACH,MAAa,gBAAgB;IAsDzB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB,EAAE,kBAA+B,CAAA;QAtCnE;;;;WAIG,CACH,IAAA,CAAA,UAAU,GAAG,KAAK,CAAA;QAElB;;;WAGG,CACH,IAAA,CAAA,mBAAmB,GAAG,KAAK,CAAA;QAE3B;;;WAGG,CACH,IAAA,CAAA,IAAI,GAAG,CAAA,CAAE,CAAA;QAsBL,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAA;QAC5C,IAAI,CAAC,WAAW,GAAG,IAAI,cAAA,WAAW,CAAC,IAAI,CAAC,CAAA;IAC5C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,CAAC,eAAe,GAAA;IACjB,aAAa;IACjB,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,cAAc,GAAA;IAChB,aAAa;IACjB,CAAC;IAED;;OAEG,CACH,MAAM,CAAC,cAAsB,EAAE,MAAwB,EAAA;QACnD,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,CAAA,CAAE,CAAC,CAAA;IAChE,CAAC;IAED;;OAEG,CACH,SAAS,CACL,cAAsB,EACtB,QAAoB,EACpB,OAA0B,EAAA;QAE1B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAC/C,QAAQ,EACR,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,cAAsB,EACtB,UAA6C,EAC7C,OAA0B,EAAA;QAE1B,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CACrD,UAAU,EACV,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,KAAK,CACP,cAAsB,EACtB,MAAwB,EACxB,OAAsB,EAAA;QAEtB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAC3C,MAAM,IAAI,CAAA,CAAE,EACZ,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,cAAc,CAChB,cAAsB,EACtB,MAAwB,EACxB,OAA+B,EAAA;QAE/B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,cAAc,CACpD,MAAM,IAAI,CAAA,CAAE,EACZ,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,qBAAqB,CACvB,cAAsB,EACtB,SAA6B,EAC7B,OAA8B,EAAA;QAE9B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CACjD,SAAS,EACT,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,uBAAuB,CACzB,cAAsB,EACtB,UAA8B,EAAA;QAE9B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;IACvE,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,cAAsB,EACtB,MAAwB,EACxB,OAAsB,EAAA;QAEtB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAChD,MAAM,EACN,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,cAAsB,EACtB,MAAwB,EACxB,OAAuB,EAAA;QAEvB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAC/C,MAAM,EACN,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,QAAQ,CACV,cAAsB,EACtB,GAAQ,EACR,MAAwB,EACxB,OAAiC,EAAA;QAEjC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,QAAQ,CAC9C,GAAG,EACH,MAAM,EACN,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,mBAAmB,CACrB,cAAsB,EACtB,SAAiB,EACjB,OAAiC,EAAA;QAEjC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAC/C,SAAS,EACT,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,qBAAqB,CAAC,cAAsB,EAAA;QAC9C,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAA;IAC3D,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,CAClB,cAAsB,EACtB,MAAwB,EACxB,OAAiC,EAAA;QAEjC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CACtD,MAAM,EACN,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,iBAAiB,CACnB,cAAsB,EACtB,MAAwB,EACxB,WAAqB,EACrB,OAAkC,EAAA;QAElC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,iBAAiB,CACvD,MAAM,EACN,WAAW,EACX,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,CAClB,cAAsB,EACtB,MAAwB,EACxB,MAA8B,EAC9B,OAAiC,EAAA;QAEjC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CACtD,MAAM,EACN,MAAM,EACN,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,iBAAiB,CAAC,cAAsB,EAAA;QAC1C,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,CAAA;IACvD,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,qBAAqB,CACvB,cAAsB,EACtB,OAA0B,EAAA;QAE1B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;IAClE,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,0BAA0B,CAC5B,cAAsB,EACtB,OAAiC,EAAA;QAEjC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,gBAAgB,CACtD,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,uBAAuB,CACnB,cAAsB,EACtB,OAA0B,EAAA;QAE1B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,uBAAuB,CAC7D,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG,CACH,yBAAyB,CACrB,cAAsB,EACtB,OAA0B,EAAA;QAE1B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,yBAAyB,CAC/D,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,cAAsB,EACtB,IAA4B,EAC5B,OAA0B,EAAA;QAE1B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAChD,IAAI,EACJ,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,cAAsB,EACtB,GAAyB,EACzB,OAA0B,EAAA;QAE1B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC,CAAA;IAC3E,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,QAAQ,CAAC,cAAsB,EAAA;QACjC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,CAAA;IACxD,CAAC;IAED;;OAEG,CACH,qBAAqB,CACjB,cAAsB,EACtB,OAA4B,EAAA;QAE5B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;IAClE,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,MAAM,CACR,cAAsB,EACtB,OAAe,EACf,OAAuB,EAAA;QAEvB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,IAAI,CAAA,CAAE,CAAC,CAAA;IAC5E,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,cAAsB,EACtB,MAAwB,EACxB,WAAqB,EACrB,OAAwB,EAAA;QAExB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAChD,MAAM,EACN,WAAW,EACX,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,KAAK,CACP,cAAsB,EACtB,OAA0B,EAAA;QAE1B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,OAAO,IAAI,CAAA,CAAE,CAAC,CAAA;IAClE,CAAC;IAED;;OAEG,CACH,KAAK,CACD,cAAsB,EACtB,QAAqB,EACrB,OAA6B,EAAA;QAE7B,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;IACtE,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,cAAsB,EACtB,MAAwB,EACxB,MAA8B,EAC9B,OAAuB,EAAA;QAEvB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,UAAU,CAChD,MAAM,EACN,MAAM,EACN,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,cAAsB,EACtB,MAAwB,EACxB,MAA8B,EAC9B,OAAuB,EAAA;QAEvB,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,SAAS,CACrD,MAAM,EACN,MAAM,EACN,OAAO,IAAI,CAAA,CAAE,CAChB,CAAA;IACL,CAAC;IAED,4EAA4E;IAC5E,gDAAgD;IAChD,4EAA4E;IAE5E;;;;OAIG,CACH,KAAK,CAAC,aAAa,GAAA;QACf,MAAM,IAAI,CAAC,kBAAkB,CACxB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAS,CAAC,CACpC,YAAY,EAAE,CAAA;IACvB,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,OAAO,GAAA,CAAkB,CAAC;IAEhC;;OAEG,CACH,KAAK,CAAC,OAAO,GAAA;IACT,6FAA6F;IACjG,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,GAAA;IAClB,qFAAqF;IACzF,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,iBAAiB,GAAA;IACnB,qFAAqF;IACzF,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,mBAAmB,GAAA;IACrB,qFAAqF;IACzF,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,KAAa,EAAE,UAAkB,EAAA;QACnC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,uDAAA,CAAyD,CAC5D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,GAAG,CACL,OAA6B,EAC7B,GAAG,MAAiB,EAAA;QAEpB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,uDAAA,CAAyD,CAC5D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,MAAM,CACF,KAAa,EACb,UAAkB,EAClB,KAAgB,EAChB,OAAkB,EAAA;QAElB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,6DAAA,CAA+D,CAClE,CAAA;IACL,CAAC;IAED;;;;;;;;;;;;;OAaG,CAEH;;;;;;;OAOG,CAEH;;;;;;;;;;OAUG,CAEH;;OAEG,CACH,KAAK,CAAC,YAAY,GAAA;QACd,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;;OAGG,CACH,KAAK,CAAC,UAAU,CAAC,QAAiB,EAAA;QAC9B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,QAAQ,CAAC,cAAsB,EAAA;QACjC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CAAC,eAAyB,EAAA;QACrC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,OAAO,CAAC,cAAsB,EAAA;QAChC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,QAAQ,CAAC,eAAyB,EAAA;QACpC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED,kBAAkB,GAAA;QACd,OAAO,QAAQ,CAAA;IACnB,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CAAC,QAAgB,EAAA;QAC9B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,2DAAA,CAA6D,CAChE,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,kBAAkB,GAAA;QACpB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,2DAAA,CAA6D,CAChE,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CAAC,MAAc,EAAA;QAC1B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,yDAAA,CAA2D,CAC9D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,GAAA;QAClB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,yDAAA,CAA2D,CAC9D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,QAAQ,CAAC,cAAsB,EAAA;QACjC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,yDAAA,CAA2D,CAC9D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,UAAkB,EAAA;QAElB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,cAAc,CAAC,QAAgB,EAAA;QACjC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,4DAAA,CAA8D,CACjE,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,OAAiB,EAAA;QAClD,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,YAAY,CACd,UAAkB,EAClB,UAAoB,EAAA;QAEpB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CAAC,UAAkB,EAAE,OAAiB,EAAA;QAClD,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,wDAAA,CAA0D,CAC7D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CAAC,KAAY,EAAA;QAC1B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CAAC,SAAyB,EAAA;QACrC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CAAC,IAAU,EAAA;QACvB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,QAAQ,CAAC,MAAqB,EAAA;QAChC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,cAA8B,EAC9B,cAA8B,EAAA;QAE9B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,MAAmB,EAAA;QAEnB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,WAA2B,EAC3B,OAAsB,EAAA;QAEtB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,YAAY,CACd,WAA2B,EAC3B,oBAA0C,EAC1C,oBAA0C,EAAA;QAE1C,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,YAAY,CACd,WAA2B,EAC3B,oBAA0C,EAC1C,SAAsB,EAAA;QAEtB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,aAAa,CACf,WAA2B,EAC3B,cAAoE,EAAA;QAEpE,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CACZ,WAA2B,EAC3B,YAAkC,EAAA;QAElC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,OAAiC,EAAA;QAEjC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,CAClB,WAA2B,EAC3B,WAAqB,EAAA;QAErB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,iBAAiB,CACnB,WAA2B,EAC3B,OAAsB,EAAA;QAEtB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,cAAc,CAAC,WAA2B,EAAA;QAC5C,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,sBAAsB,CACxB,WAA2B,EAC3B,gBAA6B,EAAA;QAE7B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,uBAAuB,CACzB,WAA2B,EAC3B,iBAAgC,EAAA;QAEhC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,oBAAoB,CACtB,WAA2B,EAC3B,YAAkC,EAAA;QAElC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,qBAAqB,CACvB,WAA2B,EAC3B,iBAAgC,EAAA;QAEhC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,qBAAqB,CACvB,WAA2B,EAC3B,eAA2B,EAAA;QAE3B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,sBAAsB,CACxB,WAA2B,EAC3B,gBAA8B,EAAA;QAE9B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,mBAAmB,CACrB,WAA2B,EAC3B,WAAgC,EAAA;QAEhC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,oBAAoB,CACtB,WAA2B,EAC3B,gBAA8B,EAAA;QAE9B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,yBAAyB,CAC3B,WAA2B,EAC3B,mBAAmC,EAAA;QAEnC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,0BAA0B,CAC5B,WAA2B,EAC3B,oBAAsC,EAAA;QAEtC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,uBAAuB,CACzB,WAA2B,EAC3B,eAAwC,EAAA;QAExC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,wBAAwB,CAC1B,WAA2B,EAC3B,oBAAsC,EAAA;QAEtC,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,gBAAgB,CAClB,WAA2B,EAC3B,UAA2B,EAAA;QAE3B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,iBAAiB,CACnB,WAA2B,EAC3B,WAA8B,EAAA;QAE9B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,cAAc,CAChB,WAA2B,EAC3B,UAA2B,EAAA;QAE3B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,eAAe,CACjB,WAA2B,EAC3B,WAA8B,EAAA;QAE9B,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,KAAiB,EAAA;QAEjB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,aAAa,CACf,WAA2B,EAC3B,OAAqB,EAAA;QAErB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,SAAS,CAAC,cAAsB,EAAE,SAAiB,EAAA;QACrD,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,OAAqB,EAAA;QAErB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,0DAAA,CAA4D,CAC/D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,CAAC,cAAsB,EAAA;QACnC,MAAM,IAAI,CAAC,kBAAkB,CACxB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAS,CAAC,CACpC,cAAc,CAAC,cAAc,CAAC,CAAA;IACvC,CAAC;IAED;;;;OAIG,CACH,eAAe,GAAA;QACX,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,kDAAA,CAAoD,CACvD,CAAA;IACL,CAAC;IAED;;;;;OAKG,CACH,gBAAgB,GAAA;QACZ,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,kDAAA,CAAoD,CACvD,CAAA;IACL,CAAC;IAED;;OAEG,CACH,cAAc,GAAA;QACV,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,kDAAA,CAAoD,CACvD,CAAA;IACL,CAAC;IAED;;OAEG,CACH,YAAY,GAAA;QACR,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,kDAAA,CAAoD,CACvD,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,kBAAkB,GAAA;QACpB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,kDAAA,CAAoD,CACvD,CAAA;IACL,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,oBAAoB,GAAA;QACtB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,kDAAA,CAAoD,CACvD,CAAA;IACL,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG,CACO,aAAa,CAAC,cAAsB,EAAA;QAC1C,OAAO,IAAI,CAAC,kBAAkB,CACzB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAS,CAAC,CACpC,UAAU,CAAC,cAAc,CAAC,CAAA;IACnC,CAAC;IAED;;OAEG,CACH,kBAAkB,CACd,WAA2B,EAC3B,OAAgB,EAAA;QAEhB,MAAM,IAAI,QAAA,YAAY,CAClB,CAAA,qDAAA,CAAuD,CAC1D,CAAA;IACL,CAAC;CACJ;AA1sCD,QAAA,gBAAA,GAAA,iBA0sCC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 913, "column": 0}, "map": {"version":3,"file":"MongoDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/mongodb/MongoDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { MongoQueryRunner } from \"./MongoQueryRunner\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { MongoConnectionOptions } from \"./MongoConnectionOptions\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { MongoSchemaBuilder } from \"../../schema-builder/MongoSchemaBuilder\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { DataSourceOptions } from \"../../data-source/DataSourceOptions\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { TypeORMError } from \"../../error\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\n\n/**\n * Organizes communication with MongoDB.\n */\nexport class MongoDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Underlying mongodb library.\n     */\n    mongodb: any\n\n    /**\n     * Mongodb does not require to dynamically create query runner each time,\n     * because it does not have a regular connection pool as RDBMS systems have.\n     */\n    queryRunner?: MongoQueryRunner\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: MongoConnectionOptions\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = false\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"none\" as const\n\n    /**\n     * Mongodb does not need to have column types because they are not used in schema sync.\n     */\n    supportedDataTypes: ColumnType[] = []\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[]\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = []\n\n    /**\n     * Mongodb does not need to have a strong defined mapped column types because they are not used in schema sync.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"int\",\n        createDateDefault: \"\",\n        updateDate: \"int\",\n        updateDateDefault: \"\",\n        deleteDate: \"int\",\n        deleteDateNullable: true,\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationId: \"int\",\n        migrationName: \"int\",\n        migrationTimestamp: \"int\",\n        cacheId: \"int\",\n        cacheIdentifier: \"int\",\n        cacheTime: \"int\",\n        cacheDuration: \"int\",\n        cacheQuery: \"int\",\n        cacheResult: \"int\",\n        metadataType: \"int\",\n        metadataDatabase: \"int\",\n        metadataSchema: \"int\",\n        metadataTable: \"int\",\n        metadataName: \"int\",\n        metadataValue: \"int\",\n    }\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults\n\n    /**\n     * No documentation specifying a maximum length for identifiers could be found\n     * for MongoDB.\n     */\n    maxAliasLength?: number\n\n    cteCapabilities: CteCapabilities = {\n        enabled: false,\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Valid mongo connection options\n     * NOTE: Keep in sync with MongoConnectionOptions\n     */\n    protected validOptionNames: string[] = [\n        \"appName\",\n        \"authMechanism\",\n        \"authSource\",\n        \"autoEncryption\",\n        \"checkServerIdentity\",\n        \"compressors\",\n        \"connectTimeoutMS\",\n        \"directConnection\",\n        \"family\",\n        \"forceServerObjectId\",\n        \"ignoreUndefined\",\n        \"keepAlive\",\n        \"keepAliveInitialDelay\",\n        \"localThresholdMS\",\n        \"maxStalenessSeconds\",\n        \"minPoolSize\",\n        \"monitorCommands\",\n        \"noDelay\",\n        \"pkFactory\",\n        \"promoteBuffers\",\n        \"promoteLongs\",\n        \"promoteValues\",\n        \"raw\",\n        \"readConcern\",\n        \"readPreference\",\n        \"readPreferenceTags\",\n        \"replicaSet\",\n        \"retryWrites\",\n        \"serializeFunctions\",\n        \"socketTimeoutMS\",\n        \"ssl\",\n        \"sslCA\",\n        \"sslCRL\",\n        \"sslCert\",\n        \"sslKey\",\n        \"sslPass\",\n        \"sslValidate\",\n        \"tls\",\n        \"tlsAllowInvalidCertificates\",\n        \"tlsCAFile\",\n        \"tlsCertificateKeyFile\",\n        \"tlsCertificateKeyFilePassword\",\n        \"w\",\n        \"writeConcern\",\n        \"wtimeoutMS\",\n        // Undocumented deprecated options\n        // todo: remove next major version\n        \"appname\",\n        \"fsync\",\n        \"j\",\n        \"useNewUrlParser\",\n        \"useUnifiedTopology\",\n        \"wtimeout\",\n    ]\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: DataSource) {\n        this.options = connection.options as MongoConnectionOptions\n\n        // validate options to make sure everything is correct and driver will be able to establish connection\n        this.validateOptions(connection.options)\n\n        // load mongodb package\n        this.loadDependencies()\n\n        this.database = DriverUtils.buildMongoDBDriverOptions(\n            this.options,\n        ).database\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        const options = DriverUtils.buildMongoDBDriverOptions(this.options)\n\n        const client = await this.mongodb.MongoClient.connect(\n            this.buildConnectionUrl(options),\n            this.buildConnectionOptions(options),\n        )\n\n        this.queryRunner = new MongoQueryRunner(this.connection, client)\n        ObjectUtils.assign(this.queryRunner, {\n            manager: this.connection.manager,\n        })\n    }\n\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.queryRunner) throw new ConnectionIsNotSetError(\"mongodb\")\n        // const handler = (err: any) => (err ? fail(err) : ok())\n        this.queryRunner.databaseConnection.close()\n        this.queryRunner = undefined\n        // return ok()\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new MongoSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return this.queryRunner!\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        throw new TypeORMError(\n            `This operation is not supported by Mongodb driver.`,\n        )\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return columnName\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(\n        tableName: string,\n        schema?: string,\n        database?: string,\n    ): string {\n        return tableName\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { tableName: string; schema?: string; database?: string } {\n        if (InstanceChecker.isEntityMetadata(target)) {\n            return {\n                tableName: target.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            return {\n                tableName: target.name,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            return {\n                tableName: target.referencedTableName,\n            }\n        }\n\n        return {\n            tableName: target,\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        throw new TypeORMError(\n            `MongoDB is schema-less, not supported by this driver.`,\n        )\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        throw new TypeORMError(\n            `MongoDB is schema-less, not supported by this driver.`,\n        )\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        throw new TypeORMError(\n            `MongoDB is schema-less, not supported by this driver.`,\n        )\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata): string {\n        throw new TypeORMError(\n            `MongoDB is schema-less, not supported by this driver.`,\n        )\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    createFullType(column: TableColumn): string {\n        throw new TypeORMError(\n            `MongoDB is schema-less, not supported by this driver.`,\n        )\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertedId: any) {\n        return metadata.objectIdColumn!.createValueMap(insertedId)\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        throw new TypeORMError(\n            `MongoDB is schema-less, not supported by this driver.`,\n        )\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"\"\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validate driver options to make sure everything is correct and driver will be able to establish connection.\n     */\n    protected validateOptions(options: DataSourceOptions) {\n        // todo: fix\n        // if (!options.url) {\n        //     if (!options.database)\n        //         throw new DriverOptionNotSetError(\"database\");\n        // }\n    }\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): any {\n        try {\n            const mongodb = this.options.driver || PlatformTools.load(\"mongodb\")\n            this.mongodb = mongodb\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"MongoDB\", \"mongodb\")\n        }\n    }\n\n    /**\n     * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.\n     */\n    protected buildConnectionUrl(options: { [key: string]: any }): string {\n        const schemaUrlPart = options.type.toLowerCase()\n        const credentialsUrlPart =\n            options.username && options.password\n                ? `${encodeURIComponent(options.username)}:${encodeURIComponent(\n                      options.password,\n                  )}@`\n                : \"\"\n\n        const portUrlPart =\n            schemaUrlPart === \"mongodb+srv\" ? \"\" : `:${options.port || \"27017\"}`\n\n        let connectionString: string\n        if (options.replicaSet) {\n            connectionString = `${schemaUrlPart}://${credentialsUrlPart}${\n                options.hostReplicaSet ||\n                options.host + portUrlPart ||\n                \"127.0.0.1\" + portUrlPart\n            }/${options.database || \"\"}`\n        } else {\n            connectionString = `${schemaUrlPart}://${credentialsUrlPart}${\n                options.host || \"127.0.0.1\"\n            }${portUrlPart}/${options.database || \"\"}`\n        }\n\n        return connectionString\n    }\n\n    /**\n     * Build connection options from MongoConnectionOptions\n     */\n    protected buildConnectionOptions(options: { [key: string]: any }): any {\n        const mongoOptions: any = {}\n\n        for (const optionName of this.validOptionNames) {\n            if (optionName in options) {\n                mongoOptions[optionName] = options[optionName]\n            }\n        }\n\n        mongoOptions.driverInfo = {\n            name: \"TypeORM\",\n        }\n\n        if (\"poolSize\" in options) {\n            mongoOptions[\"maxPoolSize\"] = options[\"poolSize\"]\n        }\n\n        Object.assign(mongoOptions, options.extra)\n\n        return mongoOptions\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1275, "column": 0}, "map": {"version":3,"file":"bson.typings.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/mongodb/bson.typings.ts"],"sourcesContent":["/**\n * A class representation of the BSON Binary type.\n * @public\n * @category BSONType\n */\nexport declare class Binary extends BSONValue {\n    get _bsontype(): \"Binary\"\n    /* Excluded from this release type: BSON_BINARY_SUBTYPE_DEFAULT */\n    /** Initial buffer default size */\n    static readonly BUFFER_SIZE = 256\n    /** Default BSON type */\n    static readonly SUBTYPE_DEFAULT = 0\n    /** Function BSON type */\n    static readonly SUBTYPE_FUNCTION = 1\n    /** Byte Array BSON type */\n    static readonly SUBTYPE_BYTE_ARRAY = 2\n    /** Deprecated UUID BSON type @deprecated Please use SUBTYPE_UUID */\n    static readonly SUBTYPE_UUID_OLD = 3\n    /** UUID BSON type */\n    static readonly SUBTYPE_UUID = 4\n    /** MD5 BSON type */\n    static readonly SUBTYPE_MD5 = 5\n    /** Encrypted BSON type */\n    static readonly SUBTYPE_ENCRYPTED = 6\n    /** Column BSON type */\n    static readonly SUBTYPE_COLUMN = 7\n    /** User BSON type */\n    static readonly SUBTYPE_USER_DEFINED = 128\n    buffer: Uint8Array\n    sub_type: number\n    position: number\n    /**\n     * Create a new Binary instance.\n     *\n     * This constructor can accept a string as its first argument. In this case,\n     * this string will be encoded using ISO-8859-1, **not** using UTF-8.\n     * This is almost certainly not what you want. Use `new Binary(Buffer.from(string))`\n     * instead to convert the string to a Buffer using UTF-8 first.\n     *\n     * @param buffer - a buffer object containing the binary data.\n     * @param subType - the option binary type.\n     */\n    constructor(buffer?: string | BinarySequence, subType?: number)\n    /**\n     * Updates this binary with byte_value.\n     *\n     * @param byteValue - a single byte we wish to write.\n     */\n    put(byteValue: string | number | Uint8Array | number[]): void\n    /**\n     * Writes a buffer or string to the binary.\n     *\n     * @param sequence - a string or buffer to be written to the Binary BSON object.\n     * @param offset - specify the binary of where to write the content.\n     */\n    write(sequence: string | BinarySequence, offset: number): void\n    /**\n     * Reads **length** bytes starting at **position**.\n     *\n     * @param position - read from the given position in the Binary.\n     * @param length - the number of bytes to read.\n     */\n    read(position: number, length: number): BinarySequence\n    /**\n     * Returns the value of this binary as a string.\n     * @param asRaw - Will skip converting to a string\n     * @remarks\n     * This is handy when calling this function conditionally for some key value pairs and not others\n     */\n    value(asRaw?: boolean): string | BinarySequence\n    /** the length of the binary sequence */\n    length(): number\n    toJSON(): string\n    toString(encoding?: \"hex\" | \"base64\" | \"utf8\" | \"utf-8\"): string\n    /* Excluded from this release type: toExtendedJSON */\n    toUUID(): UUID\n    /** Creates an Binary instance from a hex digit string */\n    static createFromHexString(hex: string, subType?: number): Binary\n    /** Creates an Binary instance from a base64 string */\n    static createFromBase64(base64: string, subType?: number): Binary\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface BinaryExtended {\n    $binary: {\n        subType: string\n        base64: string\n    }\n}\n\n/** @public */\nexport declare interface BinaryExtendedLegacy {\n    $type: string\n    $binary: string\n}\n\n/** @public */\nexport declare type BinarySequence = Uint8Array | number[]\n\ndeclare namespace BSON {\n    export {\n        setInternalBufferSize,\n        serialize,\n        serializeWithBufferAndIndex,\n        deserialize,\n        calculateObjectSize,\n        deserializeStream,\n        UUIDExtended,\n        BinaryExtended,\n        BinaryExtendedLegacy,\n        BinarySequence,\n        CodeExtended,\n        DBRefLike,\n        Decimal128Extended,\n        DoubleExtended,\n        EJSONOptions,\n        Int32Extended,\n        LongExtended,\n        MaxKeyExtended,\n        MinKeyExtended,\n        ObjectIdExtended,\n        ObjectIdLike,\n        BSONRegExpExtended,\n        BSONRegExpExtendedLegacy,\n        BSONSymbolExtended,\n        LongWithoutOverrides,\n        TimestampExtended,\n        TimestampOverrides,\n        LongWithoutOverridesClass,\n        SerializeOptions,\n        DeserializeOptions,\n        Code,\n        BSONSymbol,\n        DBRef,\n        Binary,\n        ObjectId,\n        UUID,\n        Long,\n        Timestamp,\n        Double,\n        Int32,\n        MinKey,\n        MaxKey,\n        BSONRegExp,\n        Decimal128,\n        BSONValue,\n        BSONError,\n        BSONVersionError,\n        BSONRuntimeError,\n        BSONType,\n        EJSON,\n        Document,\n        CalculateObjectSizeOptions,\n    }\n}\nexport { BSON }\n\n/**\n * @public\n * @category Error\n *\n * `BSONError` objects are thrown when BSON ecounters an error.\n *\n * This is the parent class for all the other errors thrown by this library.\n */\nexport declare class BSONError extends Error {\n    /* Excluded from this release type: bsonError */\n    get name(): string\n    constructor(message: string)\n    /**\n     * @public\n     *\n     * All errors thrown from the BSON library inherit from `BSONError`.\n     * This method can assist with determining if an error originates from the BSON library\n     * even if it does not pass an `instanceof` check against this class' constructor.\n     *\n     * @param value - any javascript value that needs type checking\n     */\n    static isBSONError(value: unknown): value is BSONError\n}\n\n/**\n * A class representation of the BSON RegExp type.\n * @public\n * @category BSONType\n */\nexport declare class BSONRegExp extends BSONValue {\n    get _bsontype(): \"BSONRegExp\"\n    pattern: string\n    options: string\n    /**\n     * @param pattern - The regular expression pattern to match\n     * @param options - The regular expression options\n     */\n    constructor(pattern: string, options?: string)\n    static parseOptions(options?: string): string\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface BSONRegExpExtended {\n    $regularExpression: {\n        pattern: string\n        options: string\n    }\n}\n\n/** @public */\nexport declare interface BSONRegExpExtendedLegacy {\n    $regex: string | BSONRegExp\n    $options: string\n}\n\n/**\n * @public\n * @category Error\n *\n * An error generated when BSON functions encounter an unexpected input\n * or reaches an unexpected/invalid internal state\n *\n */\nexport declare class BSONRuntimeError extends BSONError {\n    get name(): \"BSONRuntimeError\"\n    constructor(message: string)\n}\n\n/**\n * A class representation of the BSON Symbol type.\n * @public\n * @category BSONType\n */\nexport declare class BSONSymbol extends BSONValue {\n    get _bsontype(): \"BSONSymbol\"\n    value: string\n    /**\n     * @param value - the string representing the symbol.\n     */\n    constructor(value: string)\n    /** Access the wrapped string value. */\n    valueOf(): string\n    toString(): string\n    inspect(): string\n    toJSON(): string\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n}\n\n/** @public */\nexport declare interface BSONSymbolExtended {\n    $symbol: string\n}\n\n/** @public */\nexport declare const BSONType: Readonly<{\n    readonly double: 1\n    readonly string: 2\n    readonly object: 3\n    readonly array: 4\n    readonly binData: 5\n    readonly undefined: 6\n    readonly objectId: 7\n    readonly bool: 8\n    readonly date: 9\n    readonly null: 10\n    readonly regex: 11\n    readonly dbPointer: 12\n    readonly javascript: 13\n    readonly symbol: 14\n    readonly javascriptWithScope: 15\n    readonly int: 16\n    readonly timestamp: 17\n    readonly long: 18\n    readonly decimal: 19\n    readonly minKey: -1\n    readonly maxKey: 127\n}>\n\n/** @public */\nexport declare type BSONType = (typeof BSONType)[keyof typeof BSONType]\n\n/** @public */\nexport declare abstract class BSONValue {\n    /** @public */\n    abstract get _bsontype(): string\n    /** @public */\n    abstract inspect(): string\n    /* Excluded from this release type: toExtendedJSON */\n}\n\n/**\n * @public\n * @category Error\n */\nexport declare class BSONVersionError extends BSONError {\n    get name(): \"BSONVersionError\"\n    constructor()\n}\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param object - the Javascript object to calculate the BSON byte size for\n * @returns size of BSON object in bytes\n * @public\n */\nexport declare function calculateObjectSize(\n    object: Document,\n    options?: CalculateObjectSizeOptions,\n): number\n\n/** @public */\nexport declare type CalculateObjectSizeOptions = Pick<\n    SerializeOptions,\n    \"serializeFunctions\" | \"ignoreUndefined\"\n>\n\n/**\n * A class representation of the BSON Code type.\n * @public\n * @category BSONType\n */\nexport declare class Code extends BSONValue {\n    get _bsontype(): \"Code\"\n    code: string\n    scope: Document | null\n    /**\n     * @param code - a string or function.\n     * @param scope - an optional scope for the function.\n     */\n    constructor(code: string | Function, scope?: Document | null)\n    toJSON(): {\n        code: string\n        scope?: Document\n    }\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface CodeExtended {\n    $code: string\n    $scope?: Document\n}\n\n/**\n * A class representation of the BSON DBRef type.\n * @public\n * @category BSONType\n */\nexport declare class DBRef extends BSONValue {\n    get _bsontype(): \"DBRef\"\n    collection: string\n    oid: ObjectId\n    db?: string\n    fields: Document\n    /**\n     * @param collection - the collection name.\n     * @param oid - the reference ObjectId.\n     * @param db - optional db name, if omitted the reference is local to the current db.\n     */\n    constructor(\n        collection: string,\n        oid: ObjectId,\n        db?: string,\n        fields?: Document,\n    )\n    /* Excluded from this release type: namespace */\n    /* Excluded from this release type: namespace */\n    toJSON(): DBRefLike & Document\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface DBRefLike {\n    $ref: string\n    $id: ObjectId\n    $db?: string\n}\n\n/**\n * A class representation of the BSON Decimal128 type.\n * @public\n * @category BSONType\n */\nexport declare class Decimal128 extends BSONValue {\n    get _bsontype(): \"Decimal128\"\n    readonly bytes: Uint8Array\n    /**\n     * @param bytes - a buffer containing the raw Decimal128 bytes in little endian order,\n     *                or a string representation as returned by .toString()\n     */\n    constructor(bytes: Uint8Array | string)\n    /**\n     * Create a Decimal128 instance from a string representation\n     *\n     * @param representation - a numeric string representation.\n     */\n    static fromString(representation: string): Decimal128\n    /** Create a string representation of the raw Decimal128 value */\n    toString(): string\n    toJSON(): Decimal128Extended\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface Decimal128Extended {\n    $numberDecimal: string\n}\n\n/**\n * Deserialize data as BSON.\n *\n * @param buffer - the buffer containing the serialized set of BSON documents.\n * @returns returns the deserialized Javascript Object.\n * @public\n */\nexport declare function deserialize(\n    buffer: Uint8Array,\n    options?: DeserializeOptions,\n): Document\n\n/** @public */\nexport declare interface DeserializeOptions {\n    /** when deserializing a Long will return as a BigInt. */\n    useBigInt64?: boolean\n    /** when deserializing a Long will fit it into a Number if it's smaller than 53 bits. */\n    promoteLongs?: boolean\n    /** when deserializing a Binary will return it as a node.js Buffer instance. */\n    promoteBuffers?: boolean\n    /** when deserializing will promote BSON values to their Node.js closest equivalent types. */\n    promoteValues?: boolean\n    /** allow to specify if there what fields we wish to return as unserialized raw buffer. */\n    fieldsAsRaw?: Document\n    /** return BSON regular expressions as BSONRegExp instances. */\n    bsonRegExp?: boolean\n    /** allows the buffer to be larger than the parsed BSON object. */\n    allowObjectSmallerThanBufferSize?: boolean\n    /** Offset into buffer to begin reading document from */\n    index?: number\n    raw?: boolean\n    /** Allows for opt-out utf-8 validation for all keys or\n     * specified keys. Must be all true or all false.\n     *\n     * @example\n     * ```js\n     * // disables validation on all keys\n     *  validation: { utf8: false }\n     *\n     * // enables validation only on specified keys a, b, and c\n     *  validation: { utf8: { a: true, b: true, c: true } }\n     *\n     *  // disables validation only on specified keys a, b\n     *  validation: { utf8: { a: false, b: false } }\n     * ```\n     */\n    validation?: {\n        utf8: boolean | Record<string, true> | Record<string, false>\n    }\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param data - the buffer containing the serialized set of BSON documents.\n * @param startIndex - the start index in the data Buffer where the deserialization is to start.\n * @param numberOfDocuments - number of documents to deserialize.\n * @param documents - an array where to store the deserialized documents.\n * @param docStartIndex - the index in the documents array from where to start inserting documents.\n * @param options - additional options used for the deserialization.\n * @returns next index in the buffer after deserialization **x** numbers of documents.\n * @public\n */\nexport declare function deserializeStream(\n    data: Uint8Array | ArrayBuffer,\n    startIndex: number,\n    numberOfDocuments: number,\n    documents: Document[],\n    docStartIndex: number,\n    options: DeserializeOptions,\n): number\n\n/** @public */\nexport declare interface Document {\n    [key: string]: any\n}\n\n/**\n * A class representation of the BSON Double type.\n * @public\n * @category BSONType\n */\nexport declare class Double extends BSONValue {\n    get _bsontype(): \"Double\"\n    value: number\n    /**\n     * Create a Double type\n     *\n     * @param value - the number we want to represent as a double.\n     */\n    constructor(value: number)\n    /**\n     * Access the number value.\n     *\n     * @returns returns the wrapped double number.\n     */\n    valueOf(): number\n    toJSON(): number\n    toString(radix?: number): string\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface DoubleExtended {\n    $numberDouble: string\n}\n\n/** @public */\nexport declare const EJSON: {\n    parse: typeof parse\n    stringify: typeof stringify\n    serialize: typeof EJSONserialize\n    deserialize: typeof EJSONdeserialize\n}\n\n/**\n * Deserializes an Extended JSON object into a plain JavaScript object with native/BSON types\n *\n * @param ejson - The Extended JSON object to deserialize\n * @param options - Optional settings passed to the parse method\n */\ndeclare function EJSONdeserialize(ejson: Document, options?: EJSONOptions): any\n\n/** @public */\nexport declare type EJSONOptions = {\n    /** Output using the Extended JSON v1 spec */\n    legacy?: boolean\n    /** Enable Extended JSON's `relaxed` mode, which attempts to return native JS types where possible, rather than BSON types */\n    relaxed?: boolean\n    /** Enable native bigint support */\n    useBigInt64?: boolean\n}\n\n/**\n * Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.\n *\n * @param value - The object to serialize\n * @param options - Optional settings passed to the `stringify` function\n */\ndeclare function EJSONserialize(value: any, options?: EJSONOptions): Document\n\n/**\n * A class representation of a BSON Int32 type.\n * @public\n * @category BSONType\n */\nexport declare class Int32 extends BSONValue {\n    get _bsontype(): \"Int32\"\n    value: number\n    /**\n     * Create an Int32 type\n     *\n     * @param value - the number we want to represent as an int32.\n     */\n    constructor(value: number | string)\n    /**\n     * Access the number value.\n     *\n     * @returns returns the wrapped int32 number.\n     */\n    valueOf(): number\n    toString(radix?: number): string\n    toJSON(): number\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface Int32Extended {\n    $numberInt: string\n}\n\ndeclare const kId: unique symbol\n\n/**\n * A class representing a 64-bit integer\n * @public\n * @category BSONType\n * @remarks\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16 bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n * Common constant values ZERO, ONE, NEG_ONE, etc. are found as static properties on this class.\n */\nexport declare class Long extends BSONValue {\n    get _bsontype(): \"Long\"\n    /** An indicator used to reliably determine if an object is a Long or not. */\n    get __isLong__(): boolean\n    /**\n     * The high 32 bits as a signed value.\n     */\n    high: number\n    /**\n     * The low 32 bits as a signed value.\n     */\n    low: number\n    /**\n     * Whether unsigned or not.\n     */\n    unsigned: boolean\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     *\n     * Acceptable signatures are:\n     * - Long(low, high, unsigned?)\n     * - Long(bigint, unsigned?)\n     * - Long(string, unsigned?)\n     *\n     * @param low - The low (signed) 32 bits of the long\n     * @param high - The high (signed) 32 bits of the long\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     */\n    constructor(\n        low?: number | bigint | string,\n        high?: number | boolean,\n        unsigned?: boolean,\n    )\n    static TWO_PWR_24: Long\n    /** Maximum unsigned value. */\n    static MAX_UNSIGNED_VALUE: Long\n    /** Signed zero */\n    static ZERO: Long\n    /** Unsigned zero. */\n    static UZERO: Long\n    /** Signed one. */\n    static ONE: Long\n    /** Unsigned one. */\n    static UONE: Long\n    /** Signed negative one. */\n    static NEG_ONE: Long\n    /** Maximum signed value. */\n    static MAX_VALUE: Long\n    /** Minimum signed value. */\n    static MIN_VALUE: Long\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits.\n     * Each is assumed to use 32 bits.\n     * @param lowBits - The low 32 bits\n     * @param highBits - The high 32 bits\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromBits(lowBits: number, highBits: number, unsigned?: boolean): Long\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @param value - The 32 bit integer in question\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromInt(value: number, unsigned?: boolean): Long\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @param value - The number in question\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromNumber(value: number, unsigned?: boolean): Long\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @param value - The number in question\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromBigInt(value: bigint, unsigned?: boolean): Long\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @param str - The textual representation of the Long\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @param radix - The radix in which the text is written (2-36), defaults to 10\n     * @returns The corresponding Long value\n     */\n    static fromString(str: string, unsigned?: boolean, radix?: number): Long\n    /**\n     * Creates a Long from its byte representation.\n     * @param bytes - Byte representation\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @param le - Whether little or big endian, defaults to big endian\n     * @returns The corresponding Long value\n     */\n    static fromBytes(bytes: number[], unsigned?: boolean, le?: boolean): Long\n    /**\n     * Creates a Long from its little endian byte representation.\n     * @param bytes - Little endian byte representation\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromBytesLE(bytes: number[], unsigned?: boolean): Long\n    /**\n     * Creates a Long from its big endian byte representation.\n     * @param bytes - Big endian byte representation\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromBytesBE(bytes: number[], unsigned?: boolean): Long\n    /**\n     * Tests if the specified object is a Long.\n     */\n    static isLong(value: unknown): value is Long\n    /**\n     * Converts the specified value to a Long.\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     */\n    static fromValue(\n        val:\n            | number\n            | string\n            | {\n                  low: number\n                  high: number\n                  unsigned?: boolean\n              },\n        unsigned?: boolean,\n    ): Long\n    /** Returns the sum of this and the specified Long. */\n    add(addend: string | number | Long | Timestamp): Long\n    /**\n     * Returns the sum of this and the specified Long.\n     * @returns Sum\n     */\n    and(other: string | number | Long | Timestamp): Long\n    /**\n     * Compares this Long's value with the specified's.\n     * @returns 0 if they are the same, 1 if the this is greater and -1 if the given one is greater\n     */\n    compare(other: string | number | Long | Timestamp): 0 | 1 | -1\n    /** This is an alias of {@link Long.compare} */\n    comp(other: string | number | Long | Timestamp): 0 | 1 | -1\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or unsigned if this Long is unsigned.\n     * @returns Quotient\n     */\n    divide(divisor: string | number | Long | Timestamp): Long\n    /**This is an alias of {@link Long.divide} */\n    div(divisor: string | number | Long | Timestamp): Long\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @param other - Other value\n     */\n    equals(other: string | number | Long | Timestamp): boolean\n    /** This is an alias of {@link Long.equals} */\n    eq(other: string | number | Long | Timestamp): boolean\n    /** Gets the high 32 bits as a signed integer. */\n    getHighBits(): number\n    /** Gets the high 32 bits as an unsigned integer. */\n    getHighBitsUnsigned(): number\n    /** Gets the low 32 bits as a signed integer. */\n    getLowBits(): number\n    /** Gets the low 32 bits as an unsigned integer. */\n    getLowBitsUnsigned(): number\n    /** Gets the number of bits needed to represent the absolute value of this Long. */\n    getNumBitsAbs(): number\n    /** Tests if this Long's value is greater than the specified's. */\n    greaterThan(other: string | number | Long | Timestamp): boolean\n    /** This is an alias of {@link Long.greaterThan} */\n    gt(other: string | number | Long | Timestamp): boolean\n    /** Tests if this Long's value is greater than or equal the specified's. */\n    greaterThanOrEqual(other: string | number | Long | Timestamp): boolean\n    /** This is an alias of {@link Long.greaterThanOrEqual} */\n    gte(other: string | number | Long | Timestamp): boolean\n    /** This is an alias of {@link Long.greaterThanOrEqual} */\n    ge(other: string | number | Long | Timestamp): boolean\n    /** Tests if this Long's value is even. */\n    isEven(): boolean\n    /** Tests if this Long's value is negative. */\n    isNegative(): boolean\n    /** Tests if this Long's value is odd. */\n    isOdd(): boolean\n    /** Tests if this Long's value is positive. */\n    isPositive(): boolean\n    /** Tests if this Long's value equals zero. */\n    isZero(): boolean\n    /** Tests if this Long's value is less than the specified's. */\n    lessThan(other: string | number | Long | Timestamp): boolean\n    /** This is an alias of {@link Long#lessThan}. */\n    lt(other: string | number | Long | Timestamp): boolean\n    /** Tests if this Long's value is less than or equal the specified's. */\n    lessThanOrEqual(other: string | number | Long | Timestamp): boolean\n    /** This is an alias of {@link Long.lessThanOrEqual} */\n    lte(other: string | number | Long | Timestamp): boolean\n    /** Returns this Long modulo the specified. */\n    modulo(divisor: string | number | Long | Timestamp): Long\n    /** This is an alias of {@link Long.modulo} */\n    mod(divisor: string | number | Long | Timestamp): Long\n    /** This is an alias of {@link Long.modulo} */\n    rem(divisor: string | number | Long | Timestamp): Long\n    /**\n     * Returns the product of this and the specified Long.\n     * @param multiplier - Multiplier\n     * @returns Product\n     */\n    multiply(multiplier: string | number | Long | Timestamp): Long\n    /** This is an alias of {@link Long.multiply} */\n    mul(multiplier: string | number | Long | Timestamp): Long\n    /** Returns the Negation of this Long's value. */\n    negate(): Long\n    /** This is an alias of {@link Long.negate} */\n    neg(): Long\n    /** Returns the bitwise NOT of this Long. */\n    not(): Long\n    /** Tests if this Long's value differs from the specified's. */\n    notEquals(other: string | number | Long | Timestamp): boolean\n    /** This is an alias of {@link Long.notEquals} */\n    neq(other: string | number | Long | Timestamp): boolean\n    /** This is an alias of {@link Long.notEquals} */\n    ne(other: string | number | Long | Timestamp): boolean\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     */\n    or(other: number | string | Long): Long\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param numBits - Number of bits\n     * @returns Shifted Long\n     */\n    shiftLeft(numBits: number | Long): Long\n    /** This is an alias of {@link Long.shiftLeft} */\n    shl(numBits: number | Long): Long\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param numBits - Number of bits\n     * @returns Shifted Long\n     */\n    shiftRight(numBits: number | Long): Long\n    /** This is an alias of {@link Long.shiftRight} */\n    shr(numBits: number | Long): Long\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param numBits - Number of bits\n     * @returns Shifted Long\n     */\n    shiftRightUnsigned(numBits: Long | number): Long\n    /** This is an alias of {@link Long.shiftRightUnsigned} */\n    shr_u(numBits: number | Long): Long\n    /** This is an alias of {@link Long.shiftRightUnsigned} */\n    shru(numBits: number | Long): Long\n    /**\n     * Returns the difference of this and the specified Long.\n     * @param subtrahend - Subtrahend\n     * @returns Difference\n     */\n    subtract(subtrahend: string | number | Long | Timestamp): Long\n    /** This is an alias of {@link Long.subtract} */\n    sub(subtrahend: string | number | Long | Timestamp): Long\n    /** Converts the Long to a 32 bit integer, assuming it is a 32 bit integer. */\n    toInt(): number\n    /** Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa). */\n    toNumber(): number\n    /** Converts the Long to a BigInt (arbitrary precision). */\n    toBigInt(): bigint\n    /**\n     * Converts this Long to its byte representation.\n     * @param le - Whether little or big endian, defaults to big endian\n     * @returns Byte representation\n     */\n    toBytes(le?: boolean): number[]\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @returns Little endian byte representation\n     */\n    toBytesLE(): number[]\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @returns Big endian byte representation\n     */\n    toBytesBE(): number[]\n    /**\n     * Converts this Long to signed.\n     */\n    toSigned(): Long\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @param radix - Radix (2-36), defaults to 10\n     * @throws RangeError If `radix` is out of range\n     */\n    toString(radix?: number): string\n    /** Converts this Long to unsigned. */\n    toUnsigned(): Long\n    /** Returns the bitwise XOR of this Long and the given one. */\n    xor(other: Long | number | string): Long\n    /** This is an alias of {@link Long.isZero} */\n    eqz(): boolean\n    /** This is an alias of {@link Long.lessThanOrEqual} */\n    le(other: string | number | Long | Timestamp): boolean\n    toExtendedJSON(options?: EJSONOptions): number | LongExtended\n    static fromExtendedJSON(\n        doc: {\n            $numberLong: string\n        },\n        options?: EJSONOptions,\n    ): number | Long | bigint\n    inspect(): string\n}\n\n/** @public */\nexport declare interface LongExtended {\n    $numberLong: string\n}\n\n/** @public */\nexport declare type LongWithoutOverrides = new (\n    low: unknown,\n    high?: number | boolean,\n    unsigned?: boolean,\n) => {\n    [P in Exclude<keyof Long, TimestampOverrides>]: Long[P]\n}\n\n/** @public */\nexport declare const LongWithoutOverridesClass: LongWithoutOverrides\n\n/**\n * A class representation of the BSON MaxKey type.\n * @public\n * @category BSONType\n */\nexport declare class MaxKey extends BSONValue {\n    get _bsontype(): \"MaxKey\"\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface MaxKeyExtended {\n    $maxKey: 1\n}\n\n/**\n * A class representation of the BSON MinKey type.\n * @public\n * @category BSONType\n */\nexport declare class MinKey extends BSONValue {\n    get _bsontype(): \"MinKey\"\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface MinKeyExtended {\n    $minKey: 1\n}\n\n/**\n * A class representation of the BSON ObjectId type.\n * @public\n * @category BSONType\n */\nexport declare class ObjectId extends BSONValue {\n    get _bsontype(): \"ObjectId\"\n    /* Excluded from this release type: index */\n    static cacheHexString: boolean\n    /* Excluded from this release type: [kId] */\n    /* Excluded from this release type: __id */\n    /**\n     * Create an ObjectId type\n     *\n     * @param inputId - Can be a 24 character hex string, 12 byte binary Buffer, or a number.\n     */\n    constructor(\n        inputId?: string | number | ObjectId | ObjectIdLike | Uint8Array,\n    )\n    /**\n     * The ObjectId bytes\n     * @readonly\n     */\n    get id(): Uint8Array\n    set id(value: Uint8Array)\n    /** Returns the ObjectId id as a 24 character hex string representation */\n    toHexString(): string\n    /* Excluded from this release type: getInc */\n    /**\n     * Generate a 12 byte id buffer used in ObjectId's\n     *\n     * @param time - pass in a second based timestamp.\n     */\n    static generate(time?: number): Uint8Array\n    /**\n     * Converts the id into a 24 character hex string for printing, unless encoding is provided.\n     * @param encoding - hex or base64\n     */\n    toString(encoding?: \"hex\" | \"base64\"): string\n    /** Converts to its JSON the 24 character hex string representation. */\n    toJSON(): string\n    /**\n     * Compares the equality of this ObjectId with `otherID`.\n     *\n     * @param otherId - ObjectId instance to compare against.\n     */\n    equals(otherId: string | ObjectId | ObjectIdLike): boolean\n    /** Returns the generation date (accurate up to the second) that this ID was generated. */\n    getTimestamp(): Date\n    /* Excluded from this release type: createPk */\n    /**\n     * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.\n     *\n     * @param time - an integer number representing a number of seconds.\n     */\n    static createFromTime(time: number): ObjectId\n    /**\n     * Creates an ObjectId from a hex string representation of an ObjectId.\n     *\n     * @param hexString - create a ObjectId from a passed in 24 character hexstring.\n     */\n    static createFromHexString(hexString: string): ObjectId\n    /** Creates an ObjectId instance from a base64 string */\n    static createFromBase64(base64: string): ObjectId\n    /**\n     * Checks if a value is a valid bson ObjectId\n     *\n     * @param id - ObjectId instance to validate.\n     */\n    static isValid(\n        id: string | number | ObjectId | ObjectIdLike | Uint8Array,\n    ): boolean\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface ObjectIdExtended {\n    $oid: string\n}\n\n/** @public */\nexport declare interface ObjectIdLike {\n    id: string | Uint8Array\n    __id?: string\n    toHexString(): string\n}\n\n/**\n * Parse an Extended JSON string, constructing the JavaScript value or object described by that\n * string.\n *\n * @example\n * ```js\n * const { EJSON } = require('bson');\n * const text = '{ \"int32\": { \"$numberInt\": \"10\" } }';\n *\n * // prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }\n * console.log(EJSON.parse(text, { relaxed: false }));\n *\n * // prints { int32: 10 }\n * console.log(EJSON.parse(text));\n * ```\n */\ndeclare function parse(text: string, options?: EJSONOptions): any\n\n/**\n * Serialize a Javascript object.\n *\n * @param object - the Javascript object to serialize.\n * @returns Buffer object containing the serialized object.\n * @public\n */\nexport declare function serialize(\n    object: Document,\n    options?: SerializeOptions,\n): Uint8Array\n\n/** @public */\nexport declare interface SerializeOptions {\n    /** the serializer will check if keys are valid. */\n    checkKeys?: boolean\n    /** serialize the javascript functions **(default:false)**. */\n    serializeFunctions?: boolean\n    /** serialize will not emit undefined fields **(default:true)** */\n    ignoreUndefined?: boolean\n    /* Excluded from this release type: minInternalBufferSize */\n    /** the index in the buffer where we wish to start serializing into */\n    index?: number\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer,\n * useful when pre-allocating the space for serialization.\n *\n * @param object - the Javascript object to serialize.\n * @param finalBuffer - the Buffer you pre-allocated to store the serialized BSON object.\n * @returns the index pointing to the last written byte in the buffer.\n * @public\n */\nexport declare function serializeWithBufferAndIndex(\n    object: Document,\n    finalBuffer: Uint8Array,\n    options?: SerializeOptions,\n): number\n\n/**\n * Sets the size of the internal serialization buffer.\n *\n * @param size - The desired size for the internal serialization buffer\n * @public\n */\nexport declare function setInternalBufferSize(size: number): void\n\n/**\n * Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer\n * function is specified or optionally including only the specified properties if a replacer array\n * is specified.\n *\n * @param value - The value to convert to extended JSON\n * @param replacer - A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string\n * @param space - A String or Number object that's used to insert white space into the output JSON string for readability purposes.\n * @param options - Optional settings\n *\n * @example\n * ```js\n * const { EJSON } = require('bson');\n * const Int32 = require('mongodb').Int32;\n * const doc = { int32: new Int32(10) };\n *\n * // prints '{\"int32\":{\"$numberInt\":\"10\"}}'\n * console.log(EJSON.stringify(doc, { relaxed: false }));\n *\n * // prints '{\"int32\":10}'\n * console.log(EJSON.stringify(doc));\n * ```\n */\ndeclare function stringify(\n    value: any,\n    replacer?:\n        | (number | string)[]\n        | ((this: any, key: string, value: any) => any)\n        | EJSONOptions,\n    space?: string | number,\n    options?: EJSONOptions,\n): string\n\n/**\n * @public\n * @category BSONType\n * */\nexport declare class Timestamp extends LongWithoutOverridesClass {\n    get _bsontype(): \"Timestamp\"\n    static readonly MAX_VALUE: Long\n    /**\n     * @param int - A 64-bit bigint representing the Timestamp.\n     */\n    constructor(int: bigint)\n    /**\n     * @param long - A 64-bit Long representing the Timestamp.\n     */\n    constructor(long: Long)\n    /**\n     * @param value - A pair of two values indicating timestamp and increment.\n     */\n    constructor(value: { t: number; i: number })\n    toJSON(): {\n        $timestamp: string\n    }\n    /** Returns a Timestamp represented by the given (32-bit) integer value. */\n    static fromInt(value: number): Timestamp\n    /** Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned. */\n    static fromNumber(value: number): Timestamp\n    /**\n     * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.\n     *\n     * @param lowBits - the low 32-bits.\n     * @param highBits - the high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Timestamp\n    /**\n     * Returns a Timestamp from the given string, optionally using the given radix.\n     *\n     * @param str - the textual representation of the Timestamp.\n     * @param optRadix - the radix in which the text is written.\n     */\n    static fromString(str: string, optRadix: number): Timestamp\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string\n}\n\n/** @public */\nexport declare interface TimestampExtended {\n    $timestamp: {\n        t: number\n        i: number\n    }\n}\n\n/** @public */\nexport declare type TimestampOverrides =\n    | \"_bsontype\"\n    | \"toExtendedJSON\"\n    | \"fromExtendedJSON\"\n    | \"inspect\"\n\n/**\n * A class representation of the BSON UUID type.\n * @public\n */\nexport declare class UUID extends Binary {\n    static cacheHexString: boolean\n    /* Excluded from this release type: __id */\n    /**\n     * Create an UUID type\n     *\n     * @param input - Can be a 32 or 36 character hex string (dashes excluded/included) or a 16 byte binary Buffer.\n     */\n    constructor(input?: string | Uint8Array | UUID)\n    /**\n     * The UUID bytes\n     * @readonly\n     */\n    get id(): Uint8Array\n    set id(value: Uint8Array)\n    /**\n     * Returns the UUID id as a 32 or 36 character hex string representation, excluding/including dashes (defaults to 36 character dash separated)\n     * @param includeDashes - should the string exclude dash-separators.\n     * */\n    toHexString(includeDashes?: boolean): string\n    /**\n     * Converts the id into a 36 character (dashes included) hex string, unless a encoding is specified.\n     */\n    toString(encoding?: \"hex\" | \"base64\"): string\n    /**\n     * Converts the id into its JSON string representation.\n     * A 36 character (dashes included) hex string in the format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n     */\n    toJSON(): string\n    /**\n     * Compares the equality of this UUID with `otherID`.\n     *\n     * @param otherId - UUID instance to compare against.\n     */\n    equals(otherId: string | Uint8Array | UUID): boolean\n    /**\n     * Creates a Binary instance from the current UUID.\n     */\n    toBinary(): Binary\n    /**\n     * Generates a populated buffer containing a v4 uuid\n     */\n    static generate(): Uint8Array\n    /**\n     * Checks if a value is a valid bson UUID\n     * @param input - UUID, string or Buffer to validate.\n     */\n    static isValid(input: string | Uint8Array | UUID): boolean\n    /**\n     * Creates an UUID from a hex string representation of an UUID.\n     * @param hexString - 32 or 36 character hex string (dashes excluded/included).\n     */\n    static createFromHexString(hexString: string): UUID\n    /** Creates an UUID from a base64 string representation of an UUID. */\n    static createFromBase64(base64: string): UUID\n    inspect(): string\n}\n\n/** @public */\nexport declare type UUIDExtended = {\n    $uuid: string\n}\n\nexport {}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1285, "column": 0}, "map": {"version":3,"file":"typings.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/mongodb/typings.ts"],"sourcesContent":["import {\n    BSON,\n    BSONRegExp,\n    BSONSymbol,\n    BSONType,\n    Binary,\n    Code,\n    DBRef,\n    Decimal128,\n    DeserializeOptions,\n    Document,\n    Double,\n    Int32,\n    Long,\n    MaxKey,\n    MinKey,\n    ObjectId,\n    ObjectIdLike,\n    SerializeOptions,\n    Timestamp,\n    deserialize,\n    serialize,\n} from \"./bson.typings\"\nimport type { ConnectionOptions as ConnectionOptions_2 } from \"tls\"\nimport type { Socket } from \"net\"\nimport type { SrvRecord } from \"dns\"\nimport type { TcpNetConnectOpts } from \"net\"\nimport type { TLSSocket } from \"tls\"\nimport type { TLSSocketOptions } from \"tls\"\nimport { Readable, EventEmitter } from \"../../platform/PlatformTools\"\n\n/** @public */\nexport declare abstract class AbstractCursor<\n    TSchema = any,\n    CursorEvents extends AbstractCursorEvents = AbstractCursorEvents,\n> extends TypedEventEmitter<CursorEvents> {\n    /* Excluded from this release type: [kId] */\n    /* Excluded from this release type: [kSession] */\n    /* Excluded from this release type: [kServer] */\n    /* Excluded from this release type: [kNamespace] */\n    /* Excluded from this release type: [kDocuments] */\n    /* Excluded from this release type: [kClient] */\n    /* Excluded from this release type: [kTransform] */\n    /* Excluded from this release type: [kInitialized] */\n    /* Excluded from this release type: [kClosed] */\n    /* Excluded from this release type: [kKilled] */\n    /* Excluded from this release type: [kOptions] */\n    /** @event */\n    static readonly CLOSE: \"close\"\n    /* Excluded from this release type: __constructor */\n    get id(): Long | undefined\n    /* Excluded from this release type: client */\n    /* Excluded from this release type: server */\n    get namespace(): MongoDBNamespace\n    get readPreference(): ReadPreference\n    get readConcern(): ReadConcern | undefined\n    /* Excluded from this release type: session */\n    /* Excluded from this release type: session */\n    /* Excluded from this release type: cursorOptions */\n    get closed(): boolean\n    get killed(): boolean\n    get loadBalanced(): boolean\n    /** Returns current buffered documents length */\n    bufferedCount(): number\n    /** Returns current buffered documents */\n    readBufferedDocuments(number?: number): TSchema[]\n    [Symbol.asyncIterator](): AsyncGenerator<TSchema, void, void>\n    stream(options?: CursorStreamOptions): Readable & AsyncIterable<TSchema>\n    hasNext(): Promise<boolean>\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    next(): Promise<TSchema | null>\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    tryNext(): Promise<TSchema | null>\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     */\n    forEach(iterator: (doc: TSchema) => boolean | void): Promise<void>\n    close(): Promise<void>\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    toArray(): Promise<TSchema[]>\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag: CursorFlag, value: boolean): this\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T>\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference: ReadPreferenceLike): this\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern: ReadConcernLike): this\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value: number): this\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value: number): this\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind(): void\n    /**\n     * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance\n     */\n    abstract clone(): AbstractCursor<TSchema>\n    /* Excluded from this release type: _initialize */\n    /* Excluded from this release type: _getMore */\n    /* Excluded from this release type: [kInit] */\n}\n\n/** @public */\nexport declare type AbstractCursorEvents = {\n    [AbstractCursor.CLOSE](): void\n}\n\n/** @public */\nexport declare interface AbstractCursorOptions extends BSONSerializeOptions {\n    session?: ClientSession\n    readPreference?: ReadPreferenceLike\n    readConcern?: ReadConcernLike\n    /**\n     * Specifies the number of documents to return in each response from MongoDB\n     */\n    batchSize?: number\n    /**\n     * When applicable `maxTimeMS` controls the amount of time the initial command\n     * that constructs a cursor should take. (ex. find, aggregate, listCollections)\n     */\n    maxTimeMS?: number\n    /**\n     * When applicable `maxAwaitTimeMS` controls the amount of time subsequent getMores\n     * that a cursor uses to fetch more data should take. (ex. cursor.next())\n     */\n    maxAwaitTimeMS?: number\n    /**\n     * Comment to apply to the operation.\n     *\n     * In server versions pre-4.4, 'comment' must be string.  A server\n     * error will be thrown if any other type is provided.\n     *\n     * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n     */\n    comment?: unknown\n    /**\n     * By default, MongoDB will automatically close a cursor when the\n     * client has exhausted all results in the cursor. However, for [capped collections](https://www.mongodb.com/docs/manual/core/capped-collections)\n     * you may use a Tailable Cursor that remains open after the client exhausts\n     * the results in the initial cursor.\n     */\n    tailable?: boolean\n    /**\n     * If awaitData is set to true, when the cursor reaches the end of the capped collection,\n     * MongoDB blocks the query thread for a period of time waiting for new data to arrive.\n     * When new data is inserted into the capped collection, the blocked thread is signaled\n     * to wake up and return the next batch to the client.\n     */\n    awaitData?: boolean\n    noCursorTimeout?: boolean\n}\n\n/* Excluded from this release type: AbstractOperation */\n\n/** @public */\nexport declare type AcceptedFields<TSchema, FieldType, AssignableType> = {\n    readonly [key in KeysOfAType<TSchema, FieldType>]?: AssignableType\n}\n\n/** @public */\nexport declare type AddToSetOperators<Type> = {\n    $each?: Array<Flatten<Type>>\n}\n\n/** @public */\nexport declare interface AddUserOptions extends CommandOperationOptions {\n    /** Roles associated with the created user */\n    roles?: string | string[] | RoleSpecification | RoleSpecification[]\n    /** Custom data associated with the user (only Mongodb 2.6 or higher) */\n    customData?: Document\n}\n\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nexport declare class Admin {\n    /* Excluded from this release type: s */\n    /* Excluded from this release type: __constructor */\n    /**\n     * Execute a command\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    command(command: Document, options?: RunCommandOptions): Promise<Document>\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    buildInfo(options?: CommandOperationOptions): Promise<Document>\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    serverInfo(options?: CommandOperationOptions): Promise<Document>\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    serverStatus(options?: CommandOperationOptions): Promise<Document>\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    ping(options?: CommandOperationOptions): Promise<Document>\n    /**\n     * Add a user to the database\n     *\n     * @param username - The username for the new user\n     * @param passwordOrOptions - An optional password for the new user, or the options for the command\n     * @param options - Optional settings for the command\n     */\n    addUser(\n        username: string,\n        passwordOrOptions?: string | AddUserOptions,\n        options?: AddUserOptions,\n    ): Promise<Document>\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    removeUser(username: string, options?: RemoveUserOptions): Promise<boolean>\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    validateCollection(\n        collectionName: string,\n        options?: ValidateCollectionOptions,\n    ): Promise<Document>\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    listDatabases(options?: ListDatabasesOptions): Promise<ListDatabasesResult>\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    replSetGetStatus(options?: CommandOperationOptions): Promise<Document>\n}\n\n/* Excluded from this release type: AdminPrivate */\n\n/* Excluded from this release type: AggregateOperation */\n\n/** @public */\nexport declare interface AggregateOptions extends CommandOperationOptions {\n    /** allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 \\>). */\n    allowDiskUse?: boolean\n    /** The number of documents to return per batch. See [aggregation documentation](https://www.mongodb.com/docs/manual/reference/command/aggregate). */\n    batchSize?: number\n    /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n    bypassDocumentValidation?: boolean\n    /** Return the query as cursor, on 2.6 \\> it returns as a real cursor on pre 2.6 it returns as an emulated cursor. */\n    cursor?: Document\n    /** specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point. */\n    maxTimeMS?: number\n    /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. */\n    maxAwaitTimeMS?: number\n    /** Specify collation. */\n    collation?: CollationOptions\n    /** Add an index selection hint to an aggregation command */\n    hint?: Hint\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n    out?: string\n}\n\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nexport declare class AggregationCursor<\n    TSchema = any,\n> extends AbstractCursor<TSchema> {\n    /* Excluded from this release type: [kPipeline] */\n    /* Excluded from this release type: [kOptions] */\n    /* Excluded from this release type: __constructor */\n    get pipeline(): Document[]\n    clone(): AggregationCursor<TSchema>\n    map<T>(transform: (doc: TSchema) => T): AggregationCursor<T>\n    /* Excluded from this release type: _initialize */\n    /** Execute the explain for the cursor */\n    explain(verbosity?: ExplainVerbosityLike): Promise<Document>\n    /** Add a group stage to the aggregation pipeline */\n    group<T = TSchema>($group: Document): AggregationCursor<T>\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit: number): this\n    /** Add a match stage to the aggregation pipeline */\n    match($match: Document): this\n    /** Add an out stage to the aggregation pipeline */\n    out(\n        $out:\n            | {\n                  db: string\n                  coll: string\n              }\n            | string,\n    ): this\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project<T extends Document = Document>(\n        $project: Document,\n    ): AggregationCursor<T>\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup: Document): this\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact: Document): this\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip: number): this\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort: Sort): this\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind: Document | string): this\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear: Document): this\n}\n\n/** @public */\nexport declare interface AggregationCursorOptions\n    extends AbstractCursorOptions,\n        AggregateOptions {}\n\n/**\n * It is possible to search using alternative types in mongodb e.g.\n * string types can be searched using a regex in mongo\n * array types can be searched using their element type\n * @public\n */\nexport declare type AlternativeType<T> = T extends ReadonlyArray<infer U>\n    ? T | RegExpOrString<U>\n    : RegExpOrString<T>\n\n/** @public */\nexport declare type AnyBulkWriteOperation<TSchema extends Document = Document> =\n\n        | {\n              insertOne: InsertOneModel<TSchema>\n          }\n        | {\n              replaceOne: ReplaceOneModel<TSchema>\n          }\n        | {\n              updateOne: UpdateOneModel<TSchema>\n          }\n        | {\n              updateMany: UpdateManyModel<TSchema>\n          }\n        | {\n              deleteOne: DeleteOneModel<TSchema>\n          }\n        | {\n              deleteMany: DeleteManyModel<TSchema>\n          }\n\n/** @public */\nexport declare type AnyError = MongoError | Error\n\n/** @public */\nexport declare type ArrayElement<Type> = Type extends ReadonlyArray<infer Item>\n    ? Item\n    : never\n\n/** @public */\nexport declare type ArrayOperator<Type> = {\n    $each?: Array<Flatten<Type>>\n    $slice?: number\n    $position?: number\n    $sort?: Sort\n}\n\n/** @public */\nexport declare interface Auth {\n    /** The username for auth */\n    username?: string\n    /** The password for auth */\n    password?: string\n}\n\n/* Excluded from this release type: AuthContext */\n\n/** @public */\nexport declare const AuthMechanism: Readonly<{\n    readonly MONGODB_AWS: \"MONGODB-AWS\"\n    readonly MONGODB_CR: \"MONGODB-CR\"\n    readonly MONGODB_DEFAULT: \"DEFAULT\"\n    readonly MONGODB_GSSAPI: \"GSSAPI\"\n    readonly MONGODB_PLAIN: \"PLAIN\"\n    readonly MONGODB_SCRAM_SHA1: \"SCRAM-SHA-1\"\n    readonly MONGODB_SCRAM_SHA256: \"SCRAM-SHA-256\"\n    readonly MONGODB_X509: \"MONGODB-X509\"\n    /** @experimental */\n    readonly MONGODB_OIDC: \"MONGODB-OIDC\"\n}>\n\n/** @public */\nexport declare type AuthMechanism =\n    (typeof AuthMechanism)[keyof typeof AuthMechanism]\n\n/** @public */\nexport declare interface AuthMechanismProperties extends Document {\n    SERVICE_HOST?: string\n    SERVICE_NAME?: string\n    SERVICE_REALM?: string\n    CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue\n    AWS_SESSION_TOKEN?: string\n    /** @experimental */\n    REQUEST_TOKEN_CALLBACK?: OIDCRequestFunction\n    /** @experimental */\n    REFRESH_TOKEN_CALLBACK?: OIDCRefreshFunction\n    /** @experimental */\n    PROVIDER_NAME?: \"aws\"\n}\n\n/** @public */\nexport declare interface AutoEncrypter {\n    new (client: MongoClient, options: AutoEncryptionOptions): AutoEncrypter\n    init(cb: Callback): void\n    teardown(force: boolean, callback: Callback): void\n    encrypt(\n        ns: string,\n        cmd: Document,\n        options: any,\n        callback: Callback<Document>,\n    ): void\n    decrypt(cmd: Document, options: any, callback: Callback<Document>): void\n    /** @experimental */\n    readonly cryptSharedLibVersionInfo: {\n        version: bigint\n        versionStr: string\n    } | null\n}\n\n/** @public */\nexport declare const AutoEncryptionLoggerLevel: Readonly<{\n    readonly FatalError: 0\n    readonly Error: 1\n    readonly Warning: 2\n    readonly Info: 3\n    readonly Trace: 4\n}>\n\n/** @public */\nexport declare type AutoEncryptionLoggerLevel =\n    (typeof AutoEncryptionLoggerLevel)[keyof typeof AutoEncryptionLoggerLevel]\n\n/** @public */\nexport declare interface AutoEncryptionOptions {\n    /* Excluded from this release type: metadataClient */\n    /** A `MongoClient` used to fetch keys from a key vault */\n    keyVaultClient?: MongoClient\n    /** The namespace where keys are stored in the key vault */\n    keyVaultNamespace?: string\n    /** Configuration options that are used by specific KMS providers during key generation, encryption, and decryption. */\n    kmsProviders?: {\n        /** Configuration options for using 'aws' as your KMS provider */\n        aws?:\n            | {\n                  /** The access key used for the AWS KMS provider */\n                  accessKeyId: string\n                  /** The secret access key used for the AWS KMS provider */\n                  secretAccessKey: string\n                  /**\n                   * An optional AWS session token that will be used as the\n                   * X-Amz-Security-Token header for AWS requests.\n                   */\n                  sessionToken?: string\n              }\n            | Record<string, never>\n        /** Configuration options for using 'local' as your KMS provider */\n        local?: {\n            /**\n             * The master key used to encrypt/decrypt data keys.\n             * A 96-byte long Buffer or base64 encoded string.\n             */\n            key: Buffer | string\n        }\n        /** Configuration options for using 'azure' as your KMS provider */\n        azure?:\n            | {\n                  /** The tenant ID identifies the organization for the account */\n                  tenantId: string\n                  /** The client ID to authenticate a registered application */\n                  clientId: string\n                  /** The client secret to authenticate a registered application */\n                  clientSecret: string\n                  /**\n                   * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n                   * This is optional, and only needed if customer is using a non-commercial Azure instance\n                   * (e.g. a government or China account, which use different URLs).\n                   * Defaults to \"login.microsoftonline.com\"\n                   */\n                  identityPlatformEndpoint?: string | undefined\n              }\n            | {\n                  /**\n                   * If present, an access token to authenticate with Azure.\n                   */\n                  accessToken: string\n              }\n            | Record<string, never>\n        /** Configuration options for using 'gcp' as your KMS provider */\n        gcp?:\n            | {\n                  /** The service account email to authenticate */\n                  email: string\n                  /** A PKCS#8 encrypted key. This can either be a base64 string or a binary representation */\n                  privateKey: string | Buffer\n                  /**\n                   * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n                   * Defaults to \"oauth2.googleapis.com\"\n                   */\n                  endpoint?: string | undefined\n              }\n            | {\n                  /**\n                   * If present, an access token to authenticate with GCP.\n                   */\n                  accessToken: string\n              }\n            | Record<string, never>\n        /**\n         * Configuration options for using 'kmip' as your KMS provider\n         */\n        kmip?: {\n            /**\n             * The output endpoint string.\n             * The endpoint consists of a hostname and port separated by a colon.\n             * E.g. \"example.com:123\". A port is always present.\n             */\n            endpoint?: string\n        }\n    }\n    /**\n     * A map of namespaces to a local JSON schema for encryption\n     *\n     * **NOTE**: Supplying options.schemaMap provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending decrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     */\n    schemaMap?: Document\n    /** @experimental Public Technical Preview: Supply a schema for the encrypted fields in the document  */\n    encryptedFieldsMap?: Document\n    /** Allows the user to bypass auto encryption, maintaining implicit decryption */\n    bypassAutoEncryption?: boolean\n    /** @experimental Public Technical Preview: Allows users to bypass query analysis */\n    bypassQueryAnalysis?: boolean\n    options?: {\n        /** An optional hook to catch logging messages from the underlying encryption engine */\n        logger?: (level: AutoEncryptionLoggerLevel, message: string) => void\n    }\n    extraOptions?: {\n        /**\n         * A local process the driver communicates with to determine how to encrypt values in a command.\n         * Defaults to \"mongodb://%2Fvar%2Fmongocryptd.sock\" if domain sockets are available or \"mongodb://localhost:27020\" otherwise\n         */\n        mongocryptdURI?: string\n        /** If true, autoEncryption will not attempt to spawn a mongocryptd before connecting  */\n        mongocryptdBypassSpawn?: boolean\n        /** The path to the mongocryptd executable on the system */\n        mongocryptdSpawnPath?: string\n        /** Command line arguments to use when auto-spawning a mongocryptd */\n        mongocryptdSpawnArgs?: string[]\n        /**\n         * Full path to a MongoDB Crypt shared library to be used (instead of mongocryptd).\n         *\n         * This needs to be the path to the file itself, not a directory.\n         * It can be an absolute or relative path. If the path is relative and\n         * its first component is `$ORIGIN`, it will be replaced by the directory\n         * containing the mongodb-client-encryption native addon file. Otherwise,\n         * the path will be interpreted relative to the current working directory.\n         *\n         * Currently, loading different MongoDB Crypt shared library files from different\n         * MongoClients in the same process is not supported.\n         *\n         * If this option is provided and no MongoDB Crypt shared library could be loaded\n         * from the specified location, creating the MongoClient will fail.\n         *\n         * If this option is not provided and `cryptSharedLibRequired` is not specified,\n         * the AutoEncrypter will attempt to spawn and/or use mongocryptd according\n         * to the mongocryptd-specific `extraOptions` options.\n         *\n         * Specifying a path prevents mongocryptd from being used as a fallback.\n         *\n         * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.\n         */\n        cryptSharedLibPath?: string\n        /**\n         * If specified, never use mongocryptd and instead fail when the MongoDB Crypt\n         * shared library could not be loaded.\n         *\n         * This is always true when `cryptSharedLibPath` is specified.\n         *\n         * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.\n         */\n        cryptSharedLibRequired?: boolean\n        /* Excluded from this release type: cryptSharedLibSearchPaths */\n    }\n    proxyOptions?: ProxyOptions\n    /** The TLS options to use connecting to the KMS provider */\n    tlsOptions?: {\n        aws?: AutoEncryptionTlsOptions\n        local?: AutoEncryptionTlsOptions\n        azure?: AutoEncryptionTlsOptions\n        gcp?: AutoEncryptionTlsOptions\n        kmip?: AutoEncryptionTlsOptions\n    }\n}\n\n/** @public */\nexport declare interface AutoEncryptionTlsOptions {\n    /**\n     * Specifies the location of a local .pem file that contains\n     * either the client's TLS/SSL certificate and key or only the\n     * client's TLS/SSL key when tlsCertificateFile is used to\n     * provide the certificate.\n     */\n    tlsCertificateKeyFile?: string\n    /**\n     * Specifies the password to de-crypt the tlsCertificateKeyFile.\n     */\n    tlsCertificateKeyFilePassword?: string\n    /**\n     * Specifies the location of a local .pem file that contains the\n     * root certificate chain from the Certificate Authority.\n     * This file is used to validate the certificate presented by the\n     * KMS provider.\n     */\n    tlsCAFile?: string\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nexport declare class Batch<T = Document> {\n    originalZeroIndex: number\n    currentIndex: number\n    originalIndexes: number[]\n    batchType: BatchType\n    operations: T[]\n    size: number\n    sizeBytes: number\n    constructor(batchType: BatchType, originalZeroIndex: number)\n}\n\n/** @public */\nexport declare const BatchType: Readonly<{\n    readonly INSERT: 1\n    readonly UPDATE: 2\n    readonly DELETE: 3\n}>\n\n/** @public */\nexport declare type BatchType = (typeof BatchType)[keyof typeof BatchType]\n\nexport { Binary }\n\n/* Excluded from this release type: BinMsg */\n\n/** @public */\nexport declare type BitwiseFilter =\n    | number /** numeric bit mask */\n    | Binary /** BinData bit mask */\n    | ReadonlyArray<number>\n\nexport { BSON }\n\nexport { BSONRegExp }\n\n/**\n * BSON Serialization options.\n * @public\n */\nexport declare interface BSONSerializeOptions\n    extends Omit<SerializeOptions, \"index\">,\n        Omit<\n            DeserializeOptions,\n            | \"evalFunctions\"\n            | \"cacheFunctions\"\n            | \"cacheFunctionsCrc32\"\n            | \"allowObjectSmallerThanBufferSize\"\n            | \"index\"\n            | \"validation\"\n        > {\n    /**\n     * Enabling the raw option will return a [Node.js Buffer](https://nodejs.org/api/buffer.html)\n     * which is allocated using [allocUnsafe API](https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize).\n     * See this section from the [Node.js Docs here](https://nodejs.org/api/buffer.html#what-makes-bufferallocunsafe-and-bufferallocunsafeslow-unsafe)\n     * for more detail about what \"unsafe\" refers to in this context.\n     * If you need to maintain your own editable clone of the bytes returned for an extended life time of the process, it is recommended you allocate\n     * your own buffer and clone the contents:\n     *\n     * @example\n     * ```ts\n     * const raw = await collection.findOne({}, { raw: true });\n     * const myBuffer = Buffer.alloc(raw.byteLength);\n     * myBuffer.set(raw, 0);\n     * // Only save and use `myBuffer` beyond this point\n     * ```\n     *\n     * @remarks\n     * Please note there is a known limitation where this option cannot be used at the MongoClient level (see [NODE-3946](https://jira.mongodb.org/browse/NODE-3946)).\n     * It does correctly work at `Db`, `Collection`, and per operation the same as other BSON options work.\n     */\n    raw?: boolean\n    /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */\n    enableUtf8Validation?: boolean\n}\n\nexport { BSONSymbol }\n\nexport { BSONType }\n\n/** @public */\nexport declare type BSONTypeAlias = keyof typeof BSONType\n\n/* Excluded from this release type: BufferPool */\n\n/** @public */\nexport declare abstract class BulkOperationBase {\n    isOrdered: boolean\n    /* Excluded from this release type: s */\n    operationId?: number\n    /* Excluded from this release type: __constructor */\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document: Document): BulkOperationBase\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector: Document): FindOperators\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op: AnyBulkWriteOperation): this\n    get bsonOptions(): BSONSerializeOptions\n    get writeConcern(): WriteConcern | undefined\n    get batches(): Batch[]\n    execute(options?: BulkWriteOptions): Promise<BulkWriteResult>\n    /* Excluded from this release type: handleWriteError */\n    abstract addToOperationsList(\n        batchType: BatchType,\n        document: Document | UpdateStatement | DeleteStatement,\n    ): this\n}\n\n/* Excluded from this release type: BulkOperationPrivate */\n\n/* Excluded from this release type: BulkResult */\n\n/** @public */\nexport declare interface BulkWriteOperationError {\n    index: number\n    code: number\n    errmsg: string\n    errInfo: Document\n    op: Document | UpdateStatement | DeleteStatement\n}\n\n/** @public */\nexport declare interface BulkWriteOptions extends CommandOperationOptions {\n    /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n    bypassDocumentValidation?: boolean\n    /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\n    ordered?: boolean\n    /** Force server to assign _id values instead of driver. */\n    forceServerObjectId?: boolean\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n}\n\n/**\n * @public\n * The result of a bulk write.\n */\nexport declare class BulkWriteResult {\n    private readonly result\n    /** Number of documents inserted. */\n    readonly insertedCount: number\n    /** Number of documents matched for update. */\n    readonly matchedCount: number\n    /** Number of documents modified. */\n    readonly modifiedCount: number\n    /** Number of documents deleted. */\n    readonly deletedCount: number\n    /** Number of documents upserted. */\n    readonly upsertedCount: number\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    readonly upsertedIds: {\n        [key: number]: any\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    readonly insertedIds: {\n        [key: number]: any\n    }\n    private static generateIdMap\n    /* Excluded from this release type: __constructor */\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok(): number\n    /** The number of inserted documents */\n    get nInserted(): number\n    /** Number of upserted documents */\n    get nUpserted(): number\n    /** Number of matched documents */\n    get nMatched(): number\n    /** Number of documents updated physically on disk */\n    get nModified(): number\n    /** Number of removed documents */\n    get nRemoved(): number\n    /** Returns an array of all inserted ids */\n    getInsertedIds(): Document[]\n    /** Returns an array of all upserted ids */\n    getUpsertedIds(): Document[]\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index: number): Document | undefined\n    /** Returns raw internal result */\n    getRawResponse(): Document\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors(): boolean\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount(): number\n    /** Returns a specific write error object */\n    getWriteErrorAt(index: number): WriteError | undefined\n    /** Retrieve all write errors */\n    getWriteErrors(): WriteError[]\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError(): WriteConcernError | undefined\n    toString(): string\n    isOk(): boolean\n}\n\n/**\n * MongoDB Driver style callback\n * @public\n */\nexport declare type Callback<T = any> = (error?: AnyError, result?: T) => void\n\n/** @public */\nexport declare class CancellationToken extends TypedEventEmitter<{\n    cancel(): void\n}> {}\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport declare class ChangeStream<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>,\n> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> {\n    pipeline: Document[]\n    /**\n     * @remarks WriteConcern can still be present on the options because\n     * we inherit options from the client/db/collection.  The\n     * key must be present on the options in order to delete it.\n     * This allows typescript to delete the key but will\n     * not allow a writeConcern to be assigned as a property on options.\n     */\n    options: ChangeStreamOptions & {\n        writeConcern?: never\n    }\n    parent: MongoClient | Db | Collection\n    namespace: MongoDBNamespace\n    type: symbol\n    /* Excluded from this release type: cursor */\n    streamOptions?: CursorStreamOptions\n    /* Excluded from this release type: [kCursorStream] */\n    /* Excluded from this release type: [kClosed] */\n    /* Excluded from this release type: [kMode] */\n    /** @event */\n    static readonly RESPONSE: \"response\"\n    /** @event */\n    static readonly MORE: \"more\"\n    /** @event */\n    static readonly INIT: \"init\"\n    /** @event */\n    static readonly CLOSE: \"close\"\n    /**\n     * Fired for each new matching change in the specified namespace. Attaching a `change`\n     * event listener to a Change Stream will switch the stream into flowing mode. Data will\n     * then be passed as soon as it is available.\n     * @event\n     */\n    static readonly CHANGE: \"change\"\n    /** @event */\n    static readonly END: \"end\"\n    /** @event */\n    static readonly ERROR: \"error\"\n    /**\n     * Emitted each time the change stream stores a new resume token.\n     * @event\n     */\n    static readonly RESUME_TOKEN_CHANGED: \"resumeTokenChanged\"\n    /* Excluded from this release type: __constructor */\n    /* Excluded from this release type: cursorStream */\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken(): ResumeToken\n    /** Check if there is any document still available in the Change Stream */\n    hasNext(): Promise<boolean>\n    /** Get the next available document from the Change Stream. */\n    next(): Promise<TChange>\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    tryNext(): Promise<Document | null>\n    [Symbol.asyncIterator](): AsyncGenerator<TChange, void, void>\n    /** Is the cursor closed */\n    get closed(): boolean\n    /** Close the Change Stream */\n    close(): Promise<void>\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange>\n    /* Excluded from this release type: _setIsEmitter */\n    /* Excluded from this release type: _setIsIterator */\n    /* Excluded from this release type: _createChangeStreamCursor */\n    /* Excluded from this release type: _closeEmitterModeWithError */\n    /* Excluded from this release type: _streamEvents */\n    /* Excluded from this release type: _endStream */\n    /* Excluded from this release type: _processChange */\n    /* Excluded from this release type: _processErrorStreamMode */\n    /* Excluded from this release type: _processErrorIteratorMode */\n}\n\n/* Excluded from this release type: ChangeStreamAggregateRawResult */\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport declare interface ChangeStreamCollModDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"modify\"\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport declare interface ChangeStreamCreateDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"create\"\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport declare interface ChangeStreamCreateIndexDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID,\n        ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"createIndexes\"\n}\n\n/* Excluded from this release type: ChangeStreamCursor */\n\n/* Excluded from this release type: ChangeStreamCursorOptions */\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\n */\nexport declare interface ChangeStreamDeleteDocument<\n    TSchema extends Document = Document,\n> extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentKey<TSchema>,\n        ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"delete\"\n    /** Namespace the delete event occurred on */\n    ns: ChangeStreamNameSpace\n    /**\n     * Contains the pre-image of the modified or deleted document if the\n     * pre-image is available for the change event and either 'required' or\n     * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n     * when creating the change stream. If 'whenAvailable' was specified but the\n     * pre-image is unavailable, this will be explicitly set to null.\n     */\n    fullDocumentBeforeChange?: TSchema\n}\n\n/** @public */\nexport declare type ChangeStreamDocument<TSchema extends Document = Document> =\n    | ChangeStreamInsertDocument<TSchema>\n    | ChangeStreamUpdateDocument<TSchema>\n    | ChangeStreamReplaceDocument<TSchema>\n    | ChangeStreamDeleteDocument<TSchema>\n    | ChangeStreamDropDocument\n    | ChangeStreamRenameDocument\n    | ChangeStreamDropDatabaseDocument\n    | ChangeStreamInvalidateDocument\n    | ChangeStreamCreateIndexDocument\n    | ChangeStreamCreateDocument\n    | ChangeStreamCollModDocument\n    | ChangeStreamDropIndexDocument\n    | ChangeStreamShardCollectionDocument\n    | ChangeStreamReshardCollectionDocument\n    | ChangeStreamRefineCollectionShardKeyDocument\n\n/** @public */\nexport declare interface ChangeStreamDocumentCollectionUUID {\n    /**\n     * The UUID (Binary subtype 4) of the collection that the operation was performed on.\n     *\n     * Only present when the `showExpandedEvents` flag is enabled.\n     *\n     * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers\n     *    flag is enabled.\n     *\n     * @sinceServerVersion 6.1.0\n     */\n    collectionUUID: Binary\n}\n\n/** @public */\nexport declare interface ChangeStreamDocumentCommon {\n    /**\n     * The id functions as an opaque token for use when resuming an interrupted\n     * change stream.\n     */\n    _id: ResumeToken\n    /**\n     * The timestamp from the oplog entry associated with the event.\n     * For events that happened as part of a multi-document transaction, the associated change stream\n     * notifications will have the same clusterTime value, namely the time when the transaction was committed.\n     * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\n     * associated with different transactions or even not be associated with any transaction.\n     * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\n     */\n    clusterTime?: Timestamp\n    /**\n     * The transaction number.\n     * Only present if the operation is part of a multi-document transaction.\n     *\n     * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\n     */\n    txnNumber?: number\n    /**\n     * The identifier for the session associated with the transaction.\n     * Only present if the operation is part of a multi-document transaction.\n     */\n    lsid?: ServerSessionId\n}\n\n/** @public */\nexport declare interface ChangeStreamDocumentKey<\n    TSchema extends Document = Document,\n> {\n    /**\n     * For unsharded collections this contains a single field `_id`.\n     * For sharded collections, this will contain all the components of the shard key\n     */\n    documentKey: {\n        _id: InferIdType<TSchema>\n        [shardKey: string]: any\n    }\n}\n\n/** @public */\nexport declare interface ChangeStreamDocumentOperationDescription {\n    /**\n     * An description of the operation.\n     *\n     * Only present when the `showExpandedEvents` flag is enabled.\n     *\n     * @sinceServerVersion 6.1.0\n     */\n    operationDescription?: Document\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\n */\nexport declare interface ChangeStreamDropDatabaseDocument\n    extends ChangeStreamDocumentCommon {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"dropDatabase\"\n    /** The database dropped */\n    ns: {\n        db: string\n    }\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\n */\nexport declare interface ChangeStreamDropDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"drop\"\n    /** Namespace the drop event occurred on */\n    ns: ChangeStreamNameSpace\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport declare interface ChangeStreamDropIndexDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID,\n        ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"dropIndexes\"\n}\n\n/** @public */\nexport declare type ChangeStreamEvents<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>,\n> = {\n    resumeTokenChanged(token: ResumeToken): void\n    init(response: any): void\n    more(response?: any): void\n    response(): void\n    end(): void\n    error(error: Error): void\n    change(change: TChange): void\n} & AbstractCursorEvents\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\n */\nexport declare interface ChangeStreamInsertDocument<\n    TSchema extends Document = Document,\n> extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentKey<TSchema>,\n        ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"insert\"\n    /** This key will contain the document being inserted */\n    fullDocument: TSchema\n    /** Namespace the insert event occurred on */\n    ns: ChangeStreamNameSpace\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\n */\nexport declare interface ChangeStreamInvalidateDocument\n    extends ChangeStreamDocumentCommon {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"invalidate\"\n}\n\n/** @public */\nexport declare interface ChangeStreamNameSpace {\n    db: string\n    coll: string\n}\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport declare interface ChangeStreamOptions\n    extends Omit<AggregateOptions, \"writeConcern\"> {\n    /**\n     * Allowed values: 'updateLookup', 'whenAvailable', 'required'.\n     *\n     * When set to 'updateLookup', the change notification for partial updates\n     * will include both a delta describing the changes to the document as well\n     * as a copy of the entire document that was changed from some time after\n     * the change occurred.\n     *\n     * When set to 'whenAvailable', configures the change stream to return the\n     * post-image of the modified document for replace and update change events\n     * if the post-image for this event is available.\n     *\n     * When set to 'required', the same behavior as 'whenAvailable' except that\n     * an error is raised if the post-image is not available.\n     */\n    fullDocument?: string\n    /**\n     * Allowed values: 'whenAvailable', 'required', 'off'.\n     *\n     * The default is to not send a value, which is equivalent to 'off'.\n     *\n     * When set to 'whenAvailable', configures the change stream to return the\n     * pre-image of the modified document for replace, update, and delete change\n     * events if it is available.\n     *\n     * When set to 'required', the same behavior as 'whenAvailable' except that\n     * an error is raised if the pre-image is not available.\n     */\n    fullDocumentBeforeChange?: string\n    /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n    maxAwaitTimeMS?: number\n    /**\n     * Allows you to start a changeStream after a specified event.\n     * @see https://www.mongodb.com/docs/manual/changeStreams/#resumeafter-for-change-streams\n     */\n    resumeAfter?: ResumeToken\n    /**\n     * Similar to resumeAfter, but will allow you to start after an invalidated event.\n     * @see https://www.mongodb.com/docs/manual/changeStreams/#startafter-for-change-streams\n     */\n    startAfter?: ResumeToken\n    /** Will start the changeStream after the specified operationTime. */\n    startAtOperationTime?: OperationTime\n    /**\n     * The number of documents to return per batch.\n     * @see https://www.mongodb.com/docs/manual/reference/command/aggregate\n     */\n    batchSize?: number\n    /**\n     * When enabled, configures the change stream to include extra change events.\n     *\n     * - createIndexes\n     * - dropIndexes\n     * - modify\n     * - create\n     * - shardCollection\n     * - reshardCollection\n     * - refineCollectionShardKey\n     */\n    showExpandedEvents?: boolean\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport declare interface ChangeStreamRefineCollectionShardKeyDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID,\n        ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"refineCollectionShardKey\"\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\n */\nexport declare interface ChangeStreamRenameDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"rename\"\n    /** The new name for the `ns.coll` collection */\n    to: {\n        db: string\n        coll: string\n    }\n    /** The \"from\" namespace that the rename occurred on */\n    ns: ChangeStreamNameSpace\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\n */\nexport declare interface ChangeStreamReplaceDocument<\n    TSchema extends Document = Document,\n> extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentKey<TSchema> {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"replace\"\n    /** The fullDocument of a replace event represents the document after the insert of the replacement document */\n    fullDocument: TSchema\n    /** Namespace the replace event occurred on */\n    ns: ChangeStreamNameSpace\n    /**\n     * Contains the pre-image of the modified or deleted document if the\n     * pre-image is available for the change event and either 'required' or\n     * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n     * when creating the change stream. If 'whenAvailable' was specified but the\n     * pre-image is unavailable, this will be explicitly set to null.\n     */\n    fullDocumentBeforeChange?: TSchema\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport declare interface ChangeStreamReshardCollectionDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID,\n        ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"reshardCollection\"\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport declare interface ChangeStreamShardCollectionDocument\n    extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentCollectionUUID,\n        ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"shardCollection\"\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\n */\nexport declare interface ChangeStreamUpdateDocument<\n    TSchema extends Document = Document,\n> extends ChangeStreamDocumentCommon,\n        ChangeStreamDocumentKey<TSchema>,\n        ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: \"update\"\n    /**\n     * This is only set if `fullDocument` is set to `'updateLookup'`\n     * Contains the point-in-time post-image of the modified document if the\n     * post-image is available and either 'required' or 'whenAvailable' was\n     * specified for the 'fullDocument' option when creating the change stream.\n     */\n    fullDocument?: TSchema\n    /** Contains a description of updated and removed fields in this operation */\n    updateDescription: UpdateDescription<TSchema>\n    /** Namespace the update event occurred on */\n    ns: ChangeStreamNameSpace\n    /**\n     * Contains the pre-image of the modified or deleted document if the\n     * pre-image is available for the change event and either 'required' or\n     * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n     * when creating the change stream. If 'whenAvailable' was specified but the\n     * pre-image is unavailable, this will be explicitly set to null.\n     */\n    fullDocumentBeforeChange?: TSchema\n}\n\n/**\n * @public\n * @see https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst#hello-command\n */\nexport declare interface ClientMetadata {\n    driver: {\n        name: string\n        version: string\n    }\n    os: {\n        type: string\n        name: NodeJS.Platform\n        architecture: string\n        version: string\n    }\n    platform: string\n    application?: {\n        name: string\n    }\n}\n\n/** @public */\nexport declare interface ClientMetadataOptions {\n    driverInfo?: {\n        name?: string\n        version?: string\n        platform?: string\n    }\n    appName?: string\n}\n\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nexport declare class ClientSession extends TypedEventEmitter<ClientSessionEvents> {\n    /* Excluded from this release type: client */\n    /* Excluded from this release type: sessionPool */\n    hasEnded: boolean\n    clientOptions?: MongoOptions\n    supports: {\n        causalConsistency: boolean\n    }\n    clusterTime?: ClusterTime\n    operationTime?: Timestamp\n    explicit: boolean\n    /* Excluded from this release type: owner */\n    defaultTransactionOptions: TransactionOptions\n    transaction: Transaction\n    /* Excluded from this release type: [kServerSession] */\n    /* Excluded from this release type: [kSnapshotTime] */\n    /* Excluded from this release type: [kSnapshotEnabled] */\n    /* Excluded from this release type: [kPinnedConnection] */\n    /* Excluded from this release type: [kTxnNumberIncrement] */\n    /* Excluded from this release type: __constructor */\n    /** The server id associated with this session */\n    get id(): ServerSessionId | undefined\n    get serverSession(): ServerSession\n    /** Whether or not this session is configured for snapshot reads */\n    get snapshotEnabled(): boolean\n    get loadBalanced(): boolean\n    /* Excluded from this release type: pinnedConnection */\n    /* Excluded from this release type: pin */\n    /* Excluded from this release type: unpin */\n    get isPinned(): boolean\n    /**\n     * Ends this session on the server\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    endSession(options?: EndSessionOptions): Promise<void>\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime: Timestamp): void\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime: ClusterTime): void\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session: ClientSession): boolean\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber(): void\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction(): boolean\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options?: TransactionOptions): void\n    /**\n     * Commits the currently active transaction in this session.\n     */\n    commitTransaction(): Promise<Document>\n    /**\n     * Aborts the currently active transaction in this session.\n     */\n    abortTransaction(): Promise<Document>\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON(): never\n    /**\n     * Runs a provided callback within a transaction, retrying either the commitTransaction operation\n     * or entire transaction as needed (and when the error permits) to better ensure that\n     * the transaction can complete successfully.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     * Any callbacks that do not return a Promise will result in undefined behavior.\n     *\n     * @remarks\n     * This function:\n     * - Will return the command response from the final commitTransaction if every operation is successful (can be used as a truthy object)\n     * - Will return `undefined` if the transaction is explicitly aborted with `await session.abortTransaction()`\n     * - Will throw if one of the operations throws or `throw` statement is used inside the `withTransaction` callback\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/developer/quickstart/node-transactions/\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    withTransaction<T = void>(\n        fn: WithTransactionCallback<T>,\n        options?: TransactionOptions,\n    ): Promise<Document | undefined>\n}\n\n/** @public */\nexport declare type ClientSessionEvents = {\n    ended(session: ClientSession): void\n}\n\n/** @public */\nexport declare interface ClientSessionOptions {\n    /** Whether causal consistency should be enabled on this session */\n    causalConsistency?: boolean\n    /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */\n    snapshot?: boolean\n    /** The default TransactionOptions to use for transactions started on this session. */\n    defaultTransactionOptions?: TransactionOptions\n    /* Excluded from this release type: owner */\n    /* Excluded from this release type: explicit */\n    /* Excluded from this release type: initialClusterTime */\n}\n\n/** @public */\nexport declare interface CloseOptions {\n    force?: boolean\n}\n\n/** @public\n * Configuration options for clustered collections\n * @see https://www.mongodb.com/docs/manual/core/clustered-collections/\n */\nexport declare interface ClusteredCollectionOptions extends Document {\n    name?: string\n    key: Document\n    unique: boolean\n}\n\n/** @public */\nexport declare interface ClusterTime {\n    clusterTime: Timestamp\n    signature: {\n        hash: Binary\n        keyId: Long\n    }\n}\n\nexport { Code }\n\n/** @public */\nexport declare interface CollationOptions {\n    locale: string\n    caseLevel?: boolean\n    caseFirst?: string\n    strength?: number\n    numericOrdering?: boolean\n    alternate?: string\n    maxVariable?: string\n    backwards?: boolean\n    normalization?: boolean\n}\n\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nexport declare class Collection<TSchema extends Document = Document> {\n    /* Excluded from this release type: s */\n    /* Excluded from this release type: __constructor */\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName(): string\n    /**\n     * The name of this collection\n     */\n    get collectionName(): string\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace(): string\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern(): ReadConcern | undefined\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference(): ReadPreference | undefined\n    get bsonOptions(): BSONSerializeOptions\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern(): WriteConcern | undefined\n    /** The current index hint for the collection */\n    get hint(): Hint | undefined\n    set hint(v: Hint | undefined)\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    insertOne(\n        doc: OptionalUnlessRequiredId<TSchema>,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult<TSchema>>\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    insertMany(\n        docs: OptionalUnlessRequiredId<TSchema>[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult<TSchema>>\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    bulkWrite(\n        operations: AnyBulkWriteOperation<TSchema>[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult>\n    /**\n     * Update a single document in a collection\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The update operations to be applied to the document\n     * @param options - Optional settings for the command\n     */\n    updateOne(\n        filter: Filter<TSchema>,\n        update: UpdateFilter<TSchema> | Partial<TSchema>,\n        options?: UpdateOptions,\n    ): Promise<UpdateResult>\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    replaceOne(\n        filter: Filter<TSchema>,\n        replacement: WithoutId<TSchema>,\n        options?: ReplaceOptions,\n    ): Promise<UpdateResult | Document>\n    /**\n     * Update multiple documents in a collection\n     *\n     * @param filter - The filter used to select the documents to update\n     * @param update - The update operations to be applied to the documents\n     * @param options - Optional settings for the command\n     */\n    updateMany(\n        filter: Filter<TSchema>,\n        update: UpdateFilter<TSchema>,\n        options?: UpdateOptions,\n    ): Promise<UpdateResult>\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    deleteOne(\n        filter?: Filter<TSchema>,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult>\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    deleteMany(\n        filter?: Filter<TSchema>,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult>\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    rename(newName: string, options?: RenameOptions): Promise<Collection>\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    drop(options?: DropCollectionOptions): Promise<boolean>\n    /**\n     * Fetches the first document that matches the filter\n     *\n     * @param filter - Query for find Operation\n     * @param options - Optional settings for the command\n     */\n    findOne(): Promise<WithId<TSchema> | null>\n    findOne(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>\n    findOne(\n        filter: Filter<TSchema>,\n        options: FindOptions,\n    ): Promise<WithId<TSchema> | null>\n    findOne<T = TSchema>(): Promise<T | null>\n    findOne<T = TSchema>(filter: Filter<TSchema>): Promise<T | null>\n    findOne<T = TSchema>(\n        filter: Filter<TSchema>,\n        options?: FindOptions,\n    ): Promise<T | null>\n    /**\n     * Creates a cursor for a filter that can be used to iterate over results from MongoDB\n     *\n     * @param filter - The filter predicate. If unspecified, then all documents in the collection will match the predicate\n     */\n    find(): FindCursor<WithId<TSchema>>\n    find(\n        filter: Filter<TSchema>,\n        options?: FindOptions,\n    ): FindCursor<WithId<TSchema>>\n    find<T extends Document>(\n        filter: Filter<TSchema>,\n        options?: FindOptions,\n    ): FindCursor<T>\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    options(options?: OperationOptions): Promise<Document>\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    isCapped(options?: OperationOptions): Promise<boolean>\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    createIndex(\n        indexSpec: IndexSpecification,\n        options?: CreateIndexesOptions,\n    ): Promise<string>\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    createIndexes(\n        indexSpecs: IndexDescription[],\n        options?: CreateIndexesOptions,\n    ): Promise<string[]>\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    dropIndex(\n        indexName: string,\n        options?: DropIndexesOptions,\n    ): Promise<Document>\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    dropIndexes(options?: DropIndexesOptions): Promise<Document>\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options?: ListIndexesOptions): ListIndexesCursor\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    indexExists(\n        indexes: string | string[],\n        options?: IndexInformationOptions,\n    ): Promise<boolean>\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */\n    indexInformation(options?: IndexInformationOptions): Promise<Document>\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    estimatedDocumentCount(\n        options?: EstimatedDocumentCountOptions,\n    ): Promise<number>\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    countDocuments(\n        filter?: Document,\n        options?: CountDocumentsOptions,\n    ): Promise<number>\n    /**\n     * The distinct command returns a list of distinct values for the given key across a collection.\n     *\n     * @param key - Field of the document to find distinct values for\n     * @param filter - The filter for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings for the command\n     */\n    distinct<Key extends keyof WithId<TSchema>>(\n        key: Key,\n    ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>\n    distinct<Key extends keyof WithId<TSchema>>(\n        key: Key,\n        filter: Filter<TSchema>,\n    ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>\n    distinct<Key extends keyof WithId<TSchema>>(\n        key: Key,\n        filter: Filter<TSchema>,\n        options: DistinctOptions,\n    ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>\n    distinct(key: string): Promise<any[]>\n    distinct(key: string, filter: Filter<TSchema>): Promise<any[]>\n    distinct(\n        key: string,\n        filter: Filter<TSchema>,\n        options: DistinctOptions,\n    ): Promise<any[]>\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    indexes(options?: IndexInformationOptions): Promise<Document[]>\n    /**\n     * Get all the collection statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    stats(options?: CollStatsOptions): Promise<CollStats>\n    /**\n     * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    findOneAndDelete(\n        filter: Filter<TSchema>,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<ModifyResult<TSchema> | null>\n    /**\n     * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    findOneAndReplace(\n        filter: Filter<TSchema>,\n        replacement: WithoutId<TSchema>,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<ModifyResult<TSchema> | null>\n    /**\n     * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - Update operations to be performed on the document\n     * @param options - Optional settings for the command\n     */\n    findOneAndUpdate(\n        filter: Filter<TSchema>,\n        update: UpdateFilter<TSchema>,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<ModifyResult<TSchema> | null>\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate<T extends Document = Document>(\n        pipeline?: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<T>\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch<\n        TLocal extends Document = TSchema,\n        TChange extends Document = ChangeStreamDocument<TLocal>,\n    >(\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream<TLocal, TChange>\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    count(filter?: Filter<TSchema>, options?: CountOptions): Promise<number>\n}\n\n/** @public */\nexport declare interface CollectionInfo extends Document {\n    name: string\n    type?: string\n    options?: Document\n    info?: {\n        readOnly?: false\n        uuid?: Binary\n    }\n    idIndex?: Document\n}\n\n/** @public */\nexport declare interface CollectionOptions\n    extends BSONSerializeOptions,\n        WriteConcernOptions {\n    /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n    readConcern?: ReadConcernLike\n    /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n    readPreference?: ReadPreferenceLike\n}\n\n/* Excluded from this release type: CollectionPrivate */\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/command/collStats/\n */\nexport declare interface CollStats extends Document {\n    /** Namespace */\n    ns: string\n    /** Number of documents */\n    count: number\n    /** Collection size in bytes */\n    size: number\n    /** Average object size in bytes */\n    avgObjSize: number\n    /** (Pre)allocated space for the collection in bytes */\n    storageSize: number\n    /** Number of extents (contiguously allocated chunks of datafile space) */\n    numExtents: number\n    /** Number of indexes */\n    nindexes: number\n    /** Size of the most recently created extent in bytes */\n    lastExtentSize: number\n    /** Padding can speed up updates if documents grow */\n    paddingFactor: number\n    /** A number that indicates the user-set flags on the collection. userFlags only appears when using the mmapv1 storage engine */\n    userFlags?: number\n    /** Total index size in bytes */\n    totalIndexSize: number\n    /** Size of specific indexes in bytes */\n    indexSizes: {\n        _id_: number\n        [index: string]: number\n    }\n    /** `true` if the collection is capped */\n    capped: boolean\n    /** The maximum number of documents that may be present in a capped collection */\n    max: number\n    /** The maximum size of a capped collection */\n    maxSize: number\n    /** This document contains data reported directly by the WiredTiger engine and other data for internal diagnostic use */\n    wiredTiger?: WiredTigerData\n    /** The fields in this document are the names of the indexes, while the values themselves are documents that contain statistics for the index provided by the storage engine */\n    indexDetails?: any\n    ok: number\n    /** The amount of storage available for reuse. The scale argument affects this value. */\n    freeStorageSize?: number\n    /** An array that contains the names of the indexes that are currently being built on the collection */\n    indexBuilds?: number\n    /** The sum of the storageSize and totalIndexSize. The scale argument affects this value */\n    totalSize: number\n    /** The scale value used by the command. */\n    scaleFactor: number\n}\n\n/** @public */\nexport declare interface CollStatsOptions extends CommandOperationOptions {\n    /** Divide the returned sizes by scale value. */\n    scale?: number\n}\n\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nexport declare class CommandFailedEvent {\n    address: string\n    connectionId?: string | number\n    requestId: number\n    duration: number\n    commandName: string\n    failure: Error\n    serviceId?: ObjectId\n    /* Excluded from this release type: __constructor */\n    get hasServiceId(): boolean\n}\n\n/* Excluded from this release type: CommandOperation */\n\n/** @public */\nexport declare interface CommandOperationOptions\n    extends OperationOptions,\n        WriteConcernOptions,\n        ExplainOptions {\n    /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\n    readConcern?: ReadConcernLike\n    /** Collation */\n    collation?: CollationOptions\n    maxTimeMS?: number\n    /**\n     * Comment to apply to the operation.\n     *\n     * In server versions pre-4.4, 'comment' must be string.  A server\n     * error will be thrown if any other type is provided.\n     *\n     * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n     */\n    comment?: unknown\n    /** Should retry failed writes */\n    retryWrites?: boolean\n    dbName?: string\n    authdb?: string\n    noResponse?: boolean\n}\n\n/* Excluded from this release type: CommandOptions */\n\n/**\n * An event indicating the start of a given\n * @public\n * @category Event\n */\nexport declare class CommandStartedEvent {\n    commandObj?: Document\n    requestId: number\n    databaseName: string\n    commandName: string\n    command: Document\n    address: string\n    connectionId?: string | number\n    serviceId?: ObjectId\n    /* Excluded from this release type: __constructor */\n    get hasServiceId(): boolean\n}\n\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nexport declare class CommandSucceededEvent {\n    address: string\n    connectionId?: string | number\n    requestId: number\n    duration: number\n    commandName: string\n    reply: unknown\n    serviceId?: ObjectId\n    /* Excluded from this release type: __constructor */\n    get hasServiceId(): boolean\n}\n\n/** @public */\nexport declare type CommonEvents = \"newListener\" | \"removeListener\"\n\n/** @public */\nexport declare const Compressor: Readonly<{\n    readonly none: 0\n    readonly snappy: 1\n    readonly zlib: 2\n    readonly zstd: 3\n}>\n\n/** @public */\nexport declare type Compressor = (typeof Compressor)[CompressorName]\n\n/** @public */\nexport declare type CompressorName = keyof typeof Compressor\n\n/** @public */\nexport declare type Condition<T> =\n    | AlternativeType<T>\n    | FilterOperators<AlternativeType<T>>\n\n/* Excluded from this release type: Connection */\n\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nexport declare class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** The id of the connection */\n    connectionId: number | \"<monitor>\"\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nexport declare class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** The id of the connection */\n    connectionId: number | \"<monitor>\"\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nexport declare class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** The reason the attempt to check out failed */\n    reason: AnyError | string\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nexport declare class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nexport declare class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** The id of the connection */\n    connectionId: number | \"<monitor>\"\n    /** The reason the connection was closed */\n    reason: string\n    serviceId?: ObjectId\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nexport declare class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** A monotonically increasing, per-pool id for the newly created connection */\n    connectionId: number | \"<monitor>\"\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare type ConnectionEvents = {\n    commandStarted(event: CommandStartedEvent): void\n    commandSucceeded(event: CommandSucceededEvent): void\n    commandFailed(event: CommandFailedEvent): void\n    clusterTimeReceived(clusterTime: Document): void\n    close(): void\n    message(message: any): void\n    pinned(pinType: string): void\n    unpinned(pinType: string): void\n}\n\n/** @public */\nexport declare interface ConnectionOptions\n    extends SupportedNodeConnectionOptions,\n        StreamDescriptionOptions,\n        ProxyOptions {\n    id: number | \"<monitor>\"\n    generation: number\n    hostAddress: HostAddress\n    autoEncrypter?: AutoEncrypter\n    serverApi?: ServerApi\n    monitorCommands: boolean\n    /* Excluded from this release type: connectionType */\n    credentials?: MongoCredentials\n    connectTimeoutMS?: number\n    tls: boolean\n    keepAlive?: boolean\n    keepAliveInitialDelay?: number\n    noDelay?: boolean\n    socketTimeoutMS?: number\n    cancellationToken?: CancellationToken\n    metadata: ClientMetadata\n}\n\n/* Excluded from this release type: ConnectionPool */\n\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /* Excluded from this release type: serviceId */\n    interruptInUseConnections?: boolean\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** The options used to create this connection pool */\n    options?: ConnectionPoolOptions\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare type ConnectionPoolEvents = {\n    connectionPoolCreated(event: ConnectionPoolCreatedEvent): void\n    connectionPoolReady(event: ConnectionPoolReadyEvent): void\n    connectionPoolClosed(event: ConnectionPoolClosedEvent): void\n    connectionPoolCleared(event: ConnectionPoolClearedEvent): void\n    connectionCreated(event: ConnectionCreatedEvent): void\n    connectionReady(event: ConnectionReadyEvent): void\n    connectionClosed(event: ConnectionClosedEvent): void\n    connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void\n    connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void\n    connectionCheckedOut(event: ConnectionCheckedOutEvent): void\n    connectionCheckedIn(event: ConnectionCheckedInEvent): void\n} & Omit<ConnectionEvents, \"close\" | \"message\">\n\n/* Excluded from this release type: ConnectionPoolMetrics */\n\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolMonitoringEvent {\n    /** A timestamp when the event was created  */\n    time: Date\n    /** The address (host/port pair) of the pool */\n    address: string\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare interface ConnectionPoolOptions\n    extends Omit<ConnectionOptions, \"id\" | \"generation\"> {\n    /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n    maxPoolSize: number\n    /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n    minPoolSize: number\n    /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n    maxConnecting: number\n    /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n    maxIdleTimeMS: number\n    /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n    waitQueueTimeoutMS: number\n    /** If we are in load balancer mode. */\n    loadBalanced: boolean\n    /* Excluded from this release type: minPoolSizeCheckFrequencyMS */\n}\n\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nexport declare class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** The id of the connection */\n    connectionId: number | \"<monitor>\"\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare interface ConnectOptions {\n    readPreference?: ReadPreference\n}\n\n/** @public */\nexport declare interface CountDocumentsOptions extends AggregateOptions {\n    /** The number of documents to skip. */\n    skip?: number\n    /** The maximum amounts to count before aborting. */\n    limit?: number\n}\n\n/** @public */\nexport declare interface CountOptions extends CommandOperationOptions {\n    /** The number of documents to skip. */\n    skip?: number\n    /** The maximum amounts to count before aborting. */\n    limit?: number\n    /** Number of milliseconds to wait before aborting the query. */\n    maxTimeMS?: number\n    /** An index name hint for the query. */\n    hint?: string | Document\n}\n\n/** @public */\nexport declare interface CreateCollectionOptions\n    extends CommandOperationOptions {\n    /** Returns an error if the collection does not exist */\n    strict?: boolean\n    /** Create a capped collection */\n    capped?: boolean\n    /** @deprecated Create an index on the _id field of the document. This option is deprecated in MongoDB 3.2+ and will be removed once no longer supported by the server. */\n    autoIndexId?: boolean\n    /** The size of the capped collection in bytes */\n    size?: number\n    /** The maximum number of documents in the capped collection */\n    max?: number\n    /** Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag */\n    flags?: number\n    /** Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection */\n    storageEngine?: Document\n    /** Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation */\n    validator?: Document\n    /** Determines how strictly MongoDB applies the validation rules to existing documents during an update */\n    validationLevel?: string\n    /** Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted */\n    validationAction?: string\n    /** Allows users to specify a default configuration for indexes when creating a collection */\n    indexOptionDefaults?: Document\n    /** The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view (i.e., does not include the database name and implies the same database as the view to create) */\n    viewOn?: string\n    /** An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view */\n    pipeline?: Document[]\n    /** A primary key factory function for generation of custom _id keys. */\n    pkFactory?: PkFactory\n    /** A document specifying configuration options for timeseries collections. */\n    timeseries?: TimeSeriesCollectionOptions\n    /** A document specifying configuration options for clustered collections. For MongoDB 5.3 and above. */\n    clusteredIndex?: ClusteredCollectionOptions\n    /** The number of seconds after which a document in a timeseries or clustered collection expires. */\n    expireAfterSeconds?: number\n    /** @experimental */\n    encryptedFields?: Document\n    /**\n     * If set, enables pre-update and post-update document events to be included for any\n     * change streams that listen on this collection.\n     */\n    changeStreamPreAndPostImages?: {\n        enabled: boolean\n    }\n}\n\n/** @public */\nexport declare interface CreateIndexesOptions\n    extends Omit<CommandOperationOptions, \"writeConcern\"> {\n    /** Creates the index in the background, yielding whenever possible. */\n    background?: boolean\n    /** Creates an unique index. */\n    unique?: boolean\n    /** Override the autogenerated index name (useful if the resulting name is larger than 128 bytes) */\n    name?: string\n    /** Creates a partial index based on the given filter object (MongoDB 3.2 or higher) */\n    partialFilterExpression?: Document\n    /** Creates a sparse index. */\n    sparse?: boolean\n    /** Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher) */\n    expireAfterSeconds?: number\n    /** Allows users to configure the storage engine on a per-index basis when creating an index. (MongoDB 3.0 or higher) */\n    storageEngine?: Document\n    /** (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes. */\n    commitQuorum?: number | string\n    /** Specifies the index version number, either 0 or 1. */\n    version?: number\n    weights?: Document\n    default_language?: string\n    language_override?: string\n    textIndexVersion?: number\n    \"2dsphereIndexVersion\"?: number\n    bits?: number\n    /** For geospatial indexes set the lower bound for the co-ordinates. */\n    min?: number\n    /** For geospatial indexes set the high bound for the co-ordinates. */\n    max?: number\n    bucketSize?: number\n    wildcardProjection?: Document\n    /** Specifies that the index should exist on the target collection but should not be used by the query planner when executing operations. (MongoDB 4.4 or higher) */\n    hidden?: boolean\n}\n\n/** @public */\nexport declare const CURSOR_FLAGS: readonly [\n    \"tailable\",\n    \"oplogReplay\",\n    \"noCursorTimeout\",\n    \"awaitData\",\n    \"exhaust\",\n    \"partial\",\n]\n\n/** @public */\nexport declare type CursorFlag = (typeof CURSOR_FLAGS)[number]\n\n/** @public */\nexport declare interface CursorStreamOptions {\n    /** A transformation method applied to each document emitted by the stream */\n    transform?(this: void, doc: Document): Document\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nexport declare class Db {\n    /* Excluded from this release type: s */\n    static SYSTEM_NAMESPACE_COLLECTION: string\n    static SYSTEM_INDEX_COLLECTION: string\n    static SYSTEM_PROFILE_COLLECTION: string\n    static SYSTEM_USER_COLLECTION: string\n    static SYSTEM_COMMAND_COLLECTION: string\n    static SYSTEM_JS_COLLECTION: string\n    /**\n     * Creates a new Db instance\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction\n     */\n    constructor(client: MongoClient, databaseName: string, options?: DbOptions)\n    get databaseName(): string\n    get options(): DbOptions | undefined\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk(): boolean\n    get readConcern(): ReadConcern | undefined\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference(): ReadPreference\n    get bsonOptions(): BSONSerializeOptions\n    get writeConcern(): WriteConcern | undefined\n    get namespace(): string\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    createCollection<TSchema extends Document = Document>(\n        name: string,\n        options?: CreateCollectionOptions,\n    ): Promise<Collection<TSchema>>\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    command(command: Document, options?: RunCommandOptions): Promise<Document>\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate<T extends Document = Document>(\n        pipeline?: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<T>\n    /** Return the Admin db instance */\n    admin(): Admin\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection<TSchema extends Document = Document>(\n        name: string,\n        options?: CollectionOptions,\n    ): Collection<TSchema>\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    stats(options?: DbStatsOptions): Promise<Document>\n    /**\n     * List all collections of this database with optional filter\n     *\n     * @param filter - Query to filter collections by\n     * @param options - Optional settings for the command\n     */\n    listCollections(\n        filter: Document,\n        options: Exclude<ListCollectionsOptions, \"nameOnly\"> & {\n            nameOnly: true\n        },\n    ): ListCollectionsCursor<Pick<CollectionInfo, \"name\" | \"type\">>\n    listCollections(\n        filter: Document,\n        options: Exclude<ListCollectionsOptions, \"nameOnly\"> & {\n            nameOnly: false\n        },\n    ): ListCollectionsCursor<CollectionInfo>\n    listCollections<\n        T extends Pick<CollectionInfo, \"name\" | \"type\"> | CollectionInfo =\n            | Pick<CollectionInfo, \"name\" | \"type\">\n            | CollectionInfo,\n    >(\n        filter?: Document,\n        options?: ListCollectionsOptions,\n    ): ListCollectionsCursor<T>\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    renameCollection<TSchema extends Document = Document>(\n        fromCollection: string,\n        toCollection: string,\n        options?: RenameOptions,\n    ): Promise<Collection<TSchema>>\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    dropCollection(\n        name: string,\n        options?: DropCollectionOptions,\n    ): Promise<boolean>\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    dropDatabase(options?: DropDatabaseOptions): Promise<boolean>\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    collections(options?: ListCollectionsOptions): Promise<Collection[]>\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    createIndex(\n        name: string,\n        indexSpec: IndexSpecification,\n        options?: CreateIndexesOptions,\n    ): Promise<string>\n    /**\n     * Add a user to the database\n     *\n     * @param username - The username for the new user\n     * @param passwordOrOptions - An optional password for the new user, or the options for the command\n     * @param options - Optional settings for the command\n     */\n    addUser(\n        username: string,\n        passwordOrOptions?: string | AddUserOptions,\n        options?: AddUserOptions,\n    ): Promise<Document>\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    removeUser(username: string, options?: RemoveUserOptions): Promise<boolean>\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    setProfilingLevel(\n        level: ProfilingLevel,\n        options?: SetProfilingLevelOptions,\n    ): Promise<ProfilingLevel>\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    profilingLevel(options?: ProfilingLevelOptions): Promise<string>\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n    indexInformation(\n        name: string,\n        options?: IndexInformationOptions,\n    ): Promise<Document>\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch<\n        TSchema extends Document = Document,\n        TChange extends Document = ChangeStreamDocument<TSchema>,\n    >(\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream<TSchema, TChange>\n}\n\n/* Excluded from this release type: DB_AGGREGATE_COLLECTION */\n\n/** @public */\nexport declare interface DbOptions\n    extends BSONSerializeOptions,\n        WriteConcernOptions {\n    /** If the database authentication is dependent on another databaseName. */\n    authSource?: string\n    /** Force server to assign _id values instead of driver. */\n    forceServerObjectId?: boolean\n    /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n    readPreference?: ReadPreferenceLike\n    /** A primary key factory object for generation of custom _id keys. */\n    pkFactory?: PkFactory\n    /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n    readConcern?: ReadConcern\n    /** Should retry failed writes */\n    retryWrites?: boolean\n}\n\n/* Excluded from this release type: DbPrivate */\nexport { DBRef }\n\n/** @public */\nexport declare interface DbStatsOptions extends CommandOperationOptions {\n    /** Divide the returned sizes by scale value. */\n    scale?: number\n}\n\nexport { Decimal128 }\n\n/** @public */\nexport declare interface DeleteManyModel<TSchema extends Document = Document> {\n    /** The filter to limit the deleted documents. */\n    filter: Filter<TSchema>\n    /** Specifies a collation. */\n    collation?: CollationOptions\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint\n}\n\n/** @public */\nexport declare interface DeleteOneModel<TSchema extends Document = Document> {\n    /** The filter to limit the deleted documents. */\n    filter: Filter<TSchema>\n    /** Specifies a collation. */\n    collation?: CollationOptions\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint\n}\n\n/** @public */\nexport declare interface DeleteOptions\n    extends CommandOperationOptions,\n        WriteConcernOptions {\n    /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\n    ordered?: boolean\n    /** Specifies the collation to use for the operation */\n    collation?: CollationOptions\n    /** Specify that the update query should only consider plans using the hinted index */\n    hint?: string | Document\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n}\n\n/** @public */\nexport declare interface DeleteResult {\n    /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined. */\n    acknowledged: boolean\n    /** The number of documents that were deleted */\n    deletedCount: number\n}\n\n/** @public */\nexport declare interface DeleteStatement {\n    /** The query that matches documents to delete. */\n    q: Document\n    /** The number of matching documents to delete. */\n    limit: number\n    /** Specifies the collation to use for the operation. */\n    collation?: CollationOptions\n    /** A document or string that specifies the index to use to support the query predicate. */\n    hint?: Hint\n}\n\nexport { deserialize }\n\n/* Excluded from this release type: DestroyOptions */\n\n/** @public */\nexport declare type DistinctOptions = CommandOperationOptions\n\nexport { Document }\n\nexport { Double }\n\n/** @public */\nexport declare interface DriverInfo {\n    name?: string\n    version?: string\n    platform?: string\n}\n\n/** @public */\nexport declare interface DropCollectionOptions extends CommandOperationOptions {\n    /** @experimental */\n    encryptedFields?: Document\n}\n\n/** @public */\nexport declare type DropDatabaseOptions = CommandOperationOptions\n\n/** @public */\nexport declare type DropIndexesOptions = CommandOperationOptions\n\n/* Excluded from this release type: Encrypter */\n\n/* Excluded from this release type: EncrypterOptions */\n\n/** @public */\nexport declare interface EndSessionOptions {\n    /* Excluded from this release type: error */\n    force?: boolean\n    forceClear?: boolean\n}\n\n/** TypeScript Omit (Exclude to be specific) does not work for objects with an \"any\" indexed type, and breaks discriminated unions @public */\nexport declare type EnhancedOmit<TRecordOrUnion, KeyUnion> =\n    string extends keyof TRecordOrUnion\n        ? TRecordOrUnion\n        : TRecordOrUnion extends any\n        ? Pick<TRecordOrUnion, Exclude<keyof TRecordOrUnion, KeyUnion>>\n        : never\n\n/** @public */\nexport declare interface ErrorDescription extends Document {\n    message?: string\n    errmsg?: string\n    $err?: string\n    errorLabels?: string[]\n    errInfo?: Document\n}\n\n/** @public */\nexport declare interface EstimatedDocumentCountOptions\n    extends CommandOperationOptions {\n    /**\n     * The maximum amount of time to allow the operation to run.\n     *\n     * This option is sent only if the caller explicitly provides a value. The default is to not send a value.\n     */\n    maxTimeMS?: number\n}\n\n/** @public */\nexport declare interface EvalOptions extends CommandOperationOptions {\n    nolock?: boolean\n}\n\n/** @public */\nexport declare type EventEmitterWithState = {\n    /* Excluded from this release type: stateChanged */\n}\n\n/**\n * Event description type\n * @public\n */\nexport declare type EventsDescription = Record<string, GenericListener>\n\n/* Excluded from this release type: ExecutionResult */\n\n/* Excluded from this release type: Explain */\n\n/** @public */\nexport declare interface ExplainOptions {\n    /** Specifies the verbosity mode for the explain output. */\n    explain?: ExplainVerbosityLike\n}\n\n/** @public */\nexport declare const ExplainVerbosity: Readonly<{\n    readonly queryPlanner: \"queryPlanner\"\n    readonly queryPlannerExtended: \"queryPlannerExtended\"\n    readonly executionStats: \"executionStats\"\n    readonly allPlansExecution: \"allPlansExecution\"\n}>\n\n/** @public */\nexport declare type ExplainVerbosity = string\n\n/**\n * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n * ignores the verbosity parameter and executes in \"queryPlanner\".\n * @public\n */\nexport declare type ExplainVerbosityLike = ExplainVerbosity | boolean\n\n/** A MongoDB filter can be some portion of the schema or a set of operators @public */\nexport declare type Filter<TSchema> = {\n    [P in keyof WithId<TSchema>]?: Condition<WithId<TSchema>[P]>\n} & RootFilterOperators<WithId<TSchema>>\n\n/** @public */\nexport declare type FilterOperations<T> = T extends Record<string, any>\n    ? {\n          [key in keyof T]?: FilterOperators<T[key]>\n      }\n    : FilterOperators<T>\n\n/** @public */\nexport declare interface FilterOperators<TValue>\n    extends NonObjectIdLikeDocument {\n    $eq?: TValue\n    $gt?: TValue\n    $gte?: TValue\n    $in?: ReadonlyArray<TValue>\n    $lt?: TValue\n    $lte?: TValue\n    $ne?: TValue\n    $nin?: ReadonlyArray<TValue>\n    $not?: TValue extends string\n        ? FilterOperators<TValue> | RegExp\n        : FilterOperators<TValue>\n    /**\n     * When `true`, `$exists` matches the documents that contain the field,\n     * including documents where the field value is null.\n     */\n    $exists?: boolean\n    $type?: BSONType | BSONTypeAlias\n    $expr?: Record<string, any>\n    $jsonSchema?: Record<string, any>\n    $mod?: TValue extends number ? [number, number] : never\n    $regex?: TValue extends string ? RegExp | BSONRegExp | string : never\n    $options?: TValue extends string ? string : never\n    $geoIntersects?: {\n        $geometry: Document\n    }\n    $geoWithin?: Document\n    $near?: Document\n    $nearSphere?: Document\n    $maxDistance?: number\n    $all?: ReadonlyArray<any>\n    $elemMatch?: Document\n    $size?: TValue extends ReadonlyArray<any> ? number : never\n    $bitsAllClear?: BitwiseFilter\n    $bitsAllSet?: BitwiseFilter\n    $bitsAnyClear?: BitwiseFilter\n    $bitsAnySet?: BitwiseFilter\n    $rand?: Record<string, never>\n}\n\n/** @public */\nexport declare class FindCursor<TSchema = any> extends AbstractCursor<TSchema> {\n    /* Excluded from this release type: [kFilter] */\n    /* Excluded from this release type: [kNumReturned] */\n    /* Excluded from this release type: [kBuiltOptions] */\n    /* Excluded from this release type: __constructor */\n    clone(): FindCursor<TSchema>\n    map<T>(transform: (doc: TSchema) => T): FindCursor<T>\n    /* Excluded from this release type: _initialize */\n    /* Excluded from this release type: _getMore */\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    count(options?: CountOptions): Promise<number>\n    /** Execute the explain for the cursor */\n    explain(verbosity?: ExplainVerbosityLike): Promise<Document>\n    /** Set the cursor query */\n    filter(filter: Document): this\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint: Hint): this\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min: Document): this\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max: Document): this\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value: boolean): this\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value: boolean): this\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(\n        name: string,\n        value: string | boolean | number | Document,\n    ): this\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value: string): this\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value: number): this\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value: number): this\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project<T extends Document = Document>(value: Document): FindCursor<T>\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort: Sort | string, direction?: SortDirection): this\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow?: boolean): this\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value: CollationOptions): this\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value: number): this\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value: number): this\n}\n\n/** @public */\nexport declare interface FindOneAndDeleteOptions\n    extends CommandOperationOptions {\n    /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n    hint?: Document\n    /** Limits the fields to return for all matching documents. */\n    projection?: Document\n    /** Determines which document the operation modifies if the query selects multiple documents. */\n    sort?: Sort\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n}\n\n/** @public */\nexport declare interface FindOneAndReplaceOptions\n    extends CommandOperationOptions {\n    /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n    bypassDocumentValidation?: boolean\n    /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n    hint?: Document\n    /** Limits the fields to return for all matching documents. */\n    projection?: Document\n    /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n    returnDocument?: ReturnDocument\n    /** Determines which document the operation modifies if the query selects multiple documents. */\n    sort?: Sort\n    /** Upsert the document if it does not exist. */\n    upsert?: boolean\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n}\n\n/** @public */\nexport declare interface FindOneAndUpdateOptions\n    extends CommandOperationOptions {\n    /** Optional list of array filters referenced in filtered positional operators */\n    arrayFilters?: Document[]\n    /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n    bypassDocumentValidation?: boolean\n    /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n    hint?: Document\n    /** Limits the fields to return for all matching documents. */\n    projection?: Document\n    /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n    returnDocument?: ReturnDocument\n    /** Determines which document the operation modifies if the query selects multiple documents. */\n    sort?: Sort\n    /** Upsert the document if it does not exist. */\n    upsert?: boolean\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n}\n\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nexport declare class FindOperators {\n    bulkOperation: BulkOperationBase\n    /* Excluded from this release type: __constructor */\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument: Document | Document[]): BulkOperationBase\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument: Document | Document[]): BulkOperationBase\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement: Document): BulkOperationBase\n    /** Add a delete one operation to the bulk operation */\n    deleteOne(): BulkOperationBase\n    /** Add a delete many operation to the bulk operation */\n    delete(): BulkOperationBase\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert(): this\n    /** Specifies the collation for the query condition. */\n    collation(collation: CollationOptions): this\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters: Document[]): this\n    /** Specifies hint for the bulk operation. */\n    hint(hint: Hint): this\n}\n\n/**\n * @public\n * @typeParam TSchema - Unused schema definition, deprecated usage, only specify `FindOptions` with no generic\n */\nexport declare interface FindOptions<TSchema extends Document = Document>\n    extends Omit<CommandOperationOptions, \"writeConcern\"> {\n    /** Sets the limit of documents returned in the query. */\n    limit?: number\n    /** Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]` etc. */\n    sort?: Sort\n    /** The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` **or** `{'a': 0, 'b': 0}` */\n    projection?: Document\n    /** Set to skip N documents ahead in your query (useful for pagination). */\n    skip?: number\n    /** Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}` */\n    hint?: Hint\n    /** Specify if the cursor can timeout. */\n    timeout?: boolean\n    /** Specify if the cursor is tailable. */\n    tailable?: boolean\n    /** Specify if the cursor is a tailable-await cursor. Requires `tailable` to be true */\n    awaitData?: boolean\n    /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n    batchSize?: number\n    /** If true, returns only the index keys in the resulting documents. */\n    returnKey?: boolean\n    /** The inclusive lower bound for a specific index */\n    min?: Document\n    /** The exclusive upper bound for a specific index */\n    max?: Document\n    /** Number of milliseconds to wait before aborting the query. */\n    maxTimeMS?: number\n    /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true */\n    maxAwaitTimeMS?: number\n    /** The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that. */\n    noCursorTimeout?: boolean\n    /** Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields). */\n    collation?: CollationOptions\n    /** Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher) */\n    allowDiskUse?: boolean\n    /** Determines whether to close the cursor after the first batch. Defaults to false. */\n    singleBatch?: boolean\n    /** For queries against a sharded collection, allows the command (or subsequent getMore commands) to return partial results, rather than an error, if one or more queried shards are unavailable. */\n    allowPartialResults?: boolean\n    /** Determines whether to return the record identifier for each document. If true, adds a field $recordId to the returned documents. */\n    showRecordId?: boolean\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n    /**\n     * Option to enable an optimized code path for queries looking for a particular range of `ts` values in the oplog. Requires `tailable` to be true.\n     * @deprecated Starting from MongoDB 4.4 this flag is not needed and will be ignored.\n     */\n    oplogReplay?: boolean\n}\n\n/** @public */\nexport declare type Flatten<Type> = Type extends ReadonlyArray<infer Item>\n    ? Item\n    : Type\n\n/** @public */\nexport declare type GenericListener = (...args: any[]) => void\n\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nexport declare class GridFSBucket extends TypedEventEmitter<GridFSBucketEvents> {\n    /* Excluded from this release type: s */\n    /**\n     * When the first call to openUploadStream is made, the upload stream will\n     * check to see if it needs to create the proper indexes on the chunks and\n     * files collections. This event is fired either when 1) it determines that\n     * no index creation is necessary, 2) when it successfully creates the\n     * necessary indexes.\n     * @event\n     */\n    static readonly INDEX: \"index\"\n    constructor(db: Db, options?: GridFSBucketOptions)\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(\n        filename: string,\n        options?: GridFSBucketWriteStreamOptions,\n    ): GridFSBucketWriteStream\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(\n        id: ObjectId,\n        filename: string,\n        options?: GridFSBucketWriteStreamOptions,\n    ): GridFSBucketWriteStream\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(\n        id: ObjectId,\n        options?: GridFSBucketReadStreamOptions,\n    ): GridFSBucketReadStream\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    delete(id: ObjectId): Promise<void>\n    /** Convenience wrapper around find on the files collection */\n    find(\n        filter?: Filter<GridFSFile>,\n        options?: FindOptions,\n    ): FindCursor<GridFSFile>\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(\n        filename: string,\n        options?: GridFSBucketReadStreamOptionsWithRevision,\n    ): GridFSBucketReadStream\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    rename(id: ObjectId, filename: string): Promise<void>\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    drop(): Promise<void>\n}\n\n/** @public */\nexport declare type GridFSBucketEvents = {\n    index(): void\n}\n\n/** @public */\nexport declare interface GridFSBucketOptions extends WriteConcernOptions {\n    /** The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot. */\n    bucketName?: string\n    /** Number of bytes stored in each chunk. Defaults to 255KB */\n    chunkSizeBytes?: number\n    /** Read preference to be passed to read operations */\n    readPreference?: ReadPreference\n}\n\n/* Excluded from this release type: GridFSBucketPrivate */\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nexport declare class GridFSBucketReadStream\n    extends Readable\n    implements NodeJS.ReadableStream\n{\n    /* Excluded from this release type: s */\n    /**\n     * An error occurred\n     * @event\n     */\n    static readonly ERROR: \"error\"\n    /**\n     * Fires when the stream loaded the file document corresponding to the provided id.\n     * @event\n     */\n    static readonly FILE: \"file\"\n    /**\n     * Emitted when a chunk of data is available to be consumed.\n     * @event\n     */\n    static readonly DATA: \"data\"\n    /**\n     * Fired when the stream is exhausted (no more data events).\n     * @event\n     */\n    static readonly END: \"end\"\n    /**\n     * Fired when the stream is exhausted and the underlying cursor is killed\n     * @event\n     */\n    static readonly CLOSE: \"close\"\n    /* Excluded from this release type: __constructor */\n    /* Excluded from this release type: _read */\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start?: number): this\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end?: number): this\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    abort(): Promise<void>\n}\n\n/** @public */\nexport declare interface GridFSBucketReadStreamOptions {\n    sort?: Sort\n    skip?: number\n    /**\n     * 0-indexed non-negative byte offset from the beginning of the file\n     */\n    start?: number\n    /**\n     * 0-indexed non-negative byte offset to the end of the file contents\n     * to be returned by the stream. `end` is non-inclusive\n     */\n    end?: number\n}\n\n/** @public */\nexport declare interface GridFSBucketReadStreamOptionsWithRevision\n    extends GridFSBucketReadStreamOptions {\n    /** The revision number relative to the oldest file with the given filename. 0\n     * gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the\n     * newest. */\n    revision?: number\n}\n\n/* Excluded from this release type: GridFSBucketReadStreamPrivate */\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nexport declare class GridFSBucketWriteStream {\n    /*\n    `implements NodeJS.WritableStream`\n    Has to be removed, otherwise tsc places a `/// <reference types=\"vinyl-fs\" />` in the output file,\n    because vinyl-fs messed with NodeJS.WritableStream in the global scope:\n    https://github.com/DefinitelyTyped/DefinitelyTyped/blob/45372bb8a679f310f65765321ed38399055dcf1b/types/vinyl-fs/v1/index.d.ts#L9 */\n\n    bucket: GridFSBucket\n    chunks: Collection<GridFSChunk>\n    filename: string\n    files: Collection<GridFSFile>\n    options: GridFSBucketWriteStreamOptions\n    done: boolean\n    id: ObjectId\n    chunkSizeBytes: number\n    bufToStore: Buffer\n    length: number\n    n: number\n    pos: number\n    state: {\n        streamEnd: boolean\n        outstandingRequests: number\n        errored: boolean\n        aborted: boolean\n    }\n    writeConcern?: WriteConcern\n    /** @event */\n    static readonly CLOSE = \"close\"\n    /** @event */\n    static readonly ERROR = \"error\"\n    /**\n     * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\n     * @event\n     */\n    static readonly FINISH = \"finish\"\n    /* Excluded from this release type: __constructor */\n    /**\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encodingOrCallback - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     * @returns False if this write required flushing a chunk to MongoDB. True otherwise.\n     */\n    write(chunk: Buffer | string): boolean\n    write(chunk: Buffer | string, callback: Callback<void>): boolean\n    write(chunk: Buffer | string, encoding: BufferEncoding | undefined): boolean\n    write(\n        chunk: Buffer | string,\n        encoding: BufferEncoding | undefined,\n        callback: Callback<void>,\n    ): boolean\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    abort(): Promise<void>\n    /**\n     * Tells the stream that no more data will be coming in. The stream will\n     * persist the remaining data to MongoDB, write the files document, and\n     * then emit a 'finish' event.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when all files and chunks have been persisted to MongoDB\n     */\n    end(): this\n    end(chunk: Buffer): this\n    end(callback: Callback<GridFSFile | void>): this\n    end(chunk: Buffer, callback: Callback<GridFSFile | void>): this\n    end(chunk: Buffer, encoding: BufferEncoding): this\n    end(\n        chunk: Buffer,\n        encoding: BufferEncoding | undefined,\n        callback: Callback<GridFSFile | void>,\n    ): this\n}\n\n/** @public */\nexport declare interface GridFSBucketWriteStreamOptions\n    extends WriteConcernOptions {\n    /** Overwrite this bucket's chunkSizeBytes for this file */\n    chunkSizeBytes?: number\n    /** Custom file id for the GridFS file. */\n    id?: ObjectId\n    /** Object to store in the file document's `metadata` field */\n    metadata?: Document\n    /** String to store in the file document's `contentType` field */\n    contentType?: string\n    /** Array of strings to store in the file document's `aliases` field */\n    aliases?: string[]\n}\n\n/** @public */\nexport declare interface GridFSChunk {\n    _id: ObjectId\n    files_id: ObjectId\n    n: number\n    data: Buffer | Uint8Array\n}\n\n/** @public */\nexport declare interface GridFSFile {\n    _id: ObjectId\n    length: number\n    chunkSize: number\n    filename: string\n    contentType?: string\n    aliases?: string[]\n    metadata?: Document\n    uploadDate: Date\n}\n\n/** @public */\nexport declare const GSSAPICanonicalizationValue: Readonly<{\n    readonly on: true\n    readonly off: false\n    readonly none: \"none\"\n    readonly forward: \"forward\"\n    readonly forwardAndReverse: \"forwardAndReverse\"\n}>\n\n/** @public */\nexport declare type GSSAPICanonicalizationValue =\n    (typeof GSSAPICanonicalizationValue)[keyof typeof GSSAPICanonicalizationValue]\n\n/** @public */\nexport declare interface HedgeOptions {\n    /** Explicitly enable or disable hedged reads. */\n    enabled?: boolean\n}\n\n/** @public */\nexport declare type Hint = string | Document\n\n/** @public */\nexport declare class HostAddress {\n    host: string | undefined\n    port: number | undefined\n    socketPath: string | undefined\n    isIPv6: boolean\n    constructor(hostString: string)\n    inspect(): string\n    toString(): string\n    static fromString(this: void, s: string): HostAddress\n    static fromHostPort(host: string, port: number): HostAddress\n    static fromSrvRecord({ name, port }: SrvRecord): HostAddress\n}\n\n/** @public */\nexport declare interface IndexDescription\n    extends Pick<\n        CreateIndexesOptions,\n        | \"background\"\n        | \"unique\"\n        | \"partialFilterExpression\"\n        | \"sparse\"\n        | \"hidden\"\n        | \"expireAfterSeconds\"\n        | \"storageEngine\"\n        | \"version\"\n        | \"weights\"\n        | \"default_language\"\n        | \"language_override\"\n        | \"textIndexVersion\"\n        | \"2dsphereIndexVersion\"\n        | \"bits\"\n        | \"min\"\n        | \"max\"\n        | \"bucketSize\"\n        | \"wildcardProjection\"\n    > {\n    collation?: CollationOptions\n    name?: string\n    key:\n        | {\n              [key: string]: IndexDirection\n          }\n        | Map<string, IndexDirection>\n}\n\n/** @public */\nexport declare type IndexDirection =\n    | -1\n    | 1\n    | \"2d\"\n    | \"2dsphere\"\n    | \"text\"\n    | \"geoHaystack\"\n    | \"hashed\"\n    | number\n\n/** @public */\nexport declare interface IndexInformationOptions {\n    full?: boolean\n    readPreference?: ReadPreference\n    session?: ClientSession\n}\n\n/** @public */\nexport declare type IndexSpecification = OneOrMore<\n    | string\n    | [string, IndexDirection]\n    | {\n          [key: string]: IndexDirection\n      }\n    | Map<string, IndexDirection>\n>\n\n/** Given an object shaped type, return the type of the _id field or default to ObjectId @public */\nexport declare type InferIdType<TSchema> = TSchema extends {\n    _id: infer IdType\n}\n    ? Record<any, never> extends IdType\n        ? never\n        : IdType\n    : TSchema extends {\n          _id?: infer IdType\n      }\n    ? unknown extends IdType\n        ? ObjectId\n        : IdType\n    : ObjectId\n\n/** @public */\nexport declare interface InsertManyResult<TSchema = Document> {\n    /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n    acknowledged: boolean\n    /** The number of inserted documents for this operations */\n    insertedCount: number\n    /** Map of the index of the inserted document to the id of the inserted document */\n    insertedIds: {\n        [key: number]: InferIdType<TSchema>\n    }\n}\n\n/** @public */\nexport declare interface InsertOneModel<TSchema extends Document = Document> {\n    /** The document to insert. */\n    document: OptionalId<TSchema>\n}\n\n/** @public */\nexport declare interface InsertOneOptions extends CommandOperationOptions {\n    /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n    bypassDocumentValidation?: boolean\n    /** Force server to assign _id values instead of driver. */\n    forceServerObjectId?: boolean\n}\n\n/** @public */\nexport declare interface InsertOneResult<TSchema = Document> {\n    /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n    acknowledged: boolean\n    /** The identifier that was inserted. If the server generated the identifier, this value will be null as the driver does not have access to that data */\n    insertedId: InferIdType<TSchema>\n}\n\nexport { Int32 }\n\n/** @public */\nexport declare type IntegerType = number | Int32 | Long | bigint\n\n/* Excluded from this release type: InternalAbstractCursorOptions */\n\n/** @public */\nexport declare type IsAny<Type, ResultIfAny, ResultIfNotAny> =\n    true extends false & Type ? ResultIfAny : ResultIfNotAny\n\n/**\n * Helper types for dot-notation filter attributes\n */\n/** @public */\nexport declare type Join<T extends unknown[], D extends string> = T extends []\n    ? \"\"\n    : T extends [string | number]\n    ? `${T[0]}`\n    : T extends [string | number, ...infer R]\n    ? `${T[0]}${D}${Join<R, D>}`\n    : string\n\n/* Excluded from this release type: kBeforeHandshake */\n\n/* Excluded from this release type: kBuffer */\n\n/* Excluded from this release type: kBuiltOptions */\n\n/* Excluded from this release type: kCancellationToken */\n\n/* Excluded from this release type: kCancellationToken_2 */\n\n/* Excluded from this release type: kCancelled */\n\n/* Excluded from this release type: kCancelled_2 */\n\n/* Excluded from this release type: kCheckedOut */\n\n/* Excluded from this release type: kClient */\n\n/* Excluded from this release type: kClosed */\n\n/* Excluded from this release type: kClosed_2 */\n\n/* Excluded from this release type: kClusterTime */\n\n/* Excluded from this release type: kConnection */\n\n/* Excluded from this release type: kConnectionCounter */\n\n/* Excluded from this release type: kConnections */\n\n/* Excluded from this release type: kCursorStream */\n\n/* Excluded from this release type: kDelayedTimeoutId */\n\n/* Excluded from this release type: kDescription */\n\n/* Excluded from this release type: kDocuments */\n\n/* Excluded from this release type: kErrorLabels */\n\n/** @public */\nexport declare type KeysOfAType<TSchema, Type> = {\n    [key in keyof TSchema]: NonNullable<TSchema[key]> extends Type ? key : never\n}[keyof TSchema]\n\n/** @public */\nexport declare type KeysOfOtherType<TSchema, Type> = {\n    [key in keyof TSchema]: NonNullable<TSchema[key]> extends Type ? never : key\n}[keyof TSchema]\n\n/* Excluded from this release type: kFilter */\n\n/* Excluded from this release type: kGeneration */\n\n/* Excluded from this release type: kGeneration_2 */\n\n/* Excluded from this release type: kHello */\n\n/* Excluded from this release type: kId */\n\n/* Excluded from this release type: kInit */\n\n/* Excluded from this release type: kInitialized */\n\n/* Excluded from this release type: kInternalClient */\n\n/* Excluded from this release type: kKilled */\n\n/* Excluded from this release type: kLastUseTime */\n\n/* Excluded from this release type: kMessageStream */\n\n/* Excluded from this release type: kMetrics */\n\n/* Excluded from this release type: kMinPoolSizeTimer */\n\n/* Excluded from this release type: kMode */\n\n/* Excluded from this release type: kMonitor */\n\n/* Excluded from this release type: kMonitorId */\n\n/* Excluded from this release type: kNamespace */\n\n/* Excluded from this release type: kNumReturned */\n\n/* Excluded from this release type: kOptions */\n\n/* Excluded from this release type: kOptions_2 */\n\n/* Excluded from this release type: kOptions_3 */\n\n/* Excluded from this release type: kPending */\n\n/* Excluded from this release type: kPinnedConnection */\n\n/* Excluded from this release type: kPipeline */\n\n/* Excluded from this release type: kPoolState */\n\n/* Excluded from this release type: kProcessingWaitQueue */\n\n/* Excluded from this release type: kQueue */\n\n/* Excluded from this release type: kRoundTripTime */\n\n/* Excluded from this release type: kRTTPinger */\n\n/* Excluded from this release type: kServer */\n\n/* Excluded from this release type: kServer_2 */\n\n/* Excluded from this release type: kServer_3 */\n\n/* Excluded from this release type: kServerError */\n\n/* Excluded from this release type: kServerSession */\n\n/* Excluded from this release type: kServiceGenerations */\n\n/* Excluded from this release type: kSession */\n\n/* Excluded from this release type: kSession_2 */\n\n/* Excluded from this release type: kSnapshotEnabled */\n\n/* Excluded from this release type: kSnapshotTime */\n\n/* Excluded from this release type: kStream */\n\n/* Excluded from this release type: kTransform */\n\n/* Excluded from this release type: kTxnNumberIncrement */\n\n/* Excluded from this release type: kWaitQueue */\n\n/* Excluded from this release type: kWaitQueue_2 */\n\n/** @public */\nexport declare const LEGAL_TCP_SOCKET_OPTIONS: readonly [\n    \"family\",\n    \"hints\",\n    \"localAddress\",\n    \"localPort\",\n    \"lookup\",\n]\n\n/** @public */\nexport declare const LEGAL_TLS_SOCKET_OPTIONS: readonly [\n    \"ALPNProtocols\",\n    \"ca\",\n    \"cert\",\n    \"checkServerIdentity\",\n    \"ciphers\",\n    \"crl\",\n    \"ecdhCurve\",\n    \"key\",\n    \"minDHSize\",\n    \"passphrase\",\n    \"pfx\",\n    \"rejectUnauthorized\",\n    \"secureContext\",\n    \"secureProtocol\",\n    \"servername\",\n    \"session\",\n]\n\n/* Excluded from this release type: List */\n\n/** @public */\nexport declare class ListCollectionsCursor<\n    T extends Pick<CollectionInfo, \"name\" | \"type\"> | CollectionInfo =\n        | Pick<CollectionInfo, \"name\" | \"type\">\n        | CollectionInfo,\n> extends AbstractCursor<T> {\n    parent: Db\n    filter: Document\n    options?: ListCollectionsOptions\n    constructor(db: Db, filter: Document, options?: ListCollectionsOptions)\n    clone(): ListCollectionsCursor<T>\n    /* Excluded from this release type: _initialize */\n}\n\n/** @public */\nexport declare interface ListCollectionsOptions\n    extends Omit<CommandOperationOptions, \"writeConcern\"> {\n    /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */\n    nameOnly?: boolean\n    /** Since 4.0: If true and nameOnly is true, allows a user without the required privilege (i.e. listCollections action on the database) to run the command when access control is enforced. */\n    authorizedCollections?: boolean\n    /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n    batchSize?: number\n}\n\n/** @public */\nexport declare interface ListDatabasesOptions extends CommandOperationOptions {\n    /** A query predicate that determines which databases are listed */\n    filter?: Document\n    /** A flag to indicate whether the command should return just the database names, or return both database names and size information */\n    nameOnly?: boolean\n    /** A flag that determines which databases are returned based on the user privileges when access control is enabled */\n    authorizedDatabases?: boolean\n}\n\n/** @public */\nexport declare interface ListDatabasesResult {\n    databases: ({\n        name: string\n        sizeOnDisk?: number\n        empty?: boolean\n    } & Document)[]\n    totalSize?: number\n    totalSizeMb?: number\n    ok: 1 | 0\n}\n\n/** @public */\nexport declare class ListIndexesCursor extends AbstractCursor {\n    parent: Collection\n    options?: ListIndexesOptions\n    constructor(collection: Collection, options?: ListIndexesOptions)\n    clone(): ListIndexesCursor\n    /* Excluded from this release type: _initialize */\n}\n\n/** @public */\nexport declare interface ListIndexesOptions\n    extends Omit<CommandOperationOptions, \"writeConcern\"> {\n    /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n    batchSize?: number\n}\n\nexport { Long }\n\n/** @public */\nexport declare type MatchKeysAndValues<TSchema> = Readonly<Partial<TSchema>> &\n    Record<string, any>\n\nexport { MaxKey }\n\n/* Excluded from this release type: MessageHeader */\n\n/* Excluded from this release type: MessageStream */\n\n/* Excluded from this release type: MessageStreamOptions */\nexport { MinKey }\n\n/**\n * @public\n * @deprecated This type will be completely removed and findOneAndUpdate,\n *             findOneAndDelete, and findOneAndReplace will then return the\n *             actual result document.\n */\nexport declare interface ModifyResult<TSchema = Document> {\n    value: WithId<TSchema> | null\n    lastErrorObject?: Document\n    ok: 0 | 1\n}\n\n/** @public */\nexport declare const MONGO_CLIENT_EVENTS: readonly [\n    \"connectionPoolCreated\",\n    \"connectionPoolReady\",\n    \"connectionPoolCleared\",\n    \"connectionPoolClosed\",\n    \"connectionCreated\",\n    \"connectionReady\",\n    \"connectionClosed\",\n    \"connectionCheckOutStarted\",\n    \"connectionCheckOutFailed\",\n    \"connectionCheckedOut\",\n    \"connectionCheckedIn\",\n    \"commandStarted\",\n    \"commandSucceeded\",\n    \"commandFailed\",\n    \"serverOpening\",\n    \"serverClosed\",\n    \"serverDescriptionChanged\",\n    \"topologyOpening\",\n    \"topologyClosed\",\n    \"topologyDescriptionChanged\",\n    \"error\",\n    \"timeout\",\n    \"close\",\n    \"serverHeartbeatStarted\",\n    \"serverHeartbeatSucceeded\",\n    \"serverHeartbeatFailed\",\n]\n\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nexport declare class MongoAPIError extends MongoDriverError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nexport declare class MongoAWSError extends MongoRuntimeError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nexport declare class MongoBatchReExecutionError extends MongoAPIError {\n    constructor(message?: string)\n    get name(): string\n}\n\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nexport declare class MongoBulkWriteError extends MongoServerError {\n    result: BulkWriteResult\n    writeErrors: OneOrMore<WriteError>\n    err?: WriteConcernError\n    /** Creates a new MongoBulkWriteError */\n    constructor(\n        error:\n            | {\n                  message: string\n                  code: number\n                  writeErrors?: WriteError[]\n              }\n            | WriteConcernError\n            | AnyError,\n        result: BulkWriteResult,\n    )\n    get name(): string\n    /** Number of documents inserted. */\n    get insertedCount(): number\n    /** Number of documents matched for update. */\n    get matchedCount(): number\n    /** Number of documents modified. */\n    get modifiedCount(): number\n    /** Number of documents deleted. */\n    get deletedCount(): number\n    /** Number of documents upserted. */\n    get upsertedCount(): number\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds(): {\n        [key: number]: any\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds(): {\n        [key: number]: any\n    }\n}\n\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport declare class MongoChangeStreamError extends MongoRuntimeError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nexport declare class MongoClient extends TypedEventEmitter<MongoClientEvents> {\n    /* Excluded from this release type: s */\n    /* Excluded from this release type: topology */\n    /* Excluded from this release type: mongoLogger */\n    /* Excluded from this release type: connectionLock */\n    /* Excluded from this release type: [kOptions] */\n    constructor(url: string, options?: MongoClientOptions)\n    get options(): Readonly<MongoOptions>\n    get serverApi(): Readonly<ServerApi | undefined>\n    /* Excluded from this release type: monitorCommands */\n    /* Excluded from this release type: monitorCommands */\n    get autoEncrypter(): AutoEncrypter | undefined\n    get readConcern(): ReadConcern | undefined\n    get writeConcern(): WriteConcern | undefined\n    get readPreference(): ReadPreference\n    get bsonOptions(): BSONSerializeOptions\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    connect(): Promise<this>\n    /* Excluded from this release type: _connect */\n    /**\n     * Close the client and its underlying connections\n     *\n     * @param force - Force close, emitting no events\n     */\n    close(force?: boolean): Promise<void>\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName?: string, options?: DbOptions): Db\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static connect(\n        url: string,\n        options?: MongoClientOptions,\n    ): Promise<MongoClient>\n    /** Starts a new session on the server */\n    startSession(options?: ClientSessionOptions): ClientSession\n    /**\n     * Runs a given operation with an implicitly created session. The lifetime of the session\n     * will be handled without the need for user interaction.\n     *\n     * NOTE: presently the operation MUST return a Promise (either explicit or implicitly as an async function)\n     *\n     * @param options - Optional settings for the command\n     * @param callback - An callback to execute with an implicitly created session\n     */\n    withSession(callback: WithSessionCallback): Promise<void>\n    withSession(\n        options: ClientSessionOptions,\n        callback: WithSessionCallback,\n    ): Promise<void>\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch<\n        TSchema extends Document = Document,\n        TChange extends Document = ChangeStreamDocument<TSchema>,\n    >(\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream<TSchema, TChange>\n}\n\n/** @public */\nexport declare type MongoClientEvents = Pick<\n    TopologyEvents,\n    (typeof MONGO_CLIENT_EVENTS)[number]\n> & {\n    open(mongoClient: MongoClient): void\n}\n\n/**\n * Describes all possible URI query options for the mongo client\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/connection-string\n */\nexport declare interface MongoClientOptions\n    extends BSONSerializeOptions,\n        SupportedNodeConnectionOptions {\n    /** Specifies the name of the replica set, if the mongod is a member of a replica set. */\n    replicaSet?: string\n    /** Enables or disables TLS/SSL for the connection. */\n    tls?: boolean\n    /** A boolean to enable or disables TLS/SSL for the connection. (The ssl option is equivalent to the tls option.) */\n    ssl?: boolean\n    /** Specifies the location of a local TLS Certificate */\n    tlsCertificateFile?: string\n    /** Specifies the location of a local .pem file that contains either the client's TLS/SSL certificate and key or only the client's TLS/SSL key when tlsCertificateFile is used to provide the certificate. */\n    tlsCertificateKeyFile?: string\n    /** Specifies the password to de-crypt the tlsCertificateKeyFile. */\n    tlsCertificateKeyFilePassword?: string\n    /** Specifies the location of a local .pem file that contains the root certificate chain from the Certificate Authority. This file is used to validate the certificate presented by the mongod/mongos instance. */\n    tlsCAFile?: string\n    /** Bypasses validation of the certificates presented by the mongod/mongos instance */\n    tlsAllowInvalidCertificates?: boolean\n    /** Disables hostname validation of the certificate presented by the mongod/mongos instance. */\n    tlsAllowInvalidHostnames?: boolean\n    /** Disables various certificate validations. */\n    tlsInsecure?: boolean\n    /** The time in milliseconds to attempt a connection before timing out. */\n    connectTimeoutMS?: number\n    /** The time in milliseconds to attempt a send or receive on a socket before the attempt times out. */\n    socketTimeoutMS?: number\n    /** An array or comma-delimited string of compressors to enable network compression for communication between this client and a mongod/mongos instance. */\n    compressors?: CompressorName[] | string\n    /** An integer that specifies the compression level if using zlib for network compression. */\n    zlibCompressionLevel?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined\n    /** The maximum number of hosts to connect to when using an srv connection string, a setting of `0` means unlimited hosts */\n    srvMaxHosts?: number\n    /**\n     * Modifies the srv URI to look like:\n     *\n     * `_{srvServiceName}._tcp.{hostname}.{domainname}`\n     *\n     * Querying this DNS URI is expected to respond with SRV records\n     */\n    srvServiceName?: string\n    /** The maximum number of connections in the connection pool. */\n    maxPoolSize?: number\n    /** The minimum number of connections in the connection pool. */\n    minPoolSize?: number\n    /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n    maxConnecting?: number\n    /** The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. */\n    maxIdleTimeMS?: number\n    /** The maximum time in milliseconds that a thread can wait for a connection to become available. */\n    waitQueueTimeoutMS?: number\n    /** Specify a read concern for the collection (only MongoDB 3.2 or higher supported) */\n    readConcern?: ReadConcernLike\n    /** The level of isolation */\n    readConcernLevel?: ReadConcernLevel\n    /** Specifies the read preferences for this connection */\n    readPreference?: ReadPreferenceMode | ReadPreference\n    /** Specifies, in seconds, how stale a secondary can be before the client stops using it for read operations. */\n    maxStalenessSeconds?: number\n    /** Specifies the tags document as a comma-separated list of colon-separated key-value pairs.  */\n    readPreferenceTags?: TagSet[]\n    /** The auth settings for when connection to server. */\n    auth?: Auth\n    /** Specify the database name associated with the user’s credentials. */\n    authSource?: string\n    /** Specify the authentication mechanism that MongoDB will use to authenticate the connection. */\n    authMechanism?: AuthMechanism\n    /** Specify properties for the specified authMechanism as a comma-separated list of colon-separated key-value pairs. */\n    authMechanismProperties?: AuthMechanismProperties\n    /** The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. */\n    localThresholdMS?: number\n    /** Specifies how long (in milliseconds) to block for server selection before throwing an exception.  */\n    serverSelectionTimeoutMS?: number\n    /** heartbeatFrequencyMS controls when the driver checks the state of the MongoDB deployment. Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. */\n    heartbeatFrequencyMS?: number\n    /** Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. */\n    minHeartbeatFrequencyMS?: number\n    /** The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections */\n    appName?: string\n    /** Enables retryable reads. */\n    retryReads?: boolean\n    /** Enable retryable writes. */\n    retryWrites?: boolean\n    /** Allow a driver to force a Single topology type with a connection string containing one host */\n    directConnection?: boolean\n    /** Instruct the driver it is connecting to a load balancer fronting a mongos like service */\n    loadBalanced?: boolean\n    /**\n     * The write concern w value\n     * @deprecated Please use the `writeConcern` option instead\n     */\n    w?: W\n    /**\n     * The write concern timeout\n     * @deprecated Please use the `writeConcern` option instead\n     */\n    wtimeoutMS?: number\n    /**\n     * The journal write concern\n     * @deprecated Please use the `writeConcern` option instead\n     */\n    journal?: boolean\n    /**\n     * A MongoDB WriteConcern, which describes the level of acknowledgement\n     * requested from MongoDB for write operations.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n     */\n    writeConcern?: WriteConcern | WriteConcernSettings\n    /** Validate mongod server certificate against Certificate Authority */\n    sslValidate?: boolean\n    /** SSL Certificate file path. */\n    sslCA?: string\n    /** SSL Certificate file path. */\n    sslCert?: string\n    /** SSL Key file file path. */\n    sslKey?: string\n    /** SSL Certificate pass phrase. */\n    sslPass?: string\n    /** SSL Certificate revocation list file path. */\n    sslCRL?: string\n    /** TCP Connection no delay */\n    noDelay?: boolean\n    /** TCP Connection keep alive enabled */\n    keepAlive?: boolean\n    /** The number of milliseconds to wait before initiating keepAlive on the TCP socket */\n    keepAliveInitialDelay?: number\n    /** Force server to assign `_id` values instead of driver */\n    forceServerObjectId?: boolean\n    /** A primary key factory function for generation of custom `_id` keys */\n    pkFactory?: PkFactory\n    /** Enable command monitoring for this client */\n    monitorCommands?: boolean\n    /** Server API version */\n    serverApi?: ServerApi | ServerApiVersion\n    /**\n     * Optionally enable in-use auto encryption\n     *\n     * @remarks\n     *  Automatic encryption is an enterprise only feature that only applies to operations on a collection. Automatic encryption is not supported for operations on a database or view, and operations that are not bypassed will result in error\n     *  (see [libmongocrypt: Auto Encryption Allow-List](https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/client-side-encryption.rst#libmongocrypt-auto-encryption-allow-list)). To bypass automatic encryption for all operations, set bypassAutoEncryption=true in AutoEncryptionOpts.\n     *\n     *  Automatic encryption requires the authenticated user to have the [listCollections privilege action](https://www.mongodb.com/docs/manual/reference/command/listCollections/#dbcmd.listCollections).\n     *\n     *  If a MongoClient with a limited connection pool size (i.e a non-zero maxPoolSize) is configured with AutoEncryptionOptions, a separate internal MongoClient is created if any of the following are true:\n     *  - AutoEncryptionOptions.keyVaultClient is not passed.\n     *  - AutoEncryptionOptions.bypassAutomaticEncryption is false.\n     *\n     * If an internal MongoClient is created, it is configured with the same options as the parent MongoClient except minPoolSize is set to 0 and AutoEncryptionOptions is omitted.\n     */\n    autoEncryption?: AutoEncryptionOptions\n    /** Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver */\n    driverInfo?: DriverInfo\n    /** Configures a Socks5 proxy host used for creating TCP connections. */\n    proxyHost?: string\n    /** Configures a Socks5 proxy port used for creating TCP connections. */\n    proxyPort?: number\n    /** Configures a Socks5 proxy username when the proxy in proxyHost requires username/password authentication. */\n    proxyUsername?: string\n    /** Configures a Socks5 proxy password when the proxy in proxyHost requires username/password authentication. */\n    proxyPassword?: string\n    /* Excluded from this release type: srvPoller */\n    /* Excluded from this release type: connectionType */\n    /* Excluded from this release type: __index */\n}\n\n/* Excluded from this release type: MongoClientPrivate */\n\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nexport declare class MongoCompatibilityError extends MongoAPIError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nexport declare class MongoCredentials {\n    /** The username used for authentication */\n    readonly username: string\n    /** The password used for authentication */\n    readonly password: string\n    /** The database that the user should authenticate against */\n    readonly source: string\n    /** The method used to authenticate */\n    readonly mechanism: AuthMechanism\n    /** Special properties used by some types of auth mechanisms */\n    readonly mechanismProperties: AuthMechanismProperties\n    constructor(options: MongoCredentialsOptions)\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other: MongoCredentials): boolean\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello?: Document): MongoCredentials\n    validate(): void\n    static merge(\n        creds: MongoCredentials | undefined,\n        options: Partial<MongoCredentialsOptions>,\n    ): MongoCredentials\n}\n\n/** @public */\nexport declare interface MongoCredentialsOptions {\n    username: string\n    password: string\n    source: string\n    db?: string\n    mechanism?: AuthMechanism\n    mechanismProperties: AuthMechanismProperties\n}\n\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nexport declare class MongoCursorExhaustedError extends MongoAPIError {\n    constructor(message?: string)\n    get name(): string\n}\n\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nexport declare class MongoCursorInUseError extends MongoAPIError {\n    constructor(message?: string)\n    get name(): string\n}\n\n/** @public */\nexport declare class MongoDBNamespace {\n    db: string\n    collection: string | undefined\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db: string, collection?: string)\n    toString(): string\n    withCollection(collection: string): MongoDBNamespace\n    static fromString(namespace?: string): MongoDBNamespace\n}\n\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nexport declare class MongoDecompressionError extends MongoRuntimeError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nexport declare class MongoDriverError extends MongoError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nexport declare class MongoError extends Error {\n    /* Excluded from this release type: [kErrorLabels] */\n    /**\n     * This is a number in MongoServerError and a string in MongoDriverError\n     * @privateRemarks\n     * Define the type override on the subclasses when we can use the override keyword\n     */\n    code?: number | string\n    topologyVersion?: TopologyVersion\n    connectionGeneration?: number\n    cause?: Error\n    constructor(message: string | Error)\n    get name(): string\n    /** Legacy name for server error responses */\n    get errmsg(): string\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label: string): boolean\n    addErrorLabel(label: string): void\n    get errorLabels(): string[]\n}\n\n/** @public */\nexport declare const MongoErrorLabel: Readonly<{\n    readonly RetryableWriteError: \"RetryableWriteError\"\n    readonly TransientTransactionError: \"TransientTransactionError\"\n    readonly UnknownTransactionCommitResult: \"UnknownTransactionCommitResult\"\n    readonly ResumableChangeStreamError: \"ResumableChangeStreamError\"\n    readonly HandshakeError: \"HandshakeError\"\n    readonly ResetPool: \"ResetPool\"\n    readonly InterruptInUseConnections: \"InterruptInUseConnections\"\n    readonly NoWritesPerformed: \"NoWritesPerformed\"\n}>\n\n/** @public */\nexport declare type MongoErrorLabel =\n    (typeof MongoErrorLabel)[keyof typeof MongoErrorLabel]\n\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nexport declare class MongoExpiredSessionError extends MongoAPIError {\n    constructor(message?: string)\n    get name(): string\n}\n\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nexport declare class MongoGridFSChunkError extends MongoRuntimeError {\n    constructor(message: string)\n    get name(): string\n}\n\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport declare class MongoGridFSStreamError extends MongoRuntimeError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nexport declare class MongoInvalidArgumentError extends MongoAPIError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nexport declare class MongoKerberosError extends MongoRuntimeError {\n    constructor(message: string)\n    get name(): string\n}\n\n/* Excluded from this release type: MongoLoggableComponent */\n\n/* Excluded from this release type: MongoLogger */\n\n/* Excluded from this release type: MongoLoggerEnvOptions */\n\n/* Excluded from this release type: MongoLoggerMongoClientOptions */\n\n/* Excluded from this release type: MongoLoggerOptions */\n\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nexport declare class MongoMissingCredentialsError extends MongoAPIError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nexport declare class MongoMissingDependencyError extends MongoAPIError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nexport declare class MongoNetworkError extends MongoError {\n    /* Excluded from this release type: [kBeforeHandshake] */\n    constructor(message: string | Error, options?: MongoNetworkErrorOptions)\n    get name(): string\n}\n\n/** @public */\nexport declare interface MongoNetworkErrorOptions {\n    /** Indicates the timeout happened before a connection handshake completed */\n    beforeHandshake: boolean\n}\n\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nexport declare class MongoNetworkTimeoutError extends MongoNetworkError {\n    constructor(message: string, options?: MongoNetworkErrorOptions)\n    get name(): string\n}\n\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nexport declare class MongoNotConnectedError extends MongoAPIError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * Mongo Client Options\n * @public\n */\nexport declare interface MongoOptions\n    extends Required<\n            Pick<\n                MongoClientOptions,\n                | \"autoEncryption\"\n                | \"connectTimeoutMS\"\n                | \"directConnection\"\n                | \"driverInfo\"\n                | \"forceServerObjectId\"\n                | \"minHeartbeatFrequencyMS\"\n                | \"heartbeatFrequencyMS\"\n                | \"keepAlive\"\n                | \"keepAliveInitialDelay\"\n                | \"localThresholdMS\"\n                | \"maxConnecting\"\n                | \"maxIdleTimeMS\"\n                | \"maxPoolSize\"\n                | \"minPoolSize\"\n                | \"monitorCommands\"\n                | \"noDelay\"\n                | \"pkFactory\"\n                | \"raw\"\n                | \"replicaSet\"\n                | \"retryReads\"\n                | \"retryWrites\"\n                | \"serverSelectionTimeoutMS\"\n                | \"socketTimeoutMS\"\n                | \"srvMaxHosts\"\n                | \"srvServiceName\"\n                | \"tlsAllowInvalidCertificates\"\n                | \"tlsAllowInvalidHostnames\"\n                | \"tlsInsecure\"\n                | \"waitQueueTimeoutMS\"\n                | \"zlibCompressionLevel\"\n            >\n        >,\n        SupportedNodeConnectionOptions {\n    appName?: string\n    hosts: HostAddress[]\n    srvHost?: string\n    credentials?: MongoCredentials\n    readPreference: ReadPreference\n    readConcern: ReadConcern\n    loadBalanced: boolean\n    serverApi: ServerApi\n    compressors: CompressorName[]\n    writeConcern: WriteConcern\n    dbName: string\n    metadata: ClientMetadata\n    autoEncrypter?: AutoEncrypter\n    proxyHost?: string\n    proxyPort?: number\n    proxyUsername?: string\n    proxyPassword?: string\n    /* Excluded from this release type: connectionType */\n    /* Excluded from this release type: encrypter */\n    /* Excluded from this release type: userSpecifiedAuthSource */\n    /* Excluded from this release type: userSpecifiedReplicaSet */\n    /**\n     * # NOTE ABOUT TLS Options\n     *\n     * If set TLS enabled, equivalent to setting the ssl option.\n     *\n     * ### Additional options:\n     *\n     * |    nodejs option     | MongoDB equivalent                                       | type                                   |\n     * |:---------------------|--------------------------------------------------------- |:---------------------------------------|\n     * | `ca`                 | `sslCA`, `tlsCAFile`                                     | `string \\| Buffer \\| Buffer[]`         |\n     * | `crl`                | `sslCRL`                                                 | `string \\| Buffer \\| Buffer[]`         |\n     * | `cert`               | `sslCert`, `tlsCertificateFile`, `tlsCertificateKeyFile` | `string \\| Buffer \\| Buffer[]`         |\n     * | `key`                | `sslKey`, `tlsCertificateKeyFile`                        | `string \\| Buffer \\| KeyObject[]`      |\n     * | `passphrase`         | `sslPass`, `tlsCertificateKeyFilePassword`               | `string`                               |\n     * | `rejectUnauthorized` | `sslValidate`                                            | `boolean`                              |\n     *\n     */\n    tls: boolean\n    /* Excluded from this release type: __index */\n    /* Excluded from this release type: mongoLoggerOptions */\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nexport declare class MongoParseError extends MongoDriverError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nexport declare class MongoRuntimeError extends MongoDriverError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nexport declare class MongoServerClosedError extends MongoAPIError {\n    constructor(message?: string)\n    get name(): string\n}\n\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nexport declare class MongoServerError extends MongoError {\n    codeName?: string\n    writeConcernError?: Document\n    errInfo?: Document\n    ok?: number;\n    [key: string]: any\n    constructor(message: ErrorDescription)\n    get name(): string\n}\n\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nexport declare class MongoServerSelectionError extends MongoSystemError {\n    constructor(message: string, reason: TopologyDescription)\n    get name(): string\n}\n\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nexport declare class MongoSystemError extends MongoError {\n    /** An optional reason context, such as an error saved during flow of monitoring and selecting servers */\n    reason?: TopologyDescription\n    constructor(message: string, reason: TopologyDescription)\n    get name(): string\n}\n\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nexport declare class MongoTailableCursorError extends MongoAPIError {\n    constructor(message?: string)\n    get name(): string\n}\n\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nexport declare class MongoTopologyClosedError extends MongoAPIError {\n    constructor(message?: string)\n    get name(): string\n}\n\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nexport declare class MongoTransactionError extends MongoAPIError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nexport declare class MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    constructor(message: string)\n    get name(): string\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nexport declare class MongoWriteConcernError extends MongoServerError {\n    /** The result document (provided if ok: 1) */\n    result?: Document\n    constructor(message: ErrorDescription, result?: Document)\n    get name(): string\n}\n\n/* Excluded from this release type: Monitor */\n\n/** @public */\nexport declare type MonitorEvents = {\n    serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void\n    serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void\n    serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void\n    resetServer(error?: MongoError): void\n    resetConnectionPool(): void\n    close(): void\n} & EventEmitterWithState\n\n/* Excluded from this release type: MonitorInterval */\n\n/* Excluded from this release type: MonitorIntervalOptions */\n\n/** @public */\nexport declare interface MonitorOptions\n    extends Omit<ConnectionOptions, \"id\" | \"generation\" | \"hostAddress\"> {\n    connectTimeoutMS: number\n    heartbeatFrequencyMS: number\n    minHeartbeatFrequencyMS: number\n}\n\n/* Excluded from this release type: MonitorPrivate */\n\n/* Excluded from this release type: Msg */\n\n/**\n * @public\n * returns tuple of strings (keys to be joined on '.') that represent every path into a schema\n * https://www.mongodb.com/docs/manual/tutorial/query-embedded-documents/\n *\n * @remarks\n * Through testing we determined that a depth of 8 is safe for the typescript compiler\n * and provides reasonable compilation times. This number is otherwise not special and\n * should be changed if issues are found with this level of checking. Beyond this\n * depth any helpers that make use of NestedPaths should devolve to not asserting any\n * type safety on the input.\n */\nexport declare type NestedPaths<\n    Type,\n    Depth extends number[],\n> = Depth[\"length\"] extends 8\n    ? []\n    : Type extends\n          | string\n          | number\n          | bigint\n          | boolean\n          | Date\n          | RegExp\n          | Buffer\n          | Uint8Array\n          | ((...args: any[]) => any)\n          | {\n                _bsontype: string\n            }\n    ? []\n    : Type extends ReadonlyArray<infer ArrayType>\n    ? [] | [number, ...NestedPaths<ArrayType, [...Depth, 1]>]\n    : Type extends Map<string, any>\n    ? [string]\n    : Type extends object\n    ? {\n          [Key in Extract<keyof Type, string>]: Type[Key] extends Type\n              ? [Key]\n              : Type extends Type[Key]\n              ? [Key]\n              : Type[Key] extends ReadonlyArray<infer ArrayType>\n              ? Type extends ArrayType\n                  ? [Key]\n                  : ArrayType extends Type\n                  ? [Key]\n                  : [Key, ...NestedPaths<Type[Key], [...Depth, 1]>] // child is not structured the same as the parent\n              : [Key, ...NestedPaths<Type[Key], [...Depth, 1]>] | [Key]\n      }[Extract<keyof Type, string>]\n    : []\n\n/**\n * @public\n * returns keys (strings) for every path into a schema with a value of type\n * https://www.mongodb.com/docs/manual/tutorial/query-embedded-documents/\n */\nexport declare type NestedPathsOfType<TSchema, Type> = KeysOfAType<\n    {\n        [Property in Join<NestedPaths<TSchema, []>, \".\">]: PropertyType<\n            TSchema,\n            Property\n        >\n    },\n    Type\n>\n\n/**\n * @public\n * A type that extends Document but forbids anything that \"looks like\" an object id.\n */\nexport declare type NonObjectIdLikeDocument = {\n    [key in keyof ObjectIdLike]?: never\n} & Document\n\n/** It avoids using fields with not acceptable types @public */\nexport declare type NotAcceptedFields<TSchema, FieldType> = {\n    readonly [key in KeysOfOtherType<TSchema, FieldType>]?: never\n}\n\n/** @public */\nexport declare type NumericType = IntegerType | Decimal128 | Double\n\nexport { ObjectId }\n\n/**\n * @public\n * @experimental\n */\nexport declare interface OIDCMechanismServerStep1 {\n    authorizationEndpoint?: string\n    tokenEndpoint?: string\n    deviceAuthorizationEndpoint?: string\n    clientId: string\n    clientSecret?: string\n    requestScopes?: string[]\n}\n\n/**\n * @public\n * @experimental\n */\nexport declare type OIDCRefreshFunction = (\n    principalName: string,\n    serverResult: OIDCMechanismServerStep1,\n    result: OIDCRequestTokenResult,\n    timeout: AbortSignal | number,\n) => Promise<OIDCRequestTokenResult>\n\n/**\n * @public\n * @experimental\n */\nexport declare type OIDCRequestFunction = (\n    principalName: string,\n    serverResult: OIDCMechanismServerStep1,\n    timeout: AbortSignal | number,\n) => Promise<OIDCRequestTokenResult>\n\n/**\n * @public\n * @experimental\n */\nexport declare interface OIDCRequestTokenResult {\n    accessToken: string\n    expiresInSeconds?: number\n    refreshToken?: string\n}\n\n/** @public */\nexport declare type OneOrMore<T> = T | ReadonlyArray<T>\n\n/** @public */\nexport declare type OnlyFieldsOfType<\n    TSchema,\n    FieldType = any,\n    AssignableType = FieldType,\n> = IsAny<\n    TSchema[keyof TSchema],\n    Record<string, FieldType>,\n    AcceptedFields<TSchema, FieldType, AssignableType> &\n        NotAcceptedFields<TSchema, FieldType> &\n        Record<string, AssignableType>\n>\n\n/* Excluded from this release type: OperationDescription */\n\n/** @public */\nexport declare interface OperationOptions extends BSONSerializeOptions {\n    /** Specify ClientSession for this command */\n    session?: ClientSession\n    willRetryWrite?: boolean\n    /** The preferred read preference (ReadPreference.primary, ReadPreference.primary_preferred, ReadPreference.secondary, ReadPreference.secondary_preferred, ReadPreference.nearest). */\n    readPreference?: ReadPreferenceLike\n    /* Excluded from this release type: bypassPinningCheck */\n    omitReadPreference?: boolean\n}\n\n/* Excluded from this release type: OperationParent */\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/method/db.runCommand/#response\n */\nexport declare type OperationTime = Timestamp\n\n/* Excluded from this release type: OpMsgOptions */\n\n/* Excluded from this release type: OpQueryOptions */\n\n/* Excluded from this release type: OpResponseOptions */\n\n/**\n * Add an optional _id field to an object shaped type\n * @public\n */\nexport declare type OptionalId<TSchema> = EnhancedOmit<TSchema, \"_id\"> & {\n    _id?: InferIdType<TSchema>\n}\n\n/**\n * Adds an optional _id field to an object shaped type, unless the _id field is required on that type.\n * In the case _id is required, this method continues to require_id.\n *\n * @public\n *\n * @privateRemarks\n * `ObjectId extends TSchema['_id']` is a confusing ordering at first glance. Rather than ask\n * `TSchema['_id'] extends ObjectId` which translated to \"Is the _id property ObjectId?\"\n * we instead ask \"Does ObjectId look like (have the same shape) as the _id?\"\n */\nexport declare type OptionalUnlessRequiredId<TSchema> = TSchema extends {\n    _id: any\n}\n    ? TSchema\n    : OptionalId<TSchema>\n\n/** @public */\nexport declare class OrderedBulkOperation extends BulkOperationBase {\n    /* Excluded from this release type: __constructor */\n    addToOperationsList(\n        batchType: BatchType,\n        document: Document | UpdateStatement | DeleteStatement,\n    ): this\n}\n\n/** @public */\nexport declare interface PkFactory {\n    createPk(): any\n}\n\n/* Excluded from this release type: PoolState */\n\n/** @public */\nexport declare const ProfilingLevel: Readonly<{\n    readonly off: \"off\"\n    readonly slowOnly: \"slow_only\"\n    readonly all: \"all\"\n}>\n\n/** @public */\nexport declare type ProfilingLevel =\n    (typeof ProfilingLevel)[keyof typeof ProfilingLevel]\n\n/** @public */\nexport declare type ProfilingLevelOptions = CommandOperationOptions\n\n/** @public */\nexport declare type PropertyType<\n    Type,\n    Property extends string,\n> = string extends Property\n    ? unknown\n    : Property extends keyof Type\n    ? Type[Property]\n    : Property extends `${number}`\n    ? Type extends ReadonlyArray<infer ArrayType>\n        ? ArrayType\n        : unknown\n    : Property extends `${infer Key}.${infer Rest}`\n    ? Key extends `${number}`\n        ? Type extends ReadonlyArray<infer ArrayType>\n            ? PropertyType<ArrayType, Rest>\n            : unknown\n        : Key extends keyof Type\n        ? Type[Key] extends Map<string, infer MapType>\n            ? MapType\n            : PropertyType<Type[Key], Rest>\n        : unknown\n    : unknown\n\n/** @public */\nexport declare interface ProxyOptions {\n    proxyHost?: string\n    proxyPort?: number\n    proxyUsername?: string\n    proxyPassword?: string\n}\n\n/** @public */\nexport declare type PullAllOperator<TSchema> = ({\n    readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?: TSchema[key]\n} & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n    readonly [key: string]: ReadonlyArray<any>\n}\n\n/** @public */\nexport declare type PullOperator<TSchema> = ({\n    readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?:\n        | Partial<Flatten<TSchema[key]>>\n        | FilterOperations<Flatten<TSchema[key]>>\n} & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n    readonly [key: string]: FilterOperators<any> | any\n}\n\n/** @public */\nexport declare type PushOperator<TSchema> = ({\n    readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?:\n        | Flatten<TSchema[key]>\n        | ArrayOperator<Array<Flatten<TSchema[key]>>>\n} & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n    readonly [key: string]: ArrayOperator<any> | any\n}\n\n/* Excluded from this release type: Query */\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nexport declare class ReadConcern {\n    level: ReadConcernLevel | string\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level: ReadConcernLevel)\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options?: {\n        readConcern?: ReadConcernLike\n        level?: ReadConcernLevel\n    }): ReadConcern | undefined\n    static get MAJORITY(): \"majority\"\n    static get AVAILABLE(): \"available\"\n    static get LINEARIZABLE(): \"linearizable\"\n    static get SNAPSHOT(): \"snapshot\"\n    toJSON(): Document\n}\n\n/** @public */\nexport declare const ReadConcernLevel: Readonly<{\n    readonly local: \"local\"\n    readonly majority: \"majority\"\n    readonly linearizable: \"linearizable\"\n    readonly available: \"available\"\n    readonly snapshot: \"snapshot\"\n}>\n\n/** @public */\nexport declare type ReadConcernLevel =\n    (typeof ReadConcernLevel)[keyof typeof ReadConcernLevel]\n\n/** @public */\nexport declare type ReadConcernLike =\n    | ReadConcern\n    | {\n          level: ReadConcernLevel\n      }\n    | ReadConcernLevel\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nexport declare class ReadPreference {\n    mode: ReadPreferenceMode\n    tags?: TagSet[]\n    hedge?: HedgeOptions\n    maxStalenessSeconds?: number\n    minWireVersion?: number\n    static PRIMARY: \"primary\"\n    static PRIMARY_PREFERRED: \"primaryPreferred\"\n    static SECONDARY: \"secondary\"\n    static SECONDARY_PREFERRED: \"secondaryPreferred\"\n    static NEAREST: \"nearest\"\n    static primary: ReadPreference\n    static primaryPreferred: ReadPreference\n    static secondary: ReadPreference\n    static secondaryPreferred: ReadPreference\n    static nearest: ReadPreference\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(\n        mode: ReadPreferenceMode,\n        tags?: TagSet[],\n        options?: ReadPreferenceOptions,\n    )\n    get preference(): ReadPreferenceMode\n    static fromString(mode: string): ReadPreference\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(\n        options?: ReadPreferenceFromOptions,\n    ): ReadPreference | undefined\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(\n        options: ReadPreferenceLikeOptions,\n    ): ReadPreferenceLikeOptions\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode: string): boolean\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode?: string): boolean\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk(): boolean\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference: ReadPreference): boolean\n    /** Return JSON representation */\n    toJSON(): Document\n}\n\n/** @public */\nexport declare interface ReadPreferenceFromOptions\n    extends ReadPreferenceLikeOptions {\n    session?: ClientSession\n    readPreferenceTags?: TagSet[]\n    hedge?: HedgeOptions\n}\n\n/** @public */\nexport declare type ReadPreferenceLike = ReadPreference | ReadPreferenceMode\n\n/** @public */\nexport declare interface ReadPreferenceLikeOptions\n    extends ReadPreferenceOptions {\n    readPreference?:\n        | ReadPreferenceLike\n        | {\n              mode?: ReadPreferenceMode\n              preference?: ReadPreferenceMode\n              tags?: TagSet[]\n              maxStalenessSeconds?: number\n          }\n}\n\n/** @public */\nexport declare const ReadPreferenceMode: Readonly<{\n    readonly primary: \"primary\"\n    readonly primaryPreferred: \"primaryPreferred\"\n    readonly secondary: \"secondary\"\n    readonly secondaryPreferred: \"secondaryPreferred\"\n    readonly nearest: \"nearest\"\n}>\n\n/** @public */\nexport declare type ReadPreferenceMode =\n    (typeof ReadPreferenceMode)[keyof typeof ReadPreferenceMode]\n\n/** @public */\nexport declare interface ReadPreferenceOptions {\n    /** Max secondary read staleness in seconds, Minimum value is 90 seconds.*/\n    maxStalenessSeconds?: number\n    /** Server mode in which the same query is dispatched in parallel to multiple replica set members. */\n    hedge?: HedgeOptions\n}\n\n/** @public */\nexport declare type RegExpOrString<T> = T extends string\n    ? BSONRegExp | RegExp | T\n    : T\n\n/** @public */\nexport declare type RemoveUserOptions = CommandOperationOptions\n\n/** @public */\nexport declare interface RenameOptions extends CommandOperationOptions {\n    /** Drop the target name collection if it previously exists. */\n    dropTarget?: boolean\n    /** Unclear */\n    new_collection?: boolean\n}\n\n/** @public */\nexport declare interface ReplaceOneModel<TSchema extends Document = Document> {\n    /** The filter to limit the replaced document. */\n    filter: Filter<TSchema>\n    /** The document with which to replace the matched document. */\n    replacement: WithoutId<TSchema>\n    /** Specifies a collation. */\n    collation?: CollationOptions\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean\n}\n\n/** @public */\nexport declare interface ReplaceOptions extends CommandOperationOptions {\n    /** If true, allows the write to opt-out of document level validation */\n    bypassDocumentValidation?: boolean\n    /** Specifies a collation */\n    collation?: CollationOptions\n    /** Specify that the update query should only consider plans using the hinted index */\n    hint?: string | Document\n    /** When true, creates a new document if no document matches the query */\n    upsert?: boolean\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n}\n\n/* Excluded from this release type: Response */\n\n/**\n * @public\n * @deprecated Please use the ChangeStreamCursorOptions type instead.\n */\nexport declare interface ResumeOptions {\n    startAtOperationTime?: Timestamp\n    batchSize?: number\n    maxAwaitTimeMS?: number\n    collation?: CollationOptions\n    readPreference?: ReadPreference\n    resumeAfter?: ResumeToken\n    startAfter?: ResumeToken\n    fullDocument?: string\n}\n\n/**\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\n * @public\n */\nexport declare type ResumeToken = unknown\n\n/** @public */\nexport declare const ReturnDocument: Readonly<{\n    readonly BEFORE: \"before\"\n    readonly AFTER: \"after\"\n}>\n\n/** @public */\nexport declare type ReturnDocument =\n    (typeof ReturnDocument)[keyof typeof ReturnDocument]\n\n/** @public */\nexport declare interface RoleSpecification {\n    /**\n     * A role grants privileges to perform sets of actions on defined resources.\n     * A given role applies to the database on which it is defined and can grant access down to a collection level of granularity.\n     */\n    role: string\n    /** The database this user's role should effect. */\n    db: string\n}\n\n/** @public */\nexport declare interface RootFilterOperators<TSchema> extends Document {\n    $and?: Filter<TSchema>[]\n    $nor?: Filter<TSchema>[]\n    $or?: Filter<TSchema>[]\n    $text?: {\n        $search: string\n        $language?: string\n        $caseSensitive?: boolean\n        $diacriticSensitive?: boolean\n    }\n    $where?: string | ((this: TSchema) => boolean)\n    $comment?: string | Document\n}\n\n/* Excluded from this release type: RTTPinger */\n\n/* Excluded from this release type: RTTPingerOptions */\n\n/** @public */\nexport declare type RunCommandOptions = CommandOperationOptions\n\n/** @public */\nexport declare type SchemaMember<T, V> =\n    | {\n          [P in keyof T]?: V\n      }\n    | {\n          [key: string]: V\n      }\n\n/** @public */\nexport declare interface SelectServerOptions {\n    readPreference?: ReadPreferenceLike\n    /** How long to block for server selection before throwing an error */\n    serverSelectionTimeoutMS?: number\n    session?: ClientSession\n}\n\nexport { serialize }\n\n/* Excluded from this release type: Server */\n\n/** @public */\nexport declare interface ServerApi {\n    version: ServerApiVersion\n    strict?: boolean\n    deprecationErrors?: boolean\n}\n\n/** @public */\nexport declare const ServerApiVersion: Readonly<{\n    readonly v1: \"1\"\n}>\n\n/** @public */\nexport declare type ServerApiVersion =\n    (typeof ServerApiVersion)[keyof typeof ServerApiVersion]\n\n/** @public */\nexport declare class ServerCapabilities {\n    maxWireVersion: number\n    minWireVersion: number\n    constructor(hello: Document)\n    get hasAggregationCursor(): boolean\n    get hasWriteCommands(): boolean\n    get hasTextSearch(): boolean\n    get hasAuthCommands(): boolean\n    get hasListCollectionsCommand(): boolean\n    get hasListIndexesCommand(): boolean\n    get supportsSnapshotReads(): boolean\n    get commandsTakeWriteConcern(): boolean\n    get commandsTakeCollation(): boolean\n}\n\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nexport declare class ServerClosedEvent {\n    /** A unique identifier for the topology */\n    topologyId: number\n    /** The address (host/port pair) of the server */\n    address: string\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nexport declare class ServerDescription {\n    address: string\n    type: ServerType\n    hosts: string[]\n    passives: string[]\n    arbiters: string[]\n    tags: TagSet\n    error: MongoError | null\n    topologyVersion: TopologyVersion | null\n    minWireVersion: number\n    maxWireVersion: number\n    roundTripTime: number\n    lastUpdateTime: number\n    lastWriteDate: number\n    me: string | null\n    primary: string | null\n    setName: string | null\n    setVersion: number | null\n    electionId: ObjectId | null\n    logicalSessionTimeoutMinutes: number | null\n    $clusterTime?: ClusterTime\n    /* Excluded from this release type: __constructor */\n    get hostAddress(): HostAddress\n    get allHosts(): string[]\n    /** Is this server available for reads*/\n    get isReadable(): boolean\n    /** Is this server data bearing */\n    get isDataBearing(): boolean\n    /** Is this server available for writes */\n    get isWritable(): boolean\n    get host(): string\n    get port(): number\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */\n    equals(other?: ServerDescription | null): boolean\n}\n\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nexport declare class ServerDescriptionChangedEvent {\n    /** A unique identifier for the topology */\n    topologyId: number\n    /** The address (host/port pair) of the server */\n    address: string\n    /** The previous server description */\n    previousDescription: ServerDescription\n    /** The new server description */\n    newDescription: ServerDescription\n    /* Excluded from this release type: __constructor */\n}\n\n/* Excluded from this release type: ServerDescriptionOptions */\n\n/** @public */\nexport declare type ServerEvents = {\n    serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void\n    serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void\n    serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void\n    /* Excluded from this release type: connect */\n    descriptionReceived(description: ServerDescription): void\n    closed(): void\n    ended(): void\n} & ConnectionPoolEvents &\n    EventEmitterWithState\n\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nexport declare class ServerHeartbeatFailedEvent {\n    /** The connection id for the command */\n    connectionId: string\n    /** The execution time of the event in ms */\n    duration: number\n    /** The command failure */\n    failure: Error\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nexport declare class ServerHeartbeatStartedEvent {\n    /** The connection id for the command */\n    connectionId: string\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nexport declare class ServerHeartbeatSucceededEvent {\n    /** The connection id for the command */\n    connectionId: string\n    /** The execution time of the event in ms */\n    duration: number\n    /** The command reply */\n    reply: Document\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nexport declare class ServerOpeningEvent {\n    /** A unique identifier for the topology */\n    topologyId: number\n    /** The address (host/port pair) of the server */\n    address: string\n    /* Excluded from this release type: __constructor */\n}\n\n/* Excluded from this release type: ServerOptions */\n\n/* Excluded from this release type: ServerPrivate */\n\n/* Excluded from this release type: ServerSelectionCallback */\n\n/* Excluded from this release type: ServerSelectionRequest */\n\n/* Excluded from this release type: ServerSelector */\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nexport declare class ServerSession {\n    id: ServerSessionId\n    lastUse: number\n    txnNumber: number\n    isDirty: boolean\n    /* Excluded from this release type: __constructor */\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes: number): boolean\n    /* Excluded from this release type: clone */\n}\n\n/** @public */\nexport declare type ServerSessionId = {\n    id: Binary\n}\n\n/* Excluded from this release type: ServerSessionPool */\n\n/**\n * An enumeration of server types we know about\n * @public\n */\nexport declare const ServerType: Readonly<{\n    readonly Standalone: \"Standalone\"\n    readonly Mongos: \"Mongos\"\n    readonly PossiblePrimary: \"PossiblePrimary\"\n    readonly RSPrimary: \"RSPrimary\"\n    readonly RSSecondary: \"RSSecondary\"\n    readonly RSArbiter: \"RSArbiter\"\n    readonly RSOther: \"RSOther\"\n    readonly RSGhost: \"RSGhost\"\n    readonly Unknown: \"Unknown\"\n    readonly LoadBalancer: \"LoadBalancer\"\n}>\n\n/** @public */\nexport declare type ServerType = (typeof ServerType)[keyof typeof ServerType]\n\n/** @public */\nexport declare type SetFields<TSchema> = ({\n    readonly [key in KeysOfAType<TSchema, ReadonlyArray<any> | undefined>]?:\n        | OptionalId<Flatten<TSchema[key]>>\n        | AddToSetOperators<Array<OptionalId<Flatten<TSchema[key]>>>>\n} & NotAcceptedFields<TSchema, ReadonlyArray<any> | undefined>) & {\n    readonly [key: string]: AddToSetOperators<any> | any\n}\n\n/** @public */\nexport declare type SetProfilingLevelOptions = CommandOperationOptions\n\n/* Excluded from this release type: SeverityLevel */\n\n/** @public */\nexport declare type Sort =\n    | string\n    | Exclude<\n          SortDirection,\n          {\n              $meta: string\n          }\n      >\n    | string[]\n    | {\n          [key: string]: SortDirection\n      }\n    | Map<string, SortDirection>\n    | [string, SortDirection][]\n    | [string, SortDirection]\n\n/** @public */\nexport declare type SortDirection =\n    | 1\n    | -1\n    | \"asc\"\n    | \"desc\"\n    | \"ascending\"\n    | \"descending\"\n    | {\n          $meta: string\n      }\n\n/* Excluded from this release type: SortDirectionForCmd */\n\n/* Excluded from this release type: SortForCmd */\n\n/* Excluded from this release type: SrvPoller */\n\n/* Excluded from this release type: SrvPollerEvents */\n\n/* Excluded from this release type: SrvPollerOptions */\n\n/* Excluded from this release type: SrvPollingEvent */\n\n/** @public */\nexport declare type Stream = Socket | TLSSocket\n\n/** @public */\nexport declare class StreamDescription {\n    address: string\n    type: string\n    minWireVersion?: number\n    maxWireVersion?: number\n    maxBsonObjectSize: number\n    maxMessageSizeBytes: number\n    maxWriteBatchSize: number\n    compressors: CompressorName[]\n    compressor?: CompressorName\n    logicalSessionTimeoutMinutes?: number\n    loadBalanced: boolean\n    __nodejs_mock_server__?: boolean\n    zlibCompressionLevel?: number\n    constructor(address: string, options?: StreamDescriptionOptions)\n    receiveResponse(response: Document | null): void\n}\n\n/** @public */\nexport declare interface StreamDescriptionOptions {\n    compressors?: CompressorName[]\n    logicalSessionTimeoutMinutes?: number\n    loadBalanced: boolean\n}\n\n/**\n * @public\n * @experimental\n */\nexport declare type StrictFilter<TSchema> =\n    | Partial<TSchema>\n    | ({\n          [Property in Join<NestedPaths<WithId<TSchema>, []>, \".\">]?: Condition<\n              PropertyType<WithId<TSchema>, Property>\n          >\n      } & RootFilterOperators<WithId<TSchema>>)\n\n/**\n * @public\n * @experimental\n */\nexport declare type StrictMatchKeysAndValues<TSchema> = Readonly<\n    {\n        [Property in Join<NestedPaths<TSchema, []>, \".\">]?: PropertyType<\n            TSchema,\n            Property\n        >\n    } & {\n        [Property in `${NestedPathsOfType<TSchema, any[]>}.$${\n            | `[${string}]`\n            | \"\"}`]?: ArrayElement<\n            PropertyType<\n                TSchema,\n                Property extends `${infer Key}.$${string}` ? Key : never\n            >\n        >\n    } & {\n        [Property in `${NestedPathsOfType<TSchema, Record<string, any>[]>}.$${\n            | `[${string}]`\n            | \"\"}.${string}`]?: any\n    } & Document\n>\n\n/**\n * @public\n * @experimental\n */\nexport declare type StrictUpdateFilter<TSchema> = {\n    $currentDate?: OnlyFieldsOfType<\n        TSchema,\n        Date | Timestamp,\n        | true\n        | {\n              $type: \"date\" | \"timestamp\"\n          }\n    >\n    $inc?: OnlyFieldsOfType<TSchema, NumericType | undefined>\n    $min?: StrictMatchKeysAndValues<TSchema>\n    $max?: StrictMatchKeysAndValues<TSchema>\n    $mul?: OnlyFieldsOfType<TSchema, NumericType | undefined>\n    $rename?: Record<string, string>\n    $set?: StrictMatchKeysAndValues<TSchema>\n    $setOnInsert?: StrictMatchKeysAndValues<TSchema>\n    $unset?: OnlyFieldsOfType<TSchema, any, \"\" | true | 1>\n    $addToSet?: SetFields<TSchema>\n    $pop?: OnlyFieldsOfType<TSchema, ReadonlyArray<any>, 1 | -1>\n    $pull?: PullOperator<TSchema>\n    $push?: PushOperator<TSchema>\n    $pullAll?: PullAllOperator<TSchema>\n    $bit?: OnlyFieldsOfType<\n        TSchema,\n        NumericType | undefined,\n        | {\n              and: IntegerType\n          }\n        | {\n              or: IntegerType\n          }\n        | {\n              xor: IntegerType\n          }\n    >\n} & Document\n\n/** @public */\nexport declare type SupportedNodeConnectionOptions =\n    SupportedTLSConnectionOptions &\n        SupportedTLSSocketOptions &\n        SupportedSocketOptions\n\n/** @public */\nexport declare type SupportedSocketOptions = Pick<\n    TcpNetConnectOpts,\n    (typeof LEGAL_TCP_SOCKET_OPTIONS)[number]\n>\n\n/** @public */\nexport declare type SupportedTLSConnectionOptions = Pick<\n    ConnectionOptions_2,\n    Extract<\n        keyof ConnectionOptions_2,\n        (typeof LEGAL_TLS_SOCKET_OPTIONS)[number]\n    >\n>\n\n/** @public */\nexport declare type SupportedTLSSocketOptions = Pick<\n    TLSSocketOptions,\n    Extract<keyof TLSSocketOptions, (typeof LEGAL_TLS_SOCKET_OPTIONS)[number]>\n>\n\n/** @public */\nexport declare type TagSet = {\n    [key: string]: string\n}\n\n/* Excluded from this release type: TimerQueue */\n\n/** @public\n * Configuration options for timeseries collections\n * @see https://www.mongodb.com/docs/manual/core/timeseries-collections/\n */\nexport declare interface TimeSeriesCollectionOptions extends Document {\n    timeField: string\n    metaField?: string\n    granularity?: \"seconds\" | \"minutes\" | \"hours\" | string\n}\n\nexport { Timestamp }\n\n/* Excluded from this release type: Topology */\n\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nexport declare class TopologyClosedEvent {\n    /** A unique identifier for the topology */\n    topologyId: number\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * Representation of a deployment of servers\n * @public\n */\nexport declare class TopologyDescription {\n    type: TopologyType\n    setName: string | null\n    maxSetVersion: number | null\n    maxElectionId: ObjectId | null\n    servers: Map<string, ServerDescription>\n    stale: boolean\n    compatible: boolean\n    compatibilityError?: string\n    logicalSessionTimeoutMinutes: number | null\n    heartbeatFrequencyMS: number\n    localThresholdMS: number\n    commonWireVersion: number\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(\n        topologyType: TopologyType,\n        serverDescriptions?: Map<string, ServerDescription> | null,\n        setName?: string | null,\n        maxSetVersion?: number | null,\n        maxElectionId?: ObjectId | null,\n        commonWireVersion?: number | null,\n        options?: TopologyDescriptionOptions | null,\n    )\n    /* Excluded from this release type: updateFromSrvPollingEvent */\n    /* Excluded from this release type: update */\n    get error(): MongoServerError | null\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers(): boolean\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers(): boolean\n    /* Excluded from this release type: hasServer */\n}\n\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nexport declare class TopologyDescriptionChangedEvent {\n    /** A unique identifier for the topology */\n    topologyId: number\n    /** The old topology description */\n    previousDescription: TopologyDescription\n    /** The new topology description */\n    newDescription: TopologyDescription\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare interface TopologyDescriptionOptions {\n    heartbeatFrequencyMS?: number\n    localThresholdMS?: number\n}\n\n/** @public */\nexport declare type TopologyEvents = {\n    /* Excluded from this release type: connect */\n    serverOpening(event: ServerOpeningEvent): void\n    serverClosed(event: ServerClosedEvent): void\n    serverDescriptionChanged(event: ServerDescriptionChangedEvent): void\n    topologyClosed(event: TopologyClosedEvent): void\n    topologyOpening(event: TopologyOpeningEvent): void\n    topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void\n    error(error: Error): void\n    /* Excluded from this release type: open */\n    close(): void\n    timeout(): void\n} & Omit<ServerEvents, \"connect\"> &\n    ConnectionPoolEvents &\n    ConnectionEvents &\n    EventEmitterWithState\n\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nexport declare class TopologyOpeningEvent {\n    /** A unique identifier for the topology */\n    topologyId: number\n    /* Excluded from this release type: __constructor */\n}\n\n/* Excluded from this release type: TopologyOptions */\n\n/* Excluded from this release type: TopologyPrivate */\n\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexport declare const TopologyType: Readonly<{\n    readonly Single: \"Single\"\n    readonly ReplicaSetNoPrimary: \"ReplicaSetNoPrimary\"\n    readonly ReplicaSetWithPrimary: \"ReplicaSetWithPrimary\"\n    readonly Sharded: \"Sharded\"\n    readonly Unknown: \"Unknown\"\n    readonly LoadBalanced: \"LoadBalanced\"\n}>\n\n/** @public */\nexport declare type TopologyType =\n    (typeof TopologyType)[keyof typeof TopologyType]\n\n/** @public */\nexport declare interface TopologyVersion {\n    processId: ObjectId\n    counter: Long\n}\n\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nexport declare class Transaction {\n    /* Excluded from this release type: state */\n    options: TransactionOptions\n    /* Excluded from this release type: _pinnedServer */\n    /* Excluded from this release type: _recoveryToken */\n    /* Excluded from this release type: __constructor */\n    /* Excluded from this release type: server */\n    get recoveryToken(): Document | undefined\n    get isPinned(): boolean\n    /** @returns Whether the transaction has started */\n    get isStarting(): boolean\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive(): boolean\n    get isCommitted(): boolean\n    /* Excluded from this release type: transition */\n    /* Excluded from this release type: pinServer */\n    /* Excluded from this release type: unpinServer */\n}\n\n/**\n * Configuration options for a transaction.\n * @public\n */\nexport declare interface TransactionOptions extends CommandOperationOptions {\n    /** A default read concern for commands in this transaction */\n    readConcern?: ReadConcernLike\n    /** A default writeConcern for commands in this transaction */\n    writeConcern?: WriteConcern\n    /** A default read preference for commands in this transaction */\n    readPreference?: ReadPreferenceLike\n    /** Specifies the maximum amount of time to allow a commit action on a transaction to run in milliseconds */\n    maxCommitTimeMS?: number\n}\n\n/* Excluded from this release type: TxnState */\n\n/**\n * Typescript type safe event emitter\n * @public\n */\nexport declare interface TypedEventEmitter<Events extends EventsDescription>\n    extends EventEmitter {\n    addListener<EventKey extends keyof Events>(\n        event: EventKey,\n        listener: Events[EventKey],\n    ): this\n    addListener(\n        event: CommonEvents,\n        listener: (\n            eventName: string | symbol,\n            listener: GenericListener,\n        ) => void,\n    ): this\n    addListener(event: string | symbol, listener: GenericListener): this\n    on<EventKey extends keyof Events>(\n        event: EventKey,\n        listener: Events[EventKey],\n    ): this\n    on(\n        event: CommonEvents,\n        listener: (\n            eventName: string | symbol,\n            listener: GenericListener,\n        ) => void,\n    ): this\n    on(event: string | symbol, listener: GenericListener): this\n    once<EventKey extends keyof Events>(\n        event: EventKey,\n        listener: Events[EventKey],\n    ): this\n    once(\n        event: CommonEvents,\n        listener: (\n            eventName: string | symbol,\n            listener: GenericListener,\n        ) => void,\n    ): this\n    once(event: string | symbol, listener: GenericListener): this\n    removeListener<EventKey extends keyof Events>(\n        event: EventKey,\n        listener: Events[EventKey],\n    ): this\n    removeListener(\n        event: CommonEvents,\n        listener: (\n            eventName: string | symbol,\n            listener: GenericListener,\n        ) => void,\n    ): this\n    removeListener(event: string | symbol, listener: GenericListener): this\n    off<EventKey extends keyof Events>(\n        event: EventKey,\n        listener: Events[EventKey],\n    ): this\n    off(\n        event: CommonEvents,\n        listener: (\n            eventName: string | symbol,\n            listener: GenericListener,\n        ) => void,\n    ): this\n    off(event: string | symbol, listener: GenericListener): this\n    removeAllListeners<EventKey extends keyof Events>(\n        event?: EventKey | CommonEvents | symbol | string,\n    ): this\n    listeners<EventKey extends keyof Events>(\n        event: EventKey | CommonEvents | symbol | string,\n    ): Events[EventKey][]\n    rawListeners<EventKey extends keyof Events>(\n        event: EventKey | CommonEvents | symbol | string,\n    ): Events[EventKey][]\n    emit<EventKey extends keyof Events>(\n        event: EventKey | symbol,\n        ...args: Parameters<Events[EventKey]>\n    ): boolean\n    listenerCount<EventKey extends keyof Events>(\n        type: EventKey | CommonEvents | symbol | string,\n    ): number\n    prependListener<EventKey extends keyof Events>(\n        event: EventKey,\n        listener: Events[EventKey],\n    ): this\n    prependListener(\n        event: CommonEvents,\n        listener: (\n            eventName: string | symbol,\n            listener: GenericListener,\n        ) => void,\n    ): this\n    prependListener(event: string | symbol, listener: GenericListener): this\n    prependOnceListener<EventKey extends keyof Events>(\n        event: EventKey,\n        listener: Events[EventKey],\n    ): this\n    prependOnceListener(\n        event: CommonEvents,\n        listener: (\n            eventName: string | symbol,\n            listener: GenericListener,\n        ) => void,\n    ): this\n    prependOnceListener(event: string | symbol, listener: GenericListener): this\n    eventNames(): string[]\n    getMaxListeners(): number\n    setMaxListeners(n: number): this\n}\n\n/**\n * Typescript type safe event emitter\n * @public\n */\nexport declare class TypedEventEmitter<\n    Events extends EventsDescription,\n> extends EventEmitter {}\n\n/** @public */\nexport declare class UnorderedBulkOperation extends BulkOperationBase {\n    /* Excluded from this release type: __constructor */\n    handleWriteError(callback: Callback, writeResult: BulkWriteResult): boolean\n    addToOperationsList(\n        batchType: BatchType,\n        document: Document | UpdateStatement | DeleteStatement,\n    ): this\n}\n\n/** @public */\nexport declare interface UpdateDescription<\n    TSchema extends Document = Document,\n> {\n    /**\n     * A document containing key:value pairs of names of the fields that were\n     * changed, and the new value for those fields.\n     */\n    updatedFields?: Partial<TSchema>\n    /**\n     * An array of field names that were removed from the document.\n     */\n    removedFields?: string[]\n    /**\n     * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\n     * - $addFields\n     * - $set\n     * - $replaceRoot\n     * - $replaceWith\n     */\n    truncatedArrays?: Array<{\n        /** The name of the truncated field. */\n        field: string\n        /** The number of elements in the truncated array. */\n        newSize: number\n    }>\n    /**\n     * A document containing additional information about any ambiguous update paths from the update event.  The document\n     * maps the full ambiguous update path to an array containing the actual resolved components of the path.  For example,\n     * given a document shaped like `{ a: { '0': 0 } }`, and an update of `{ $inc: 'a.0' }`, disambiguated paths would look like\n     * the following:\n     *\n     * ```\n     *   {\n     *     'a.0': ['a', '0']\n     *   }\n     * ```\n     *\n     * This field is only present when there are ambiguous paths that are updated as a part of the update event and `showExpandedEvents`\n     * is enabled for the change stream.\n     * @sinceServerVersion 6.1.0\n     */\n    disambiguatedPaths?: Document\n}\n\n/** @public */\nexport declare type UpdateFilter<TSchema> = {\n    $currentDate?: OnlyFieldsOfType<\n        TSchema,\n        Date | Timestamp,\n        | true\n        | {\n              $type: \"date\" | \"timestamp\"\n          }\n    >\n    $inc?: OnlyFieldsOfType<TSchema, NumericType | undefined>\n    $min?: MatchKeysAndValues<TSchema>\n    $max?: MatchKeysAndValues<TSchema>\n    $mul?: OnlyFieldsOfType<TSchema, NumericType | undefined>\n    $rename?: Record<string, string>\n    $set?: MatchKeysAndValues<TSchema>\n    $setOnInsert?: MatchKeysAndValues<TSchema>\n    $unset?: OnlyFieldsOfType<TSchema, any, \"\" | true | 1>\n    $addToSet?: SetFields<TSchema>\n    $pop?: OnlyFieldsOfType<TSchema, ReadonlyArray<any>, 1 | -1>\n    $pull?: PullOperator<TSchema>\n    $push?: PushOperator<TSchema>\n    $pullAll?: PullAllOperator<TSchema>\n    $bit?: OnlyFieldsOfType<\n        TSchema,\n        NumericType | undefined,\n        | {\n              and: IntegerType\n          }\n        | {\n              or: IntegerType\n          }\n        | {\n              xor: IntegerType\n          }\n    >\n} & Document\n\n/** @public */\nexport declare interface UpdateManyModel<TSchema extends Document = Document> {\n    /** The filter to limit the updated documents. */\n    filter: Filter<TSchema>\n    /** A document or pipeline containing update operators. */\n    update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[]\n    /** A set of filters specifying to which array elements an update should apply. */\n    arrayFilters?: Document[]\n    /** Specifies a collation. */\n    collation?: CollationOptions\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean\n}\n\n/** @public */\nexport declare interface UpdateOneModel<TSchema extends Document = Document> {\n    /** The filter to limit the updated documents. */\n    filter: Filter<TSchema>\n    /** A document or pipeline containing update operators. */\n    update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[]\n    /** A set of filters specifying to which array elements an update should apply. */\n    arrayFilters?: Document[]\n    /** Specifies a collation. */\n    collation?: CollationOptions\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean\n}\n\n/** @public */\nexport declare interface UpdateOptions extends CommandOperationOptions {\n    /** A set of filters specifying to which array elements an update should apply */\n    arrayFilters?: Document[]\n    /** If true, allows the write to opt-out of document level validation */\n    bypassDocumentValidation?: boolean\n    /** Specifies a collation */\n    collation?: CollationOptions\n    /** Specify that the update query should only consider plans using the hinted index */\n    hint?: Hint\n    /** When true, creates a new document if no document matches the query */\n    upsert?: boolean\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document\n}\n\n/** @public */\nexport declare interface UpdateResult {\n    /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n    acknowledged: boolean\n    /** The number of documents that matched the filter */\n    matchedCount: number\n    /** The number of documents that were modified */\n    modifiedCount: number\n    /** The number of documents that were upserted */\n    upsertedCount: number\n    /** The identifier of the inserted document if an upsert took place */\n    upsertedId: ObjectId\n}\n\n/** @public */\nexport declare interface UpdateStatement {\n    /** The query that matches documents to update. */\n    q: Document\n    /** The modifications to apply. */\n    u: Document | Document[]\n    /**  If true, perform an insert if no documents match the query. */\n    upsert?: boolean\n    /** If true, updates all documents that meet the query criteria. */\n    multi?: boolean\n    /** Specifies the collation to use for the operation. */\n    collation?: CollationOptions\n    /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\n    arrayFilters?: Document[]\n    /** A document or string that specifies the index to use to support the query predicate. */\n    hint?: Hint\n}\n\n/** @public */\nexport declare interface ValidateCollectionOptions\n    extends CommandOperationOptions {\n    /** Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+) */\n    background?: boolean\n}\n\n/** @public */\nexport declare type W = number | \"majority\"\n\n/* Excluded from this release type: WaitQueueMember */\n\n/** @public */\nexport declare interface WiredTigerData extends Document {\n    LSM: {\n        \"bloom filter false positives\": number\n        \"bloom filter hits\": number\n        \"bloom filter misses\": number\n        \"bloom filter pages evicted from cache\": number\n        \"bloom filter pages read into cache\": number\n        \"bloom filters in the LSM tree\": number\n        \"chunks in the LSM tree\": number\n        \"highest merge generation in the LSM tree\": number\n        \"queries that could have benefited from a Bloom filter that did not exist\": number\n        \"sleep for LSM checkpoint throttle\": number\n        \"sleep for LSM merge throttle\": number\n        \"total size of bloom filters\": number\n    } & Document\n    \"block-manager\": {\n        \"allocations requiring file extension\": number\n        \"blocks allocated\": number\n        \"blocks freed\": number\n        \"checkpoint size\": number\n        \"file allocation unit size\": number\n        \"file bytes available for reuse\": number\n        \"file magic number\": number\n        \"file major version number\": number\n        \"file size in bytes\": number\n        \"minor version number\": number\n    }\n    btree: {\n        \"btree checkpoint generation\": number\n        \"column-store fixed-size leaf pages\": number\n        \"column-store internal pages\": number\n        \"column-store variable-size RLE encoded values\": number\n        \"column-store variable-size deleted values\": number\n        \"column-store variable-size leaf pages\": number\n        \"fixed-record size\": number\n        \"maximum internal page key size\": number\n        \"maximum internal page size\": number\n        \"maximum leaf page key size\": number\n        \"maximum leaf page size\": number\n        \"maximum leaf page value size\": number\n        \"maximum tree depth\": number\n        \"number of key/value pairs\": number\n        \"overflow pages\": number\n        \"pages rewritten by compaction\": number\n        \"row-store internal pages\": number\n        \"row-store leaf pages\": number\n    } & Document\n    cache: {\n        \"bytes currently in the cache\": number\n        \"bytes read into cache\": number\n        \"bytes written from cache\": number\n        \"checkpoint blocked page eviction\": number\n        \"data source pages selected for eviction unable to be evicted\": number\n        \"hazard pointer blocked page eviction\": number\n        \"in-memory page passed criteria to be split\": number\n        \"in-memory page splits\": number\n        \"internal pages evicted\": number\n        \"internal pages split during eviction\": number\n        \"leaf pages split during eviction\": number\n        \"modified pages evicted\": number\n        \"overflow pages read into cache\": number\n        \"overflow values cached in memory\": number\n        \"page split during eviction deepened the tree\": number\n        \"page written requiring lookaside records\": number\n        \"pages read into cache\": number\n        \"pages read into cache requiring lookaside entries\": number\n        \"pages requested from the cache\": number\n        \"pages written from cache\": number\n        \"pages written requiring in-memory restoration\": number\n        \"tracked dirty bytes in the cache\": number\n        \"unmodified pages evicted\": number\n    } & Document\n    cache_walk: {\n        \"Average difference between current eviction generation when the page was last considered\": number\n        \"Average on-disk page image size seen\": number\n        \"Clean pages currently in cache\": number\n        \"Current eviction generation\": number\n        \"Dirty pages currently in cache\": number\n        \"Entries in the root page\": number\n        \"Internal pages currently in cache\": number\n        \"Leaf pages currently in cache\": number\n        \"Maximum difference between current eviction generation when the page was last considered\": number\n        \"Maximum page size seen\": number\n        \"Minimum on-disk page image size seen\": number\n        \"On-disk page image sizes smaller than a single allocation unit\": number\n        \"Pages created in memory and never written\": number\n        \"Pages currently queued for eviction\": number\n        \"Pages that could not be queued for eviction\": number\n        \"Refs skipped during cache traversal\": number\n        \"Size of the root page\": number\n        \"Total number of pages currently in cache\": number\n    } & Document\n    compression: {\n        \"compressed pages read\": number\n        \"compressed pages written\": number\n        \"page written failed to compress\": number\n        \"page written was too small to compress\": number\n        \"raw compression call failed, additional data available\": number\n        \"raw compression call failed, no additional data available\": number\n        \"raw compression call succeeded\": number\n    } & Document\n    cursor: {\n        \"bulk-loaded cursor-insert calls\": number\n        \"create calls\": number\n        \"cursor-insert key and value bytes inserted\": number\n        \"cursor-remove key bytes removed\": number\n        \"cursor-update value bytes updated\": number\n        \"insert calls\": number\n        \"next calls\": number\n        \"prev calls\": number\n        \"remove calls\": number\n        \"reset calls\": number\n        \"restarted searches\": number\n        \"search calls\": number\n        \"search near calls\": number\n        \"truncate calls\": number\n        \"update calls\": number\n    }\n    reconciliation: {\n        \"dictionary matches\": number\n        \"fast-path pages deleted\": number\n        \"internal page key bytes discarded using suffix compression\": number\n        \"internal page multi-block writes\": number\n        \"internal-page overflow keys\": number\n        \"leaf page key bytes discarded using prefix compression\": number\n        \"leaf page multi-block writes\": number\n        \"leaf-page overflow keys\": number\n        \"maximum blocks required for a page\": number\n        \"overflow values written\": number\n        \"page checksum matches\": number\n        \"page reconciliation calls\": number\n        \"page reconciliation calls for eviction\": number\n        \"pages deleted\": number\n    } & Document\n}\n\n/* Excluded from this release type: WithConnectionCallback */\n\n/** Add an _id field to an object shaped type @public */\nexport declare type WithId<TSchema> = EnhancedOmit<TSchema, \"_id\"> & {\n    _id: InferIdType<TSchema>\n}\n\n/** Remove the _id field from an object shaped type @public */\nexport declare type WithoutId<TSchema> = Omit<TSchema, \"_id\">\n\n/** @public */\nexport declare type WithSessionCallback = (\n    session: ClientSession,\n) => Promise<any>\n\n/** @public */\nexport declare type WithTransactionCallback<T = void> = (\n    session: ClientSession,\n) => Promise<T>\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nexport declare class WriteConcern {\n    /** request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags. */\n    w?: W\n    /** specify a time limit to prevent write operations from blocking indefinitely */\n    wtimeout?: number\n    /** request acknowledgment that the write operation has been written to the on-disk journal */\n    j?: boolean\n    /** equivalent to the j option */\n    fsync?: boolean | 1\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeout - specify a time limit to prevent write operations from blocking indefinitely\n     * @param j - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option\n     */\n    constructor(w?: W, wtimeout?: number, j?: boolean, fsync?: boolean | 1)\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(\n        options?: WriteConcernOptions | WriteConcern | W,\n        inherit?: WriteConcernOptions | WriteConcern,\n    ): WriteConcern | undefined\n}\n\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nexport declare class WriteConcernError {\n    /* Excluded from this release type: [kServerError] */\n    constructor(error: WriteConcernErrorData)\n    /** Write concern error code. */\n    get code(): number | undefined\n    /** Write concern error message. */\n    get errmsg(): string | undefined\n    /** Write concern error info. */\n    get errInfo(): Document | undefined\n    toJSON(): WriteConcernErrorData\n    toString(): string\n}\n\n/** @public */\nexport declare interface WriteConcernErrorData {\n    code: number\n    errmsg: string\n    errInfo?: Document\n}\n\n/** @public */\nexport declare interface WriteConcernOptions {\n    /** Write Concern as an object */\n    writeConcern?: WriteConcern | WriteConcernSettings\n}\n\n/** @public */\nexport declare interface WriteConcernSettings {\n    /** The write concern */\n    w?: W\n    /** The write concern timeout */\n    wtimeoutMS?: number\n    /** The journal write concern */\n    journal?: boolean\n    /** The journal write concern */\n    j?: boolean\n    /** The write concern timeout */\n    wtimeout?: number\n    /** The file sync write concern */\n    fsync?: boolean | 1\n}\n\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nexport declare class WriteError {\n    err: BulkWriteOperationError\n    constructor(err: BulkWriteOperationError)\n    /** WriteError code. */\n    get code(): number\n    /** WriteError original bulk operation index. */\n    get index(): number\n    /** WriteError message. */\n    get errmsg(): string | undefined\n    /** WriteError details. */\n    get errInfo(): Document | undefined\n    /** Returns the underlying operation that caused the error */\n    getOperation(): Document\n    toJSON(): {\n        code: number\n        index: number\n        errmsg?: string\n        op: Document\n    }\n    toString(): string\n}\n\n/* Excluded from this release type: WriteProtocolMessageType */\n\nexport {}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,2CAsBuB;AA0xBd,OAAA,cAAA,CAAA,SAAA,QAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA/yBL,eAAA,IAAI;IAAA;AAAA,GA+yBK;AAEJ,OAAA,cAAA,CAAA,SAAA,cAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAhzBL,eAAA,UAAU;IAAA;AAAA,GAgzBK;AA0CV,OAAA,cAAA,CAAA,SAAA,cAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAz1BL,eAAA,UAAU;IAAA;AAAA,GAy1BK;AAEV,OAAA,cAAA,CAAA,SAAA,YAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA11BL,eAAA,QAAQ;IAAA;AAAA,GA01BK;AAxDR,OAAA,cAAA,CAAA,SAAA,UAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAjyBL,eAAA,MAAM;IAAA;AAAA,GAiyBK;AA85BN,OAAA,cAAA,CAAA,SAAA,QAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA9rDL,eAAA,IAAI;IAAA;AAAA,GA8rDK;AA0zCJ,OAAA,cAAA,CAAA,SAAA,SAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAv/FL,eAAA,KAAK;IAAA;AAAA,GAu/FK;AAQL,OAAA,cAAA,CAAA,SAAA,cAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA9/FL,eAAA,UAAU;IAAA;AAAA,GA8/FK;AAiEV,OAAA,cAAA,CAAA,SAAA,UAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA5jGL,eAAA,MAAM;IAAA;AAAA,GA4jGK;AAu4BN,OAAA,cAAA,CAAA,SAAA,SAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAl8HL,eAAA,KAAK;IAAA;AAAA,GAk8HK;AA+PL,OAAA,cAAA,CAAA,SAAA,QAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAhsIL,eAAA,IAAI;IAAA;AAAA,GAgsIK;AAMJ,OAAA,cAAA,CAAA,SAAA,UAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OArsIL,eAAA,MAAM;IAAA;AAAA,GAqsIK;AAON,OAAA,cAAA,CAAA,SAAA,UAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA3sIL,eAAA,MAAM;IAAA;AAAA,GA2sIK;AAqiCN,OAAA,cAAA,CAAA,SAAA,YAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA/uKL,eAAA,QAAQ;IAAA;AAAA,GA+uKK;AAk7BR,OAAA,cAAA,CAAA,SAAA,aAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA9pML,eAAA,SAAS;IAAA;AAAA,GA8pMK;AAnnGT,OAAA,cAAA,CAAA,SAAA,eAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA1iGL,eAAA,WAAW;IAAA;AAAA,GA0iGK;AAsrFX,OAAA,cAAA,CAAA,SAAA,aAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OA/tLL,eAAA,SAAS;IAAA;AAAA,GA+tLK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1398, "column": 0}, "map": {"version":3,"file":"OracleQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/oracle/OracleQueryRunner.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { TypeORMError } from \"../../error\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Query } from \"../Query\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { OracleDriver } from \"./OracleDriver\"\n\n/**\n * Runs queries on a single oracle database connection.\n */\nexport class OracleQueryRunner extends BaseQueryRunner implements QueryRunner {\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: OracleDriver\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: OracleDriver, mode: ReplicationMode) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n        this.mode = mode\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection)\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise\n\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver\n                .obtainSlaveConnection()\n                .then((connection) => {\n                    this.databaseConnection = connection\n                    return this.databaseConnection\n                })\n        } else {\n            // master\n            this.databaseConnectionPromise = this.driver\n                .obtainMasterConnection()\n                .then((connection) => {\n                    this.databaseConnection = connection\n                    return this.databaseConnection\n                })\n        }\n\n        return this.databaseConnectionPromise\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    async release(): Promise<void> {\n        this.isReleased = true\n\n        if (!this.databaseConnection) {\n            return\n        }\n\n        await this.databaseConnection.close()\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(\n        isolationLevel: IsolationLevel = \"READ COMMITTED\",\n    ): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        // await this.query(\"START TRANSACTION\");\n        if (\n            isolationLevel !== \"SERIALIZABLE\" &&\n            isolationLevel !== \"READ COMMITTED\"\n        ) {\n            throw new TypeORMError(\n                `Oracle only supports SERIALIZABLE and READ COMMITTED isolation`,\n            )\n        }\n\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n\n        if (this.transactionDepth === 0) {\n            await this.query(\n                \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel,\n            )\n        } else {\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth}`)\n        }\n        this.transactionDepth += 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth === 1) {\n            await this.query(\"COMMIT\")\n            this.isTransactionActive = false\n        }\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth - 1}`,\n            )\n        } else {\n            await this.query(\"ROLLBACK\")\n            this.isTransactionActive = false\n        }\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = await this.connect()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        await this.broadcaster.broadcast(\"BeforeQuery\", query, parameters)\n\n        const broadcasterResult = new BroadcasterResult()\n        const queryStartTime = Date.now()\n\n        try {\n            const executionOptions = {\n                autoCommit: !this.isTransactionActive,\n                outFormat: this.driver.oracle.OUT_FORMAT_OBJECT,\n            }\n\n            const raw = await databaseConnection.execute(\n                query,\n                parameters || {},\n                executionOptions,\n            )\n\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime =\n                this.driver.options.maxQueryExecutionTime\n            const queryEndTime = Date.now()\n            const queryExecutionTime = queryEndTime - queryStartTime\n\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                true,\n                queryExecutionTime,\n                raw,\n                undefined,\n            )\n\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            )\n                this.driver.connection.logger.logQuerySlow(\n                    queryExecutionTime,\n                    query,\n                    parameters,\n                    this,\n                )\n\n            const result = new QueryResult()\n\n            result.raw =\n                raw.rows ||\n                raw.outBinds ||\n                raw.rowsAffected ||\n                raw.implicitResults\n\n            if (raw?.hasOwnProperty(\"rows\") && Array.isArray(raw.rows)) {\n                result.records = raw.rows\n            }\n\n            if (\n                raw?.hasOwnProperty(\"outBinds\") &&\n                Array.isArray(raw.outBinds)\n            ) {\n                result.records = raw.outBinds\n            }\n\n            if (\n                raw?.hasOwnProperty(\"implicitResults\") &&\n                Array.isArray(raw.implicitResults)\n            ) {\n                result.records = raw.implicitResults\n            }\n\n            if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                result.affected = raw.rowsAffected\n            }\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                false,\n                undefined,\n                undefined,\n                err,\n            )\n\n            throw new QueryFailedError(query, parameters, err)\n        } finally {\n            await broadcasterResult.wait()\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        if (this.isReleased) {\n            throw new QueryRunnerAlreadyReleasedError()\n        }\n\n        const executionOptions = {\n            autoCommit: !this.isTransactionActive,\n            outFormat: this.driver.oracle.OUT_FORMAT_OBJECT,\n        }\n\n        const databaseConnection = await this.connect()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n\n        try {\n            const stream = databaseConnection.queryStream(\n                query,\n                parameters,\n                executionOptions,\n            )\n            if (onEnd) {\n                stream.on(\"end\", onEnd)\n            }\n\n            if (onError) {\n                stream.on(\"error\", onError)\n            }\n\n            return stream\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            throw new QueryFailedError(query, parameters, err)\n        }\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([])\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        try {\n            const query = await this.query(\n                `SELECT 1 AS \"exists\" FROM global_name@\"${database}\"`,\n            )\n\n            return query.length > 0\n        } catch (e) {\n            return false\n        }\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<undefined> {\n        const query = await this.query(\n            `SELECT SYS_CONTEXT('USERENV','DB_NAME') AS \"db_name\" FROM dual`,\n        )\n        return query[0][\"db_name\"]\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        return Promise.resolve(false)\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const query = await this.query(\n            `SELECT SYS_CONTEXT('USERENV','CURRENT_SCHEMA') AS \"schema_name\" FROM dual`,\n        )\n        return query[0][\"schema_name\"]\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const { tableName } = this.driver.parseTableName(tableOrName)\n        const sql = `SELECT \"TABLE_NAME\" FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" = '${tableName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        const { tableName } = this.driver.parseTableName(tableOrName)\n        const sql = `SELECT \"COLUMN_NAME\" FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" = '${tableName}' AND \"COLUMN_NAME\" = '${columnName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        // Even with `IF NOT EXISTS` we get:\n        //   ORA-01501: CREATE DATABASE failed\n        //   ORA-01100: database already mounted\n        if (ifNotExist) {\n            try {\n                await this.query(`CREATE DATABASE IF NOT EXISTS \"${database}\";`)\n            } catch (e) {\n                // if (e instanceof QueryFailedError) {\n                if (e.message.includes(\"ORA-01100: database already mounted\")) {\n                    return\n                }\n                // }\n\n                throw e\n            }\n        } else {\n            await this.query(`CREATE DATABASE \"${database}\"`)\n        }\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema create queries are not supported by Oracle driver.`,\n        )\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        throw new TypeORMError(\n            `Schema drop queries are not supported by Oracle driver.`,\n        )\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table,\n                        index.columnNames,\n                        index.where,\n                    )\n                upQueries.push(this.createIndexSql(table, index))\n                downQueries.push(this.dropIndexSql(index))\n            })\n        }\n\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true,\n    ): Promise<void> {\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(index))\n                downQueries.push(this.createIndexSql(table, index))\n            })\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        upQueries.push(this.dropTableSql(table))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(\n        view: View,\n        syncWithMetadata: boolean = false,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        if (syncWithMetadata) upQueries.push(this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        if (syncWithMetadata)\n            downQueries.push(this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = InstanceChecker.isView(target) ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName)\n        const newTable = oldTable.clone()\n\n        const { database: dbName, tableName: oldTableName } =\n            this.driver.parseTableName(oldTable)\n\n        newTable.name = dbName ? `${dbName}.${newTableName}` : newTableName\n\n        // rename table\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    oldTable,\n                )} RENAME TO \"${newTableName}\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    newTable,\n                )} RENAME TO \"${oldTableName}\"`,\n            ),\n        )\n\n        // rename primary key constraint\n        if (\n            newTable.primaryColumns.length > 0 &&\n            !newTable.primaryColumns[0].primaryKeyConstraintName\n        ) {\n            const columnNames = newTable.primaryColumns.map(\n                (column) => column.name,\n            )\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\n                oldTable,\n                columnNames,\n            )\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\n                newTable,\n                columnNames,\n            )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        newTable,\n                    )} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        newTable,\n                    )} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`,\n                ),\n            )\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    oldTable,\n                    unique.columnNames,\n                )\n\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName) return\n\n            // build new constraint name\n            const newUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    newTable,\n                    unique.columnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        newTable,\n                    )} RENAME CONSTRAINT \"${\n                        unique.name\n                    }\" TO \"${newUniqueName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        newTable,\n                    )} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${\n                        unique.name\n                    }\"`,\n                ),\n            )\n\n            // replace constraint name\n            unique.name = newUniqueName\n        })\n\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(\n                oldTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName) return\n\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            index.name = newIndexName\n        })\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    oldTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName) return\n\n            // build new constraint name\n            const newForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    newTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        newTable,\n                    )} RENAME CONSTRAINT \"${\n                        foreignKey.name\n                    }\" TO \"${newForeignKeyName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        newTable,\n                    )} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${\n                        foreignKey.name\n                    }\"`,\n                ),\n            )\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName\n        })\n\n        await this.executeQueries(upQueries, downQueries)\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name\n        this.replaceCachedTable(oldTable, newTable)\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(column)}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = primaryColumns[0].primaryKeyConstraintName\n                    ? primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          primaryColumns.map((column) => column.name),\n                      )\n\n                const columnNames = primaryColumns\n                    .map((column) => `\"${column.name}\"`)\n                    .join(\", \")\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n            }\n\n            primaryColumns.push(column)\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1,\n            )\n            upQueries.push(this.createIndexSql(table, columnIndex))\n            downQueries.push(this.dropIndexSql(columnIndex))\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    [column.name],\n                ),\n                columnNames: [column.name],\n            })\n            clonedTable.uniques.push(uniqueConstraint)\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\" UNIQUE (\"${column.name}\")`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.addColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the ${this.escapePath(\n                    table,\n                )} table.`,\n            )\n\n        let newColumn: TableColumn | undefined = undefined\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        let clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find(\n                  (column) => column.name === oldTableColumnOrName,\n              )\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the ${this.escapePath(\n                    table,\n                )} table.`,\n            )\n\n        if (\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\n                newColumn.generationStrategy !== \"uuid\") ||\n            oldColumn.type !== newColumn.type ||\n            oldColumn.length !== newColumn.length ||\n            oldColumn.generatedType !== newColumn.generatedType ||\n            oldColumn.asExpression !== newColumn.asExpression\n        ) {\n            // Oracle does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn)\n            await this.addColumn(table, newColumn)\n\n            // update cloned table\n            clonedTable = table.clone()\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // rename column\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${\n                            oldColumn.name\n                        }\" TO \"${newColumn.name}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${\n                            newColumn.name\n                        }\" TO \"${oldColumn.name}\"`,\n                    ),\n                )\n\n                // rename column primary key constraint\n                if (\n                    oldColumn.isPrimary === true &&\n                    !oldColumn.primaryKeyConstraintName\n                ) {\n                    const primaryColumns = clonedTable.primaryColumns\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(\n                        (column) => column.name,\n                    )\n                    const oldPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1)\n                    columnNames.push(newColumn.name)\n\n                    // build new primary constraint name\n                    const newPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`,\n                        ),\n                    )\n                }\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\n                    const oldUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // Skip renaming if Unique has user defined constraint name\n                    if (unique.name !== oldUniqueName) return\n\n                    // build new constraint name\n                    unique.columnNames.splice(\n                        unique.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    unique.columnNames.push(newColumn.name)\n                    const newUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} RENAME CONSTRAINT \"${\n                                unique.name\n                            }\" TO \"${newUniqueName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${\n                                unique.name\n                            }\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    unique.name = newUniqueName\n                })\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    const oldIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // Skip renaming if Index has user defined constraint name\n                    if (index.name !== oldIndexName) return\n\n                    // build new constraint name\n                    index.columnNames.splice(\n                        index.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    index.columnNames.push(newColumn.name)\n                    const newIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    index.name = newIndexName\n                })\n\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                        const foreignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // Skip renaming if foreign key has user defined constraint name\n                        if (foreignKey.name !== foreignKeyName) return\n\n                        // build new constraint name\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(oldColumn.name),\n                            1,\n                        )\n                        foreignKey.columnNames.push(newColumn.name)\n                        const newForeignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // build queries\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} RENAME CONSTRAINT \"${\n                                    foreignKey.name\n                                }\" TO \"${newForeignKeyName}\"`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${\n                                    foreignKey.name\n                                }\"`,\n                            ),\n                        )\n\n                        // replace constraint name\n                        foreignKey.name = newForeignKeyName\n                    })\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(\n                    (column) => column.name === oldColumn.name,\n                )\n                clonedTable.columns[\n                    clonedTable.columns.indexOf(oldTableColumn!)\n                ].name = newColumn.name\n                oldColumn.name = newColumn.name\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                let defaultUp: string = \"\"\n                let defaultDown: string = \"\"\n                let nullableUp: string = \"\"\n                let nullableDown: string = \"\"\n\n                // changing column default\n                if (\n                    newColumn.default !== null &&\n                    newColumn.default !== undefined\n                ) {\n                    defaultUp = `DEFAULT ${newColumn.default}`\n\n                    if (\n                        oldColumn.default !== null &&\n                        oldColumn.default !== undefined\n                    ) {\n                        defaultDown = `DEFAULT ${oldColumn.default}`\n                    } else {\n                        defaultDown = \"DEFAULT NULL\"\n                    }\n                } else if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    defaultUp = \"DEFAULT NULL\"\n                    defaultDown = `DEFAULT ${oldColumn.default}`\n                }\n\n                // changing column isNullable property\n                if (newColumn.isNullable !== oldColumn.isNullable) {\n                    if (newColumn.isNullable === true) {\n                        nullableUp = \"NULL\"\n                        nullableDown = \"NOT NULL\"\n                    } else {\n                        nullableUp = \"NOT NULL\"\n                        nullableDown = \"NULL\"\n                    }\n                }\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} MODIFY \"${\n                            oldColumn.name\n                        }\" ${this.connection.driver.createFullType(\n                            newColumn,\n                        )} ${defaultUp} ${nullableUp}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} MODIFY \"${\n                            oldColumn.name\n                        }\" ${this.connection.driver.createFullType(\n                            oldColumn,\n                        )} ${defaultDown} ${nullableDown}`,\n                    ),\n                )\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn)\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = true\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                } else {\n                    const primaryColumn = primaryColumns.find(\n                        (c) => c.name === newColumn.name,\n                    )\n                    primaryColumns.splice(\n                        primaryColumns.indexOf(primaryColumn!),\n                        1,\n                    )\n\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = false\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = primaryColumns[0]\n                            .primaryKeyConstraintName\n                            ? primaryColumns[0].primaryKeyConstraintName\n                            : this.connection.namingStrategy.primaryKeyName(\n                                  clonedTable,\n                                  primaryColumns.map((column) => column.name),\n                              )\n\n                        const columnNames = primaryColumns\n                            .map((column) => `\"${column.name}\"`)\n                            .join(\", \")\n\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} DROP CONSTRAINT \"${pkName}\"`,\n                            ),\n                        )\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(\n                            table,\n                            [newColumn.name],\n                        ),\n                        columnNames: [newColumn.name],\n                    })\n                    clonedTable.uniques.push(uniqueConstraint)\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint.name}\"`,\n                        ),\n                    )\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(\n                        (unique) => {\n                            return (\n                                unique.columnNames.length === 1 &&\n                                !!unique.columnNames.find(\n                                    (columnName) =>\n                                        columnName === newColumn.name,\n                                )\n                            )\n                        },\n                    )\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\n                        1,\n                    )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint!.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries)\n            this.replaceCachedTable(table, clonedTable)\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table ${this.escapePath(\n                    table,\n                )}`,\n            )\n\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = column.primaryKeyConstraintName\n                ? column.primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      clonedTable.primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name)\n            tableColumn!.isPrimary = false\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = clonedTable.primaryColumns[0]\n                    .primaryKeyConstraintName\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          clonedTable.primaryColumns.map(\n                              (column) => column.name,\n                          ),\n                      )\n\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                    .join(\", \")\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            upQueries.push(this.dropIndexSql(columnIndex))\n            downQueries.push(this.createIndexSql(table, columnIndex))\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(\n            (check) =>\n                !!check.columnNames &&\n                check.columnNames.length === 1 &&\n                check.columnNames[0] === column.name,\n        )\n        if (columnCheck) {\n            clonedTable.checks.splice(\n                clonedTable.checks.indexOf(columnCheck),\n                1,\n            )\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(\n            (unique) =>\n                unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name,\n        )\n        if (columnUnique) {\n            clonedTable.uniques.splice(\n                clonedTable.uniques.indexOf(columnUnique),\n                1,\n            )\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique))\n            downQueries.push(\n                this.createUniqueConstraintSql(table, columnUnique),\n            )\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(column)}`,\n            ),\n        )\n\n        if (column.generatedType && column.asExpression) {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.removeColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName)\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n        const down = this.dropPrimaryKeySql(clonedTable)\n\n        await this.executeQueries(up, down)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const columnNames = columns.map((column) => column.name)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns\n        if (primaryColumns.length > 0) {\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNamesString = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n                ),\n            )\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true))\n\n        const pkName = primaryColumns[0].primaryKeyConstraintName\n            ? primaryColumns[0].primaryKeyConstraintName\n            : this.connection.namingStrategy.primaryKeyName(\n                  clonedTable,\n                  columnNames,\n              )\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} DROP CONSTRAINT \"${pkName}\"`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(\n        tableOrName: Table | string,\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const up = this.dropPrimaryKeySql(table)\n        const down = this.createPrimaryKeySql(\n            table,\n            table.primaryColumns.map((column) => column.name),\n            constraintName,\n        )\n        await this.executeQueries(up, down)\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    uniqueConstraint.columnNames,\n                )\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.addUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.createUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName)\n        if (!uniqueConstraint)\n            throw new TypeORMError(\n                `Supplied unique constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.removeUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.dropUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    checkConstraint.expression!,\n                )\n\n        const up = this.createCheckConstraintSql(table, checkConstraint)\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.addCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.createCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName)\n        if (!checkConstraint)\n            throw new TypeORMError(\n                `Supplied check constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\n        const down = this.createCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.removeCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.dropCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(`Oracle does not support exclusion constraints.`)\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(`Oracle does not support exclusion constraints.`)\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(`Oracle does not support exclusion constraints.`)\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(`Oracle does not support exclusion constraints.`)\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table,\n                foreignKey.columnNames,\n                this.getTablePath(foreignKey),\n                foreignKey.referencedColumnNames,\n            )\n\n        const up = this.createForeignKeySql(table, foreignKey)\n        const down = this.dropForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.addForeignKey(foreignKey)\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.createForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        const up = this.dropForeignKeySql(table, foreignKey)\n        const down = this.createForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.removeForeignKey(foreignKey)\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.dropForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(index)\n        await this.executeQueries(up, down)\n        table.addIndex(index)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index ${indexOrName} was not found in table ${table.name}`,\n            )\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            // drop views\n            const dropViewsQuery = `SELECT 'DROP VIEW \"' || VIEW_NAME || '\"' AS \"query\" FROM \"USER_VIEWS\"`\n            const dropViewQueries: ObjectLiteral[] = await this.query(\n                dropViewsQuery,\n            )\n            await Promise.all(\n                dropViewQueries.map((query) => this.query(query[\"query\"])),\n            )\n\n            // drop materialized views\n            const dropMatViewsQuery = `SELECT 'DROP MATERIALIZED VIEW \"' || MVIEW_NAME || '\"' AS \"query\" FROM \"USER_MVIEWS\"`\n            const dropMatViewQueries: ObjectLiteral[] = await this.query(\n                dropMatViewsQuery,\n            )\n            await Promise.all(\n                dropMatViewQueries.map((query) => this.query(query[\"query\"])),\n            )\n\n            // drop tables\n            const dropTablesQuery = `SELECT 'DROP TABLE \"' || TABLE_NAME || '\" CASCADE CONSTRAINTS' AS \"query\" FROM \"USER_TABLES\"`\n            const dropTableQueries: ObjectLiteral[] = await this.query(\n                dropTablesQuery,\n            )\n            await Promise.all(\n                dropTableQueries.map((query) => this.query(query[\"query\"])),\n            )\n            if (!isAnotherTransactionActive) await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        if (!hasTable) {\n            return []\n        }\n\n        if (!viewNames) {\n            viewNames = []\n        }\n\n        const currentDatabase = await this.getCurrentDatabase()\n        const currentSchema = await this.getCurrentSchema()\n\n        const viewsCondition = viewNames\n            .map((viewName) => this.driver.parseTableName(viewName))\n            .map(({ schema, tableName }) => {\n                if (!schema) {\n                    schema = this.driver.options.schema || currentSchema\n                }\n\n                return `(\"T\".\"schema\" = '${schema}' AND \"T\".\"name\" = '${tableName}')`\n            })\n            .join(\" OR \")\n\n        let query =\n            `SELECT \"T\".* FROM ${this.escapePath(\n                this.getTypeormMetadataTableName(),\n            )} \"T\" ` +\n            `INNER JOIN \"USER_OBJECTS\" \"O\" ON \"O\".\"OBJECT_NAME\" = \"T\".\"name\" AND \"O\".\"OBJECT_TYPE\" IN ( 'MATERIALIZED VIEW', 'VIEW' ) ` +\n            `WHERE \"T\".\"type\" IN ('${MetadataTableType.MATERIALIZED_VIEW}', '${MetadataTableType.VIEW}')`\n        if (viewsCondition.length > 0) query += ` AND ${viewsCondition}`\n\n        const dbViews = await this.query(query)\n        return dbViews.map((dbView: any) => {\n            const parsedName = this.driver.parseTableName(dbView[\"name\"])\n\n            const view = new View()\n            view.database =\n                parsedName.database || dbView[\"database\"] || currentDatabase\n            view.schema = parsedName.schema || dbView[\"schema\"] || currentSchema\n            view.name = parsedName.tableName\n            view.expression = dbView[\"value\"]\n            view.materialized =\n                dbView[\"type\"] === MetadataTableType.MATERIALIZED_VIEW\n            return view\n        })\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        const dbTables: { TABLE_NAME: string; OWNER: string }[] = []\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        if (!tableNames) {\n            const tablesSql = `SELECT \"TABLE_NAME\", \"OWNER\" FROM \"ALL_TABLES\"`\n            dbTables.push(...(await this.query(tablesSql)))\n        } else {\n            const tablesCondition = tableNames\n                .map((tableName) => {\n                    const parts = tableName.split(\".\")\n\n                    if (parts.length >= 3) {\n                        const [, schema, name] = parts\n                        return `(\"OWNER\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`\n                    } else if (parts.length === 2) {\n                        const [schema, name] = parts\n                        return `(\"OWNER\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`\n                    } else if (parts.length === 1) {\n                        const [name] = parts\n                        return `(\"TABLE_NAME\" = '${name}')`\n                    } else {\n                        return `(1=0)`\n                    }\n                })\n                .join(\" OR \")\n            const tablesSql = `SELECT \"TABLE_NAME\", \"OWNER\" FROM \"ALL_TABLES\" WHERE ${tablesCondition}`\n            dbTables.push(...(await this.query(tablesSql)))\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return []\n        }\n\n        // load tables, columns, indices and foreign keys\n        const columnsCondition = dbTables\n            .map(({ TABLE_NAME, OWNER }) => {\n                return `(\"C\".\"OWNER\" = '${OWNER}' AND \"C\".\"TABLE_NAME\" = '${TABLE_NAME}')`\n            })\n            .join(\" OR \")\n        const columnsSql = `SELECT * FROM \"ALL_TAB_COLS\" \"C\" WHERE (${columnsCondition})`\n\n        const indicesSql =\n            `SELECT \"C\".\"INDEX_NAME\", \"C\".\"OWNER\", \"C\".\"TABLE_NAME\", \"C\".\"UNIQUENESS\", ` +\n            `LISTAGG (\"COL\".\"COLUMN_NAME\", ',') WITHIN GROUP (ORDER BY \"COL\".\"COLUMN_NAME\") AS \"COLUMN_NAMES\" ` +\n            `FROM \"ALL_INDEXES\" \"C\" ` +\n            `INNER JOIN \"ALL_IND_COLUMNS\" \"COL\" ON \"COL\".\"INDEX_OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"INDEX_NAME\" = \"C\".\"INDEX_NAME\" ` +\n            `LEFT JOIN \"ALL_CONSTRAINTS\" \"CON\" ON \"CON\".\"OWNER\" = \"C\".\"OWNER\" AND \"CON\".\"CONSTRAINT_NAME\" = \"C\".\"INDEX_NAME\" ` +\n            `WHERE (${columnsCondition}) AND \"CON\".\"CONSTRAINT_NAME\" IS NULL ` +\n            `GROUP BY \"C\".\"INDEX_NAME\", \"C\".\"OWNER\", \"C\".\"TABLE_NAME\", \"C\".\"UNIQUENESS\"`\n\n        const foreignKeysSql =\n            `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"OWNER\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"REF_COL\".\"TABLE_NAME\" AS \"REFERENCED_TABLE_NAME\", ` +\n            `\"REF_COL\".\"COLUMN_NAME\" AS \"REFERENCED_COLUMN_NAME\", \"C\".\"DELETE_RULE\" AS \"ON_DELETE\" ` +\n            `FROM \"ALL_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"ALL_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `INNER JOIN \"ALL_CONS_COLUMNS\" \"REF_COL\" ON \"REF_COL\".\"OWNER\" = \"C\".\"R_OWNER\" AND \"REF_COL\".\"CONSTRAINT_NAME\" = \"C\".\"R_CONSTRAINT_NAME\" AND \"REF_COL\".\"POSITION\" = \"COL\".\"POSITION\" ` +\n            `WHERE (${columnsCondition}) AND \"C\".\"CONSTRAINT_TYPE\" = 'R'`\n\n        const constraintsSql =\n            `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"CONSTRAINT_TYPE\", \"C\".\"OWNER\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"C\".\"SEARCH_CONDITION\" ` +\n            `FROM \"ALL_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"ALL_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `WHERE (${columnsCondition}) AND \"C\".\"CONSTRAINT_TYPE\" IN ('C', 'U', 'P') AND \"C\".\"GENERATED\" = 'USER NAME'`\n\n        const [\n            dbColumns,\n            dbIndices,\n            dbForeignKeys,\n            dbConstraints,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n            this.query(constraintsSql),\n        ])\n\n        // create tables for loaded tables\n        return await Promise.all(\n            dbTables.map(async (dbTable) => {\n                const table = new Table()\n                const owner =\n                    dbTable[\"OWNER\"] === currentSchema &&\n                    (!this.driver.options.schema ||\n                        this.driver.options.schema === currentSchema)\n                        ? undefined\n                        : dbTable[\"OWNER\"]\n                table.database = currentDatabase\n                table.schema = dbTable[\"OWNER\"]\n                table.name = this.driver.buildTableName(\n                    dbTable[\"TABLE_NAME\"],\n                    owner,\n                )\n\n                // create columns from the loaded columns\n                table.columns = await Promise.all(\n                    dbColumns\n                        .filter(\n                            (dbColumn) =>\n                                dbColumn[\"OWNER\"] === dbTable[\"OWNER\"] &&\n                                dbColumn[\"TABLE_NAME\"] ===\n                                    dbTable[\"TABLE_NAME\"] &&\n                                // Filter out auto-generated virtual columns,\n                                // since TypeORM will have no info about them.\n                                !(\n                                    dbColumn[\"VIRTUAL_COLUMN\"] === \"YES\" &&\n                                    dbColumn[\"USER_GENERATED\"] === \"NO\"\n                                ),\n                        )\n                        .map(async (dbColumn) => {\n                            const columnConstraints = dbConstraints.filter(\n                                (dbConstraint) =>\n                                    dbConstraint[\"OWNER\"] ===\n                                        dbColumn[\"OWNER\"] &&\n                                    dbConstraint[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    dbConstraint[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const uniqueConstraints = columnConstraints.filter(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"U\",\n                            )\n                            const isConstraintComposite =\n                                uniqueConstraints.every((uniqueConstraint) => {\n                                    return dbConstraints.some(\n                                        (dbConstraint) =>\n                                            dbConstraint[\"OWNER\"] ===\n                                                dbColumn[\"OWNER\"] &&\n                                            dbConstraint[\"TABLE_NAME\"] ===\n                                                dbColumn[\"TABLE_NAME\"] &&\n                                            dbConstraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"] &&\n                                            dbConstraint[\"CONSTRAINT_NAME\"] ===\n                                                uniqueConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ] &&\n                                            dbConstraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"U\",\n                                    )\n                                })\n\n                            const tableColumn = new TableColumn()\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\n                            tableColumn.type =\n                                dbColumn[\"DATA_TYPE\"].toLowerCase()\n                            if (tableColumn.type.indexOf(\"(\") !== -1)\n                                tableColumn.type = tableColumn.type.replace(\n                                    /\\([0-9]*\\)/,\n                                    \"\",\n                                )\n\n                            // check only columns that have length property\n                            if (\n                                this.driver.withLengthColumnTypes.indexOf(\n                                    tableColumn.type as ColumnType,\n                                ) !== -1\n                            ) {\n                                const length =\n                                    tableColumn.type === \"raw\"\n                                        ? dbColumn[\"DATA_LENGTH\"]\n                                        : dbColumn[\"CHAR_COL_DECL_LENGTH\"]\n                                tableColumn.length =\n                                    length &&\n                                    !this.isDefaultColumnLength(\n                                        table,\n                                        tableColumn,\n                                        length,\n                                    )\n                                        ? length.toString()\n                                        : \"\"\n                            }\n\n                            if (\n                                tableColumn.type === \"number\" ||\n                                tableColumn.type === \"float\"\n                            ) {\n                                if (\n                                    dbColumn[\"DATA_PRECISION\"] !== null &&\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"DATA_PRECISION\"],\n                                    )\n                                )\n                                    tableColumn.precision =\n                                        dbColumn[\"DATA_PRECISION\"]\n                                if (\n                                    dbColumn[\"DATA_SCALE\"] !== null &&\n                                    !this.isDefaultColumnScale(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"DATA_SCALE\"],\n                                    )\n                                )\n                                    tableColumn.scale = dbColumn[\"DATA_SCALE\"]\n                            } else if (\n                                (tableColumn.type === \"timestamp\" ||\n                                    tableColumn.type ===\n                                        \"timestamp with time zone\" ||\n                                    tableColumn.type ===\n                                        \"timestamp with local time zone\") &&\n                                dbColumn[\"DATA_SCALE\"] !== null\n                            ) {\n                                tableColumn.precision =\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"DATA_SCALE\"],\n                                    )\n                                        ? dbColumn[\"DATA_SCALE\"]\n                                        : undefined\n                            }\n\n                            tableColumn.default =\n                                dbColumn[\"DATA_DEFAULT\"] !== null &&\n                                dbColumn[\"DATA_DEFAULT\"] !== undefined &&\n                                dbColumn[\"VIRTUAL_COLUMN\"] === \"NO\" &&\n                                dbColumn[\"DATA_DEFAULT\"].trim() !== \"NULL\"\n                                    ? (tableColumn.default =\n                                          dbColumn[\"DATA_DEFAULT\"].trim())\n                                    : undefined\n\n                            const primaryConstraint = columnConstraints.find(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"P\",\n                            )\n                            if (primaryConstraint) {\n                                tableColumn.isPrimary = true\n                                // find another columns involved in primary key constraint\n                                const anotherPrimaryConstraints =\n                                    dbConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"OWNER\"] ===\n                                                dbColumn[\"OWNER\"] &&\n                                            constraint[\"TABLE_NAME\"] ===\n                                                dbColumn[\"TABLE_NAME\"] &&\n                                            constraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"] &&\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"P\",\n                                    )\n\n                                // collect all column names\n                                const columnNames =\n                                    anotherPrimaryConstraints.map(\n                                        (constraint) =>\n                                            constraint[\"COLUMN_NAME\"],\n                                    )\n                                columnNames.push(dbColumn[\"COLUMN_NAME\"])\n\n                                // build default primary key constraint name\n                                const pkName =\n                                    this.connection.namingStrategy.primaryKeyName(\n                                        table,\n                                        columnNames,\n                                    )\n\n                                // if primary key has user-defined constraint name, write it in table column\n                                if (\n                                    primaryConstraint[\"CONSTRAINT_NAME\"] !==\n                                    pkName\n                                ) {\n                                    tableColumn.primaryKeyConstraintName =\n                                        primaryConstraint[\"CONSTRAINT_NAME\"]\n                                }\n                            }\n\n                            tableColumn.isNullable =\n                                dbColumn[\"NULLABLE\"] === \"Y\"\n                            tableColumn.isUnique =\n                                uniqueConstraints.length > 0 &&\n                                !isConstraintComposite\n                            tableColumn.isGenerated =\n                                dbColumn[\"IDENTITY_COLUMN\"] === \"YES\"\n                            if (tableColumn.isGenerated) {\n                                tableColumn.generationStrategy = \"increment\"\n                                tableColumn.default = undefined\n                            }\n                            tableColumn.comment = \"\" // todo\n\n                            if (dbColumn[\"VIRTUAL_COLUMN\"] === \"YES\") {\n                                tableColumn.generatedType = \"VIRTUAL\"\n\n                                const asExpressionQuery =\n                                    this.selectTypeormMetadataSql({\n                                        table: dbTable[\"TABLE_NAME\"],\n                                        type: MetadataTableType.GENERATED_COLUMN,\n                                        name: tableColumn.name,\n                                    })\n\n                                const results = await this.query(\n                                    asExpressionQuery.query,\n                                    asExpressionQuery.parameters,\n                                )\n                                if (results[0] && results[0].value) {\n                                    tableColumn.asExpression = results[0].value\n                                } else {\n                                    tableColumn.asExpression = \"\"\n                                }\n                            }\n\n                            return tableColumn\n                        }),\n                )\n\n                // find unique constraints of table, group them by constraint name and build TableUnique.\n                const tableUniqueConstraints = OrmUtils.uniq(\n                    dbConstraints.filter((dbConstraint) => {\n                        return (\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"OWNER\"] === dbTable[\"OWNER\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\"\n                        )\n                    }),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.uniques = tableUniqueConstraints.map((constraint) => {\n                    const uniques = dbConstraints.filter(\n                        (dbC) =>\n                            dbC[\"CONSTRAINT_NAME\"] ===\n                            constraint[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableUnique({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: uniques.map((u) => u[\"COLUMN_NAME\"]),\n                    })\n                })\n\n                // find check constraints of table, group them by constraint name and build TableCheck.\n                const tableCheckConstraints = OrmUtils.uniq(\n                    dbConstraints.filter((dbConstraint) => {\n                        return (\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"OWNER\"] === dbTable[\"OWNER\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"C\"\n                        )\n                    }),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.checks = tableCheckConstraints.map((constraint) => {\n                    const checks = dbConstraints.filter(\n                        (dbC) =>\n                            dbC[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                            dbC[\"OWNER\"] === constraint[\"OWNER\"] &&\n                            dbC[\"CONSTRAINT_NAME\"] ===\n                                constraint[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableCheck({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                        expression: constraint[\"SEARCH_CONDITION\"],\n                    })\n                })\n\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n                const tableForeignKeyConstraints = OrmUtils.uniq(\n                    dbForeignKeys.filter(\n                        (dbForeignKey) =>\n                            dbForeignKey[\"OWNER\"] === dbTable[\"OWNER\"] &&\n                            dbForeignKey[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"],\n                    ),\n                    (dbForeignKey) => dbForeignKey[\"CONSTRAINT_NAME\"],\n                )\n\n                table.foreignKeys = tableForeignKeyConstraints.map(\n                    (dbForeignKey) => {\n                        const foreignKeys = dbForeignKeys.filter(\n                            (dbFk) =>\n                                dbFk[\"TABLE_NAME\"] ===\n                                    dbForeignKey[\"TABLE_NAME\"] &&\n                                dbFk[\"OWNER\"] === dbForeignKey[\"OWNER\"] &&\n                                dbFk[\"CONSTRAINT_NAME\"] ===\n                                    dbForeignKey[\"CONSTRAINT_NAME\"],\n                        )\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                            columnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"COLUMN_NAME\"],\n                            ),\n                            referencedDatabase: table.database,\n                            referencedSchema: dbForeignKey[\"OWNER\"],\n                            referencedTableName:\n                                dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                            referencedColumnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"REFERENCED_COLUMN_NAME\"],\n                            ),\n                            onDelete: dbForeignKey[\"ON_DELETE\"],\n                            onUpdate: \"NO ACTION\", // Oracle does not have onUpdate option in FK's, but we need it for proper synchronization\n                        })\n                    },\n                )\n\n                // Attempt to map auto-generated virtual columns to their\n                // referenced columns, through its 'DATA_DEFAULT' property.\n                //\n                // An example of this happening is when a column of type\n                // TIMESTAMP WITH TIME ZONE is indexed. Oracle will create a\n                // virtual column of type TIMESTAMP with a default value of\n                // SYS_EXTRACT_UTC(<column>).\n                const autoGenVirtualDbColumns = dbColumns\n                    .filter(\n                        (dbColumn) =>\n                            dbColumn[\"OWNER\"] === dbTable[\"OWNER\"] &&\n                            dbColumn[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbColumn[\"VIRTUAL_COLUMN\"] === \"YES\" &&\n                            dbColumn[\"USER_GENERATED\"] === \"NO\",\n                    )\n                    .reduce((acc, x) => {\n                        const referencedDbColumn = dbColumns.find((dbColumn) =>\n                            x[\"DATA_DEFAULT\"].includes(dbColumn[\"COLUMN_NAME\"]),\n                        )\n\n                        if (!referencedDbColumn) return acc\n\n                        return {\n                            ...acc,\n                            [x[\"COLUMN_NAME\"]]:\n                                referencedDbColumn[\"COLUMN_NAME\"],\n                        }\n                    }, {})\n\n                // create TableIndex objects from the loaded indices\n                table.indices = dbIndices\n                    .filter(\n                        (dbIndex) =>\n                            dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbIndex[\"OWNER\"] === dbTable[\"OWNER\"],\n                    )\n                    .map((dbIndex) => {\n                        //\n                        const columnNames = dbIndex[\"COLUMN_NAMES\"]\n                            .split(\",\")\n                            .map(\n                                (\n                                    columnName: keyof typeof autoGenVirtualDbColumns,\n                                ) =>\n                                    autoGenVirtualDbColumns[columnName] ??\n                                    columnName,\n                            )\n\n                        return new TableIndex({\n                            name: dbIndex[\"INDEX_NAME\"],\n                            columnNames,\n                            isUnique: dbIndex[\"UNIQUENESS\"] === \"UNIQUE\",\n                        })\n                    })\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column))\n            .join(\", \")\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\n\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueExist = table.uniques.some(\n                    (unique) =>\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames[0] === column.name,\n                )\n                if (!isUniqueExist)\n                    table.uniques.push(\n                        new TableUnique({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                        }),\n                    )\n            })\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                    const uniqueName = unique.name\n                        ? unique.name\n                        : this.connection.namingStrategy.uniqueConstraintName(\n                              table,\n                              unique.columnNames,\n                          )\n                    const columnNames = unique.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${uniquesSql}`\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              table,\n                              check.expression!,\n                          )\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\n                })\n                .join(\", \")\n\n            sql += `, ${checksSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table,\n                            fk.columnNames,\n                            this.getTablePath(fk),\n                            fk.referencedColumnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    let constraint = `CONSTRAINT \"${\n                        fk.name\n                    }\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\n                        this.getTablePath(fk),\n                    )} (${referencedColumnNames})`\n                    if (fk.onDelete && fk.onDelete !== \"NO ACTION\") {\n                        // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n                        constraint += ` ON DELETE ${fk.onDelete}`\n                    }\n                    return constraint\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary,\n        )\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      table,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`\n        }\n\n        sql += `)`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n    ): Query {\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}`\n            : `DROP TABLE ${this.escapePath(tableOrName)}`\n        return new Query(query)\n    }\n\n    protected createViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\"\n        if (typeof view.expression === \"string\") {\n            return new Query(\n                `CREATE ${materializedClause}VIEW ${this.escapePath(view)} AS ${\n                    view.expression\n                }`,\n            )\n        } else {\n            return new Query(\n                `CREATE ${materializedClause}VIEW ${this.escapePath(\n                    view,\n                )} AS ${view.expression(this.connection).getQuery()}`,\n            )\n        }\n    }\n\n    protected insertViewDefinitionSql(view: View): Query {\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        const type = view.materialized\n            ? MetadataTableType.MATERIALIZED_VIEW\n            : MetadataTableType.VIEW\n        const { schema, tableName } = this.driver.parseTableName(view)\n        return this.insertTypeormMetadataSql({\n            type: type,\n            name: tableName,\n            schema: schema,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\"\n        return new Query(\n            `DROP ${materializedClause}VIEW ${this.escapePath(view)}`,\n        )\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected deleteViewDefinitionSql(view: View): Query {\n        const type = view.materialized\n            ? MetadataTableType.MATERIALIZED_VIEW\n            : MetadataTableType.VIEW\n        return this.deleteTypeormMetadataSql({ type, name: view.name })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\n                index.name\n            }\" ON ${this.escapePath(table)} (${columns})`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(indexOrName: TableIndex | string): Query {\n        const indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName\n        return new Query(`DROP INDEX \"${indexName}\"`)\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(\n        table: Table,\n        columnNames: string[],\n        constraintName?: string,\n    ): Query {\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`,\n        )\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        if (!table.primaryColumns.length)\n            throw new TypeORMError(`Table ${table} has no primary keys.`)\n\n        const columnNames = table.primaryColumns.map((column) => column.name)\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${primaryKeyName}\"`,\n        )\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(\n        table: Table,\n        uniqueConstraint: TableUnique,\n    ): Query {\n        const columnNames = uniqueConstraint.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                uniqueConstraint.name\n            }\" UNIQUE (${columnNames})`,\n        )\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(\n        table: Table,\n        uniqueOrName: TableUnique | string,\n    ): Query {\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName.name\n            : uniqueOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${uniqueName}\"`,\n        )\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(\n        table: Table,\n        checkConstraint: TableCheck,\n    ): Query {\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                checkConstraint.name\n            }\" CHECK (${checkConstraint.expression})`,\n        )\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(\n        table: Table,\n        checkOrName: TableCheck | string,\n    ): Query {\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName.name\n            : checkOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${checkName}\"`,\n        )\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey,\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\",\")\n        let sql =\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                foreignKey.name\n            }\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(\n                this.getTablePath(foreignKey),\n            )} (${referencedColumnNames})`\n        // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n        if (foreignKey.onDelete && foreignKey.onDelete !== \"NO ACTION\") {\n            sql += ` ON DELETE ${foreignKey.onDelete}`\n        }\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Query {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\n            foreignKeyOrName,\n        )\n            ? foreignKeyOrName.name\n            : foreignKeyOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${foreignKeyName}\"`,\n        )\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c =\n            `\"${column.name}\" ` + this.connection.driver.createFullType(column)\n        if (column.charset) c += \" CHARACTER SET \" + column.charset\n        if (column.collation) c += \" COLLATE \" + column.collation\n\n        if (column.asExpression) c += ` AS (${column.asExpression}) VIRTUAL`\n\n        if (column.default !== undefined && column.default !== null)\n            // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default\n        if (column.isNullable !== true && !column.isGenerated)\n            // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\"\n        if (\n            column.isGenerated === true &&\n            column.generationStrategy === \"increment\"\n        )\n            c += \" GENERATED BY DEFAULT AS IDENTITY\"\n\n        return c\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table | View | string): string {\n        // Ignore database when escaping paths\n        const { schema, tableName } = this.driver.parseTableName(target)\n\n        if (schema && schema !== this.driver.schema) {\n            return `\"${schema}\".\"${tableName}\"`\n        }\n\n        return `\"${tableName}\"`\n    }\n\n    /**\n     * Change table comment.\n     */\n    changeTableComment(\n        tableOrName: Table | string,\n        comment?: string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `oracle driver does not support change table comment.`,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2858, "column": 0}, "map": {"version":3,"file":"OracleDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/oracle/OracleDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { OracleQueryRunner } from \"./OracleQueryRunner\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { OracleConnectionOptions } from \"./OracleConnectionOptions\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { OracleConnectionCredentialsOptions } from \"./OracleConnectionCredentialsOptions\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TypeORMError } from \"../../error\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\nimport { OnDeleteType } from \"../../metadata/types/OnDeleteType\"\nimport { OnUpdateType } from \"../../metadata/types/OnUpdateType\"\n\n/**\n * Organizes communication with Oracle RDBMS.\n */\nexport class OracleDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Underlying oracle library.\n     */\n    oracle: any\n\n    /**\n     * Pool for master database.\n     */\n    master: any\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = []\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: OracleConnectionOptions\n\n    /**\n     * Database name used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Schema name used to perform all write queries.\n     */\n    schema?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"nested\" as const\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.techonthenet.com/oracle/datatypes.php\n     * @see https://docs.oracle.com/cd/B28359_01/server.111/b28318/datatype.htm#CNCPT012\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"char\",\n        \"nchar\",\n        \"nvarchar2\",\n        \"varchar2\",\n        \"long\",\n        \"raw\",\n        \"long raw\",\n        \"number\",\n        \"numeric\",\n        \"float\",\n        \"dec\",\n        \"decimal\",\n        \"integer\",\n        \"int\",\n        \"smallint\",\n        \"real\",\n        \"double precision\",\n        \"date\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\",\n        \"interval year to month\",\n        \"interval day to second\",\n        \"bfile\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"rowid\",\n        \"urowid\",\n        \"simple-json\",\n        \"json\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = []\n\n    /**\n     * Returns list of supported onDelete types by driver.\n     * https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/sql-language-reference.pdf\n     * Oracle does not support NO ACTION, but NO ACTION is set by default in EntityMetadata\n     */\n    supportedOnDeleteTypes: OnDeleteType[] = [\n        \"CASCADE\",\n        \"SET NULL\",\n        \"NO ACTION\",\n    ]\n\n    /**\n     * Returns list of supported onUpdate types by driver.\n     * Oracle does not have onUpdate option, but we allow NO ACTION since it is set by default in EntityMetadata\n     */\n    supportedOnUpdateTypes: OnUpdateType[] = [\"NO ACTION\"]\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"nchar\",\n        \"nvarchar2\",\n        \"varchar2\",\n        \"varchar\",\n        \"raw\",\n    ]\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"number\",\n        \"float\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\",\n    ]\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\"number\"]\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"number\",\n        treeLevel: \"number\",\n        migrationId: \"number\",\n        migrationName: \"varchar2\",\n        migrationTimestamp: \"number\",\n        cacheId: \"number\",\n        cacheIdentifier: \"varchar2\",\n        cacheTime: \"number\",\n        cacheDuration: \"number\",\n        cacheQuery: \"clob\",\n        cacheResult: \"clob\",\n        metadataType: \"varchar2\",\n        metadataDatabase: \"varchar2\",\n        metadataSchema: \"varchar2\",\n        metadataTable: \"varchar2\",\n        metadataName: \"varchar2\",\n        metadataValue: \"clob\",\n    }\n\n    /**\n     * The prefix used for the parameters\n     */\n    parametersPrefix: string = \":\"\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        char: { length: 1 },\n        nchar: { length: 1 },\n        varchar: { length: 255 },\n        varchar2: { length: 255 },\n        nvarchar2: { length: 255 },\n        raw: { length: 2000 },\n        float: { precision: 126 },\n        timestamp: { precision: 6 },\n        \"timestamp with time zone\": { precision: 6 },\n        \"timestamp with local time zone\": { precision: 6 },\n    }\n\n    /**\n     * Max length allowed by Oracle for aliases.\n     * @see https://docs.oracle.com/database/121/SQLRF/sql_elements008.htm#SQLRF51129\n     * > The following list of rules applies to both quoted and nonquoted identifiers unless otherwise indicated\n     * > Names must be from 1 to 30 bytes long with these exceptions:\n     * > [...]\n     *\n     * Since Oracle 12.2 (with a compatible driver/client), the limit has been set to 128.\n     * @see https://docs.oracle.com/en/database/oracle/oracle-database/12.2/sqlrf/Database-Object-Names-and-Qualifiers.html\n     *\n     * > If COMPATIBLE is set to a value of 12.2 or higher, then names must be from 1 to 128 bytes long with these exceptions\n     */\n    maxAliasLength = 29\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n    }\n\n    dummyTableName = \"DUAL\"\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as OracleConnectionOptions\n\n        if (this.options.useUTC === true) {\n            process.env.ORA_SDTZ = \"UTC\"\n        }\n        // load oracle package\n        this.loadDependencies()\n\n        this.database = DriverUtils.buildDriverOptions(\n            this.options.replication\n                ? this.options.replication.master\n                : this.options,\n        ).database\n        this.schema = DriverUtils.buildDriverOptions(this.options).schema\n\n        // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.sid)\n        //     throw new DriverOptionNotSetError(\"sid\");\n        //\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        this.oracle.fetchAsString = [this.oracle.DB_TYPE_CLOB]\n        this.oracle.fetchAsBuffer = [this.oracle.DB_TYPE_BLOB]\n        if (this.options.replication) {\n            this.slaves = await Promise.all(\n                this.options.replication.slaves.map((slave) => {\n                    return this.createPool(this.options, slave)\n                }),\n            )\n            this.master = await this.createPool(\n                this.options,\n                this.options.replication.master,\n            )\n        } else {\n            this.master = await this.createPool(this.options, this.options)\n        }\n\n        if (!this.database || !this.schema) {\n            const queryRunner = this.createQueryRunner(\"master\")\n\n            if (!this.database) {\n                this.database = await queryRunner.getCurrentDatabase()\n            }\n\n            if (!this.schema) {\n                this.schema = await queryRunner.getCurrentSchema()\n            }\n\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"oracle\"))\n\n        await this.closePool(this.master)\n        await Promise.all(this.slaves.map((slave) => this.closePool(slave)))\n        this.master = undefined\n        this.slaves = []\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new OracleQueryRunner(this, mode)\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => {\n                if (typeof nativeParameters[key] === \"boolean\")\n                    return nativeParameters[key] ? 1 : 0\n                return nativeParameters[key]\n            },\n        )\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        const parameterIndexMap = new Map<string, number>()\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                if (parameterIndexMap.has(key)) {\n                    return this.parametersPrefix + parameterIndexMap.get(key)\n                }\n\n                const value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                }\n\n                if (typeof value === \"boolean\") {\n                    return value ? \"1\" : \"0\"\n                }\n\n                escapedParameters.push(value)\n                parameterIndexMap.set(key, escapedParameters.length)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * Oracle does not support table schemas. One user can have only one schema.\n     */\n    buildTableName(\n        tableName: string,\n        schema?: string,\n        database?: string,\n    ): string {\n        const tablePath = [tableName]\n\n        if (schema) {\n            tablePath.unshift(schema)\n        }\n\n        return tablePath.join(\".\")\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = this.schema\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name)\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        if (parts.length === 3) {\n            return {\n                database: parts[0] || driverDatabase,\n                schema: parts[1] || driverSchema,\n                tableName: parts[2],\n            }\n        } else if (parts.length === 2) {\n            return {\n                database: driverDatabase,\n                schema: parts[0] || driverSchema,\n                tableName: parts[1],\n            }\n        } else {\n            return {\n                database: driverDatabase,\n                schema: driverSchema,\n                tableName: target,\n            }\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (columnMetadata.type === Boolean) {\n            return value ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            if (typeof value === \"string\") value = value.replace(/[^0-9-]/g, \"\")\n            return () =>\n                `TO_DATE('${DateUtils.mixedDateToDateString(\n                    value,\n                )}', 'YYYY-MM-DD')`\n        } else if (\n            columnMetadata.type === Date ||\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"timestamp with time zone\" ||\n            columnMetadata.type === \"timestamp with local time zone\"\n        ) {\n            return DateUtils.mixedDateToDate(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value)\n        } else if (columnMetadata.type === \"json\") {\n            return DateUtils.simpleJsonToString(value)\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (columnMetadata.type === Boolean) {\n            value = !!value\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (\n            columnMetadata.type === Date ||\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"timestamp with time zone\" ||\n            columnMetadata.type === \"timestamp with local time zone\"\n        ) {\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n        isArray?: boolean\n    }): string {\n        if (\n            column.type === Number ||\n            column.type === Boolean ||\n            column.type === \"numeric\" ||\n            column.type === \"dec\" ||\n            column.type === \"decimal\" ||\n            column.type === \"int\" ||\n            column.type === \"integer\" ||\n            column.type === \"smallint\"\n        ) {\n            return \"number\"\n        } else if (\n            column.type === \"real\" ||\n            column.type === \"double precision\"\n        ) {\n            return \"float\"\n        } else if (column.type === String || column.type === \"varchar\") {\n            return \"varchar2\"\n        } else if (column.type === Date) {\n            return \"timestamp\"\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\"\n        } else if (column.type === \"uuid\") {\n            return \"varchar2\"\n        } else if (column.type === \"simple-array\") {\n            return \"clob\"\n        } else if (column.type === \"simple-json\") {\n            return \"clob\"\n        } else if (column.type === \"json\") {\n            return \"json\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            return defaultValue()\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(\n            (uq) => uq.columns.length === 1 && uq.columns[0] === column,\n        )\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString()\n\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"varchar2\":\n            case \"nvarchar2\":\n                return \"255\"\n            case \"raw\":\n                return \"2000\"\n            case \"uuid\":\n                return \"36\"\n            default:\n                return \"\"\n        }\n    }\n\n    createFullType(column: TableColumn): string {\n        let type = column.type\n\n        // used 'getColumnLength()' method, because in Oracle column length is required for some data types.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\"\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += \"(\" + column.precision + \")\"\n        }\n\n        if (column.type === \"timestamp with time zone\") {\n            type =\n                \"TIMESTAMP\" +\n                (column.precision !== null && column.precision !== undefined\n                    ? \"(\" + column.precision + \")\"\n                    : \"\") +\n                \" WITH TIME ZONE\"\n        } else if (column.type === \"timestamp with local time zone\") {\n            type =\n                \"TIMESTAMP\" +\n                (column.precision !== null && column.precision !== undefined\n                    ? \"(\" + column.precision + \")\"\n                    : \"\") +\n                \" WITH LOCAL TIME ZONE\"\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return new Promise<any>((ok, fail) => {\n            if (!this.master) {\n                return fail(new TypeORMError(\"Driver not Connected\"))\n            }\n\n            this.master.getConnection(\n                (err: any, connection: any, release: Function) => {\n                    if (err) return fail(err)\n                    ok(connection)\n                },\n            )\n        })\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.slaves.length) return this.obtainMasterConnection()\n\n        return new Promise<any>((ok, fail) => {\n            const random = Math.floor(Math.random() * this.slaves.length)\n\n            this.slaves[random].getConnection((err: any, connection: any) => {\n                if (err) return fail(err)\n                ok(connection)\n            })\n        })\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        if (!insertResult) return undefined\n\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key)\n            if (column) {\n                OrmUtils.mergeDeep(\n                    map,\n                    column.createValueMap(\n                        this.prepareHydratedValue(insertResult[key], column),\n                    ),\n                )\n            }\n            return map\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            const isColumnChanged =\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== this.getColumnLength(columnMetadata) ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                // || tableColumn.comment !== columnMetadata.comment\n                tableColumn.default !== this.normalizeDefault(columnMetadata) ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         columnMetadata.length,\n            //     )\n            //     console.log(\n            //         \"precision:\",\n            //         tableColumn.precision,\n            //         columnMetadata.precision,\n            //     )\n            //     console.log(\"scale:\", tableColumn.scale, columnMetadata.scale)\n            //     console.log(\n            //         \"comment:\",\n            //         tableColumn.comment,\n            //         columnMetadata.comment,\n            //     )\n            //     console.log(\n            //         \"default:\",\n            //         tableColumn.default,\n            //         this.normalizeDefault(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"enum:\",\n            //         tableColumn.enum &&\n            //             columnMetadata.enum &&\n            //             !OrmUtils.isArraysEqual(\n            //                 tableColumn.enum,\n            //                 columnMetadata.enum.map((val) => val + \"\"),\n            //             ),\n            //     )\n            //     console.log(\n            //         \"onUpdate:\",\n            //         tableColumn.onUpdate,\n            //         columnMetadata.onUpdate,\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         tableColumn.asExpression,\n            //         columnMetadata.asExpression,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"isGenerated:\",\n            //         tableColumn.isGenerated,\n            //         columnMetadata.isGenerated,\n            //     )\n            //     console.log(\"==========================================\")\n            // }\n\n            return isColumnChanged\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return this.parametersPrefix + (index + 1)\n    }\n\n    /**\n     * Converts column type in to native oracle type.\n     */\n    columnTypeToNativeParameter(type: ColumnType): any {\n        switch (this.normalizeType({ type: type as any })) {\n            case \"number\":\n            case \"numeric\":\n            case \"int\":\n            case \"integer\":\n            case \"smallint\":\n            case \"dec\":\n            case \"decimal\":\n                return this.oracle.DB_TYPE_NUMBER\n            case \"char\":\n            case \"nchar\":\n            case \"nvarchar2\":\n            case \"varchar2\":\n                return this.oracle.DB_TYPE_VARCHAR\n            case \"blob\":\n                return this.oracle.DB_TYPE_BLOB\n            case \"simple-json\":\n            case \"clob\":\n                return this.oracle.DB_TYPE_CLOB\n            case \"date\":\n            case \"timestamp\":\n            case \"timestamp with time zone\":\n            case \"timestamp with local time zone\":\n                return this.oracle.DB_TYPE_TIMESTAMP\n            case \"json\":\n                return this.oracle.DB_TYPE_JSON\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            const oracle = this.options.driver || PlatformTools.load(\"oracledb\")\n            this.oracle = oracle\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"Oracle\", \"oracledb\")\n        }\n        const thickMode = this.options.thickMode\n        if (thickMode) {\n            typeof thickMode === \"object\"\n                ? this.oracle.initOracleClient(thickMode)\n                : this.oracle.initOracleClient()\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected async createPool(\n        options: OracleConnectionOptions,\n        credentials: OracleConnectionCredentialsOptions,\n    ): Promise<any> {\n        credentials = Object.assign(\n            {},\n            credentials,\n            DriverUtils.buildDriverOptions(credentials),\n        ) // todo: do it better way\n\n        if (!credentials.connectString) {\n            let address = `(PROTOCOL=TCP)`\n\n            if (credentials.host) {\n                address += `(HOST=${credentials.host})`\n            }\n\n            if (credentials.port) {\n                address += `(PORT=${credentials.port})`\n            }\n\n            let connectData = `(SERVER=DEDICATED)`\n\n            if (credentials.sid) {\n                connectData += `(SID=${credentials.sid})`\n            }\n\n            if (credentials.serviceName) {\n                connectData += `(SERVICE_NAME=${credentials.serviceName})`\n            }\n\n            const connectString = `(DESCRIPTION=(ADDRESS=${address})(CONNECT_DATA=${connectData}))`\n            Object.assign(credentials, { connectString })\n        }\n\n        // build connection options for the driver\n        const connectionOptions = Object.assign(\n            {},\n            {\n                user: credentials.username,\n                password: credentials.password,\n                connectString: credentials.connectString,\n            },\n            {\n                poolMax: options.poolSize,\n            },\n            options.extra || {},\n        )\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            this.oracle.createPool(connectionOptions, (err: any, pool: any) => {\n                if (err) return fail(err)\n                ok(pool)\n            })\n        })\n    }\n\n    /**\n     * Closes connection pool.\n     */\n    protected async closePool(pool: any): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            pool.close((err: any) => (err ? fail(err) : ok()))\n            pool = undefined\n        })\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,2EAA6E;AAC7E,MAAA,yFAA2F;AAE3F,MAAA,qDAAuD;AAGvD,MAAA,8CAAgD;AAChD,MAAA,0DAA4D;AAE5D,MAAA,0EAA4E;AAO5E,MAAA,0CAA4C;AAE5C,MAAA,4CAA8C;AAC9C,MAAA,wEAA0E;AAK1E,MAAA,iCAA0C;AAC1C,MAAA,0DAA4D;AAK5D;;GAEG,CACH,MAAa,YAAY;IAmOrB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB,CAAA;QAnNlC;;;WAGG,CACH,IAAA,CAAA,MAAM,GAAU,EAAE,CAAA;QAqBlB;;WAEG,CACH,IAAA,CAAA,YAAY,GAAY,KAAK,CAAA;QAE7B;;WAEG,CACH,IAAA,CAAA,WAAW,GAAG,IAAI,CAAA;QAElB;;WAEG,CACH,IAAA,CAAA,kBAAkB,GAAG,QAAiB,CAAA;QAEtC;;;;;WAKG,CACH,IAAA,CAAA,kBAAkB,GAAiB;YAC/B,MAAM;YACN,OAAO;YACP,WAAW;YACX,UAAU;YACV,MAAM;YACN,KAAK;YACL,UAAU;YACV,QAAQ;YACR,SAAS;YACT,OAAO;YACP,KAAK;YACL,SAAS;YACT,SAAS;YACT,KAAK;YACL,UAAU;YACV,MAAM;YACN,kBAAkB;YAClB,MAAM;YACN,WAAW;YACX,0BAA0B;YAC1B,gCAAgC;YAChC,wBAAwB;YACxB,wBAAwB;YACxB,OAAO;YACP,MAAM;YACN,MAAM;YACN,OAAO;YACP,OAAO;YACP,QAAQ;YACR,aAAa;YACb,MAAM;SACT,CAAA;QAED;;WAEG,CACH,IAAA,CAAA,oBAAoB,GAAiB,EAAE,CAAA;QAEvC;;;;WAIG,CACH,IAAA,CAAA,sBAAsB,GAAmB;YACrC,SAAS;YACT,UAAU;YACV,WAAW;SACd,CAAA;QAED;;;WAGG,CACH,IAAA,CAAA,sBAAsB,GAAmB;YAAC,WAAW;SAAC,CAAA;QAEtD;;WAEG,CACH,IAAA,CAAA,YAAY,GAAiB,EAAE,CAAA;QAE/B;;WAEG,CACH,IAAA,CAAA,qBAAqB,GAAiB;YAClC,MAAM;YACN,OAAO;YACP,WAAW;YACX,UAAU;YACV,SAAS;YACT,KAAK;SACR,CAAA;QAED;;WAEG,CACH,IAAA,CAAA,wBAAwB,GAAiB;YACrC,QAAQ;YACR,OAAO;YACP,WAAW;YACX,0BAA0B;YAC1B,gCAAgC;SACnC,CAAA;QAED;;WAEG,CACH,IAAA,CAAA,oBAAoB,GAAiB;YAAC,QAAQ;SAAC,CAAA;QAE/C;;;WAGG,CACH,IAAA,CAAA,eAAe,GAAsB;YACjC,UAAU,EAAE,WAAW;YACvB,iBAAiB,EAAE,mBAAmB;YACtC,UAAU,EAAE,WAAW;YACvB,iBAAiB,EAAE,mBAAmB;YACtC,UAAU,EAAE,WAAW;YACvB,kBAAkB,EAAE,IAAI;YACxB,OAAO,EAAE,QAAQ;YACjB,SAAS,EAAE,QAAQ;YACnB,WAAW,EAAE,QAAQ;YACrB,aAAa,EAAE,UAAU;YACzB,kBAAkB,EAAE,QAAQ;YAC5B,OAAO,EAAE,QAAQ;YACjB,eAAe,EAAE,UAAU;YAC3B,SAAS,EAAE,QAAQ;YACnB,aAAa,EAAE,QAAQ;YACvB,UAAU,EAAE,MAAM;YAClB,WAAW,EAAE,MAAM;YACnB,YAAY,EAAE,UAAU;YACxB,gBAAgB,EAAE,UAAU;YAC5B,cAAc,EAAE,UAAU;YAC1B,aAAa,EAAE,UAAU;YACzB,YAAY,EAAE,UAAU;YACxB,aAAa,EAAE,MAAM;SACxB,CAAA;QAED;;WAEG,CACH,IAAA,CAAA,gBAAgB,GAAW,GAAG,CAAA;QAE9B;;;WAGG,CACH,IAAA,CAAA,gBAAgB,GAAqB;YACjC,IAAI,EAAE;gBAAE,MAAM,EAAE,CAAC;YAAA,CAAE;YACnB,KAAK,EAAE;gBAAE,MAAM,EAAE,CAAC;YAAA,CAAE;YACpB,OAAO,EAAE;gBAAE,MAAM,EAAE,GAAG;YAAA,CAAE;YACxB,QAAQ,EAAE;gBAAE,MAAM,EAAE,GAAG;YAAA,CAAE;YACzB,SAAS,EAAE;gBAAE,MAAM,EAAE,GAAG;YAAA,CAAE;YAC1B,GAAG,EAAE;gBAAE,MAAM,EAAE,IAAI;YAAA,CAAE;YACrB,KAAK,EAAE;gBAAE,SAAS,EAAE,GAAG;YAAA,CAAE;YACzB,SAAS,EAAE;gBAAE,SAAS,EAAE,CAAC;YAAA,CAAE;YAC3B,0BAA0B,EAAE;gBAAE,SAAS,EAAE,CAAC;YAAA,CAAE;YAC5C,gCAAgC,EAAE;gBAAE,SAAS,EAAE,CAAC;YAAA,CAAE;SACrD,CAAA;QAED;;;;;;;;;;;WAWG,CACH,IAAA,CAAA,cAAc,GAAG,EAAE,CAAA;QAEnB,IAAA,CAAA,eAAe,GAAoB;YAC/B,OAAO,EAAE,IAAI;SAChB,CAAA;QAED,IAAA,CAAA,cAAc,GAAG,MAAM,CAAA;QAOnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAkC,CAAA;QAE5D,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAA;QAChC,CAAC;QACD,sBAAsB;QACtB,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAEvB,IAAI,CAAC,QAAQ,GAAG,cAAA,WAAW,CAAC,kBAAkB,CAC1C,IAAI,CAAC,OAAO,CAAC,WAAW,GAClB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,GAC/B,IAAI,CAAC,OAAO,CACrB,CAAC,QAAQ,CAAA;QACV,IAAI,CAAC,MAAM,GAAG,cAAA,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAA;IAEjE,mHAAmH;IACnH,kDAAkD;IAClD,0BAA0B;IAC1B,iDAAiD;IACjD,8BAA8B;IAC9B,qDAAqD;IACrD,yBAAyB;IACzB,gDAAgD;IAChD,EAAE;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;;OAIG,CACH,KAAK,CAAC,OAAO,GAAA;QACT,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG;YAAC,IAAI,CAAC,MAAM,CAAC,YAAY;SAAC,CAAA;QACtD,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG;YAAC,IAAI,CAAC,MAAM,CAAC,YAAY;SAAC,CAAA;QACtD,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC3B,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;YAC/C,CAAC,CAAC,CACL,CAAA;YACD,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAC/B,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAClC,CAAA;QACL,CAAC,MAAM,CAAC;YACJ,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;QACnE,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACjC,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;YAEpD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACjB,IAAI,CAAC,QAAQ,GAAG,MAAM,WAAW,CAAC,kBAAkB,EAAE,CAAA;YAC1D,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,GAAG,MAAM,WAAW,CAAC,gBAAgB,EAAE,CAAA;YACtD,CAAC;YAED,MAAM,WAAW,CAAC,OAAO,EAAE,CAAA;QAC/B,CAAC;IACL,CAAC;IAED;;OAEG,CACH,YAAY,GAAA;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,GAAA;QACZ,IAAI,CAAC,IAAI,CAAC,MAAM,EACZ,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,0BAAA,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAA;QAEhE,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACjC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAG,CAAD,GAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACpE,IAAI,CAAC,MAAM,GAAG,SAAS,CAAA;QACvB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAA;IACpB,CAAC;IAED;;OAEG,CACH,mBAAmB,GAAA;QACf,OAAO,IAAI,qBAAA,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG,CACH,iBAAiB,CAAC,IAAqB,EAAA;QACnC,OAAO,IAAI,oBAAA,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IAC5C,CAAC;IAED;;;OAGG,CACH,yBAAyB,CACrB,GAAW,EACX,UAAyB,EACzB,gBAA+B,EAAA;QAE/B,MAAM,iBAAiB,GAAU,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAC9D,CAAC,GAAG,EAAE,EAAE;YACJ,IAAI,OAAO,gBAAgB,CAAC,GAAG,CAAC,KAAK,SAAS,EAC1C,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YACxC,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAA;QAChC,CAAC,CACJ,CAAA;QACD,IAAI,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,EAC9C,OAAO;YAAC,GAAG;YAAE,iBAAiB;SAAC,CAAA;QAEnC,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAkB,CAAA;QACnD,GAAG,GAAG,GAAG,CAAC,OAAO,CACb,6BAA6B,EAC7B,CAAC,IAAI,EAAE,OAAe,EAAE,GAAW,EAAU,EAAE;YAC3C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAClC,OAAO,IAAI,CAAA;YACf,CAAC;YAED,IAAI,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC7B,OAAO,IAAI,CAAC,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YAC7D,CAAC;YAED,MAAM,KAAK,GAAQ,UAAU,CAAC,GAAG,CAAC,CAAA;YAElC,IAAI,OAAO,EAAE,CAAC;gBACV,OAAO,KAAK,CACP,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;oBACZ,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;oBACzB,OAAO,IAAI,CAAC,eAAe,CACvB,GAAG,EACH,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAC/B,CAAA;gBACL,CAAC,CAAC,CACD,IAAI,CAAC,IAAI,CAAC,CAAA;YACnB,CAAC;YAED,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE,CAAC;gBAC9B,OAAO,KAAK,EAAE,CAAA;YAClB,CAAC;YAED,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC7B,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAA;YAC5B,CAAC;YAED,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAC7B,iBAAiB,CAAC,GAAG,CAAC,GAAG,EAAE,iBAAiB,CAAC,MAAM,CAAC,CAAA;YACpD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAClE,CAAC,CACJ,CAAA,CAAC,kEAAkE;QACpE,OAAO;YAAC,GAAG;YAAE,iBAAiB;SAAC,CAAA;IACnC,CAAC;IAED;;OAEG,CACH,MAAM,CAAC,UAAkB,EAAA;QACrB,OAAO,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CAAA;IAC5B,CAAC;IAED;;;OAGG,CACH,cAAc,CACV,SAAiB,EACjB,MAAe,EACf,QAAiB,EAAA;QAEjB,MAAM,SAAS,GAAG;YAAC,SAAS;SAAC,CAAA;QAE7B,IAAI,MAAM,EAAE,CAAC;YACT,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAC7B,CAAC;QAED,OAAO,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC9B,CAAC;IAED;;OAEG,CACH,cAAc,CACV,MAAgE,EAAA;QAEhE,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAA;QACpC,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAA;QAEhC,IAAI,kBAAA,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,kBAAA,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YACpE,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;YAE/C,OAAO;gBACH,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,cAAc;gBAC9D,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,YAAY;gBACtD,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,IAAI,kBAAA,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAA;YAE9D,OAAO;gBACH,QAAQ,EACJ,MAAM,CAAC,kBAAkB,IACzB,MAAM,CAAC,QAAQ,IACf,cAAc;gBAClB,MAAM,EACF,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,MAAM,IAAI,YAAY;gBAC5D,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,IAAI,kBAAA,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3C,2CAA2C;YAE3C,OAAO;gBACH,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,cAAc;gBAC3C,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,YAAY;gBACrC,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAE/B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACrB,OAAO;gBACH,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,cAAc;gBACpC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,YAAY;gBAChC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;aACtB,CAAA;QACL,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,OAAO;gBACH,QAAQ,EAAE,cAAc;gBACxB,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,YAAY;gBAChC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;aACtB,CAAA;QACL,CAAC,MAAM,CAAC;YACJ,OAAO;gBACH,QAAQ,EAAE,cAAc;gBACxB,MAAM,EAAE,YAAY;gBACpB,SAAS,EAAE,MAAM;aACpB,CAAA;QACL,CAAC;IACL,CAAC;IAED;;OAEG,CACH,sBAAsB,CAAC,KAAU,EAAE,cAA8B,EAAA;QAC7D,IAAI,cAAc,CAAC,WAAW,EAC1B,KAAK,GAAG,yBAAA,sBAAsB,CAAC,WAAW,CACtC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR,CAAA;QAEL,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,OAAO,KAAK,CAAA;QAEvD,IAAI,cAAc,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAClC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACxB,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAA;YACpE,OAAO,GAAG,CACN,CADQ,AACR,SAAA,EAAY,YAAA,SAAS,CAAC,qBAAqB,CACvC,KAAK,CACR,CAAA,gBAAA,CAAkB,CAAA;QAC3B,CAAC,MAAM,IACH,cAAc,CAAC,IAAI,KAAK,IAAI,IAC5B,cAAc,CAAC,IAAI,KAAK,WAAW,IACnC,cAAc,CAAC,IAAI,KAAK,0BAA0B,IAClD,cAAc,CAAC,IAAI,KAAK,gCAAgC,EAC1D,CAAC;YACC,OAAO,YAAA,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA;QAC3C,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YAChD,OAAO,YAAA,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAA;QAC/C,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC/C,OAAO,YAAA,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAC9C,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,OAAO,YAAA,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAC9C,CAAC;QAED,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG,CACH,oBAAoB,CAAC,KAAU,EAAE,cAA8B,EAAA;QAC3D,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EACrC,OAAO,cAAc,CAAC,WAAW,GAC3B,yBAAA,sBAAsB,CAAC,aAAa,CAChC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR,GACD,KAAK,CAAA;QAEf,IAAI,cAAc,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAClC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAA;QACnB,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,KAAK,GAAG,YAAA,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAClD,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,KAAK,GAAG,YAAA,SAAS,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAA;QAC9C,CAAC,MAAM,IACH,cAAc,CAAC,IAAI,KAAK,IAAI,IAC5B,cAAc,CAAC,IAAI,KAAK,WAAW,IACnC,cAAc,CAAC,IAAI,KAAK,0BAA0B,IAClD,cAAc,CAAC,IAAI,KAAK,gCAAgC,EAC1D,CAAC;YACC,KAAK,GAAG,YAAA,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAClD,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YAChD,KAAK,GAAG,YAAA,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAA;QAChD,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC/C,KAAK,GAAG,YAAA,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAC/C,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,8BAA8B;YAC9B,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;QACpD,CAAC;QAED,IAAI,cAAc,CAAC,WAAW,EAC1B,KAAK,GAAG,yBAAA,sBAAsB,CAAC,aAAa,CACxC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR,CAAA;QAEL,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG,CACH,aAAa,CAAC,MAMb,EAAA;QACG,IACI,MAAM,CAAC,IAAI,KAAK,MAAM,IACtB,MAAM,CAAC,IAAI,KAAK,OAAO,IACvB,MAAM,CAAC,IAAI,KAAK,SAAS,IACzB,MAAM,CAAC,IAAI,KAAK,KAAK,IACrB,MAAM,CAAC,IAAI,KAAK,SAAS,IACzB,MAAM,CAAC,IAAI,KAAK,KAAK,IACrB,MAAM,CAAC,IAAI,KAAK,SAAS,IACzB,MAAM,CAAC,IAAI,KAAK,UAAU,EAC5B,CAAC;YACC,OAAO,QAAQ,CAAA;QACnB,CAAC,MAAM,IACH,MAAM,CAAC,IAAI,KAAK,MAAM,IACtB,MAAM,CAAC,IAAI,KAAK,kBAAkB,EACpC,CAAC;YACC,OAAO,OAAO,CAAA;QAClB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC7D,OAAO,UAAU,CAAA;QACrB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;YAC9B,OAAO,WAAW,CAAA;QACtB,CAAC,MAAM,IAAK,MAAM,CAAC,IAAY,KAAK,MAAM,EAAE,CAAC;YACzC,OAAO,MAAM,CAAA;QACjB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAChC,OAAO,UAAU,CAAA;QACrB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YACxC,OAAO,MAAM,CAAA;QACjB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YACvC,OAAO,MAAM,CAAA;QACjB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAChC,OAAO,MAAM,CAAA;QACjB,CAAC,MAAM,CAAC;YACJ,OAAQ,MAAM,CAAC,IAAe,IAAI,EAAE,CAAA;QACxC,CAAC;IACL,CAAC;IAED;;OAEG,CACH,gBAAgB,CAAC,cAA8B,EAAA;QAC3C,MAAM,YAAY,GAAG,cAAc,CAAC,OAAO,CAAA;QAE3C,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO,EAAE,GAAG,YAAY,CAAA;QAC5B,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,SAAS,EAAE,CAAC;YACpC,OAAO,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAA;QACnC,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,UAAU,EAAE,CAAC;YACrC,OAAO,YAAY,EAAE,CAAA;QACzB,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO,CAAA,CAAA,EAAI,YAAY,CAAA,CAAA,CAAG,CAAA;QAC9B,CAAC;QAED,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YACtD,OAAO,SAAS,CAAA;QACpB,CAAC;QAED,OAAO,GAAG,YAAY,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG,CACH,iBAAiB,CAAC,MAAsB,EAAA;QACpC,OAAO,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CACrC,CAAC,EAAE,EAAE,CAAG,CAAD,CAAG,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,CAC9D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,eAAe,CAAC,MAAoC,EAAA;QAChD,IAAI,MAAM,CAAC,MAAM,EAAE,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAA;QAElD,OAAQ,MAAM,CAAC,IAAI,EAAE,CAAC;YAClB,KAAK,MAAM,CAAC;YACZ,KAAK,SAAS,CAAC;YACf,KAAK,UAAU,CAAC;YAChB,KAAK,WAAW;gBACZ,OAAO,KAAK,CAAA;YAChB,KAAK,KAAK;gBACN,OAAO,MAAM,CAAA;YACjB,KAAK,MAAM;gBACP,OAAO,IAAI,CAAA;YACf;gBACI,OAAO,EAAE,CAAA;QACjB,CAAC;IACL,CAAC;IAED,cAAc,CAAC,MAAmB,EAAA;QAC9B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAA;QAEtB,oGAAoG;QACpG,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;YAC/B,IAAI,IAAI,CAAA,CAAA,EAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAA,CAAA,CAAG,CAAA;QAC/C,CAAC,MAAM,IACH,MAAM,CAAC,SAAS,KAAK,IAAI,IACzB,MAAM,CAAC,SAAS,KAAK,SAAS,IAC9B,MAAM,CAAC,KAAK,KAAK,IAAI,IACrB,MAAM,CAAC,KAAK,KAAK,SAAS,EAC5B,CAAC;YACC,IAAI,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,KAAK,GAAG,GAAG,CAAA;QAC7D,CAAC,MAAM,IACH,MAAM,CAAC,SAAS,KAAK,IAAI,IACzB,MAAM,CAAC,SAAS,KAAK,SAAS,EAChC,CAAC;YACC,IAAI,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,CAAA;QACxC,CAAC;QAED,IAAI,MAAM,CAAC,IAAI,KAAK,0BAA0B,EAAE,CAAC;YAC7C,IAAI,GACA,WAAW,GACX,CAAC,MAAM,CAAC,SAAS,KAAK,IAAI,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,GACtD,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,GAC5B,EAAE,CAAC,GACT,iBAAiB,CAAA;QACzB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,gCAAgC,EAAE,CAAC;YAC1D,IAAI,GACA,WAAW,GACX,CAAC,MAAM,CAAC,SAAS,KAAK,IAAI,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,GACtD,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,GAC5B,EAAE,CAAC,GACT,uBAAuB,CAAA;QAC/B,CAAC;QAED,IAAI,MAAM,CAAC,OAAO,EAAE,IAAI,IAAI,QAAQ,CAAA;QAEpC,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;;;OAIG,CACH,sBAAsB,GAAA;QAClB,OAAO,IAAI,OAAO,CAAM,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;gBACf,OAAO,IAAI,CAAC,IAAI,QAAA,YAAY,CAAC,sBAAsB,CAAC,CAAC,CAAA;YACzD,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,aAAa,CACrB,CAAC,GAAQ,EAAE,UAAe,EAAE,OAAiB,EAAE,EAAE;gBAC7C,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;gBACzB,EAAE,CAAC,UAAU,CAAC,CAAA;YAClB,CAAC,CACJ,CAAA;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;;OAIG,CACH,qBAAqB,GAAA;QACjB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAA;QAE7D,OAAO,IAAI,OAAO,CAAM,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YACjC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;YAE7D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,GAAQ,EAAE,UAAe,EAAE,EAAE;gBAC5D,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;gBACzB,EAAE,CAAC,UAAU,CAAC,CAAA;YAClB,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACH,kBAAkB,CAAC,QAAwB,EAAE,YAA2B,EAAA;QACpE,IAAI,CAAC,YAAY,EAAE,OAAO,SAAS,CAAA;QAEnC,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACjD,MAAM,MAAM,GAAG,QAAQ,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAA;YACvD,IAAI,MAAM,EAAE,CAAC;gBACT,WAAA,QAAQ,CAAC,SAAS,CACd,GAAG,EACH,MAAM,CAAC,cAAc,CACjB,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CACvD,CACJ,CAAA;YACL,CAAC;YACD,OAAO,GAAG,CAAA;QACd,CAAC,EAAE,CAAA,CAAmB,CAAC,CAAA;IAC3B,CAAC;IAED;;;OAGG,CACH,kBAAkB,CACd,YAA2B,EAC3B,eAAiC,EAAA;QAEjC,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,EAAE;YAC7C,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CACjC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,IAAI,KAAK,cAAc,CAAC,YAAY,CAChD,CAAA;YACD,IAAI,CAAC,WAAW,EAAE,OAAO,KAAK,CAAA,CAAC,4DAA4D;YAE3F,MAAM,eAAe,GACjB,WAAW,CAAC,IAAI,KAAK,cAAc,CAAC,YAAY,IAChD,WAAW,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IACvD,WAAW,CAAC,MAAM,KAAK,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAC3D,WAAW,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,IAClD,WAAW,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK,IAC1C,oDAAoD;YACpD,WAAW,CAAC,OAAO,KAAK,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAC7D,WAAW,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,IAClD,WAAW,CAAC,UAAU,KAAK,cAAc,CAAC,UAAU,IACpD,WAAW,CAAC,YAAY,KAAK,cAAc,CAAC,YAAY,IACxD,WAAW,CAAC,aAAa,KAAK,cAAc,CAAC,aAAa,IAC1D,WAAW,CAAC,QAAQ,KAChB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IACzC,cAAc,CAAC,kBAAkB,KAAK,MAAM,IACzC,WAAW,CAAC,WAAW,KAAK,cAAc,CAAC,WAAW,CAAC,CAAA;YAE/D,gBAAgB;YAChB,yBAAyB;YACzB,qEAAqE;YACrE,mBAAmB;YACnB,mBAAmB;YACnB,4BAA4B;YAC5B,uCAAuC;YACvC,QAAQ;YACR,mBAAmB;YACnB,mBAAmB;YACnB,4BAA4B;YAC5B,8CAA8C;YAC9C,QAAQ;YACR,mBAAmB;YACnB,qBAAqB;YACrB,8BAA8B;YAC9B,iCAAiC;YACjC,QAAQ;YACR,mBAAmB;YACnB,wBAAwB;YACxB,iCAAiC;YACjC,oCAAoC;YACpC,QAAQ;YACR,qEAAqE;YACrE,mBAAmB;YACnB,sBAAsB;YACtB,+BAA+B;YAC/B,kCAAkC;YAClC,QAAQ;YACR,mBAAmB;YACnB,sBAAsB;YACtB,+BAA+B;YAC/B,iDAAiD;YACjD,QAAQ;YACR,mBAAmB;YACnB,mBAAmB;YACnB,8BAA8B;YAC9B,qCAAqC;YACrC,uCAAuC;YACvC,oCAAoC;YACpC,8DAA8D;YAC9D,iBAAiB;YACjB,QAAQ;YACR,mBAAmB;YACnB,uBAAuB;YACvB,gCAAgC;YAChC,mCAAmC;YACnC,QAAQ;YACR,mBAAmB;YACnB,wBAAwB;YACxB,iCAAiC;YACjC,oCAAoC;YACpC,QAAQ;YACR,mBAAmB;YACnB,yBAAyB;YACzB,kCAAkC;YAClC,qCAAqC;YACrC,QAAQ;YACR,mBAAmB;YACnB,2BAA2B;YAC3B,oCAAoC;YACpC,uCAAuC;YACvC,QAAQ;YACR,mBAAmB;YACnB,4BAA4B;YAC5B,qCAAqC;YACrC,wCAAwC;YACxC,QAAQ;YACR,mBAAmB;YACnB,uBAAuB;YACvB,gCAAgC;YAChC,kDAAkD;YAClD,QAAQ;YACR,mBAAmB;YACnB,0BAA0B;YAC1B,mCAAmC;YACnC,sCAAsC;YACtC,QAAQ;YACR,gEAAgE;YAChE,IAAI;YAEJ,OAAO,eAAe,CAAA;QAC1B,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACH,uBAAuB,GAAA;QACnB,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG,CACH,yBAAyB,GAAA;QACrB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG,CACH,6BAA6B,GAAA;QACzB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG,CACH,eAAe,CAAC,aAAqB,EAAE,KAAa,EAAA;QAChD,OAAO,IAAI,CAAC,gBAAgB,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;IAC9C,CAAC;IAED;;OAEG,CACH,2BAA2B,CAAC,IAAgB,EAAA;QACxC,OAAQ,IAAI,CAAC,aAAa,CAAC;YAAE,IAAI,EAAE,IAAW;QAAA,CAAE,CAAC,EAAE,CAAC;YAChD,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS,CAAC;YACf,KAAK,KAAK,CAAC;YACX,KAAK,SAAS,CAAC;YACf,KAAK,UAAU,CAAC;YAChB,KAAK,KAAK,CAAC;YACX,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAA;YACrC,KAAK,MAAM,CAAC;YACZ,KAAK,OAAO,CAAC;YACb,KAAK,WAAW,CAAC;YACjB,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAA;YACtC,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAA;YACnC,KAAK,aAAa,CAAC;YACnB,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAA;YACnC,KAAK,MAAM,CAAC;YACZ,KAAK,WAAW,CAAC;YACjB,KAAK,0BAA0B,CAAC;YAChC,KAAK,gCAAgC;gBACjC,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAA;YACxC,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAA;QACvC,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG,CACO,gBAAgB,GAAA;QACtB,IAAI,CAAC;YACD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,gBAAA,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;YACpE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACxB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;YACT,MAAM,IAAI,iCAAA,8BAA8B,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAA;QAClE,CAAC;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAA;QACxC,IAAI,SAAS,EAAE,CAAC;YACZ,OAAO,SAAS,KAAK,QAAQ,GACvB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,GACvC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAA;QACxC,CAAC;IACL,CAAC;IAED;;OAEG,CACO,KAAK,CAAC,UAAU,CACtB,OAAgC,EAChC,WAA+C,EAAA;QAE/C,WAAW,GAAG,MAAM,CAAC,MAAM,CACvB,CAAA,CAAE,EACF,WAAW,EACX,cAAA,WAAW,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAC9C,CAAA,CAAC,yBAAyB;QAE3B,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;YAC7B,IAAI,OAAO,GAAG,CAAA,cAAA,CAAgB,CAAA;YAE9B,IAAI,WAAW,CAAC,IAAI,EAAE,CAAC;gBACnB,OAAO,IAAI,CAAA,MAAA,EAAS,WAAW,CAAC,IAAI,CAAA,CAAA,CAAG,CAAA;YAC3C,CAAC;YAED,IAAI,WAAW,CAAC,IAAI,EAAE,CAAC;gBACnB,OAAO,IAAI,CAAA,MAAA,EAAS,WAAW,CAAC,IAAI,CAAA,CAAA,CAAG,CAAA;YAC3C,CAAC;YAED,IAAI,WAAW,GAAG,CAAA,kBAAA,CAAoB,CAAA;YAEtC,IAAI,WAAW,CAAC,GAAG,EAAE,CAAC;gBAClB,WAAW,IAAI,CAAA,KAAA,EAAQ,WAAW,CAAC,GAAG,CAAA,CAAA,CAAG,CAAA;YAC7C,CAAC;YAED,IAAI,WAAW,CAAC,WAAW,EAAE,CAAC;gBAC1B,WAAW,IAAI,CAAA,cAAA,EAAiB,WAAW,CAAC,WAAW,CAAA,CAAA,CAAG,CAAA;YAC9D,CAAC;YAED,MAAM,aAAa,GAAG,CAAA,sBAAA,EAAyB,OAAO,CAAA,eAAA,EAAkB,WAAW,CAAA,EAAA,CAAI,CAAA;YACvF,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE;gBAAE,aAAa;YAAA,CAAE,CAAC,CAAA;QACjD,CAAC;QAED,0CAA0C;QAC1C,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CACnC,CAAA,CAAE,EACF;YACI,IAAI,EAAE,WAAW,CAAC,QAAQ;YAC1B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,aAAa,EAAE,WAAW,CAAC,aAAa;SAC3C,EACD;YACI,OAAO,EAAE,OAAO,CAAC,QAAQ;SAC5B,EACD,OAAO,CAAC,KAAK,IAAI,CAAA,CAAE,CACtB,CAAA;QAED,6DAA6D;QAC7D,+DAA+D;QAC/D,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,GAAQ,EAAE,IAAS,EAAE,EAAE;gBAC9D,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;gBACzB,EAAE,CAAC,IAAI,CAAC,CAAA;YACZ,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACO,KAAK,CAAC,SAAS,CAAC,IAAS,EAAA;QAC/B,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAQ,EAAE,CAAI,CAAF,CAAC,CAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;YAClD,IAAI,GAAG,SAAS,CAAA;QACpB,CAAC,CAAC,CAAA;IACN,CAAC;CACJ;AAhhCD,QAAA,YAAA,GAAA,aAghCC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3634, "column": 0}, "map": {"version":3,"file":"AbstractSqliteQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqlite-abstract/AbstractSqliteQueryRunner.ts"],"sourcesContent":["import { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Query } from \"../Query\"\nimport { AbstractSqliteDriver } from \"./AbstractSqliteDriver\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TransactionAlreadyStartedError, TypeORMError } from \"../../error\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport abstract class AbstractSqliteQueryRunner\n    extends BaseQueryRunner\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: AbstractSqliteDriver\n\n    protected transactionPromise: Promise<any> | null = null\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor() {\n        super()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        return Promise.resolve(this.driver.databaseConnection)\n    }\n\n    /**\n     * Releases used database connection.\n     * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.\n     */\n    release(): Promise<void> {\n        this.loadedTables = []\n        this.clearSqlMemory()\n        return Promise.resolve()\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.driver.transactionSupport === \"none\")\n            throw new TypeORMError(\n                `Transactions aren't supported by ${this.connection.driver.options.type}.`,\n            )\n\n        if (\n            this.isTransactionActive &&\n            this.driver.transactionSupport === \"simple\"\n        )\n            throw new TransactionAlreadyStartedError()\n\n        if (\n            isolationLevel &&\n            isolationLevel !== \"READ UNCOMMITTED\" &&\n            isolationLevel !== \"SERIALIZABLE\"\n        )\n            throw new TypeORMError(\n                `SQLite only supports SERIALIZABLE and READ UNCOMMITTED isolation`,\n            )\n\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n\n        if (this.transactionDepth === 0) {\n            if (isolationLevel) {\n                if (isolationLevel === \"READ UNCOMMITTED\") {\n                    await this.query(\"PRAGMA read_uncommitted = true\")\n                } else {\n                    await this.query(\"PRAGMA read_uncommitted = false\")\n                }\n            }\n            await this.query(\"BEGIN TRANSACTION\")\n        } else {\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth}`)\n        }\n        this.transactionDepth += 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `RELEASE SAVEPOINT typeorm_${this.transactionDepth - 1}`,\n            )\n        } else {\n            await this.query(\"COMMIT\")\n            this.isTransactionActive = false\n        }\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth - 1}`,\n            )\n        } else {\n            await this.query(\"ROLLBACK\")\n            this.isTransactionActive = false\n        }\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        throw new TypeORMError(`Stream is not supported by sqlite driver.`)\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([])\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        return Promise.resolve(false)\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<undefined> {\n        return Promise.resolve(undefined)\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        throw new TypeORMError(`This driver does not support table schemas`)\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<undefined> {\n        return Promise.resolve(undefined)\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const tableName = InstanceChecker.isTable(tableOrName)\n            ? tableOrName.name\n            : tableOrName\n        const sql = `SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" = '${tableName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        const tableName = InstanceChecker.isTable(tableOrName)\n            ? tableOrName.name\n            : tableOrName\n        const sql = `PRAGMA table_xinfo(${this.escapePath(tableName)})`\n        const columns: ObjectLiteral[] = await this.query(sql)\n        return !!columns.find((column) => column[\"name\"] === columnName)\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table,\n                        index.columnNames,\n                        index.where,\n                    )\n                upQueries.push(this.createIndexSql(table, index))\n                downQueries.push(this.dropIndexSql(index))\n            })\n        }\n\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true,\n    ): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(index))\n                downQueries.push(this.createIndexSql(table, index))\n            })\n        }\n\n        upQueries.push(this.dropTableSql(table, ifExist))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(\n        view: View,\n        syncWithMetadata: boolean = false,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        if (syncWithMetadata) upQueries.push(this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        if (syncWithMetadata)\n            downQueries.push(this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = InstanceChecker.isView(target) ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName)\n        const newTable = oldTable.clone()\n\n        newTable.name = newTableName\n\n        // rename table\n        const up = new Query(\n            `ALTER TABLE ${this.escapePath(\n                oldTable.name,\n            )} RENAME TO ${this.escapePath(newTableName)}`,\n        )\n        const down = new Query(\n            `ALTER TABLE ${this.escapePath(\n                newTableName,\n            )} RENAME TO ${this.escapePath(oldTable.name)}`,\n        )\n        await this.executeQueries(up, down)\n\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    oldTable,\n                    unique.columnNames,\n                )\n\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName) return\n\n            unique.name = this.connection.namingStrategy.uniqueConstraintName(\n                newTable,\n                unique.columnNames,\n            )\n        })\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    oldTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName) return\n\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                newTable,\n                foreignKey.columnNames,\n                this.getTablePath(foreignKey),\n                foreignKey.referencedColumnNames,\n            )\n        })\n\n        // rename indices\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(\n                oldTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName) return\n\n            index.name = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where,\n            )\n        })\n\n        // rename old table;\n        oldTable.name = newTable.name\n\n        // recreate table with new constraint names\n        await this.recreateTable(newTable, oldTable)\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        return this.addColumns(table!, [column])\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const changedTable = table.clone()\n        columns.forEach((column) => changedTable.addColumn(column))\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        let newColumn: TableColumn | undefined = undefined\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        return this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        await this.changeColumns(table, [{ oldColumn, newColumn }])\n    }\n\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { oldColumn: TableColumn; newColumn: TableColumn }[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const changedTable = table.clone()\n        changedColumns.forEach((changedColumnSet) => {\n            if (\n                changedColumnSet.newColumn.name !==\n                changedColumnSet.oldColumn.name\n            ) {\n                changedTable\n                    .findColumnUniques(changedColumnSet.oldColumn)\n                    .forEach((unique) => {\n                        const uniqueName =\n                            this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                unique.columnNames,\n                            )\n\n                        unique.columnNames.splice(\n                            unique.columnNames.indexOf(\n                                changedColumnSet.oldColumn.name,\n                            ),\n                            1,\n                        )\n                        unique.columnNames.push(changedColumnSet.newColumn.name)\n\n                        // rename Unique only if it has default constraint name\n                        if (unique.name === uniqueName) {\n                            unique.name =\n                                this.connection.namingStrategy.uniqueConstraintName(\n                                    changedTable,\n                                    unique.columnNames,\n                                )\n                        }\n                    })\n\n                changedTable\n                    .findColumnForeignKeys(changedColumnSet.oldColumn)\n                    .forEach((foreignKey) => {\n                        const foreignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                table,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(\n                                changedColumnSet.oldColumn.name,\n                            ),\n                            1,\n                        )\n                        foreignKey.columnNames.push(\n                            changedColumnSet.newColumn.name,\n                        )\n\n                        // rename FK only if it has default constraint name\n                        if (foreignKey.name === foreignKeyName) {\n                            foreignKey.name =\n                                this.connection.namingStrategy.foreignKeyName(\n                                    changedTable,\n                                    foreignKey.columnNames,\n                                    this.getTablePath(foreignKey),\n                                    foreignKey.referencedColumnNames,\n                                )\n                        }\n                    })\n\n                changedTable\n                    .findColumnIndices(changedColumnSet.oldColumn)\n                    .forEach((index) => {\n                        const indexName =\n                            this.connection.namingStrategy.indexName(\n                                table,\n                                index.columnNames,\n                                index.where,\n                            )\n\n                        index.columnNames.splice(\n                            index.columnNames.indexOf(\n                                changedColumnSet.oldColumn.name,\n                            ),\n                            1,\n                        )\n                        index.columnNames.push(changedColumnSet.newColumn.name)\n\n                        // rename Index only if it has default constraint name\n                        if (index.name === indexName) {\n                            index.name =\n                                this.connection.namingStrategy.indexName(\n                                    changedTable,\n                                    index.columnNames,\n                                    index.where,\n                                )\n                        }\n                    })\n            }\n            const originalColumn = changedTable.columns.find(\n                (column) => column.name === changedColumnSet.oldColumn.name,\n            )\n            if (originalColumn)\n                changedTable.columns[\n                    changedTable.columns.indexOf(originalColumn)\n                ] = changedColumnSet.newColumn\n        })\n\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\n            )\n\n        await this.dropColumns(table, [column])\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // clone original table and remove column and its constraints from cloned table\n        const changedTable = table.clone()\n        columns.forEach((column: TableColumn | string) => {\n            const columnInstance = InstanceChecker.isTableColumn(column)\n                ? column\n                : table.findColumnByName(column)\n            if (!columnInstance)\n                throw new Error(\n                    `Column \"${column}\" was not found in table \"${table.name}\"`,\n                )\n\n            changedTable.removeColumn(columnInstance)\n            changedTable\n                .findColumnUniques(columnInstance)\n                .forEach((unique) =>\n                    changedTable.removeUniqueConstraint(unique),\n                )\n            changedTable\n                .findColumnIndices(columnInstance)\n                .forEach((index) => changedTable.removeIndex(index))\n            changedTable\n                .findColumnForeignKeys(columnInstance)\n                .forEach((fk) => changedTable.removeForeignKey(fk))\n        })\n\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        // clone original table and mark columns as primary\n        const changedTable = table.clone()\n        changedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n\n        await this.recreateTable(changedTable, table)\n        // mark columns as primary in original table\n        table.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        await Promise.resolve()\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table | string): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        // clone original table and mark primary columns as non-primary\n        const changedTable = table.clone()\n        changedTable.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n\n        await this.recreateTable(changedTable, table)\n        // mark primary columns as non-primary in original table\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        await this.createUniqueConstraints(tableOrName, [uniqueConstraint])\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // clone original table and add unique constraints in to cloned table\n        const changedTable = table.clone()\n        uniqueConstraints.forEach((uniqueConstraint) =>\n            changedTable.addUniqueConstraint(uniqueConstraint),\n        )\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName)\n        if (!uniqueConstraint)\n            throw new TypeORMError(\n                `Supplied unique constraint was not found in table ${table.name}`,\n            )\n\n        await this.dropUniqueConstraints(table, [uniqueConstraint])\n    }\n\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // clone original table and remove unique constraints from cloned table\n        const changedTable = table.clone()\n        uniqueConstraints.forEach((uniqueConstraint) =>\n            changedTable.removeUniqueConstraint(uniqueConstraint),\n        )\n\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        await this.createCheckConstraints(tableOrName, [checkConstraint])\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // clone original table and add check constraints in to cloned table\n        const changedTable = table.clone()\n        checkConstraints.forEach((checkConstraint) =>\n            changedTable.addCheckConstraint(checkConstraint),\n        )\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName)\n        if (!checkConstraint)\n            throw new TypeORMError(\n                `Supplied check constraint was not found in table ${table.name}`,\n            )\n\n        await this.dropCheckConstraints(table, [checkConstraint])\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // clone original table and remove check constraints from cloned table\n        const changedTable = table.clone()\n        checkConstraints.forEach((checkConstraint) =>\n            changedTable.removeCheckConstraint(checkConstraint),\n        )\n\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(`Sqlite does not support exclusion constraints.`)\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(`Sqlite does not support exclusion constraints.`)\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(`Sqlite does not support exclusion constraints.`)\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(`Sqlite does not support exclusion constraints.`)\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        await this.createForeignKeys(tableOrName, [foreignKey])\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        // clone original table and add foreign keys in to cloned table\n        const changedTable = table.clone()\n        foreignKeys.forEach((foreignKey) =>\n            changedTable.addForeignKey(foreignKey),\n        )\n\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        await this.dropForeignKeys(tableOrName, [foreignKey])\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // clone original table and remove foreign keys from cloned table\n        const changedTable = table.clone()\n        foreignKeys.forEach((foreignKey) =>\n            changedTable.removeForeignKey(foreignKey),\n        )\n\n        await this.recreateTable(changedTable, table)\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(index)\n        await this.executeQueries(up, down)\n        table.addIndex(index)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index ${indexOrName} was not found in table ${table.name}`,\n            )\n\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM ${this.escapePath(tableName)}`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        let dbPath: string | undefined = undefined\n        if (\n            database &&\n            this.driver.getAttachedDatabaseHandleByRelativePath(database)\n        ) {\n            dbPath =\n                this.driver.getAttachedDatabaseHandleByRelativePath(database)\n        }\n\n        await this.query(`PRAGMA foreign_keys = OFF`)\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            const selectViewDropsQuery = dbPath\n                ? `SELECT 'DROP VIEW \"${dbPath}\".\"' || name || '\";' as query FROM \"${dbPath}\".\"sqlite_master\" WHERE \"type\" = 'view'`\n                : `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`\n            const dropViewQueries: ObjectLiteral[] = await this.query(\n                selectViewDropsQuery,\n            )\n            await Promise.all(\n                dropViewQueries.map((q) => this.query(q[\"query\"])),\n            )\n\n            const selectTableDropsQuery = dbPath\n                ? `SELECT 'DROP TABLE \"${dbPath}\".\"' || name || '\";' as query FROM \"${dbPath}\".\"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`\n                : `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`\n            const dropTableQueries: ObjectLiteral[] = await this.query(\n                selectTableDropsQuery,\n            )\n            await Promise.all(\n                dropTableQueries.map((q) => this.query(q[\"query\"])),\n            )\n\n            if (!isAnotherTransactionActive) await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        } finally {\n            await this.query(`PRAGMA foreign_keys = ON`)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        if (!hasTable) {\n            return []\n        }\n\n        if (!viewNames) {\n            viewNames = []\n        }\n\n        const viewNamesString = viewNames\n            .map((name) => \"'\" + name + \"'\")\n            .join(\", \")\n        let query = `SELECT \"t\".* FROM \"${this.getTypeormMetadataTableName()}\" \"t\" INNER JOIN \"sqlite_master\" s ON \"s\".\"name\" = \"t\".\"name\" AND \"s\".\"type\" = 'view' WHERE \"t\".\"type\" = '${\n            MetadataTableType.VIEW\n        }'`\n        if (viewNamesString.length > 0)\n            query += ` AND \"t\".\"name\" IN (${viewNamesString})`\n        const dbViews = await this.query(query)\n        return dbViews.map((dbView: any) => {\n            const view = new View()\n            view.name = dbView[\"name\"]\n            view.expression = dbView[\"value\"]\n            return view\n        })\n    }\n\n    protected async loadTableRecords(\n        tablePath: string,\n        tableOrIndex: \"table\" | \"index\",\n    ) {\n        let database: string | undefined = undefined\n        const [schema, tableName] = this.splitTablePath(tablePath)\n        if (\n            schema &&\n            this.driver.getAttachedDatabasePathRelativeByHandle(schema)\n        ) {\n            database =\n                this.driver.getAttachedDatabasePathRelativeByHandle(schema)\n        }\n        return this.query(\n            `SELECT ${database ? `'${database}'` : null} as database, ${\n                schema ? `'${schema}'` : null\n            } as schema, * FROM ${\n                schema ? `\"${schema}\".` : \"\"\n            }${this.escapePath(\n                `sqlite_master`,\n            )} WHERE \"type\" = '${tableOrIndex}' AND \"${\n                tableOrIndex === \"table\" ? \"name\" : \"tbl_name\"\n            }\" IN ('${tableName}')`,\n        )\n    }\n\n    protected async loadPragmaRecords(tablePath: string, pragma: string) {\n        const [, tableName] = this.splitTablePath(tablePath)\n        return this.query(`PRAGMA ${pragma}(\"${tableName}\")`)\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        let dbTables: { database?: string; name: string; sql: string }[] = []\n        let dbIndicesDef: ObjectLiteral[]\n\n        if (!tableNames) {\n            const tablesSql = `SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table'`\n            dbTables.push(...(await this.query(tablesSql)))\n\n            const tableNamesString = dbTables\n                .map(({ name }) => `'${name}'`)\n                .join(\", \")\n            dbIndicesDef = await this.query(\n                `SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'index' AND \"tbl_name\" IN (${tableNamesString})`,\n            )\n        } else {\n            const tableNamesWithoutDot = tableNames\n                .filter((tableName) => {\n                    return tableName.split(\".\").length === 1\n                })\n                .map((tableName) => `'${tableName}'`)\n\n            const tableNamesWithDot = tableNames.filter((tableName) => {\n                return tableName.split(\".\").length > 1\n            })\n\n            const queryPromises = (type: \"table\" | \"index\") => {\n                const promises = [\n                    ...tableNamesWithDot.map((tableName) =>\n                        this.loadTableRecords(tableName, type),\n                    ),\n                ]\n\n                if (tableNamesWithoutDot.length) {\n                    promises.push(\n                        this.query(\n                            `SELECT * FROM \"sqlite_master\" WHERE \"type\" = '${type}' AND \"${\n                                type === \"table\" ? \"name\" : \"tbl_name\"\n                            }\" IN (${tableNamesWithoutDot})`,\n                        ),\n                    )\n                }\n\n                return promises\n            }\n            dbTables = (await Promise.all(queryPromises(\"table\")))\n                .reduce((acc, res) => [...acc, ...res], [])\n                .filter(Boolean)\n            dbIndicesDef = (await Promise.all(queryPromises(\"index\")))\n                .reduce((acc, res) => [...acc, ...res], [])\n                .filter(Boolean)\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return []\n        }\n\n        // create table schemas for loaded tables\n        return Promise.all(\n            dbTables.map(async (dbTable) => {\n                const tablePath =\n                    dbTable[\"database\"] &&\n                    this.driver.getAttachedDatabaseHandleByRelativePath(\n                        dbTable[\"database\"],\n                    )\n                        ? `${this.driver.getAttachedDatabaseHandleByRelativePath(\n                              dbTable[\"database\"],\n                          )}.${dbTable[\"name\"]}`\n                        : dbTable[\"name\"]\n\n                const sql = dbTable[\"sql\"]\n\n                const withoutRowid = sql.includes(\"WITHOUT ROWID\")\n                const table = new Table({ name: tablePath, withoutRowid })\n\n                // load columns and indices\n                const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] =\n                    await Promise.all([\n                        this.loadPragmaRecords(tablePath, `table_xinfo`),\n                        this.loadPragmaRecords(tablePath, `index_list`),\n                        this.loadPragmaRecords(tablePath, `foreign_key_list`),\n                    ])\n\n                // find column name with auto increment\n                let autoIncrementColumnName: string | undefined = undefined\n                const tableSql: string = dbTable[\"sql\"]\n                const autoIncrementIndex = tableSql\n                    .toUpperCase()\n                    .indexOf(\"AUTOINCREMENT\")\n                if (autoIncrementIndex !== -1) {\n                    autoIncrementColumnName = tableSql.substr(\n                        0,\n                        autoIncrementIndex,\n                    )\n                    const comma = autoIncrementColumnName.lastIndexOf(\",\")\n                    const bracket = autoIncrementColumnName.lastIndexOf(\"(\")\n                    if (comma !== -1) {\n                        autoIncrementColumnName =\n                            autoIncrementColumnName.substr(comma)\n                        autoIncrementColumnName =\n                            autoIncrementColumnName.substr(\n                                0,\n                                autoIncrementColumnName.lastIndexOf('\"'),\n                            )\n                        autoIncrementColumnName =\n                            autoIncrementColumnName.substr(\n                                autoIncrementColumnName.indexOf('\"') + 1,\n                            )\n                    } else if (bracket !== -1) {\n                        autoIncrementColumnName =\n                            autoIncrementColumnName.substr(bracket)\n                        autoIncrementColumnName =\n                            autoIncrementColumnName.substr(\n                                0,\n                                autoIncrementColumnName.lastIndexOf('\"'),\n                            )\n                        autoIncrementColumnName =\n                            autoIncrementColumnName.substr(\n                                autoIncrementColumnName.indexOf('\"') + 1,\n                            )\n                    }\n                }\n\n                // create columns from the loaded columns\n                table.columns = await Promise.all(\n                    dbColumns.map(async (dbColumn) => {\n                        const tableColumn = new TableColumn()\n                        tableColumn.name = dbColumn[\"name\"]\n                        tableColumn.type = dbColumn[\"type\"].toLowerCase()\n                        tableColumn.default =\n                            dbColumn[\"dflt_value\"] !== null &&\n                            dbColumn[\"dflt_value\"] !== undefined\n                                ? dbColumn[\"dflt_value\"]\n                                : undefined\n                        tableColumn.isNullable = dbColumn[\"notnull\"] === 0\n                        // primary keys are numbered starting with 1, columns that aren't primary keys are marked with 0\n                        tableColumn.isPrimary = dbColumn[\"pk\"] > 0\n                        tableColumn.comment = \"\" // SQLite does not support column comments\n                        tableColumn.isGenerated =\n                            autoIncrementColumnName === dbColumn[\"name\"]\n                        if (tableColumn.isGenerated) {\n                            tableColumn.generationStrategy = \"increment\"\n                        }\n\n                        if (\n                            dbColumn[\"hidden\"] === 2 ||\n                            dbColumn[\"hidden\"] === 3\n                        ) {\n                            tableColumn.generatedType =\n                                dbColumn[\"hidden\"] === 2 ? \"VIRTUAL\" : \"STORED\"\n\n                            const asExpressionQuery =\n                                this.selectTypeormMetadataSql({\n                                    table: table.name,\n                                    type: MetadataTableType.GENERATED_COLUMN,\n                                    name: tableColumn.name,\n                                })\n\n                            const results = await this.query(\n                                asExpressionQuery.query,\n                                asExpressionQuery.parameters,\n                            )\n                            if (results[0] && results[0].value) {\n                                tableColumn.asExpression = results[0].value\n                            } else {\n                                tableColumn.asExpression = \"\"\n                            }\n                        }\n\n                        if (tableColumn.type === \"varchar\") {\n                            tableColumn.enum = OrmUtils.parseSqlCheckExpression(\n                                sql,\n                                tableColumn.name,\n                            )\n                        }\n\n                        // parse datatype and attempt to retrieve length, precision and scale\n                        const pos = tableColumn.type.indexOf(\"(\")\n                        if (pos !== -1) {\n                            const fullType = tableColumn.type\n                            const dataType = fullType.substr(0, pos)\n                            if (\n                                this.driver.withLengthColumnTypes.find(\n                                    (col) => col === dataType,\n                                )\n                            ) {\n                                const len = parseInt(\n                                    fullType.substring(\n                                        pos + 1,\n                                        fullType.length - 1,\n                                    ),\n                                )\n                                if (len) {\n                                    tableColumn.length = len.toString()\n                                    tableColumn.type = dataType // remove the length part from the datatype\n                                }\n                            }\n                            if (\n                                this.driver.withPrecisionColumnTypes.find(\n                                    (col) => col === dataType,\n                                )\n                            ) {\n                                const re = new RegExp(\n                                    `^${dataType}\\\\((\\\\d+),?\\\\s?(\\\\d+)?\\\\)`,\n                                )\n                                const matches = fullType.match(re)\n                                if (matches && matches[1]) {\n                                    tableColumn.precision = +matches[1]\n                                }\n                                if (\n                                    this.driver.withScaleColumnTypes.find(\n                                        (col) => col === dataType,\n                                    )\n                                ) {\n                                    if (matches && matches[2]) {\n                                        tableColumn.scale = +matches[2]\n                                    }\n                                }\n                                tableColumn.type = dataType // remove the precision/scale part from the datatype\n                            }\n                        }\n\n                        return tableColumn\n                    }),\n                )\n\n                // find foreign key constraints from CREATE TABLE sql\n                let fkResult\n                const fkMappings: {\n                    name: string\n                    columns: string[]\n                    referencedTableName: string\n                }[] = []\n                const fkRegex =\n                    /CONSTRAINT \"([^\"]*)\" FOREIGN KEY ?\\((.*?)\\) REFERENCES \"([^\"]*)\"/g\n                while ((fkResult = fkRegex.exec(sql)) !== null) {\n                    fkMappings.push({\n                        name: fkResult[1],\n                        columns: fkResult[2]\n                            .substr(1, fkResult[2].length - 2)\n                            .split(`\", \"`),\n                        referencedTableName: fkResult[3],\n                    })\n                }\n\n                // build foreign keys\n                const tableForeignKeyConstraints = OrmUtils.uniq(\n                    dbForeignKeys,\n                    (dbForeignKey) => dbForeignKey[\"id\"],\n                )\n\n                table.foreignKeys = tableForeignKeyConstraints.map(\n                    (foreignKey) => {\n                        const ownForeignKeys = dbForeignKeys.filter(\n                            (dbForeignKey) =>\n                                dbForeignKey[\"id\"] === foreignKey[\"id\"] &&\n                                dbForeignKey[\"table\"] === foreignKey[\"table\"],\n                        )\n                        const columnNames = ownForeignKeys.map(\n                            (dbForeignKey) => dbForeignKey[\"from\"],\n                        )\n                        const referencedColumnNames = ownForeignKeys.map(\n                            (dbForeignKey) => dbForeignKey[\"to\"],\n                        )\n\n                        // find related foreign key mapping\n                        const fkMapping = fkMappings.find(\n                            (it) =>\n                                it.referencedTableName ===\n                                    foreignKey[\"table\"] &&\n                                it.columns.every(\n                                    (column) =>\n                                        columnNames.indexOf(column) !== -1,\n                                ),\n                        )\n\n                        return new TableForeignKey({\n                            name: fkMapping?.name,\n                            columnNames: columnNames,\n                            referencedTableName: foreignKey[\"table\"],\n                            referencedColumnNames: referencedColumnNames,\n                            onDelete: foreignKey[\"on_delete\"],\n                            onUpdate: foreignKey[\"on_update\"],\n                        })\n                    },\n                )\n\n                // find unique constraints from CREATE TABLE sql\n                let uniqueRegexResult\n                const uniqueMappings: { name: string; columns: string[] }[] = []\n                const uniqueRegex = /CONSTRAINT \"([^\"]*)\" UNIQUE ?\\((.*?)\\)/g\n                while ((uniqueRegexResult = uniqueRegex.exec(sql)) !== null) {\n                    uniqueMappings.push({\n                        name: uniqueRegexResult[1],\n                        columns: uniqueRegexResult[2]\n                            .substr(1, uniqueRegexResult[2].length - 2)\n                            .split(`\", \"`),\n                    })\n                }\n\n                // build unique constraints\n                const tableUniquePromises = dbIndices\n                    .filter((dbIndex) => dbIndex[\"origin\"] === \"u\")\n                    .map((dbIndex) => dbIndex[\"name\"])\n                    .filter(\n                        (value, index, self) => self.indexOf(value) === index,\n                    )\n                    .map(async (dbIndexName) => {\n                        const dbIndex = dbIndices.find(\n                            (dbIndex) => dbIndex[\"name\"] === dbIndexName,\n                        )\n                        const indexInfos: ObjectLiteral[] = await this.query(\n                            `PRAGMA index_info(\"${dbIndex![\"name\"]}\")`,\n                        )\n                        const indexColumns = indexInfos\n                            .sort(\n                                (indexInfo1, indexInfo2) =>\n                                    parseInt(indexInfo1[\"seqno\"]) -\n                                    parseInt(indexInfo2[\"seqno\"]),\n                            )\n                            .map((indexInfo) => indexInfo[\"name\"])\n                        if (indexColumns.length === 1) {\n                            const column = table.columns.find((column) => {\n                                return !!indexColumns.find(\n                                    (indexColumn) =>\n                                        indexColumn === column.name,\n                                )\n                            })\n                            if (column) column.isUnique = true\n                        }\n\n                        // find existent mapping by a column names\n                        const foundMapping = uniqueMappings.find((mapping) => {\n                            return mapping!.columns.every(\n                                (column) => indexColumns.indexOf(column) !== -1,\n                            )\n                        })\n\n                        return new TableUnique({\n                            name: foundMapping\n                                ? foundMapping.name\n                                : this.connection.namingStrategy.uniqueConstraintName(\n                                      table,\n                                      indexColumns,\n                                  ),\n                            columnNames: indexColumns,\n                        })\n                    })\n                table.uniques = (await Promise.all(\n                    tableUniquePromises,\n                )) as TableUnique[]\n\n                // build checks\n                let result\n                const regexp =\n                    /CONSTRAINT \"([^\"]*)\" CHECK ?(\\(.*?\\))([,]|[)]$)/g\n                while ((result = regexp.exec(sql)) !== null) {\n                    table.checks.push(\n                        new TableCheck({\n                            name: result[1],\n                            expression: result[2],\n                        }),\n                    )\n                }\n\n                // build indices\n                const indicesPromises = dbIndices\n                    .filter((dbIndex) => dbIndex[\"origin\"] === \"c\")\n                    .map((dbIndex) => dbIndex[\"name\"])\n                    .filter(\n                        (value, index, self) => self.indexOf(value) === index,\n                    ) // unqiue\n                    .map(async (dbIndexName) => {\n                        const indexDef = dbIndicesDef.find(\n                            (dbIndexDef) => dbIndexDef[\"name\"] === dbIndexName,\n                        )\n                        const condition = /WHERE (.*)/.exec(indexDef![\"sql\"])\n                        const dbIndex = dbIndices.find(\n                            (dbIndex) => dbIndex[\"name\"] === dbIndexName,\n                        )\n                        const indexInfos: ObjectLiteral[] = await this.query(\n                            `PRAGMA index_info(\"${dbIndex![\"name\"]}\")`,\n                        )\n                        const indexColumns = indexInfos\n                            .sort(\n                                (indexInfo1, indexInfo2) =>\n                                    parseInt(indexInfo1[\"seqno\"]) -\n                                    parseInt(indexInfo2[\"seqno\"]),\n                            )\n                            .map((indexInfo) => indexInfo[\"name\"])\n                        const dbIndexPath = `${\n                            dbTable[\"database\"] ? `${dbTable[\"database\"]}.` : \"\"\n                        }${dbIndex![\"name\"]}`\n\n                        const isUnique =\n                            dbIndex![\"unique\"] === \"1\" ||\n                            dbIndex![\"unique\"] === 1\n                        return new TableIndex(<TableIndexOptions>{\n                            table: table,\n                            name: dbIndexPath,\n                            columnNames: indexColumns,\n                            isUnique: isUnique,\n                            where: condition ? condition[1] : undefined,\n                        })\n                    })\n                const indices = await Promise.all(indicesPromises)\n                table.indices = indices.filter(\n                    (index) => !!index,\n                ) as TableIndex[]\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds create table sql.\n     */\n    protected createTableSql(\n        table: Table,\n        createForeignKeys?: boolean,\n        temporaryTable?: boolean,\n    ): Query {\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary,\n        )\n        const hasAutoIncrement = primaryColumns.find(\n            (column) =>\n                column.isGenerated && column.generationStrategy === \"increment\",\n        )\n        const skipPrimary = primaryColumns.length > 1\n        if (skipPrimary && hasAutoIncrement)\n            throw new TypeORMError(\n                `Sqlite does not support AUTOINCREMENT on composite primary key`,\n            )\n\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column, skipPrimary))\n            .join(\", \")\n        const [database] = this.splitTablePath(table.name)\n        let sql = `CREATE TABLE ${this.escapePath(\n            table.name,\n        )} (${columnDefinitions}`\n\n        const [databaseNew, tableName] = this.splitTablePath(table.name)\n        const newTableName = temporaryTable\n            ? `${databaseNew ? `${databaseNew}.` : \"\"}${tableName.replace(\n                  /^temporary_/,\n                  \"\",\n              )}`\n            : table.name\n\n        // need for `addColumn()` method, because it recreates table.\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueExist = table.uniques.some(\n                    (unique) =>\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames[0] === column.name,\n                )\n                if (!isUniqueExist)\n                    table.uniques.push(\n                        new TableUnique({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                        }),\n                    )\n            })\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                    const uniqueName = unique.name\n                        ? unique.name\n                        : this.connection.namingStrategy.uniqueConstraintName(\n                              newTableName,\n                              unique.columnNames,\n                          )\n                    const columnNames = unique.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${uniquesSql}`\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              newTableName,\n                              check.expression!,\n                          )\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\n                })\n                .join(\", \")\n\n            sql += `, ${checksSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .filter((fk) => {\n                    const [referencedDatabase] = this.splitTablePath(\n                        fk.referencedTableName,\n                    )\n                    if (referencedDatabase !== database) {\n                        return false\n                    }\n                    return true\n                })\n                .map((fk) => {\n                    const [, referencedTable] = this.splitTablePath(\n                        fk.referencedTableName,\n                    )\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            newTableName,\n                            fk.columnNames,\n                            this.getTablePath(fk),\n                            fk.referencedColumnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n\n                    let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${referencedTable}\" (${referencedColumnNames})`\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\n                    if (fk.deferrable)\n                        constraint += ` DEFERRABLE ${fk.deferrable}`\n\n                    return constraint\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        if (primaryColumns.length > 1) {\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            sql += `, PRIMARY KEY (${columnNames})`\n        }\n\n        sql += `)`\n\n        if (table.withoutRowid) {\n            sql += \" WITHOUT ROWID\"\n        }\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n    ): Query {\n        const tableName = InstanceChecker.isTable(tableOrName)\n            ? tableOrName.name\n            : tableOrName\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableName)}`\n            : `DROP TABLE ${this.escapePath(tableName)}`\n        return new Query(query)\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW \"${view.name}\" AS ${view.expression}`)\n        } else {\n            return new Query(\n                `CREATE VIEW \"${view.name}\" AS ${view\n                    .expression(this.connection)\n                    .getQuery()}`,\n            )\n        }\n    }\n\n    protected insertViewDefinitionSql(view: View): Query {\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            name: view.name,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View | string): Query {\n        const viewName = InstanceChecker.isView(viewOrPath)\n            ? viewOrPath.name\n            : viewOrPath\n        return new Query(`DROP VIEW \"${viewName}\"`)\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected deleteViewDefinitionSql(viewOrPath: View | string): Query {\n        const viewName = InstanceChecker.isView(viewOrPath)\n            ? viewOrPath.name\n            : viewOrPath\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            name: viewName,\n        })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        const [database, tableName] = this.splitTablePath(table.name)\n        return new Query(\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX ${\n                database ? `\"${database}\".` : \"\"\n            }${this.escapePath(index.name!)} ON \"${tableName}\" (${columns}) ${\n                index.where ? \"WHERE \" + index.where : \"\"\n            }`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(indexOrName: TableIndex | string): Query {\n        const indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName\n        return new Query(`DROP INDEX ${this.escapePath(indexName!)}`)\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(\n        column: TableColumn,\n        skipPrimary?: boolean,\n    ): string {\n        let c = '\"' + column.name + '\"'\n        if (InstanceChecker.isColumnMetadata(column)) {\n            c += \" \" + this.driver.normalizeType(column)\n        } else {\n            c += \" \" + this.connection.driver.createFullType(column)\n        }\n\n        if (column.enum)\n            c +=\n                ' CHECK( \"' +\n                column.name +\n                '\" IN (' +\n                column.enum.map((val) => \"'\" + val + \"'\").join(\",\") +\n                \") )\"\n        if (column.isPrimary && !skipPrimary) c += \" PRIMARY KEY\"\n        if (\n            column.isGenerated === true &&\n            column.generationStrategy === \"increment\"\n        )\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTOINCREMENT\"\n        if (column.collation) c += \" COLLATE \" + column.collation\n        if (column.isNullable !== true) c += \" NOT NULL\"\n\n        if (column.asExpression) {\n            c += ` AS (${column.asExpression}) ${\n                column.generatedType ? column.generatedType : \"VIRTUAL\"\n            }`\n        } else {\n            if (column.default !== undefined && column.default !== null)\n                c += \" DEFAULT (\" + column.default + \")\"\n        }\n\n        return c\n    }\n\n    protected async recreateTable(\n        newTable: Table,\n        oldTable: Table,\n        migrateData = true,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop old table indices\n        oldTable.indices.forEach((index) => {\n            upQueries.push(this.dropIndexSql(index))\n            downQueries.push(this.createIndexSql(oldTable, index))\n        })\n\n        // change table name into 'temporary_table'\n        let [databaseNew, tableNameNew] = this.splitTablePath(newTable.name)\n        const [, tableNameOld] = this.splitTablePath(oldTable.name)\n        newTable.name = tableNameNew = `${\n            databaseNew ? `${databaseNew}.` : \"\"\n        }temporary_${tableNameNew}`\n\n        // create new table\n        upQueries.push(this.createTableSql(newTable, true, true))\n        downQueries.push(this.dropTableSql(newTable))\n\n        // migrate all data from the old table into new table\n        if (migrateData) {\n            let newColumnNames = newTable.columns\n                .filter((column) => !column.generatedType)\n                .map((column) => `\"${column.name}\"`)\n\n            let oldColumnNames = oldTable.columns\n                .filter((column) => !column.generatedType)\n                .map((column) => `\"${column.name}\"`)\n\n            if (oldColumnNames.length < newColumnNames.length) {\n                newColumnNames = newTable.columns\n                    .filter((column) => {\n                        const oldColumn = oldTable.columns.find(\n                            (c) => c.name === column.name,\n                        )\n                        if (oldColumn && oldColumn.generatedType) return false\n                        return !column.generatedType && oldColumn\n                    })\n                    .map((column) => `\"${column.name}\"`)\n            } else if (oldColumnNames.length > newColumnNames.length) {\n                oldColumnNames = oldTable.columns\n                    .filter((column) => {\n                        return (\n                            !column.generatedType &&\n                            newTable.columns.find((c) => c.name === column.name)\n                        )\n                    })\n                    .map((column) => `\"${column.name}\"`)\n            }\n\n            upQueries.push(\n                new Query(\n                    `INSERT INTO ${this.escapePath(\n                        newTable.name,\n                    )}(${newColumnNames.join(\n                        \", \",\n                    )}) SELECT ${oldColumnNames.join(\n                        \", \",\n                    )} FROM ${this.escapePath(oldTable.name)}`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `INSERT INTO ${this.escapePath(\n                        oldTable.name,\n                    )}(${oldColumnNames.join(\n                        \", \",\n                    )}) SELECT ${newColumnNames.join(\n                        \", \",\n                    )} FROM ${this.escapePath(newTable.name)}`,\n                ),\n            )\n        }\n\n        // drop old table\n        upQueries.push(this.dropTableSql(oldTable))\n        downQueries.push(this.createTableSql(oldTable, true))\n\n        // rename old table\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    newTable.name,\n                )} RENAME TO ${this.escapePath(tableNameOld)}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    oldTable.name,\n                )} RENAME TO ${this.escapePath(tableNameNew)}`,\n            ),\n        )\n\n        newTable.name = oldTable.name\n\n        // recreate table indices\n        newTable.indices.forEach((index) => {\n            // new index may be passed without name. In this case we generate index name manually.\n            if (!index.name)\n                index.name = this.connection.namingStrategy.indexName(\n                    newTable,\n                    index.columnNames,\n                    index.where,\n                )\n            upQueries.push(this.createIndexSql(newTable, index))\n            downQueries.push(this.dropIndexSql(index))\n        })\n\n        // update generated columns in \"typeorm_metadata\" table\n        // Step 1: clear data for removed generated columns\n        oldTable.columns\n            .filter((column) => {\n                const newTableColumn = newTable.columns.find(\n                    (c) => c.name === column.name,\n                )\n                // we should delete record from \"typeorm_metadata\" if generated column was removed\n                // or it was changed to non-generated\n                return (\n                    column.generatedType &&\n                    column.asExpression &&\n                    (!newTableColumn ||\n                        (!newTableColumn.generatedType &&\n                            !newTableColumn.asExpression))\n                )\n            })\n            .forEach((column) => {\n                const deleteQuery = this.deleteTypeormMetadataSql({\n                    table: oldTable.name,\n                    type: MetadataTableType.GENERATED_COLUMN,\n                    name: column.name,\n                })\n\n                const insertQuery = this.insertTypeormMetadataSql({\n                    table: oldTable.name,\n                    type: MetadataTableType.GENERATED_COLUMN,\n                    name: column.name,\n                    value: column.asExpression,\n                })\n\n                upQueries.push(deleteQuery)\n                downQueries.push(insertQuery)\n            })\n\n        // Step 2: add data for new generated columns\n        newTable.columns\n            .filter(\n                (column) =>\n                    column.generatedType &&\n                    column.asExpression &&\n                    !oldTable.columns.some((c) => c.name === column.name),\n            )\n            .forEach((column) => {\n                const insertQuery = this.insertTypeormMetadataSql({\n                    table: newTable.name,\n                    type: MetadataTableType.GENERATED_COLUMN,\n                    name: column.name,\n                    value: column.asExpression,\n                })\n\n                const deleteQuery = this.deleteTypeormMetadataSql({\n                    table: newTable.name,\n                    type: MetadataTableType.GENERATED_COLUMN,\n                    name: column.name,\n                })\n\n                upQueries.push(insertQuery)\n                downQueries.push(deleteQuery)\n            })\n\n        // Step 3: update changed expressions\n        newTable.columns\n            .filter((column) => column.generatedType && column.asExpression)\n            .forEach((column) => {\n                const oldColumn = oldTable.columns.find(\n                    (c) =>\n                        c.name === column.name &&\n                        c.generatedType &&\n                        column.generatedType &&\n                        c.asExpression !== column.asExpression,\n                )\n\n                if (!oldColumn) return\n\n                // update expression\n                const deleteQuery = this.deleteTypeormMetadataSql({\n                    table: oldTable.name,\n                    type: MetadataTableType.GENERATED_COLUMN,\n                    name: oldColumn.name,\n                })\n\n                const insertQuery = this.insertTypeormMetadataSql({\n                    table: newTable.name,\n                    type: MetadataTableType.GENERATED_COLUMN,\n                    name: column.name,\n                    value: column.asExpression,\n                })\n\n                upQueries.push(deleteQuery)\n                upQueries.push(insertQuery)\n\n                // revert update\n                const revertInsertQuery = this.insertTypeormMetadataSql({\n                    table: newTable.name,\n                    type: MetadataTableType.GENERATED_COLUMN,\n                    name: oldColumn.name,\n                    value: oldColumn.asExpression,\n                })\n\n                const revertDeleteQuery = this.deleteTypeormMetadataSql({\n                    table: oldTable.name,\n                    type: MetadataTableType.GENERATED_COLUMN,\n                    name: column.name,\n                })\n\n                downQueries.push(revertInsertQuery)\n                downQueries.push(revertDeleteQuery)\n            })\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(oldTable, newTable)\n    }\n\n    /**\n     * tablePath e.g. \"myDB.myTable\", \"myTable\"\n     */\n    protected splitTablePath(tablePath: string): [string | undefined, string] {\n        return (\n            tablePath.indexOf(\".\") !== -1\n                ? tablePath.split(\".\")\n                : [undefined, tablePath]\n        ) as [string | undefined, string]\n    }\n\n    /**\n     * Escapes given table or view path. Tolerates leading/trailing dots\n     */\n    protected escapePath(\n        target: Table | View | string,\n        disableEscape?: boolean,\n    ): string {\n        const tableName =\n            InstanceChecker.isTable(target) || InstanceChecker.isView(target)\n                ? target.name\n                : target\n        return tableName\n            .replace(/^\\.+|\\.+$/g, \"\")\n            .split(\".\")\n            .map((i) => (disableEscape ? i : `\"${i}\"`))\n            .join(\".\")\n    }\n\n    /**\n     * Change table comment.\n     */\n    changeTableComment(\n        tableOrName: Table | string,\n        comment?: string,\n    ): Promise<void> {\n        throw new TypeORMError(`sqlit driver does not support change comment.`)\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4836, "column": 0}, "map": {"version":3,"file":"AbstractSqliteDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqlite-abstract/AbstractSqliteDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { BaseDataSourceOptions } from \"../../data-source/BaseDataSourceOptions\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { TypeORMError } from \"../../error\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\n\ntype DatabasesMap = Record<\n    string,\n    {\n        attachFilepathAbsolute: string\n        attachFilepathRelative: string\n        attachHandle: string\n    }\n>\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport abstract class AbstractSqliteDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Sqlite has a single QueryRunner because it works on a single database connection.\n     */\n    queryRunner?: QueryRunner\n\n    /**\n     * Real database connection with sqlite database.\n     */\n    databaseConnection: any\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: BaseDataSourceOptions\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport: \"simple\" | \"nested\" | \"none\" = \"nested\"\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n     * @see https://sqlite.org/datatype3.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"unsigned big int\",\n        \"int2\",\n        \"int8\",\n        \"integer\",\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"clob\",\n        \"text\",\n        \"blob\",\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"boolean\",\n        \"date\",\n        \"time\",\n        \"datetime\",\n        \"json\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = [\"on-conflict-do-update\"]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"blob\",\n        \"clob\",\n    ]\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"date\",\n        \"time\",\n        \"datetime\",\n    ]\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n    ]\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"datetime('now')\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"datetime('now')\",\n        deleteDate: \"datetime\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"text\",\n        cacheResult: \"text\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"text\",\n    }\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults\n\n    /**\n     * No documentation specifying a maximum length for identifiers could be found\n     * for SQLite.\n     */\n    maxAliasLength?: number\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n        requiresRecursiveHint: true,\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Any attached databases (excepting default 'main')\n     */\n    attachedDatabases: DatabasesMap = {}\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as BaseDataSourceOptions\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Abstract\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    abstract createQueryRunner(mode: ReplicationMode): QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection()\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined\n            this.databaseConnection.close((err: any) =>\n                err ? fail(err) : ok(),\n            )\n        })\n    }\n\n    hasAttachedDatabases(): boolean {\n        return !!Object.keys(this.attachedDatabases).length\n    }\n\n    getAttachedDatabaseHandleByRelativePath(path: string): string | undefined {\n        return this.attachedDatabases?.[path]?.attachHandle\n    }\n\n    getAttachedDatabasePathRelativeByHandle(\n        handle: string,\n    ): string | undefined {\n        return Object.values(this.attachedDatabases).find(\n            ({ attachHandle }) => handle === attachHandle,\n        )?.attachFilepathRelative\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (\n            columnMetadata.type === Boolean ||\n            columnMetadata.type === \"boolean\"\n        ) {\n            return value === true ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value)\n        } else if (\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date\n        ) {\n            // to string conversation needs because SQLite stores date as integer number, when date came as Object\n            // TODO: think about `toUTC` conversion\n            return DateUtils.mixedDateToUtcDatetimeString(value)\n        } else if (\n            columnMetadata.type === \"json\" ||\n            columnMetadata.type === \"simple-json\"\n        ) {\n            return DateUtils.simpleJsonToString(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value)\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be hydrated, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (\n            columnMetadata.type === Boolean ||\n            columnMetadata.type === \"boolean\"\n        ) {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date\n        ) {\n            /**\n             * Fix date conversion issue\n             *\n             * If the format of the date string is \"2018-03-14 02:33:33.906\", Safari (and iOS WKWebView) will convert it to an invalid date object.\n             * We need to modify the date string to \"2018-03-14T02:33:33.906Z\" and Safari will convert it correctly.\n             *\n             * ISO 8601\n             * https://www.w3.org/TR/NOTE-datetime\n             */\n            if (value && typeof value === \"string\") {\n                // There are various valid time string formats a sqlite time string might have:\n                // https://www.sqlite.org/lang_datefunc.html\n                // There are two separate fixes we may need to do:\n                //   1) Add 'T' separator if space is used instead\n                //   2) Add 'Z' UTC suffix if no timezone or offset specified\n\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {\n                    value = value.replace(\" \", \"T\")\n                }\n                if (\n                    /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(\n                        value,\n                    )\n                ) {\n                    value += \"Z\"\n                }\n            }\n\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (\n            columnMetadata.type === \"json\" ||\n            columnMetadata.type === \"simple-json\"\n        ) {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => {\n                // Mapping boolean values to their numeric representation\n                if (typeof nativeParameters[key] === \"boolean\") {\n                    return nativeParameters[key] === true ? 1 : 0\n                }\n\n                if (nativeParameters[key] instanceof Date) {\n                    return DateUtils.mixedDateToUtcDatetimeString(\n                        nativeParameters[key],\n                    )\n                }\n\n                return nativeParameters[key]\n            },\n        )\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                const value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                } else if (typeof value === \"number\") {\n                    return String(value)\n                }\n\n                // Sqlite does not have a boolean data type so we have to transform\n                // it to 1 or 0\n                if (typeof value === \"boolean\") {\n                    escapedParameters.push(+value)\n                    return this.createParameter(\n                        key,\n                        escapedParameters.length - 1,\n                    )\n                }\n\n                if (value instanceof Date) {\n                    escapedParameters.push(\n                        DateUtils.mixedDateToUtcDatetimeString(value),\n                    )\n                    return this.createParameter(\n                        key,\n                        escapedParameters.length - 1,\n                    )\n                }\n\n                escapedParameters.push(value)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return '\"' + columnName + '\"'\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     *\n     * Returns only simple table name because all inherited drivers does not supports schema and database.\n     */\n    buildTableName(\n        tableName: string,\n        schema?: string,\n        database?: string,\n    ): string {\n        return tableName\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = undefined\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(\n                target.schema\n                    ? `\"${target.schema}\".\"${target.name}\"`\n                    : target.name,\n            )\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        if (parts.length === 3) {\n            return {\n                database: parts[0] || driverDatabase,\n                schema: parts[1] || driverSchema,\n                tableName: parts[2],\n            }\n        } else if (parts.length === 2) {\n            const database =\n                this.getAttachedDatabasePathRelativeByHandle(parts[0]) ??\n                driverDatabase\n            return {\n                database: database,\n                schema: parts[0],\n                tableName: parts[1],\n            }\n        } else {\n            return {\n                database: driverDatabase,\n                schema: driverSchema,\n                tableName: target,\n            }\n        }\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\"\n        } else if (column.type === String) {\n            return \"varchar\"\n        } else if (column.type === Date) {\n            return \"datetime\"\n        } else if (column.type === Boolean) {\n            return \"boolean\"\n        } else if (column.type === \"uuid\") {\n            return \"varchar\"\n        } else if (column.type === \"simple-array\") {\n            return \"text\"\n        } else if (column.type === \"simple-json\") {\n            return \"text\"\n        } else if (column.type === \"simple-enum\") {\n            return \"varchar\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            return defaultValue()\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(\n            (uq) => uq.columns.length === 1 && uq.columns[0] === column,\n        )\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata): string {\n        return column.length ? column.length.toString() : \"\"\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type\n        if (column.enum) {\n            return \"varchar\"\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\"\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\"\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += \"(\" + column.precision + \")\"\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(\n        metadata: EntityMetadata,\n        insertResult: any,\n        entityIndex: number,\n        entityNum: number,\n    ) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                let value: any\n                if (\n                    generatedColumn.generationStrategy === \"increment\" &&\n                    insertResult\n                ) {\n                    // NOTE: When INSERT statement is successfully completed, the last inserted row ID is returned.\n                    // see also: SqliteQueryRunner.query()\n                    value = insertResult - entityNum + entityIndex + 1\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                    //     value = insertValue[generatedColumn.databaseName];\n                }\n\n                if (!value) return map\n                return OrmUtils.mergeDeep(\n                    map,\n                    generatedColumn.createValueMap(value),\n                )\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            const isColumnChanged =\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadata.length ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                this.normalizeDefault(columnMetadata) !== tableColumn.default ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(\n                        tableColumn.enum,\n                        columnMetadata.enum.map((val) => val + \"\"),\n                    )) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         columnMetadata.length,\n            //     )\n            //     console.log(\n            //         \"precision:\",\n            //         tableColumn.precision,\n            //         columnMetadata.precision,\n            //     )\n            //     console.log(\"scale:\", tableColumn.scale, columnMetadata.scale)\n            //     console.log(\n            //         \"default:\",\n            //         this.normalizeDefault(columnMetadata),\n            //         columnMetadata.default,\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         tableColumn.asExpression,\n            //         columnMetadata.asExpression,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"enum:\",\n            //         tableColumn.enum &&\n            //             columnMetadata.enum &&\n            //             !OrmUtils.isArraysEqual(\n            //                 tableColumn.enum,\n            //                 columnMetadata.enum.map((val) => val + \"\"),\n            //             ),\n            //     )\n            //     console.log(\n            //         \"isGenerated:\",\n            //         tableColumn.isGenerated,\n            //         columnMetadata.isGenerated,\n            //     )\n            // }\n\n            return isColumnChanged\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        // return \"$\" + (index + 1);\n        return \"?\"\n        // return \"$\" + parameterName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        throw new TypeORMError(\n            \"Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers\",\n        )\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        // dependencies have to be loaded in the specific driver\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5436, "column": 0}, "map": {"version":3,"file":"SqliteQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqlite/SqliteQueryRunner.ts"],"sourcesContent":["import { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { SqliteConnectionOptions } from \"./SqliteConnectionOptions\"\nimport { SqliteDriver } from \"./SqliteDriver\"\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class SqliteQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqliteDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqliteDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const connection = this.driver.connection\n        const options = connection.options as SqliteConnectionOptions\n        const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime\n        const broadcaster = this.broadcaster\n\n        if (!connection.isInitialized) {\n            throw new ConnectionIsNotSetError(\"sqlite\")\n        }\n\n        const databaseConnection = await this.connect()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        await broadcaster.broadcast(\"BeforeQuery\", query, parameters)\n\n        const broadcasterResult = new BroadcasterResult()\n\n        return new Promise(async (ok, fail) => {\n            try {\n                const queryStartTime = Date.now()\n                const isInsertQuery = query.startsWith(\"INSERT \")\n                const isDeleteQuery = query.startsWith(\"DELETE \")\n                const isUpdateQuery = query.startsWith(\"UPDATE \")\n\n                const execute = async () => {\n                    if (isInsertQuery || isDeleteQuery || isUpdateQuery) {\n                        await databaseConnection.run(query, parameters, handler)\n                    } else {\n                        await databaseConnection.all(query, parameters, handler)\n                    }\n                }\n\n                const self = this\n                const handler = function (this: any, err: any, rows: any) {\n                    if (err && err.toString().indexOf(\"SQLITE_BUSY:\") !== -1) {\n                        if (\n                            typeof options.busyErrorRetry === \"number\" &&\n                            options.busyErrorRetry > 0\n                        ) {\n                            setTimeout(execute, options.busyErrorRetry)\n                            return\n                        }\n                    }\n\n                    // log slow queries if maxQueryExecution time is set\n                    const queryEndTime = Date.now()\n                    const queryExecutionTime = queryEndTime - queryStartTime\n                    if (\n                        maxQueryExecutionTime &&\n                        queryExecutionTime > maxQueryExecutionTime\n                    )\n                        connection.logger.logQuerySlow(\n                            queryExecutionTime,\n                            query,\n                            parameters,\n                            self,\n                        )\n\n                    if (err) {\n                        connection.logger.logQueryError(\n                            err,\n                            query,\n                            parameters,\n                            self,\n                        )\n                        broadcaster.broadcastAfterQueryEvent(\n                            broadcasterResult,\n                            query,\n                            parameters,\n                            false,\n                            undefined,\n                            undefined,\n                            err,\n                        )\n\n                        return fail(\n                            new QueryFailedError(query, parameters, err),\n                        )\n                    } else {\n                        const result = new QueryResult()\n\n                        if (isInsertQuery) {\n                            result.raw = this[\"lastID\"]\n                        } else {\n                            result.raw = rows\n                        }\n\n                        broadcaster.broadcastAfterQueryEvent(\n                            broadcasterResult,\n                            query,\n                            parameters,\n                            true,\n                            queryExecutionTime,\n                            result.raw,\n                            undefined,\n                        )\n\n                        if (Array.isArray(rows)) {\n                            result.records = rows\n                        }\n\n                        result.affected = this[\"changes\"]\n\n                        if (useStructuredResult) {\n                            ok(result)\n                        } else {\n                            ok(result.raw)\n                        }\n                    }\n                }\n\n                await execute()\n            } catch (err) {\n                fail(err)\n            } finally {\n                await broadcasterResult.wait()\n            }\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5551, "column": 0}, "map": {"version":3,"file":"SqliteDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqlite/SqliteDriver.ts"],"sourcesContent":["import fs from \"fs/promises\"\nimport path from \"path\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { SqliteQueryRunner } from \"./SqliteQueryRunner\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { SqliteConnectionOptions } from \"./SqliteConnectionOptions\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { filepathToName, isAbsolute } from \"../../util/PathUtils\"\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class SqliteDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SqliteConnectionOptions\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n        this.connection = connection\n        this.options = connection.options as SqliteConnectionOptions\n        this.database = this.options.database\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined\n            this.databaseConnection.close((err: any) =>\n                err ? fail(err) : ok(),\n            )\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new SqliteQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\"\n        }\n\n        return super.normalizeType(column)\n    }\n\n    async afterConnect(): Promise<void> {\n        return this.attachDatabases()\n    }\n\n    /**\n     * For SQLite, the database may be added in the decorator metadata. It will be a filepath to a database file.\n     */\n    buildTableName(\n        tableName: string,\n        _schema?: string,\n        database?: string,\n    ): string {\n        if (!database) return tableName\n        if (this.getAttachedDatabaseHandleByRelativePath(database))\n            return `${this.getAttachedDatabaseHandleByRelativePath(\n                database,\n            )}.${tableName}`\n\n        if (database === this.options.database) return tableName\n\n        // we use the decorated name as supplied when deriving attach handle (ideally without non-portable absolute path)\n        const identifierHash = filepathToName(database)\n        // decorated name will be assumed relative to main database file when non absolute. Paths supplied as absolute won't be portable\n        const absFilepath = isAbsolute(database)\n            ? database\n            : path.join(this.getMainDatabasePath(), database)\n\n        this.attachedDatabases[database] = {\n            attachFilepathAbsolute: absFilepath,\n            attachFilepathRelative: database,\n            attachHandle: identifierHash,\n        }\n\n        return `${identifierHash}.${tableName}`\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        if (\n            this.options.flags === undefined ||\n            !(this.options.flags & this.sqlite.OPEN_URI)\n        ) {\n            await this.createDatabaseDirectory(this.options.database)\n        }\n\n        const databaseConnection: any = await new Promise((ok, fail) => {\n            if (this.options.flags === undefined) {\n                const connection = new this.sqlite.Database(\n                    this.options.database,\n                    (err: any) => {\n                        if (err) return fail(err)\n                        ok(connection)\n                    },\n                )\n            } else {\n                const connection = new this.sqlite.Database(\n                    this.options.database,\n                    this.options.flags,\n                    (err: any) => {\n                        if (err) return fail(err)\n                        ok(connection)\n                    },\n                )\n            }\n        })\n\n        // Internal function to run a command on the connection and fail if an error occured.\n        function run(line: string): Promise<void> {\n            return new Promise((ok, fail) => {\n                databaseConnection.run(line, (err: any) => {\n                    if (err) return fail(err)\n                    ok()\n                })\n            })\n        }\n        // in the options, if encryption key for SQLCipher is setted.\n        // Must invoke key pragma before trying to do any other interaction with the database.\n        if (this.options.key) {\n            await run(`PRAGMA key = ${JSON.stringify(this.options.key)}`)\n        }\n\n        if (this.options.enableWAL) {\n            await run(`PRAGMA journal_mode = WAL`)\n        }\n\n        if (\n            this.options.busyTimeout &&\n            typeof this.options.busyTimeout === \"number\" &&\n            this.options.busyTimeout > 0\n        ) {\n            await run(`PRAGMA busy_timeout = ${this.options.busyTimeout}`)\n        }\n\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await run(`PRAGMA foreign_keys = ON`)\n\n        return databaseConnection\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const sqlite = this.options.driver || PlatformTools.load(\"sqlite3\")\n            this.sqlite = sqlite.verbose()\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\")\n        }\n    }\n\n    /**\n     * Auto creates database directory if it does not exist.\n     */\n    protected async createDatabaseDirectory(fullPath: string): Promise<void> {\n        await fs.mkdir(path.dirname(fullPath), { recursive: true })\n    }\n\n    /**\n     * Performs the attaching of the database files. The attachedDatabase should have been populated during calls to #buildTableName\n     * during EntityMetadata production (see EntityMetadata#buildTablePath)\n     *\n     * https://sqlite.org/lang_attach.html\n     */\n    protected async attachDatabases() {\n        // @todo - possibly check number of databases (but unqueriable at runtime sadly) - https://www.sqlite.org/limits.html#max_attached\n        for await (const {\n            attachHandle,\n            attachFilepathAbsolute,\n        } of Object.values(this.attachedDatabases)) {\n            await this.createDatabaseDirectory(attachFilepathAbsolute)\n            await this.connection.query(\n                `ATTACH \"${attachFilepathAbsolute}\" AS \"${attachHandle}\"`,\n            )\n        }\n    }\n\n    protected getMainDatabasePath(): string {\n        const optionsDb = this.options.database\n        return path.dirname(\n            isAbsolute(optionsDb)\n                ? optionsDb\n                : path.join(process.cwd(), optionsDb),\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5708, "column": 0}, "map": {"version":3,"file":"CordovaQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/cordova/CordovaQueryRunner.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { TypeORMError } from \"../../error\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { CordovaDriver } from \"./CordovaDriver\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CordovaQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: CordovaDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: CordovaDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = await this.connect()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        await this.broadcaster.broadcast(\"BeforeQuery\", query, parameters)\n\n        const broadcasterResult = new BroadcasterResult()\n        const queryStartTime = Date.now()\n\n        try {\n            const raw = await new Promise<any>(async (ok, fail) => {\n                databaseConnection.executeSql(\n                    query,\n                    parameters,\n                    (raw: any) => ok(raw),\n                    (err: any) => fail(err),\n                )\n            })\n\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime =\n                this.driver.options.maxQueryExecutionTime\n            const queryEndTime = Date.now()\n            const queryExecutionTime = queryEndTime - queryStartTime\n\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                true,\n                queryExecutionTime,\n                raw,\n                undefined,\n            )\n\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            ) {\n                this.driver.connection.logger.logQuerySlow(\n                    queryExecutionTime,\n                    query,\n                    parameters,\n                    this,\n                )\n            }\n\n            const result = new QueryResult()\n\n            if (query.substr(0, 11) === \"INSERT INTO\") {\n                result.raw = raw.insertId\n            } else {\n                const resultSet = []\n                for (let i = 0; i < raw.rows.length; i++) {\n                    resultSet.push(raw.rows.item(i))\n                }\n\n                result.records = resultSet\n                result.raw = resultSet\n            }\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                false,\n                undefined,\n                undefined,\n                err,\n            )\n\n            throw new QueryFailedError(query, parameters, err)\n        } finally {\n            await broadcasterResult.wait()\n        }\n    }\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     // todo: implement new syntax\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<InsertResult>(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(sql, parameters, this);\n            const __this = this;\n            const databaseConnection = await this.connect();\n            databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\n                    const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\n                    if (!value) return map;\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n                }, {} as ObjectLiteral);\n\n                ok({\n                    result: undefined,\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n                });\n            }, (err: any) => {\n                __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\n                fail(err);\n            });\n        });\n    }*/\n\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async startTransaction(): Promise<void> {\n        throw new TypeORMError(\n            \"Transactions are not supported by the Cordova driver\",\n        )\n    }\n\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async commitTransaction(): Promise<void> {\n        throw new TypeORMError(\n            \"Transactions are not supported by the Cordova driver\",\n        )\n    }\n\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async rollbackTransaction(): Promise<void> {\n        throw new TypeORMError(\n            \"Transactions are not supported by the Cordova driver\",\n        )\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n        try {\n            const selectViewDropsQuery = `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`\n            const dropViewQueries: ObjectLiteral[] = await this.query(\n                selectViewDropsQuery,\n            )\n\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`\n            const dropTableQueries: ObjectLiteral[] = await this.query(\n                selectTableDropsQuery,\n            )\n\n            await Promise.all(\n                dropViewQueries.map((q) => this.query(q[\"query\"])),\n            )\n            await Promise.all(\n                dropTableQueries.map((q) => this.query(q[\"query\"])),\n            )\n        } finally {\n            await this.query(`PRAGMA foreign_keys = ON`)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(\n        objectLiteral: ObjectLiteral,\n        startIndex: number = 0,\n    ): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\")\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5866, "column": 0}, "map": {"version":3,"file":"CordovaDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/cordova/CordovaDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { CordovaConnectionOptions } from \"./CordovaConnectionOptions\"\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\n// needed for typescript compiler\ninterface Window {\n    sqlitePlugin: any\n}\n\ndeclare let window: Window\n\nexport class CordovaDriver extends AbstractSqliteDriver {\n    options: CordovaConnectionOptions\n\n    transactionSupport = \"none\" as const\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        this.database = this.options.database\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.close(ok, fail)\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new CordovaQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const options = Object.assign(\n            {},\n            {\n                name: this.options.database,\n                location: this.options.location,\n            },\n            this.options.extra || {},\n        )\n\n        const connection = await new Promise<any>((resolve, fail) => {\n            this.sqlite.openDatabase(\n                options,\n                (db: any) => resolve(db),\n                (err: any) => fail(err),\n            )\n        })\n\n        await new Promise<void>((ok, fail) => {\n            // we need to enable foreign keys in sqlite to make sure all foreign key related features\n            // working properly. this also makes onDelete to work with sqlite.\n            connection.executeSql(\n                `PRAGMA foreign_keys = ON`,\n                [],\n                () => ok(),\n                (err: any) => fail(err),\n            )\n        })\n\n        return connection\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const sqlite = this.options.driver || window.sqlitePlugin\n            this.sqlite = sqlite\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\n                \"Cordova-SQLite\",\n                \"cordova-sqlite-storage\",\n            )\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,4EAA8E;AAE9E,MAAA,uDAAyD;AAGzD,MAAA,yFAA2F;AAU3F,MAAa,aAAc,SAAQ,uBAAA,oBAAoB;IAKnD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB,CAAA;QAC9B,KAAK,CAAC,UAAU,CAAC,CAAA;QAPrB,IAAA,CAAA,kBAAkB,GAAG,MAAe,CAAA;QAShC,gCAAgC;QAChC,iEAAiE;QACjE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAA;QAErC,sBAAsB;QACtB,IAAI,CAAC,gBAAgB,EAAE,CAAA;IAC3B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,CAAC,UAAU,GAAA;QACZ,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;QAE5B,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACH,iBAAiB,CAAC,IAAqB,EAAA;QACnC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,GAAG,IAAI,qBAAA,kBAAkB,CAAC,IAAI,CAAC,CAAA;QAEtE,OAAO,IAAI,CAAC,WAAW,CAAA;IAC3B,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG,CACO,KAAK,CAAC,wBAAwB,GAAA;QACpC,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CACzB,CAAA,CAAE,EACF;YACI,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC3B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;SAClC,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAA,CAAE,CAC3B,CAAA;QAED,MAAM,UAAU,GAAG,MAAM,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE;YACxD,IAAI,CAAC,MAAM,CAAC,YAAY,CACpB,OAAO,EACP,CAAC,EAAO,EAAE,CAAG,CAAD,MAAQ,CAAC,EAAE,CAAC,EACxB,CAAC,GAAQ,EAAE,CAAG,CAAD,GAAK,CAAC,GAAG,CAAC,CAC1B,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,MAAM,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YACjC,yFAAyF;YACzF,kEAAkE;YAClE,UAAU,CAAC,UAAU,CACjB,CAAA,wBAAA,CAA0B,EAC1B,EAAE,EACF,GAAG,CAAG,CAAD,CAAG,EAAE,EACV,CAAC,GAAQ,EAAE,CAAG,CAAD,GAAK,CAAC,GAAG,CAAC,CAC1B,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,OAAO,UAAU,CAAA;IACrB,CAAC;IAED;;OAEG,CACO,gBAAgB,GAAA;QACtB,IAAI,CAAC;YACD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAA;YACzD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACxB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;YACT,MAAM,IAAI,iCAAA,8BAA8B,CACpC,gBAAgB,EAChB,wBAAwB,CAC3B,CAAA;QACL,CAAC;IACL,CAAC;CACJ;AAjGD,QAAA,aAAA,GAAA,cAiGC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5941, "column": 0}, "map": {"version":3,"file":"ReactNativeQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/react-native/ReactNativeQueryRunner.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { ReactNativeDriver } from \"./ReactNativeDriver\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    // @ts-ignore temporary, we need to fix the issue with the AbstractSqliteDriver and circular errors\n    driver: ReactNativeDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: ReactNativeDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = await this.connect()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        await this.broadcaster.broadcast(\"BeforeQuery\", query, parameters)\n\n        const broadcasterResult = new BroadcasterResult()\n\n        const queryStartTime = Date.now()\n\n        return new Promise(async (ok, fail) => {\n            try {\n                databaseConnection.executeSql(\n                    query,\n                    parameters,\n                    async (raw: any) => {\n                        // log slow queries if maxQueryExecution time is set\n                        const maxQueryExecutionTime =\n                            this.driver.options.maxQueryExecutionTime\n                        const queryEndTime = Date.now()\n                        const queryExecutionTime = queryEndTime - queryStartTime\n                        this.broadcaster.broadcastAfterQueryEvent(\n                            broadcasterResult,\n                            query,\n                            parameters,\n                            true,\n                            queryExecutionTime,\n                            raw,\n                            undefined,\n                        )\n\n                        if (\n                            maxQueryExecutionTime &&\n                            queryExecutionTime > maxQueryExecutionTime\n                        )\n                            this.driver.connection.logger.logQuerySlow(\n                                queryExecutionTime,\n                                query,\n                                parameters,\n                                this,\n                            )\n\n                        if (broadcasterResult.promises.length > 0)\n                            await Promise.all(broadcasterResult.promises)\n\n                        const result = new QueryResult()\n\n                        if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                            result.affected = raw.rowsAffected\n                        }\n\n                        if (raw?.hasOwnProperty(\"rows\")) {\n                            const records = []\n                            for (let i = 0; i < raw.rows.length; i++) {\n                                records.push(raw.rows.item(i))\n                            }\n\n                            result.raw = records\n                            result.records = records\n                        }\n\n                        // return id of inserted row, if query was insert statement.\n                        if (query.substr(0, 11) === \"INSERT INTO\") {\n                            result.raw = raw.insertId\n                        }\n\n                        if (useStructuredResult) {\n                            ok(result)\n                        } else {\n                            ok(result.raw)\n                        }\n                    },\n                    async (err: any) => {\n                        this.driver.connection.logger.logQueryError(\n                            err,\n                            query,\n                            parameters,\n                            this,\n                        )\n                        this.broadcaster.broadcastAfterQueryEvent(\n                            broadcasterResult,\n                            query,\n                            parameters,\n                            false,\n                            undefined,\n                            undefined,\n                            err,\n                        )\n\n                        fail(new QueryFailedError(query, parameters, err))\n                    },\n                )\n            } catch (err) {\n                fail(err)\n            } finally {\n                await broadcasterResult.wait()\n            }\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(\n        objectLiteral: ObjectLiteral,\n        startIndex: number = 0,\n    ): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\")\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6041, "column": 0}, "map": {"version":3,"file":"ReactNativeDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/react-native/ReactNativeDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { DriverPackageNotInstalledError } from \"../../error\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\nimport { ReactNativeConnectionOptions } from \"./ReactNativeConnectionOptions\"\nimport { ReactNativeQueryRunner } from \"./ReactNativeQueryRunner\"\n\ntype DatabasesMap = Record<\n    string,\n    {\n        attachFilepathAbsolute: string\n        attachFilepathRelative: string\n        attachHandle: string\n    }\n>\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class ReactNativeDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Sqlite has a single QueryRunner because it works on a single database connection.\n     */\n    queryRunner?: QueryRunner\n\n    /**\n     * Real database connection with sqlite database.\n     */\n    databaseConnection: any\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: ReactNativeConnectionOptions\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport: \"simple\" | \"nested\" | \"none\" = \"nested\"\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n     * @see https://sqlite.org/datatype3.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"unsigned big int\",\n        \"int2\",\n        \"int8\",\n        \"integer\",\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"clob\",\n        \"text\",\n        \"blob\",\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"boolean\",\n        \"date\",\n        \"time\",\n        \"datetime\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = [\"on-conflict-do-update\"]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"character\",\n        \"varchar\",\n        \"varying character\",\n        \"nchar\",\n        \"native character\",\n        \"nvarchar\",\n        \"text\",\n        \"blob\",\n        \"clob\",\n    ]\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n        \"date\",\n        \"time\",\n        \"datetime\",\n    ]\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"real\",\n        \"double\",\n        \"double precision\",\n        \"float\",\n        \"real\",\n        \"numeric\",\n        \"decimal\",\n    ]\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDateDefault: \"datetime('now')\",\n        updateDate: \"datetime\",\n        updateDateDefault: \"datetime('now')\",\n        deleteDate: \"datetime\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"text\",\n        cacheResult: \"text\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"text\",\n    }\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults\n\n    /**\n     * No documentation specifying a maximum length for identifiers could be found\n     * for SQLite.\n     */\n    maxAliasLength?: number\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n        requiresRecursiveHint: true,\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Any attached databases (excepting default 'main')\n     */\n    attachedDatabases: DatabasesMap = {}\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as ReactNativeConnectionOptions\n        // this.database = DriverUtils.buildDriverOptions(this.options).database\n        this.database = this.options.database\n\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Abstract\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new ReactNativeQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection()\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined\n            this.databaseConnection.close(ok, fail)\n        })\n    }\n\n    hasAttachedDatabases(): boolean {\n        return !!Object.keys(this.attachedDatabases).length\n    }\n\n    getAttachedDatabaseHandleByRelativePath(path: string): string | undefined {\n        return this.attachedDatabases?.[path]?.attachHandle\n    }\n\n    getAttachedDatabasePathRelativeByHandle(\n        handle: string,\n    ): string | undefined {\n        return Object.values(this.attachedDatabases).find(\n            ({ attachHandle }) => handle === attachHandle,\n        )?.attachFilepathRelative\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (\n            columnMetadata.type === Boolean ||\n            columnMetadata.type === \"boolean\"\n        ) {\n            return value === true ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value)\n        } else if (\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date\n        ) {\n            // to string conversation needs because SQLite stores date as integer number, when date came as Object\n            // TODO: think about `toUTC` conversion\n            return DateUtils.mixedDateToUtcDatetimeString(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value)\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be hydrated, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (\n            columnMetadata.type === Boolean ||\n            columnMetadata.type === \"boolean\"\n        ) {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date\n        ) {\n            /**\n             * Fix date conversion issue\n             *\n             * If the format of the date string is \"2018-03-14 02:33:33.906\", Safari (and iOS WKWebView) will convert it to an invalid date object.\n             * We need to modify the date string to \"2018-03-14T02:33:33.906Z\" and Safari will convert it correctly.\n             *\n             * ISO 8601\n             * https://www.w3.org/TR/NOTE-datetime\n             */\n            if (value && typeof value === \"string\") {\n                // There are various valid time string formats a sqlite time string might have:\n                // https://www.sqlite.org/lang_datefunc.html\n                // There are two separate fixes we may need to do:\n                //   1) Add 'T' separator if space is used instead\n                //   2) Add 'Z' UTC suffix if no timezone or offset specified\n\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {\n                    value = value.replace(\" \", \"T\")\n                }\n                if (\n                    /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(\n                        value,\n                    )\n                ) {\n                    value += \"Z\"\n                }\n            }\n\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => {\n                // Mapping boolean values to their numeric representation\n                if (typeof nativeParameters[key] === \"boolean\") {\n                    return nativeParameters[key] === true ? 1 : 0\n                }\n\n                if (nativeParameters[key] instanceof Date) {\n                    return DateUtils.mixedDateToUtcDatetimeString(\n                        nativeParameters[key],\n                    )\n                }\n\n                return nativeParameters[key]\n            },\n        )\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                const value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                } else if (typeof value === \"number\") {\n                    return String(value)\n                }\n\n                // Sqlite does not have a boolean data type so we have to transform\n                // it to 1 or 0\n                if (typeof value === \"boolean\") {\n                    escapedParameters.push(+value)\n                    return this.createParameter(\n                        key,\n                        escapedParameters.length - 1,\n                    )\n                }\n\n                if (value instanceof Date) {\n                    escapedParameters.push(\n                        DateUtils.mixedDateToUtcDatetimeString(value),\n                    )\n                    return this.createParameter(\n                        key,\n                        escapedParameters.length - 1,\n                    )\n                }\n\n                escapedParameters.push(value)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return '\"' + columnName + '\"'\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     *\n     * Returns only simple table name because all inherited drivers does not supports schema and database.\n     */\n    buildTableName(\n        tableName: string,\n        schema?: string,\n        database?: string,\n    ): string {\n        return tableName\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = undefined\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(\n                target.schema\n                    ? `\"${target.schema}\".\"${target.name}\"`\n                    : target.name,\n            )\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        if (parts.length === 3) {\n            return {\n                database: parts[0] || driverDatabase,\n                schema: parts[1] || driverSchema,\n                tableName: parts[2],\n            }\n        } else if (parts.length === 2) {\n            const database =\n                this.getAttachedDatabasePathRelativeByHandle(parts[0]) ??\n                driverDatabase\n            return {\n                database: database,\n                schema: parts[0],\n                tableName: parts[1],\n            }\n        } else {\n            return {\n                database: driverDatabase,\n                schema: driverSchema,\n                tableName: target,\n            }\n        }\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\"\n        } else if (column.type === String) {\n            return \"varchar\"\n        } else if (column.type === Date) {\n            return \"datetime\"\n        } else if (column.type === Boolean) {\n            return \"boolean\"\n        } else if (column.type === \"uuid\") {\n            return \"varchar\"\n        } else if (column.type === \"simple-array\") {\n            return \"text\"\n        } else if (column.type === \"simple-json\") {\n            return \"text\"\n        } else if (column.type === \"simple-enum\") {\n            return \"varchar\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            return defaultValue()\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(\n            (uq) => uq.columns.length === 1 && uq.columns[0] === column,\n        )\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata): string {\n        return column.length ? column.length.toString() : \"\"\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type\n        if (column.enum) {\n            return \"varchar\"\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\"\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\"\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += \"(\" + column.precision + \")\"\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(\n        metadata: EntityMetadata,\n        insertResult: any,\n        entityIndex: number,\n        entityNum: number,\n    ) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                let value: any\n                if (\n                    generatedColumn.generationStrategy === \"increment\" &&\n                    insertResult\n                ) {\n                    // NOTE: When INSERT statement is successfully completed, the last inserted row ID is returned.\n                    // see also: SqliteQueryRunner.query()\n                    value = insertResult - entityNum + entityIndex + 1\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                    //     value = insertValue[generatedColumn.databaseName];\n                }\n\n                if (!value) return map\n                return OrmUtils.mergeDeep(\n                    map,\n                    generatedColumn.createValueMap(value),\n                )\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            const isColumnChanged =\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadata.length ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                this.normalizeDefault(columnMetadata) !== tableColumn.default ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(\n                        tableColumn.enum,\n                        columnMetadata.enum.map((val) => val + \"\"),\n                    )) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         columnMetadata.length,\n            //     )\n            //     console.log(\n            //         \"precision:\",\n            //         tableColumn.precision,\n            //         columnMetadata.precision,\n            //     )\n            //     console.log(\"scale:\", tableColumn.scale, columnMetadata.scale)\n            //     console.log(\n            //         \"default:\",\n            //         this.normalizeDefault(columnMetadata),\n            //         columnMetadata.default,\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         tableColumn.asExpression,\n            //         columnMetadata.asExpression,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"enum:\",\n            //         tableColumn.enum &&\n            //             columnMetadata.enum &&\n            //             !OrmUtils.isArraysEqual(\n            //                 tableColumn.enum,\n            //                 columnMetadata.enum.map((val) => val + \"\"),\n            //             ),\n            //     )\n            //     console.log(\n            //         \"isGenerated:\",\n            //         tableColumn.isGenerated,\n            //         columnMetadata.isGenerated,\n            //     )\n            // }\n\n            return isColumnChanged\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        // return \"$\" + (index + 1);\n        return \"?\"\n        // return \"$\" + parameterName;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign(\n                {},\n                {\n                    name: this.options.database,\n                    location: this.options.location,\n                },\n                this.options.extra || {},\n            )\n\n            this.sqlite.openDatabase(\n                options,\n                (db: any) => {\n                    const databaseConnection = db\n\n                    // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                    // working properly. this also makes onDelete work with sqlite.\n                    databaseConnection.executeSql(\n                        `PRAGMA foreign_keys = ON`,\n                        [],\n                        (result: any) => {\n                            ok(databaseConnection)\n                        },\n                        (error: any) => {\n                            fail(error)\n                        },\n                    )\n                },\n                (error: any) => {\n                    fail(error)\n                },\n            )\n        })\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const sqlite =\n                this.options.driver || require(\"react-native-sqlite-storage\")\n            this.sqlite = sqlite\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\n                \"React-Native\",\n                \"react-native-sqlite-storage\",\n            )\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAGA,MAAA,8CAAgD;AAEhD,MAAA,0EAA4E;AAQ5E,MAAA,4CAA8C;AAC9C,MAAA,wEAA0E;AAE1E,MAAA,iCAA4D;AAI5D,MAAA,0DAA4D;AAG5D,MAAA,+DAAiE;AAWjE;;GAEG,CACH,MAAa,iBAAiB;IA4M1B,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB,CAAA;QA9KlC;;WAEG,CACH,IAAA,CAAA,YAAY,GAAY,KAAK,CAAA;QAO7B;;WAEG,CACH,IAAA,CAAA,WAAW,GAAG,IAAI,CAAA;QAElB;;WAEG,CACH,IAAA,CAAA,kBAAkB,GAAiC,QAAQ,CAAA;QAE3D;;;;;WAKG,CACH,IAAA,CAAA,kBAAkB,GAAiB;YAC/B,KAAK;YACL,SAAS;YACT,SAAS;YACT,UAAU;YACV,WAAW;YACX,QAAQ;YACR,kBAAkB;YAClB,MAAM;YACN,MAAM;YACN,SAAS;YACT,WAAW;YACX,SAAS;YACT,mBAAmB;YACnB,OAAO;YACP,kBAAkB;YAClB,UAAU;YACV,MAAM;YACN,MAAM;YACN,MAAM;YACN,MAAM;YACN,MAAM;YACN,QAAQ;YACR,kBAAkB;YAClB,OAAO;YACP,MAAM;YACN,SAAS;YACT,SAAS;YACT,SAAS;YACT,MAAM;YACN,MAAM;YACN,UAAU;SACb,CAAA;QAED;;WAEG,CACH,IAAA,CAAA,oBAAoB,GAAiB;YAAC,uBAAuB;SAAC,CAAA;QAE9D;;WAEG,CACH,IAAA,CAAA,qBAAqB,GAAiB;YAClC,WAAW;YACX,SAAS;YACT,mBAAmB;YACnB,OAAO;YACP,kBAAkB;YAClB,UAAU;YACV,MAAM;YACN,MAAM;YACN,MAAM;SACT,CAAA;QAED;;WAEG,CACH,IAAA,CAAA,YAAY,GAAiB,EAAE,CAAA;QAE/B;;WAEG,CACH,IAAA,CAAA,wBAAwB,GAAiB;YACrC,MAAM;YACN,QAAQ;YACR,kBAAkB;YAClB,OAAO;YACP,MAAM;YACN,SAAS;YACT,SAAS;YACT,MAAM;YACN,MAAM;YACN,UAAU;SACb,CAAA;QAED;;WAEG,CACH,IAAA,CAAA,oBAAoB,GAAiB;YACjC,MAAM;YACN,QAAQ;YACR,kBAAkB;YAClB,OAAO;YACP,MAAM;YACN,SAAS;YACT,SAAS;SACZ,CAAA;QAED;;;WAGG,CACH,IAAA,CAAA,eAAe,GAAsB;YACjC,UAAU,EAAE,UAAU;YACtB,iBAAiB,EAAE,iBAAiB;YACpC,UAAU,EAAE,UAAU;YACtB,iBAAiB,EAAE,iBAAiB;YACpC,UAAU,EAAE,UAAU;YACtB,kBAAkB,EAAE,IAAI;YACxB,OAAO,EAAE,SAAS;YAClB,SAAS,EAAE,SAAS;YACpB,WAAW,EAAE,SAAS;YACtB,aAAa,EAAE,SAAS;YACxB,kBAAkB,EAAE,QAAQ;YAC5B,OAAO,EAAE,KAAK;YACd,eAAe,EAAE,SAAS;YAC1B,SAAS,EAAE,QAAQ;YACnB,aAAa,EAAE,KAAK;YACpB,UAAU,EAAE,MAAM;YAClB,WAAW,EAAE,MAAM;YACnB,YAAY,EAAE,SAAS;YACvB,gBAAgB,EAAE,SAAS;YAC3B,cAAc,EAAE,SAAS;YACzB,aAAa,EAAE,SAAS;YACxB,YAAY,EAAE,SAAS;YACvB,aAAa,EAAE,MAAM;SACxB,CAAA;QAcD,IAAA,CAAA,eAAe,GAAoB;YAC/B,OAAO,EAAE,IAAI;YACb,qBAAqB,EAAE,IAAI;SAC9B,CAAA;QAED,4EAA4E;QAC5E,uBAAuB;QACvB,4EAA4E;QAE5E;;WAEG,CACH,IAAA,CAAA,iBAAiB,GAAiB,CAAA,CAAE,CAAA;QAOhC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAuC,CAAA;QACjE,wEAAwE;QACxE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAA;QAErC,IAAI,CAAC,gBAAgB,EAAE,CAAA;IAC3B,CAAC;IAED,4EAA4E;IAC5E,kBAAkB;IAClB,4EAA4E;IAE5E;;OAEG,CACH,iBAAiB,CAAC,IAAqB,EAAA;QACnC,IAAI,CAAC,IAAI,CAAC,WAAW,EACjB,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAA,sBAAsB,CAAC,IAAI,CAAC,CAAA;QAEvD,OAAO,IAAI,CAAC,WAAW,CAAA;IAC3B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,CAAC,OAAO,GAAA;QACT,IAAI,CAAC,kBAAkB,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAA;IACnE,CAAC;IAED;;OAEG,CACH,YAAY,GAAA;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG,CACH,KAAK,CAAC,UAAU,GAAA;QACZ,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;YAC5B,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;IACN,CAAC;IAED,oBAAoB,GAAA;QAChB,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAA;IACvD,CAAC;IAED,uCAAuC,CAAC,IAAY,EAAA;QAChD,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,EAAE,YAAY,CAAA;IACvD,CAAC;IAED,uCAAuC,CACnC,MAAc,EAAA;QAEd,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAC7C,CAAC,EAAE,YAAY,EAAE,EAAE,CAAG,CAAD,KAAO,KAAK,YAAY,CAChD,EAAE,sBAAsB,CAAA;IAC7B,CAAC;IAED;;OAEG,CACH,mBAAmB,GAAA;QACf,OAAO,IAAI,qBAAA,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG,CACH,sBAAsB,CAAC,KAAU,EAAE,cAA8B,EAAA;QAC7D,IAAI,cAAc,CAAC,WAAW,EAC1B,KAAK,GAAG,yBAAA,sBAAsB,CAAC,WAAW,CACtC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR,CAAA;QAEL,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,OAAO,KAAK,CAAA;QAEvD,IACI,cAAc,CAAC,IAAI,KAAK,OAAO,IAC/B,cAAc,CAAC,IAAI,KAAK,SAAS,EACnC,CAAC;YACC,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACjC,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,OAAO,YAAA,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QACjD,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,OAAO,YAAA,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QACjD,CAAC,MAAM,IACH,cAAc,CAAC,IAAI,KAAK,UAAU,IAClC,cAAc,CAAC,IAAI,KAAK,IAAI,EAC9B,CAAC;YACC,sGAAsG;YACtG,uCAAuC;YACvC,OAAO,YAAA,SAAS,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAA;QACxD,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YAChD,OAAO,YAAA,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAA;QAC/C,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC/C,OAAO,YAAA,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAC9C,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC/C,OAAO,YAAA,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAC9C,CAAC;QAED,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG,CACH,oBAAoB,CAAC,KAAU,EAAE,cAA8B,EAAA;QAC3D,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EACrC,OAAO,cAAc,CAAC,WAAW,GAC3B,yBAAA,sBAAsB,CAAC,aAAa,CAChC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR,GACD,KAAK,CAAA;QAEf,IACI,cAAc,CAAC,IAAI,KAAK,OAAO,IAC/B,cAAc,CAAC,IAAI,KAAK,SAAS,EACnC,CAAC;YACC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;QAChC,CAAC,MAAM,IACH,cAAc,CAAC,IAAI,KAAK,UAAU,IAClC,cAAc,CAAC,IAAI,KAAK,IAAI,EAC9B,CAAC;YACC;;;;;;;;eAQG,CACH,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBACrC,+EAA+E;gBAC/E,4CAA4C;gBAC5C,kDAAkD;gBAClD,kDAAkD;gBAClD,6DAA6D;gBAE7D,IAAI,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC9C,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;gBACnC,CAAC;gBACD,IACI,mDAAmD,CAAC,IAAI,CACpD,KAAK,CACR,EACH,CAAC;oBACC,KAAK,IAAI,GAAG,CAAA;gBAChB,CAAC;YACL,CAAC;YAED,KAAK,GAAG,YAAA,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAClD,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,KAAK,GAAG,YAAA,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAClD,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,KAAK,GAAG,YAAA,SAAS,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAA;QAC9C,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YAChD,KAAK,GAAG,YAAA,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAA;QAChD,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC/C,KAAK,GAAG,YAAA,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAC/C,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC/C,KAAK,GAAG,YAAA,SAAS,CAAC,kBAAkB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAA;QAC/D,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,8BAA8B;YAC9B,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;QACpD,CAAC;QAED,IAAI,cAAc,CAAC,WAAW,EAC1B,KAAK,GAAG,yBAAA,sBAAsB,CAAC,aAAa,CACxC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR,CAAA;QAEL,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;;OAGG,CACH,yBAAyB,CACrB,GAAW,EACX,UAAyB,EACzB,gBAA+B,EAAA;QAE/B,MAAM,iBAAiB,GAAU,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAC9D,CAAC,GAAG,EAAE,EAAE;YACJ,yDAAyD;YACzD,IAAI,OAAO,gBAAgB,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE,CAAC;gBAC7C,OAAO,gBAAgB,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YACjD,CAAC;YAED,IAAI,gBAAgB,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE,CAAC;gBACxC,OAAO,YAAA,SAAS,CAAC,4BAA4B,CACzC,gBAAgB,CAAC,GAAG,CAAC,CACxB,CAAA;YACL,CAAC;YAED,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAA;QAChC,CAAC,CACJ,CAAA;QAED,IAAI,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,EAC9C,OAAO;YAAC,GAAG;YAAE,iBAAiB;SAAC,CAAA;QAEnC,GAAG,GAAG,GAAG,CAAC,OAAO,CACb,6BAA6B,EAC7B,CAAC,IAAI,EAAE,OAAe,EAAE,GAAW,EAAU,EAAE;YAC3C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAClC,OAAO,IAAI,CAAA;YACf,CAAC;YAED,MAAM,KAAK,GAAQ,UAAU,CAAC,GAAG,CAAC,CAAA;YAElC,IAAI,OAAO,EAAE,CAAC;gBACV,OAAO,KAAK,CACP,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;oBACZ,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;oBACzB,OAAO,IAAI,CAAC,eAAe,CACvB,GAAG,EACH,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAC/B,CAAA;gBACL,CAAC,CAAC,CACD,IAAI,CAAC,IAAI,CAAC,CAAA;YACnB,CAAC;YAED,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE,CAAC;gBAC9B,OAAO,KAAK,EAAE,CAAA;YAClB,CAAC,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBACnC,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;YACxB,CAAC;YAED,mEAAmE;YACnE,eAAe;YACf,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC7B,iBAAiB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAA;gBAC9B,OAAO,IAAI,CAAC,eAAe,CACvB,GAAG,EACH,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAC/B,CAAA;YACL,CAAC;YAED,IAAI,KAAK,YAAY,IAAI,EAAE,CAAC;gBACxB,iBAAiB,CAAC,IAAI,CAClB,YAAA,SAAS,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAChD,CAAA;gBACD,OAAO,IAAI,CAAC,eAAe,CACvB,GAAG,EACH,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAC/B,CAAA;YACL,CAAC;YAED,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAC7B,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAClE,CAAC,CACJ,CAAA,CAAC,kEAAkE;QACpE,OAAO;YAAC,GAAG;YAAE,iBAAiB;SAAC,CAAA;IACnC,CAAC;IAED;;OAEG,CACH,MAAM,CAAC,UAAkB,EAAA;QACrB,OAAO,GAAG,GAAG,UAAU,GAAG,GAAG,CAAA;IACjC,CAAC;IAED;;;;;OAKG,CACH,cAAc,CACV,SAAiB,EACjB,MAAe,EACf,QAAiB,EAAA;QAEjB,OAAO,SAAS,CAAA;IACpB,CAAC;IAED;;OAEG,CACH,cAAc,CACV,MAAgE,EAAA;QAEhE,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAA;QACpC,MAAM,YAAY,GAAG,SAAS,CAAA;QAE9B,IAAI,kBAAA,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,kBAAA,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YACpE,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAC9B,MAAM,CAAC,MAAM,GACP,CAAA,CAAA,EAAI,MAAM,CAAC,MAAM,CAAA,GAAA,EAAM,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,GACrC,MAAM,CAAC,IAAI,CACpB,CAAA;YAED,OAAO;gBACH,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,cAAc;gBAC9D,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,YAAY;gBACtD,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,IAAI,kBAAA,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAA;YAE9D,OAAO;gBACH,QAAQ,EACJ,MAAM,CAAC,kBAAkB,IACzB,MAAM,CAAC,QAAQ,IACf,cAAc;gBAClB,MAAM,EACF,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,MAAM,IAAI,YAAY;gBAC5D,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,IAAI,kBAAA,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3C,2CAA2C;YAE3C,OAAO;gBACH,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,cAAc;gBAC3C,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,YAAY;gBACrC,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAE/B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACrB,OAAO;gBACH,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,cAAc;gBACpC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,YAAY;gBAChC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;aACtB,CAAA;QACL,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,MAAM,QAAQ,GACV,IAAI,CAAC,uCAAuC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IACtD,cAAc,CAAA;YAClB,OAAO;gBACH,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;gBAChB,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;aACtB,CAAA;QACL,CAAC,MAAM,CAAC;YACJ,OAAO;gBACH,QAAQ,EAAE,cAAc;gBACxB,MAAM,EAAE,YAAY;gBACpB,SAAS,EAAE,MAAM;aACpB,CAAA;QACL,CAAC;IACL,CAAC;IAED;;OAEG,CACH,aAAa,CAAC,MAKb,EAAA;QACG,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;YAClD,OAAO,SAAS,CAAA;QACpB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAChC,OAAO,SAAS,CAAA;QACpB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;YAC9B,OAAO,UAAU,CAAA;QACrB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACjC,OAAO,SAAS,CAAA;QACpB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAChC,OAAO,SAAS,CAAA;QACpB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YACxC,OAAO,MAAM,CAAA;QACjB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YACvC,OAAO,MAAM,CAAA;QACjB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YACvC,OAAO,SAAS,CAAA;QACpB,CAAC,MAAM,CAAC;YACJ,OAAQ,MAAM,CAAC,IAAe,IAAI,EAAE,CAAA;QACxC,CAAC;IACL,CAAC;IAED;;OAEG,CACH,gBAAgB,CAAC,cAA8B,EAAA;QAC3C,MAAM,YAAY,GAAG,cAAc,CAAC,OAAO,CAAA;QAE3C,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO,EAAE,GAAG,YAAY,CAAA;QAC5B,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,SAAS,EAAE,CAAC;YACpC,OAAO,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAA;QACnC,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,UAAU,EAAE,CAAC;YACrC,OAAO,YAAY,EAAE,CAAA;QACzB,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO,CAAA,CAAA,EAAI,YAAY,CAAA,CAAA,CAAG,CAAA;QAC9B,CAAC;QAED,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YACtD,OAAO,SAAS,CAAA;QACpB,CAAC;QAED,OAAO,GAAG,YAAY,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG,CACH,iBAAiB,CAAC,MAAsB,EAAA;QACpC,OAAO,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CACrC,CAAC,EAAE,EAAE,CAAG,CAAD,CAAG,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,CAC9D,CAAA;IACL,CAAC;IAED;;OAEG,CACH,eAAe,CAAC,MAAsB,EAAA;QAClC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAA;IACxD,CAAC;IAED;;OAEG,CACH,cAAc,CAAC,MAAmB,EAAA;QAC9B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAA;QACtB,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;YACd,OAAO,SAAS,CAAA;QACpB,CAAC;QACD,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,GAAG,GAAG,CAAA;QACrC,CAAC,MAAM,IACH,MAAM,CAAC,SAAS,KAAK,IAAI,IACzB,MAAM,CAAC,SAAS,KAAK,SAAS,IAC9B,MAAM,CAAC,KAAK,KAAK,IAAI,IACrB,MAAM,CAAC,KAAK,KAAK,SAAS,EAC5B,CAAC;YACC,IAAI,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,KAAK,GAAG,GAAG,CAAA;QAC7D,CAAC,MAAM,IACH,MAAM,CAAC,SAAS,KAAK,IAAI,IACzB,MAAM,CAAC,SAAS,KAAK,SAAS,EAChC,CAAC;YACC,IAAI,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,GAAG,CAAA;QACxC,CAAC;QAED,IAAI,MAAM,CAAC,OAAO,EAAE,IAAI,IAAI,QAAQ,CAAA;QAEpC,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;;;OAIG,CACH,sBAAsB,GAAA;QAClB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;;;OAIG,CACH,qBAAqB,GAAA;QACjB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG,CACH,kBAAkB,CACd,QAAwB,EACxB,YAAiB,EACjB,WAAmB,EACnB,SAAiB,EAAA;QAEjB,MAAM,YAAY,GAAG,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CACjD,CAAC,GAAG,EAAE,eAAe,EAAE,EAAE;YACrB,IAAI,KAAU,CAAA;YACd,IACI,eAAe,CAAC,kBAAkB,KAAK,WAAW,IAClD,YAAY,EACd,CAAC;gBACC,+FAA+F;gBAC/F,sCAAsC;gBACtC,KAAK,GAAG,YAAY,GAAG,SAAS,GAAG,WAAW,GAAG,CAAC,CAAA;YAClD,8DAA8D;YAC9D,yDAAyD;YAC7D,CAAC;YAED,IAAI,CAAC,KAAK,EAAE,OAAO,GAAG,CAAA;YACtB,OAAO,WAAA,QAAQ,CAAC,SAAS,CACrB,GAAG,EACH,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,CACxC,CAAA;QACL,CAAC,EACD,CAAA,CAAmB,CACtB,CAAA;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAA;IAC1E,CAAC;IAED;;;OAGG,CACH,kBAAkB,CACd,YAA2B,EAC3B,eAAiC,EAAA;QAEjC,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,EAAE;YAC7C,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CACjC,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE,CAAC,IAAI,KAAK,cAAc,CAAC,YAAY,CAChD,CAAA;YACD,IAAI,CAAC,WAAW,EAAE,OAAO,KAAK,CAAA,CAAC,4DAA4D;YAE3F,MAAM,eAAe,GACjB,WAAW,CAAC,IAAI,KAAK,cAAc,CAAC,YAAY,IAChD,WAAW,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IACvD,WAAW,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,IAC5C,WAAW,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,IAClD,WAAW,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK,IAC1C,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,KAAK,WAAW,CAAC,OAAO,IAC7D,WAAW,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,IAClD,WAAW,CAAC,UAAU,KAAK,cAAc,CAAC,UAAU,IACpD,WAAW,CAAC,aAAa,KAAK,cAAc,CAAC,aAAa,IAC1D,WAAW,CAAC,YAAY,KAAK,cAAc,CAAC,YAAY,IACxD,WAAW,CAAC,QAAQ,KAChB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IACzC,WAAW,CAAC,IAAI,IACb,cAAc,CAAC,IAAI,IACnB,CAAC,WAAA,QAAQ,CAAC,aAAa,CACnB,WAAW,CAAC,IAAI,EAChB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAG,CAAD,EAAI,GAAG,EAAE,CAAC,CAC7C,CAAC,GACL,cAAc,CAAC,kBAAkB,KAAK,MAAM,IACzC,WAAW,CAAC,WAAW,KAAK,cAAc,CAAC,WAAW,CAAC,CAAA;YAE/D,gBAAgB;YAChB,yBAAyB;YACzB,qEAAqE;YACrE,mBAAmB;YACnB,mBAAmB;YACnB,4BAA4B;YAC5B,uCAAuC;YACvC,QAAQ;YACR,mBAAmB;YACnB,mBAAmB;YACnB,4BAA4B;YAC5B,8CAA8C;YAC9C,QAAQ;YACR,mBAAmB;YACnB,qBAAqB;YACrB,8BAA8B;YAC9B,iCAAiC;YACjC,QAAQ;YACR,mBAAmB;YACnB,wBAAwB;YACxB,iCAAiC;YACjC,oCAAoC;YACpC,QAAQ;YACR,qEAAqE;YACrE,mBAAmB;YACnB,sBAAsB;YACtB,iDAAiD;YACjD,kCAAkC;YAClC,QAAQ;YACR,mBAAmB;YACnB,wBAAwB;YACxB,iCAAiC;YACjC,oCAAoC;YACpC,QAAQ;YACR,mBAAmB;YACnB,yBAAyB;YACzB,kCAAkC;YAClC,qCAAqC;YACrC,QAAQ;YACR,mBAAmB;YACnB,4BAA4B;YAC5B,qCAAqC;YACrC,wCAAwC;YACxC,QAAQ;YACR,mBAAmB;YACnB,2BAA2B;YAC3B,oCAAoC;YACpC,uCAAuC;YACvC,QAAQ;YACR,mBAAmB;YACnB,uBAAuB;YACvB,gCAAgC;YAChC,kDAAkD;YAClD,QAAQ;YACR,mBAAmB;YACnB,mBAAmB;YACnB,8BAA8B;YAC9B,qCAAqC;YACrC,uCAAuC;YACvC,oCAAoC;YACpC,8DAA8D;YAC9D,iBAAiB;YACjB,QAAQ;YACR,mBAAmB;YACnB,0BAA0B;YAC1B,mCAAmC;YACnC,sCAAsC;YACtC,QAAQ;YACR,IAAI;YAEJ,OAAO,eAAe,CAAA;QAC1B,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACH,uBAAuB,GAAA;QACnB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG,CACH,yBAAyB,GAAA;QACrB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG,CACH,6BAA6B,GAAA;QACzB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG,CACH,eAAe,CAAC,aAAqB,EAAE,KAAa,EAAA;QAChD,4BAA4B;QAC5B,OAAO,GAAG,CAAA;IACV,8BAA8B;IAClC,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG,CACO,wBAAwB,GAAA;QAC9B,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CACzB,CAAA,CAAE,EACF;gBACI,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;gBAC3B,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;aAClC,EACD,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAA,CAAE,CAC3B,CAAA;YAED,IAAI,CAAC,MAAM,CAAC,YAAY,CACpB,OAAO,EACP,CAAC,EAAO,EAAE,EAAE;gBACR,MAAM,kBAAkB,GAAG,EAAE,CAAA;gBAE7B,yFAAyF;gBACzF,+DAA+D;gBAC/D,kBAAkB,CAAC,UAAU,CACzB,CAAA,wBAAA,CAA0B,EAC1B,EAAE,EACF,CAAC,MAAW,EAAE,EAAE;oBACZ,EAAE,CAAC,kBAAkB,CAAC,CAAA;gBAC1B,CAAC,EACD,CAAC,KAAU,EAAE,EAAE;oBACX,IAAI,CAAC,KAAK,CAAC,CAAA;gBACf,CAAC,CACJ,CAAA;YACL,CAAC,EACD,CAAC,KAAU,EAAE,EAAE;gBACX,IAAI,CAAC,KAAK,CAAC,CAAA;YACf,CAAC,CACJ,CAAA;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACO,gBAAgB,GAAA;QACtB,IAAI,CAAC;YACD,MAAM,MAAM,GACR,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,6BAA6B,CAAC,CAAA;;;;;YACjE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACxB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;YACT,MAAM,IAAI,QAAA,8BAA8B,CACpC,cAAc,EACd,6BAA6B,CAChC,CAAA;QACL,CAAC;IACL,CAAC;CACJ;AA/5BD,QAAA,iBAAA,GAAA,kBA+5BC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6677, "column": 0}, "map": {"version":3,"file":"NativescriptQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/nativescript/NativescriptQueryRunner.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { NativescriptDriver } from \"./NativescriptDriver\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: NativescriptDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: NativescriptDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) {\n            throw new QueryRunnerAlreadyReleasedError()\n        }\n\n        const connection = this.driver.connection\n\n        const databaseConnection = await this.connect()\n\n        return new Promise(async (ok, fail) => {\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\"\n            connection.logger.logQuery(query, parameters, this)\n\n            const handler = (err: any, raw: any) => {\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime =\n                    this.driver.options.maxQueryExecutionTime\n                const queryEndTime = Date.now()\n                const queryExecutionTime = queryEndTime - queryStartTime\n\n                if (\n                    maxQueryExecutionTime &&\n                    queryExecutionTime > maxQueryExecutionTime\n                ) {\n                    connection.logger.logQuerySlow(\n                        queryExecutionTime,\n                        query,\n                        parameters,\n                        this,\n                    )\n                }\n\n                if (err) {\n                    connection.logger.logQueryError(\n                        err,\n                        query,\n                        parameters,\n                        this,\n                    )\n                    fail(new QueryFailedError(query, parameters, err))\n                }\n\n                const result = new QueryResult()\n                result.raw = raw\n\n                if (!isInsertQuery && Array.isArray(raw)) {\n                    result.records = raw\n                }\n\n                if (useStructuredResult) {\n                    ok(result)\n                } else {\n                    ok(result.raw)\n                }\n            }\n            const queryStartTime = Date.now()\n\n            if (isInsertQuery) {\n                databaseConnection.execSQL(query, parameters, handler)\n            } else {\n                databaseConnection.all(query, parameters, handler)\n            }\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(\n        objectLiteral: ObjectLiteral,\n        startIndex: number = 0,\n    ): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\")\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6766, "column": 0}, "map": {"version":3,"file":"NativescriptDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/nativescript/NativescriptDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { NativescriptConnectionOptions } from \"./NativescriptConnectionOptions\"\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: NativescriptConnectionOptions\n\n    /**\n     * Nativescript driver module\n     * this is most likely `nativescript-sqlite`\n     * but user can pass his own\n     */\n    driver: any\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.connection = connection\n        this.options = connection.options as NativescriptConnectionOptions\n        this.database = this.options.database\n        this.driver = this.options.driver\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined\n            this.databaseConnection.close().then(ok).catch(fail)\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this)\n        }\n\n        return this.queryRunner\n    }\n\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\"\n        }\n\n        return super.normalizeType(column)\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign(\n                {},\n                {\n                    readOnly: this.options.readOnly,\n                    key: this.options.key,\n                    multithreading: this.options.multithreading,\n                    migrate: this.options.migrate,\n                    iosFlags: this.options.iosFlags,\n                    androidFlags: this.options.androidFlags,\n                },\n                this.options.extra || {},\n            )\n\n            new this.sqlite(\n                this.options.database,\n                options,\n                (err: Error, db: any): any => {\n                    if (err) return fail(err)\n\n                    // use object mode to work with TypeORM\n                    db.resultType(this.sqlite.RESULTSASOBJECT)\n\n                    // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                    // working properly. this also makes onDelete work with sqlite.\n                    db.execSQL(\n                        `PRAGMA foreign_keys = ON`,\n                        [],\n                        (err: Error, result: any): any => {\n                            if (err) return fail(err)\n                            // We are all set\n                            ok(db)\n                        },\n                    )\n                },\n            )\n        })\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        this.sqlite = this.driver\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\n                \"Nativescript\",\n                \"nativescript-sqlite\",\n            )\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6858, "column": 0}, "map": {"version":3,"file":"SqljsQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqljs/SqljsQueryRunner.ts"],"sourcesContent":["import { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { SqljsDriver } from \"./SqljsDriver\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Flag to determine if a modification has happened since the last time this query runner has requested a save.\n     */\n    private isDirty = false\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqljsDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqljsDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    private async flush() {\n        if (this.isDirty) {\n            await this.driver.autoSave()\n            this.isDirty = false\n        }\n    }\n\n    async release(): Promise<void> {\n        await this.flush()\n        return super.release()\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        await super.commitTransaction()\n        if (!this.isTransactionActive) {\n            await this.flush()\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters: any[] = [],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const command = query.trim().split(\" \", 1)[0]\n\n        const databaseConnection = this.driver.databaseConnection\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        await this.broadcaster.broadcast(\"BeforeQuery\", query, parameters)\n\n        const broadcasterResult = new BroadcasterResult()\n        const queryStartTime = Date.now()\n        let statement: any\n\n        try {\n            statement = databaseConnection.prepare(query)\n            if (parameters) {\n                parameters = parameters.map((p) =>\n                    typeof p !== \"undefined\" ? p : null,\n                )\n\n                statement.bind(parameters)\n            }\n\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime =\n                this.driver.options.maxQueryExecutionTime\n            const queryEndTime = Date.now()\n            const queryExecutionTime = queryEndTime - queryStartTime\n\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            )\n                this.driver.connection.logger.logQuerySlow(\n                    queryExecutionTime,\n                    query,\n                    parameters,\n                    this,\n                )\n\n            const records: any[] = []\n\n            while (statement.step()) {\n                records.push(statement.getAsObject())\n            }\n\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                true,\n                queryExecutionTime,\n                records,\n                undefined,\n            )\n\n            const result = new QueryResult()\n\n            result.affected = databaseConnection.getRowsModified()\n            result.records = records\n            result.raw = records\n\n            statement.free()\n\n            if (command !== \"SELECT\") {\n                this.isDirty = true\n            }\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (err) {\n            if (statement) {\n                statement.free()\n            }\n\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                false,\n                undefined,\n                undefined,\n                err,\n            )\n\n            throw new QueryFailedError(query, parameters, err)\n        } finally {\n            await broadcasterResult.wait()\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6974, "column": 0}, "map": {"version":3,"file":"SqljsDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/sqljs/SqljsDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { SqljsConnectionOptions } from \"./SqljsConnectionOptions\"\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { TypeORMError } from \"../../error\"\n\n// This is needed to satisfy the typescript compiler.\ninterface Window {\n    SQL: any\n    localforage: any\n}\ndeclare let window: Window\n\nexport class SqljsDriver extends AbstractSqliteDriver {\n    // The driver specific options.\n    options: SqljsConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (\n            this.options.autoSave &&\n            !this.options.location &&\n            !this.options.autoSaveCallback\n        ) {\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`)\n        }\n\n        // load sql.js package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection()\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n        this.databaseConnection.close()\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new SqljsQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    async load(\n        fileNameOrLocalStorageOrData: string | Uint8Array,\n        checkIfFileOrLocalStorageExists: boolean = true,\n    ): Promise<any> {\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\n            // content has to be loaded\n            if (PlatformTools.type === \"node\") {\n                // Node.js\n                // fileNameOrLocalStorageOrData should be a path to the file\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                    const database = PlatformTools.readFileSync(\n                        fileNameOrLocalStorageOrData,\n                    )\n                    return this.createDatabaseConnectionWithImport(database)\n                } else if (checkIfFileOrLocalStorageExists) {\n                    throw new TypeORMError(\n                        `File ${fileNameOrLocalStorageOrData} does not exist`,\n                    )\n                } else {\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing an existing file.\n                    // File will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport()\n                }\n            } else {\n                // browser\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n                let localStorageContent = null\n                if (this.options.useLocalForage) {\n                    if (window.localforage) {\n                        localStorageContent = await window.localforage.getItem(\n                            fileNameOrLocalStorageOrData,\n                        )\n                    } else {\n                        throw new TypeORMError(\n                            `localforage is not defined - please import localforage.js into your site`,\n                        )\n                    }\n                } else {\n                    localStorageContent =\n                        PlatformTools.getGlobalVariable().localStorage.getItem(\n                            fileNameOrLocalStorageOrData,\n                        )\n                }\n\n                if (localStorageContent != null) {\n                    // localStorage value exists.\n                    return this.createDatabaseConnectionWithImport(\n                        JSON.parse(localStorageContent),\n                    )\n                } else if (checkIfFileOrLocalStorageExists) {\n                    throw new TypeORMError(\n                        `File ${fileNameOrLocalStorageOrData} does not exist`,\n                    )\n                } else {\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing anything.\n                    // localStorage value will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport()\n                }\n            }\n        } else {\n            return this.createDatabaseConnectionWithImport(\n                fileNameOrLocalStorageOrData,\n            )\n        }\n    }\n\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    async save(location?: string) {\n        if (!location && !this.options.location) {\n            throw new TypeORMError(\n                `No location is set, specify a location parameter or add the location option to your configuration`,\n            )\n        }\n\n        let path = \"\"\n        if (location) {\n            path = location\n        } else if (this.options.location) {\n            path = this.options.location\n        }\n\n        if (PlatformTools.type === \"node\") {\n            try {\n                const content = Buffer.from(this.databaseConnection.export())\n                await PlatformTools.writeFile(path, content)\n            } catch (e) {\n                throw new TypeORMError(`Could not save database, error: ${e}`)\n            }\n        } else {\n            const database: Uint8Array = this.databaseConnection.export()\n            // convert Uint8Array to number array to improve local-storage storage\n            const databaseArray = [].slice.call(database)\n            if (this.options.useLocalForage) {\n                if (window.localforage) {\n                    await window.localforage.setItem(\n                        path,\n                        JSON.stringify(databaseArray),\n                    )\n                } else {\n                    throw new TypeORMError(\n                        `localforage is not defined - please import localforage.js into your site`,\n                    )\n                }\n            } else {\n                PlatformTools.getGlobalVariable().localStorage.setItem(\n                    path,\n                    JSON.stringify(databaseArray),\n                )\n            }\n        }\n    }\n\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     * Don't auto-save when in transaction as the call to export will end the current transaction\n     */\n    async autoSave() {\n        if (this.options.autoSave && !this.queryRunner?.isTransactionActive) {\n            if (this.options.autoSaveCallback) {\n                await this.options.autoSaveCallback(this.export())\n            } else {\n                await this.save()\n            }\n        }\n    }\n\n    /**\n     * Returns the current database as Uint8Array.\n     */\n    export(): Uint8Array {\n        return this.databaseConnection.export()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n                if (\n                    generatedColumn.isPrimary &&\n                    generatedColumn.generationStrategy === \"increment\"\n                ) {\n                    const query = \"SELECT last_insert_rowid()\"\n                    try {\n                        const result = this.databaseConnection.exec(query)\n                        this.connection.logger.logQuery(query)\n                        return OrmUtils.mergeDeep(\n                            map,\n                            generatedColumn.createValueMap(\n                                result[0].values[0][0],\n                            ),\n                        )\n                    } catch (e) {\n                        this.connection.logger.logQueryError(e, query, [])\n                    }\n                }\n\n                return map\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    protected createDatabaseConnection(): Promise<any> {\n        if (this.options.location) {\n            return this.load(this.options.location, false)\n        }\n\n        return this.createDatabaseConnectionWithImport(this.options.database)\n    }\n\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    protected async createDatabaseConnectionWithImport(\n        database?: Uint8Array,\n    ): Promise<any> {\n        // sql.js < 1.0 exposes an object with a `Database` method.\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\"\n        const sqlite = isLegacyVersion\n            ? this.sqlite\n            : await this.sqlite(this.options.sqlJsConfig)\n        if (database && database.length > 0) {\n            this.databaseConnection = new sqlite.Database(database)\n        } else {\n            this.databaseConnection = new sqlite.Database()\n        }\n\n        this.databaseConnection.exec(`PRAGMA foreign_keys = ON`)\n\n        return this.databaseConnection\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        if (PlatformTools.type === \"browser\") {\n            const sqlite = this.options.driver || window.SQL\n            this.sqlite = sqlite\n        } else {\n            try {\n                const sqlite =\n                    this.options.driver || PlatformTools.load(\"sql.js\")\n                this.sqlite = sqlite\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\")\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7193, "column": 0}, "map": {"version":3,"file":"ExpoQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/expo/ExpoQueryRunner.ts"],"sourcesContent":["import { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { ExpoDriver } from \"./ExpoDriver\"\n\nexport class ExpoQueryRunner extends AbstractSqliteQueryRunner {\n    driver: ExpoDriver\n\n    constructor(driver: ExpoDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    async beforeMigration(): Promise<void> {\n        await this.query(\"PRAGMA foreign_keys = OFF\")\n    }\n\n    async afterMigration(): Promise<void> {\n        await this.query(\"PRAGMA foreign_keys = ON\")\n    }\n\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = await this.connect()\n        const broadcasterResult = new BroadcasterResult()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        await this.broadcaster.broadcast(\"BeforeQuery\", query, parameters)\n\n        const queryStartTime = Date.now()\n\n        const statement = await databaseConnection.prepareAsync(query)\n        try {\n            const rawResult = await statement.executeAsync(parameters)\n\n            const maxQueryExecutionTime =\n                this.driver.options.maxQueryExecutionTime\n            const queryEndTime = Date.now()\n            const queryExecutionTime = queryEndTime - queryStartTime\n\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                true,\n                queryExecutionTime,\n                rawResult,\n                undefined,\n            )\n            await broadcasterResult.wait()\n\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            ) {\n                this.driver.connection.logger.logQuerySlow(\n                    queryExecutionTime,\n                    query,\n                    parameters,\n                    this,\n                )\n            }\n\n            const result = new QueryResult()\n            result.affected = rawResult.changes\n            result.records = await rawResult.getAllAsync()\n            result.raw = query.startsWith(\"INSERT INTO\")\n                ? rawResult.lastInsertRowId\n                : result.records\n\n            return useStructuredResult ? result : result.raw\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                false,\n                0,\n                undefined,\n                err,\n            )\n            await broadcasterResult.wait()\n\n            throw new QueryFailedError(query, parameters, err)\n        } finally {\n            await broadcasterResult.wait()\n            await statement.finalizeAsync()\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7257, "column": 0}, "map": {"version":3,"file":"ExpoDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/expo/ExpoDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { ExpoConnectionOptions } from \"./ExpoConnectionOptions\"\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\n\nexport class ExpoDriver extends AbstractSqliteDriver {\n    options: ExpoConnectionOptions\n\n    constructor(connection: DataSource) {\n        super(connection)\n        this.sqlite = this.options.driver\n    }\n\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n        await this.databaseConnection.closeAsync()\n        this.databaseConnection = undefined\n    }\n\n    createQueryRunner(): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new ExpoQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    protected async createDatabaseConnection() {\n        this.databaseConnection = await this.sqlite.openDatabaseAsync(\n            this.options.database,\n        )\n        await this.databaseConnection.runAsync(\"PRAGMA foreign_keys = ON\")\n        return this.databaseConnection\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,4EAA8E;AAE9E,MAAA,iDAAmD;AAInD,MAAa,UAAW,SAAQ,uBAAA,oBAAoB;IAGhD,YAAY,UAAsB,CAAA;QAC9B,KAAK,CAAC,UAAU,CAAC,CAAA;QACjB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAA;IACrC,CAAC;IAED,KAAK,CAAC,UAAU,GAAA;QACZ,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;QAC5B,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,CAAA;QAC1C,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAA;IACvC,CAAC;IAED,iBAAiB,GAAA;QACb,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,GAAG,IAAI,kBAAA,eAAe,CAAC,IAAI,CAAC,CAAA;QAEnE,OAAO,IAAI,CAAC,WAAW,CAAA;IAC3B,CAAC;IAES,KAAK,CAAC,wBAAwB,GAAA;QACpC,IAAI,CAAC,kBAAkB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CACzD,IAAI,CAAC,OAAO,CAAC,QAAQ,CACxB,CAAA;QACD,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,0BAA0B,CAAC,CAAA;QAClE,OAAO,IAAI,CAAC,kBAAkB,CAAA;IAClC,CAAC;CACJ;AA3BD,QAAA,UAAA,GAAA,WA2BC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7290, "column": 0}, "map": {"version":3,"file":"ExpoLegacyQueryRunner.js","sourceRoot":"../../..","sources":["file:///home/user/studio/node_modules/typeorm/driver/src/driver/expo/legacy/ExpoLegacyQueryRunner.ts"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryFailedError } from \"../../../error/QueryFailedError\"\nimport { AbstractSqliteQueryRunner } from \"../../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { TransactionNotStartedError } from \"../../../error/TransactionNotStartedError\"\nimport { ExpoLegacyDriver } from \"./ExpoLegacyDriver\"\nimport { Broadcaster } from \"../../../subscriber/Broadcaster\"\nimport { QueryResult } from \"../../../query-runner/QueryResult\"\nimport { BroadcasterResult } from \"../../../subscriber/BroadcasterResult\"\n\n// Needed to satisfy the Typescript compiler\ninterface IResultSet {\n    insertId: number | undefined\n    rowsAffected: number\n    rows: {\n        length: number\n        item: (idx: number) => any\n        _array: any[]\n    }\n}\ninterface ITransaction {\n    executeSql: (\n        sql: string,\n        args: any[] | undefined,\n        ok: (tsx: ITransaction, resultSet: IResultSet) => void,\n        fail: (tsx: ITransaction, err: any) => void,\n    ) => void\n}\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ExpoLegacyQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: ExpoLegacyDriver\n\n    /**\n     * Database transaction object\n     */\n    private transaction?: ITransaction\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: ExpoLegacyDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Starts transaction. Within Expo, all database operations happen in a\n     * transaction context, so issuing a `BEGIN TRANSACTION` command is\n     * redundant and will result in the following error:\n     *\n     * `Error: Error code 1: cannot start a transaction within a transaction`\n     *\n     * Instead, we keep track of a `Transaction` object in `this.transaction`\n     * and continue using the same object until we wish to commit the\n     * transaction.\n     */\n    async startTransaction(): Promise<void> {\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n\n        this.transactionDepth += 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     * Since Expo will automatically commit the transaction once all the\n     * callbacks of the transaction object have been completed, \"committing\" a\n     * transaction in this driver's context means that we delete the transaction\n     * object and set the stage for the next transaction.\n     */\n    async commitTransaction(): Promise<void> {\n        if (\n            !this.isTransactionActive &&\n            typeof this.transaction === \"undefined\"\n        )\n            throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        this.transaction = undefined\n        this.isTransactionActive = false\n\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     * This method's functionality is identical to `commitTransaction()` because\n     * the transaction lifecycle is handled within the Expo transaction object.\n     * Issuing separate statements for `COMMIT` or `ROLLBACK` aren't necessary.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (\n            !this.isTransactionActive &&\n            typeof this.transaction === \"undefined\"\n        )\n            throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        this.transaction = undefined\n        this.isTransactionActive = false\n\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        const databaseConnection = await this.connect()\n        return new Promise((ok, fail) => {\n            databaseConnection.exec(\n                [{ sql: \"PRAGMA foreign_keys = OFF\", args: [] }],\n                false,\n                (err: any) => (err ? fail(err) : ok()),\n            )\n        })\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        const databaseConnection = await this.connect()\n        return new Promise((ok, fail) => {\n            databaseConnection.exec(\n                [{ sql: \"PRAGMA foreign_keys = ON\", args: [] }],\n                false,\n                (err: any) => (err ? fail(err) : ok()),\n            )\n        })\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        return new Promise<any>(async (ok, fail) => {\n            const databaseConnection = await this.connect()\n            const broadcasterResult = new BroadcasterResult()\n\n            this.driver.connection.logger.logQuery(query, parameters, this)\n            this.broadcaster.broadcastBeforeQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n            )\n\n            const queryStartTime = Date.now()\n            // All Expo SQL queries are executed in a transaction context\n            databaseConnection.transaction(\n                async (transaction: ITransaction) => {\n                    if (typeof this.transaction === \"undefined\") {\n                        await this.startTransaction()\n                        this.transaction = transaction\n                    }\n                    this.transaction.executeSql(\n                        query,\n                        parameters,\n                        async (t: ITransaction, raw: IResultSet) => {\n                            // log slow queries if maxQueryExecution time is set\n                            const maxQueryExecutionTime =\n                                this.driver.options.maxQueryExecutionTime\n                            const queryEndTime = Date.now()\n                            const queryExecutionTime =\n                                queryEndTime - queryStartTime\n\n                            this.broadcaster.broadcastAfterQueryEvent(\n                                broadcasterResult,\n                                query,\n                                parameters,\n                                true,\n                                queryExecutionTime,\n                                raw,\n                                undefined,\n                            )\n                            await broadcasterResult.wait()\n\n                            if (\n                                maxQueryExecutionTime &&\n                                queryExecutionTime > maxQueryExecutionTime\n                            ) {\n                                this.driver.connection.logger.logQuerySlow(\n                                    queryExecutionTime,\n                                    query,\n                                    parameters,\n                                    this,\n                                )\n                            }\n\n                            const result = new QueryResult()\n\n                            if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                                result.affected = raw.rowsAffected\n                            }\n\n                            if (raw?.hasOwnProperty(\"rows\")) {\n                                let resultSet = []\n                                for (let i = 0; i < raw.rows.length; i++) {\n                                    resultSet.push(raw.rows.item(i))\n                                }\n\n                                result.raw = resultSet\n                                result.records = resultSet\n                            }\n\n                            // return id of inserted row, if query was insert statement.\n                            if (query.startsWith(\"INSERT INTO\")) {\n                                result.raw = raw.insertId\n                            }\n\n                            if (useStructuredResult) {\n                                ok(result)\n                            } else {\n                                ok(result.raw)\n                            }\n                        },\n                        async (t: ITransaction, err: any) => {\n                            this.driver.connection.logger.logQueryError(\n                                err,\n                                query,\n                                parameters,\n                                this,\n                            )\n                            this.broadcaster.broadcastAfterQueryEvent(\n                                broadcasterResult,\n                                query,\n                                parameters,\n                                false,\n                                undefined,\n                                undefined,\n                                err,\n                            )\n                            await broadcasterResult.wait()\n\n                            fail(new QueryFailedError(query, parameters, err))\n                        },\n                    )\n                },\n                async (err: any) => {\n                    await this.rollbackTransaction()\n                    fail(err)\n                },\n                () => {\n                    this.isTransactionActive = false\n                    this.transaction = undefined\n                },\n            )\n        })\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7459, "column": 0}, "map": {"version":3,"file":"ExpoLegacyDriver.js","sourceRoot":"../../..","sources":["file:///home/user/studio/node_modules/typeorm/driver/src/driver/expo/legacy/ExpoLegacyDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../../sqlite-abstract/AbstractSqliteDriver\"\nimport { ExpoConnectionOptions } from \"../ExpoConnectionOptions\"\nimport { ExpoLegacyQueryRunner } from \"./ExpoLegacyQueryRunner\"\nimport { QueryRunner } from \"../../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../../data-source/DataSource\"\nimport { ReplicationMode } from \"../../types/ReplicationMode\"\n\nexport class ExpoLegacyDriver extends AbstractSqliteDriver {\n    options: ExpoConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.database = this.options.database\n\n        // load sqlite package\n        this.sqlite = this.options.driver\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined\n                this.databaseConnection._db.close()\n                this.databaseConnection = undefined\n                ok()\n            } catch (error) {\n                fail(error)\n            }\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new ExpoLegacyQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            try {\n                const databaseConnection = this.sqlite.openDatabase(\n                    this.options.database,\n                )\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection.transaction(\n                    (tsx: any) => {\n                        tsx.executeSql(\n                            `PRAGMA foreign_keys = ON`,\n                            [],\n                            (t: any, result: any) => {\n                                ok(databaseConnection)\n                            },\n                            (t: any, err: any) => {\n                                fail({ transaction: t, error: err })\n                            },\n                        )\n                    },\n                    (err: any) => {\n                        fail(err)\n                    },\n                )\n            } catch (error) {\n                fail(error)\n            }\n        })\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAA,+EAAiF;AAEjF,MAAA,6DAA+D;AAK/D,MAAa,gBAAiB,SAAQ,uBAAA,oBAAoB;IAGtD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB,CAAA;QAC9B,KAAK,CAAC,UAAU,CAAC,CAAA;QAEjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAA;QAErC,sBAAsB;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAA;IACrC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG,CACH,KAAK,CAAC,UAAU,GAAA;QACZ,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC;gBACD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;gBAC5B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,CAAA;gBACnC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAA;gBACnC,EAAE,EAAE,CAAA;YACR,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;gBACb,IAAI,CAAC,KAAK,CAAC,CAAA;YACf,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG,CACH,iBAAiB,CAAC,IAAqB,EAAA;QACnC,IAAI,CAAC,IAAI,CAAC,WAAW,EACjB,IAAI,CAAC,WAAW,GAAG,IAAI,wBAAA,qBAAqB,CAAC,IAAI,CAAC,CAAA;QAEtD,OAAO,IAAI,CAAC,WAAW,CAAA;IAC3B,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG,CACO,wBAAwB,GAAA;QAC9B,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAClC,IAAI,CAAC;gBACD,MAAM,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAC/C,IAAI,CAAC,OAAO,CAAC,QAAQ,CACxB,CAAA;gBACD;;;kBAGE,CACF,kBAAkB,CAAC,WAAW,CAC1B,CAAC,GAAQ,EAAE,EAAE;oBACT,GAAG,CAAC,UAAU,CACV,CAAA,wBAAA,CAA0B,EAC1B,EAAE,EACF,CAAC,CAAM,EAAE,MAAW,EAAE,EAAE;wBACpB,EAAE,CAAC,kBAAkB,CAAC,CAAA;oBAC1B,CAAC,EACD,CAAC,CAAM,EAAE,GAAQ,EAAE,EAAE;wBACjB,IAAI,CAAC;4BAAE,WAAW,EAAE,CAAC;4BAAE,KAAK,EAAE,GAAG;wBAAA,CAAE,CAAC,CAAA;oBACxC,CAAC,CACJ,CAAA;gBACL,CAAC,EACD,CAAC,GAAQ,EAAE,EAAE;oBACT,IAAI,CAAC,GAAG,CAAC,CAAA;gBACb,CAAC,CACJ,CAAA;YACL,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;gBACb,IAAI,CAAC,KAAK,CAAC,CAAA;YACf,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC;CACJ;AArFD,QAAA,gBAAA,GAAA,iBAqFC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7535, "column": 0}, "map": {"version":3,"file":"ExpoDriverFactory.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/expo/ExpoDriverFactory.ts"],"sourcesContent":["import { DataSource } from \"../../data-source\"\nimport { ExpoDriver } from \"./ExpoDriver\"\nimport { ExpoLegacyDriver } from \"./legacy/ExpoLegacyDriver\"\n\nexport class ExpoDriverFactory {\n    connection: DataSource\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n    }\n\n    create(): ExpoDriver | ExpoLegacyDriver {\n        if (this.isLegacyDriver) {\n            return new ExpoLegacyDriver(this.connection)\n        }\n\n        return new ExpoDriver(this.connection)\n    }\n\n    private get isLegacyDriver(): boolean {\n        return !(\"openDatabaseAsync\" in this.connection.options.driver)\n    }\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA,uCAAyC;AACzC,MAAA,0DAA4D;AAE5D,MAAa,iBAAiB;IAG1B,YAAY,UAAsB,CAAA;QAC9B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;IAChC,CAAC;IAED,MAAM,GAAA;QACF,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,OAAO,IAAI,mBAAA,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAChD,CAAC;QAED,OAAO,IAAI,aAAA,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAC1C,CAAC;IAED,IAAY,cAAc,GAAA;QACtB,OAAO,CAAC,CAAC,mBAAmB,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;IACnE,CAAC;CACJ;AAlBD,QAAA,iBAAA,GAAA,kBAkBC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7562, "column": 0}, "map": {"version":3,"file":"AuroraMysqlQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/aurora-mysql/AuroraMysqlQueryRunner.ts"],"sourcesContent":["import { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Query } from \"../Query\"\nimport { AuroraMysqlDriver } from \"./AuroraMysqlDriver\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TypeORMError } from \"../../error\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\n\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class AuroraMysqlQueryRunner\n    extends BaseQueryRunner\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n\n    driver: AuroraMysqlDriver\n\n    protected client: any\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection from a pool for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: AuroraMysqlDriver, client: any) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.client = client\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect(): Promise<any> {\n        return {}\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true\n        if (this.databaseConnection) this.databaseConnection.release()\n        return Promise.resolve()\n    }\n\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n\n        if (this.transactionDepth === 0) {\n            await this.client.startTransaction()\n        } else {\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth}`)\n        }\n        this.transactionDepth += 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `RELEASE SAVEPOINT typeorm_${this.transactionDepth - 1}`,\n            )\n        } else {\n            await this.client.commitTransaction()\n            this.isTransactionActive = false\n        }\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth - 1}`,\n            )\n        } else {\n            await this.client.rollbackTransaction()\n            this.isTransactionActive = false\n        }\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n    }\n\n    /**\n     * Executes a raw SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const raw = await this.client.query(query, parameters)\n\n        const result = new QueryResult()\n\n        result.raw = raw\n\n        if (raw?.hasOwnProperty(\"records\") && Array.isArray(raw.records)) {\n            result.records = raw.records\n        }\n\n        if (raw?.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n            result.affected = raw.numberOfRecordsUpdated\n        }\n\n        if (!useStructuredResult) {\n            return result.raw\n        }\n\n        return result\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect()\n                const stream = databaseConnection.query(query, parameters)\n                if (onEnd) stream.on(\"end\", onEnd)\n                if (onError) stream.on(\"error\", onError)\n                ok(stream)\n            } catch (err) {\n                fail(err)\n            }\n        })\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        throw new TypeORMError(`MySql driver does not support table schemas`)\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\` WHERE \\`SCHEMA_NAME\\` = '${database}'`,\n        )\n        return result.length ? true : false\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const query = await this.query(`SELECT DATABASE() AS \\`db_name\\``)\n        return query[0][\"db_name\"]\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        throw new TypeORMError(`MySql driver does not support table schemas`)\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const query = await this.query(`SELECT SCHEMA() AS \\`schema_name\\``)\n        return query[0][\"schema_name\"]\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        column: TableColumn | string,\n    ): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n        const columnName = InstanceChecker.isTableColumn(column)\n            ? column.name\n            : column\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}' AND \\`COLUMN_NAME\\` = '${columnName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const up = ifNotExist\n            ? `CREATE DATABASE IF NOT EXISTS \\`${database}\\``\n            : `CREATE DATABASE \\`${database}\\``\n        const down = `DROP DATABASE \\`${database}\\``\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist\n            ? `DROP DATABASE IF EXISTS \\`${database}\\``\n            : `DROP DATABASE \\`${database}\\``\n        const down = `CREATE DATABASE \\`${database}\\``\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Schema create queries are not supported by MySql driver.`,\n        )\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        throw new TypeORMError(\n            `Schema drop queries are not supported by MySql driver.`,\n        )\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order\n        // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index\n        // if it related to the foreign key.\n\n        // createTable does not need separate method to create indices, because it create indices in the same query with table creation.\n        table.indices.forEach((index) =>\n            downQueries.push(this.dropIndexSql(table, index)),\n        )\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        return this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drop the table.\n     */\n    async dropTable(\n        target: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n    ): Promise<void> {\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const tablePath = this.getTablePath(target)\n        const table = await this.getCachedTable(tablePath)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        table.indices.forEach((index) =>\n            upQueries.push(this.dropIndexSql(table, index)),\n        )\n\n        upQueries.push(this.dropTableSql(table))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(\n        view: View,\n        syncWithMetadata: boolean = false,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = InstanceChecker.isView(target) ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(await this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName)\n        const newTable = oldTable.clone()\n\n        const { database } = this.driver.parseTableName(oldTable)\n        newTable.name = database ? `${database}.${newTableName}` : newTableName\n\n        // rename table\n        upQueries.push(\n            new Query(\n                `RENAME TABLE ${this.escapePath(oldTable)} TO ${this.escapePath(\n                    newTable,\n                )}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `RENAME TABLE ${this.escapePath(newTable)} TO ${this.escapePath(\n                    oldTable,\n                )}`,\n            ),\n        )\n\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            // build new constraint name\n            const columnNames = index.columnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\", \")\n            const newIndexName = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // build queries\n            let indexType = \"\"\n            if (index.isUnique) indexType += \"UNIQUE \"\n            if (index.isSpatial) indexType += \"SPATIAL \"\n            if (index.isFulltext) indexType += \"FULLTEXT \"\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \\`${\n                        index.name\n                    }\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        newTable,\n                    )} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${\n                        index.name\n                    }\\` (${columnNames})`,\n                ),\n            )\n\n            // replace constraint name\n            index.name = newIndexName\n        })\n\n        // rename foreign key constraint\n        newTable.foreignKeys.forEach((foreignKey) => {\n            // build new constraint name\n            const columnNames = foreignKey.columnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\", \")\n            const referencedColumnNames = foreignKey.referencedColumnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\",\")\n            const newForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    newTable,\n                    foreignKey.columnNames,\n                )\n\n            // build queries\n            let up =\n                `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \\`${\n                    foreignKey.name\n                }\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` +\n                `REFERENCES ${this.escapePath(\n                    this.getTablePath(foreignKey),\n                )}(${referencedColumnNames})`\n            if (foreignKey.onDelete) up += ` ON DELETE ${foreignKey.onDelete}`\n            if (foreignKey.onUpdate) up += ` ON UPDATE ${foreignKey.onUpdate}`\n\n            let down =\n                `ALTER TABLE ${this.escapePath(\n                    newTable,\n                )} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${\n                    foreignKey.name\n                }\\` FOREIGN KEY (${columnNames}) ` +\n                `REFERENCES ${this.escapePath(\n                    this.getTablePath(foreignKey),\n                )}(${referencedColumnNames})`\n            if (foreignKey.onDelete) down += ` ON DELETE ${foreignKey.onDelete}`\n            if (foreignKey.onUpdate) down += ` ON UPDATE ${foreignKey.onUpdate}`\n\n            upQueries.push(new Query(up))\n            downQueries.push(new Query(down))\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName\n        })\n\n        await this.executeQueries(upQueries, downQueries)\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name\n        this.replaceCachedTable(oldTable, newTable)\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        const skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    column,\n                    skipColumnLevelPrimary,\n                    false,\n                )}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \\`${\n                    column.name\n                }\\``,\n            ),\n        )\n\n        // create or update primary key constraint\n        if (column.isPrimary && skipColumnLevelPrimary) {\n            // if we already have generated column, we must temporary drop AUTO_INCREMENT property.\n            const generatedColumn = clonedTable.columns.find(\n                (column) =>\n                    column.isGenerated &&\n                    column.generationStrategy === \"increment\",\n            )\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone()\n                nonGeneratedColumn.isGenerated = false\n                nonGeneratedColumn.generationStrategy = undefined\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            column.name\n                        }\\` ${this.buildCreateColumnSql(\n                            nonGeneratedColumn,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            nonGeneratedColumn.name\n                        }\\` ${this.buildCreateColumnSql(column, true)}`,\n                    ),\n                )\n            }\n\n            const primaryColumns = clonedTable.primaryColumns\n            let columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD PRIMARY KEY (${columnNames})`,\n                ),\n            )\n\n            primaryColumns.push(column)\n            columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD PRIMARY KEY (${columnNames})`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`,\n                ),\n            )\n\n            // if we previously dropped AUTO_INCREMENT property, we must bring it back\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone()\n                nonGeneratedColumn.isGenerated = false\n                nonGeneratedColumn.generationStrategy = undefined\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            nonGeneratedColumn.name\n                        }\\` ${this.buildCreateColumnSql(column, true)}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            column.name\n                        }\\` ${this.buildCreateColumnSql(\n                            nonGeneratedColumn,\n                            true,\n                        )}`,\n                    ),\n                )\n            }\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex))\n            downQueries.push(this.dropIndexSql(table, columnIndex))\n        } else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table, [\n                    column.name,\n                ]),\n                columnNames: [column.name],\n                isUnique: true,\n            })\n            clonedTable.indices.push(uniqueIndex)\n            clonedTable.uniques.push(\n                new TableUnique({\n                    name: uniqueIndex.name,\n                    columnNames: uniqueIndex.columnNames,\n                }),\n            )\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${\n                        uniqueIndex.name\n                    }\\` (\\`${column.name}\\`)`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${\n                        uniqueIndex.name\n                    }\\``,\n                ),\n            )\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.addColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        let newColumn: TableColumn | undefined = undefined\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        let clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        const oldColumn = InstanceChecker.isTableColumn(oldColumnOrName)\n            ? oldColumnOrName\n            : table.columns.find((column) => column.name === oldColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        if (\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\n                newColumn.generationStrategy !== \"uuid\") ||\n            oldColumn.type !== newColumn.type ||\n            oldColumn.length !== newColumn.length ||\n            oldColumn.generatedType !== newColumn.generatedType\n        ) {\n            await this.dropColumn(table, oldColumn)\n            await this.addColumn(table, newColumn)\n\n            // update cloned table\n            clonedTable = table.clone()\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // We don't change any column properties, just rename it.\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            oldColumn.name\n                        }\\` \\`${newColumn.name}\\` ${this.buildCreateColumnSql(\n                            oldColumn,\n                            true,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            newColumn.name\n                        }\\` \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(\n                            oldColumn,\n                            true,\n                            true,\n                        )}`,\n                    ),\n                )\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    // build new constraint name\n                    index.columnNames.splice(\n                        index.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    index.columnNames.push(newColumn.name)\n                    const columnNames = index.columnNames\n                        .map((column) => `\\`${column}\\``)\n                        .join(\", \")\n                    const newIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // build queries\n                    let indexType = \"\"\n                    if (index.isUnique) indexType += \"UNIQUE \"\n                    if (index.isSpatial) indexType += \"SPATIAL \"\n                    if (index.isFulltext) indexType += \"FULLTEXT \"\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP INDEX \\`${\n                                index.name\n                            }\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${\n                                index.name\n                            }\\` (${columnNames})`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    index.name = newIndexName\n                })\n\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                        // build new constraint name\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(oldColumn.name),\n                            1,\n                        )\n                        foreignKey.columnNames.push(newColumn.name)\n                        const columnNames = foreignKey.columnNames\n                            .map((column) => `\\`${column}\\``)\n                            .join(\", \")\n                        const referencedColumnNames =\n                            foreignKey.referencedColumnNames\n                                .map((column) => `\\`${column}\\``)\n                                .join(\",\")\n                        const newForeignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                            )\n\n                        // build queries\n                        let up =\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP FOREIGN KEY \\`${\n                                foreignKey.name\n                            }\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` +\n                            `REFERENCES ${this.escapePath(\n                                this.getTablePath(foreignKey),\n                            )}(${referencedColumnNames})`\n                        if (foreignKey.onDelete)\n                            up += ` ON DELETE ${foreignKey.onDelete}`\n                        if (foreignKey.onUpdate)\n                            up += ` ON UPDATE ${foreignKey.onUpdate}`\n\n                        let down =\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${\n                                foreignKey.name\n                            }\\` FOREIGN KEY (${columnNames}) ` +\n                            `REFERENCES ${this.escapePath(\n                                this.getTablePath(foreignKey),\n                            )}(${referencedColumnNames})`\n                        if (foreignKey.onDelete)\n                            down += ` ON DELETE ${foreignKey.onDelete}`\n                        if (foreignKey.onUpdate)\n                            down += ` ON UPDATE ${foreignKey.onUpdate}`\n\n                        upQueries.push(new Query(up))\n                        downQueries.push(new Query(down))\n\n                        // replace constraint name\n                        foreignKey.name = newForeignKeyName\n                    })\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(\n                    (column) => column.name === oldColumn.name,\n                )\n                clonedTable.columns[\n                    clonedTable.columns.indexOf(oldTableColumn!)\n                ].name = newColumn.name\n                oldColumn.name = newColumn.name\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            oldColumn.name\n                        }\\` ${this.buildCreateColumnSql(newColumn, true)}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            newColumn.name\n                        }\\` ${this.buildCreateColumnSql(oldColumn, true)}`,\n                    ),\n                )\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n                const generatedColumn = clonedTable.columns.find(\n                    (column) =>\n                        column.isGenerated &&\n                        column.generationStrategy === \"increment\",\n                )\n                if (generatedColumn) {\n                    const nonGeneratedColumn = generatedColumn.clone()\n                    nonGeneratedColumn.isGenerated = false\n                    nonGeneratedColumn.generationStrategy = undefined\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                                generatedColumn.name\n                            }\\` ${this.buildCreateColumnSql(\n                                nonGeneratedColumn,\n                                true,\n                            )}`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                                nonGeneratedColumn.name\n                            }\\` ${this.buildCreateColumnSql(\n                                generatedColumn,\n                                true,\n                            )}`,\n                        ),\n                    )\n                }\n\n                const primaryColumns = clonedTable.primaryColumns\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const columnNames = primaryColumns\n                        .map((column) => `\\`${column.name}\\``)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP PRIMARY KEY`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn)\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = true\n                    const columnNames = primaryColumns\n                        .map((column) => `\\`${column.name}\\``)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP PRIMARY KEY`,\n                        ),\n                    )\n                } else {\n                    const primaryColumn = primaryColumns.find(\n                        (c) => c.name === newColumn.name,\n                    )\n                    primaryColumns.splice(\n                        primaryColumns.indexOf(primaryColumn!),\n                        1,\n                    )\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = false\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const columnNames = primaryColumns\n                            .map((column) => `\\`${column.name}\\``)\n                            .join(\", \")\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} ADD PRIMARY KEY (${columnNames})`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} DROP PRIMARY KEY`,\n                            ),\n                        )\n                    }\n                }\n\n                // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back\n                if (generatedColumn) {\n                    const nonGeneratedColumn = generatedColumn.clone()\n                    nonGeneratedColumn.isGenerated = false\n                    nonGeneratedColumn.generationStrategy = undefined\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                                nonGeneratedColumn.name\n                            }\\` ${this.buildCreateColumnSql(\n                                generatedColumn,\n                                true,\n                            )}`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                                generatedColumn.name\n                            }\\` ${this.buildCreateColumnSql(\n                                nonGeneratedColumn,\n                                true,\n                            )}`,\n                        ),\n                    )\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table, [\n                            newColumn.name,\n                        ]),\n                        columnNames: [newColumn.name],\n                        isUnique: true,\n                    })\n                    clonedTable.indices.push(uniqueIndex)\n                    clonedTable.uniques.push(\n                        new TableUnique({\n                            name: uniqueIndex.name,\n                            columnNames: uniqueIndex.columnNames,\n                        }),\n                    )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${\n                                newColumn.name\n                            }\\`)`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP INDEX \\`${uniqueIndex.name}\\``,\n                        ),\n                    )\n                } else {\n                    const uniqueIndex = clonedTable.indices.find((index) => {\n                        return (\n                            index.columnNames.length === 1 &&\n                            index.isUnique === true &&\n                            !!index.columnNames.find(\n                                (columnName) => columnName === newColumn.name,\n                            )\n                        )\n                    })\n                    clonedTable.indices.splice(\n                        clonedTable.indices.indexOf(uniqueIndex!),\n                        1,\n                    )\n\n                    const tableUnique = clonedTable.uniques.find(\n                        (unique) => unique.name === uniqueIndex!.name,\n                    )\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(tableUnique!),\n                        1,\n                    )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP INDEX \\`${uniqueIndex!.name}\\``,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD UNIQUE INDEX \\`${uniqueIndex!.name}\\` (\\`${\n                                newColumn.name\n                            }\\`)`,\n                        ),\n                    )\n                }\n            }\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\n            )\n\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n            const generatedColumn = clonedTable.columns.find(\n                (column) =>\n                    column.isGenerated &&\n                    column.generationStrategy === \"increment\",\n            )\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone()\n                nonGeneratedColumn.isGenerated = false\n                nonGeneratedColumn.generationStrategy = undefined\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            generatedColumn.name\n                        }\\` ${this.buildCreateColumnSql(\n                            nonGeneratedColumn,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            nonGeneratedColumn.name\n                        }\\` ${this.buildCreateColumnSql(\n                            generatedColumn,\n                            true,\n                        )}`,\n                    ),\n                )\n            }\n\n            // dropping primary key constraint\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\\`${primaryColumn.name}\\``)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} DROP PRIMARY KEY`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} ADD PRIMARY KEY (${columnNames})`,\n                ),\n            )\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name)\n            tableColumn!.isPrimary = false\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\\`${primaryColumn.name}\\``)\n                    .join(\", \")\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} ADD PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} DROP PRIMARY KEY`,\n                    ),\n                )\n            }\n\n            // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back\n            if (generatedColumn && generatedColumn.name !== column.name) {\n                const nonGeneratedColumn = generatedColumn.clone()\n                nonGeneratedColumn.isGenerated = false\n                nonGeneratedColumn.generationStrategy = undefined\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            nonGeneratedColumn.name\n                        }\\` ${this.buildCreateColumnSql(\n                            generatedColumn,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                            generatedColumn.name\n                        }\\` ${this.buildCreateColumnSql(\n                            nonGeneratedColumn,\n                            true,\n                        )}`,\n                    ),\n                )\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1,\n            )\n            upQueries.push(this.dropIndexSql(table, columnIndex))\n            downQueries.push(this.createIndexSql(table, columnIndex))\n        } else if (column.isUnique) {\n            // we splice constraints both from table uniques and indices.\n            const uniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(table, [\n                    column.name,\n                ])\n            const foundUnique = clonedTable.uniques.find(\n                (unique) => unique.name === uniqueName,\n            )\n            if (foundUnique)\n                clonedTable.uniques.splice(\n                    clonedTable.uniques.indexOf(foundUnique),\n                    1,\n                )\n\n            const indexName = this.connection.namingStrategy.indexName(table, [\n                column.name,\n            ])\n            const foundIndex = clonedTable.indices.find(\n                (index) => index.name === indexName,\n            )\n            if (foundIndex)\n                clonedTable.indices.splice(\n                    clonedTable.indices.indexOf(foundIndex),\n                    1,\n                )\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP INDEX \\`${indexName}\\``,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD UNIQUE INDEX \\`${indexName}\\` (\\`${column.name}\\`)`,\n                ),\n            )\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \\`${\n                    column.name\n                }\\``,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(column, true)}`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.removeColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n\n        const up = this.createPrimaryKeySql(table, columnNames)\n        const down = this.dropPrimaryKeySql(table)\n\n        await this.executeQueries(up, down)\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const columnNames = columns.map((column) => column.name)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n        const generatedColumn = clonedTable.columns.find(\n            (column) =>\n                column.isGenerated && column.generationStrategy === \"increment\",\n        )\n        if (generatedColumn) {\n            const nonGeneratedColumn = generatedColumn.clone()\n            nonGeneratedColumn.isGenerated = false\n            nonGeneratedColumn.generationStrategy = undefined\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                        generatedColumn.name\n                    }\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                        nonGeneratedColumn.name\n                    }\\` ${this.buildCreateColumnSql(generatedColumn, true)}`,\n                ),\n            )\n        }\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns\n        if (primaryColumns.length > 0) {\n            const columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD PRIMARY KEY (${columnNames})`,\n                ),\n            )\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true))\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \")\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD PRIMARY KEY (${columnNamesString})`,\n            ),\n        )\n        downQueries.push(\n            new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`),\n        )\n\n        // if we already have generated column or column is changed to generated, and we dropped AUTO_INCREMENT property before, we must bring it back\n        const newOrExistGeneratedColumn = generatedColumn\n            ? generatedColumn\n            : columns.find(\n                  (column) =>\n                      column.isGenerated &&\n                      column.generationStrategy === \"increment\",\n              )\n        if (newOrExistGeneratedColumn) {\n            const nonGeneratedColumn = newOrExistGeneratedColumn.clone()\n            nonGeneratedColumn.isGenerated = false\n            nonGeneratedColumn.generationStrategy = undefined\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                        nonGeneratedColumn.name\n                    }\\` ${this.buildCreateColumnSql(\n                        newOrExistGeneratedColumn,\n                        true,\n                    )}`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} CHANGE \\`${\n                        newOrExistGeneratedColumn.name\n                    }\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`,\n                ),\n            )\n\n            // if column changed to generated, we must update it in table\n            const changedGeneratedColumn = clonedTable.columns.find(\n                (column) => column.name === newOrExistGeneratedColumn.name,\n            )\n            changedGeneratedColumn!.isGenerated = true\n            changedGeneratedColumn!.generationStrategy = \"increment\"\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table | string): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const up = this.dropPrimaryKeySql(table)\n        const down = this.createPrimaryKeySql(\n            table,\n            table.primaryColumns.map((column) => column.name),\n        )\n        await this.executeQueries(up, down)\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `MySql does not support unique constraints. Use unique index instead.`,\n        )\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `MySql does not support unique constraints. Use unique index instead.`,\n        )\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `MySql does not support unique constraints. Use unique index instead.`,\n        )\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `MySql does not support unique constraints. Use unique index instead.`,\n        )\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        throw new TypeORMError(`MySql does not support check constraints.`)\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        throw new TypeORMError(`MySql does not support check constraints.`)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        throw new TypeORMError(`MySql does not support check constraints.`)\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        throw new TypeORMError(`MySql does not support check constraints.`)\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`)\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`)\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`)\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`)\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table,\n                foreignKey.columnNames,\n            )\n\n        const up = this.createForeignKeySql(table, foreignKey)\n        const down = this.dropForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.addForeignKey(foreignKey)\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.createForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops a foreign key.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        const up = this.dropForeignKeySql(table, foreignKey)\n        const down = this.createForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.removeForeignKey(foreignKey)\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.dropForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.addIndex(index, true)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index ${indexOrName} was not found in table ${table.name}`,\n            )\n\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(table, index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index, true)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableOrName: Table | string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableOrName)}`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        const dbName = database ? database : this.driver.database\n        if (dbName) {\n            const isDatabaseExist = await this.hasDatabase(dbName)\n            if (!isDatabaseExist) return Promise.resolve()\n        } else {\n            throw new TypeORMError(\n                `Can not clear database. No database is specified`,\n            )\n        }\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            const selectViewDropsQuery = `SELECT concat('DROP VIEW IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`\n            const dropViewQueries: ObjectLiteral[] = await this.query(\n                selectViewDropsQuery,\n            )\n            await Promise.all(\n                dropViewQueries.map((q) => this.query(q[\"query\"])),\n            )\n\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`\n\n            await this.query(disableForeignKeysCheckQuery)\n            const dropQueries: ObjectLiteral[] = await this.query(\n                dropTablesQuery,\n            )\n            await Promise.all(\n                dropQueries.map((query) => this.query(query[\"query\"])),\n            )\n            await this.query(enableForeignKeysCheckQuery)\n\n            if (!isAnotherTransactionActive) {\n                await this.commitTransaction()\n            }\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive) {\n                    await this.rollbackTransaction()\n                }\n            } catch (rollbackError) {}\n            throw error\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        if (!hasTable) {\n            return []\n        }\n\n        if (!viewNames) {\n            viewNames = []\n        }\n\n        const currentDatabase = await this.getCurrentDatabase()\n        const viewsCondition = viewNames\n            .map((tableName) => {\n                let { database, tableName: name } =\n                    this.driver.parseTableName(tableName)\n\n                if (!database) {\n                    database = currentDatabase\n                }\n\n                return `(\\`t\\`.\\`schema\\` = '${database}' AND \\`t\\`.\\`name\\` = '${name}')`\n            })\n            .join(\" OR \")\n\n        const query =\n            `SELECT \\`t\\`.*, \\`v\\`.\\`check_option\\` FROM ${this.escapePath(\n                this.getTypeormMetadataTableName(),\n            )} \\`t\\` ` +\n            `INNER JOIN \\`information_schema\\`.\\`views\\` \\`v\\` ON \\`v\\`.\\`table_schema\\` = \\`t\\`.\\`schema\\` AND \\`v\\`.\\`table_name\\` = \\`t\\`.\\`name\\` WHERE \\`t\\`.\\`type\\` = '${\n                MetadataTableType.VIEW\n            }' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`\n        const dbViews = await this.query(query)\n        return dbViews.map((dbView: any) => {\n            const view = new View()\n            const db =\n                dbView[\"schema\"] === currentDatabase\n                    ? undefined\n                    : dbView[\"schema\"]\n            view.database = dbView[\"schema\"]\n            view.name = this.driver.buildTableName(\n                dbView[\"name\"],\n                undefined,\n                db,\n            )\n            view.expression = dbView[\"value\"]\n            return view\n        })\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        const dbTables: { TABLE_NAME: string; TABLE_SCHEMA: string }[] = []\n\n        const currentDatabase = await this.getCurrentDatabase()\n\n        if (!tableNames) {\n            const tablesSql = `SELECT TABLE_NAME, TABLE_SCHEMA FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\``\n\n            dbTables.push(...(await this.query(tablesSql)))\n        } else {\n            const tablesCondition = tableNames\n                .map((tableName) => {\n                    let [database, name] = tableName.split(\".\")\n                    if (!name) {\n                        name = database\n                        database = this.driver.database || currentDatabase\n                    }\n                    return `(\\`TABLE_SCHEMA\\` = '${database}' AND \\`TABLE_NAME\\` = '${name}')`\n                })\n                .join(\" OR \")\n            const tablesSql =\n                `SELECT TABLE_NAME, TABLE_SCHEMA FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE ` +\n                tablesCondition\n\n            dbTables.push(...(await this.query(tablesSql)))\n        }\n\n        if (dbTables.length === 0) {\n            return []\n        }\n\n        const columnsCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n                return `(\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`TABLE_NAME\\` = '${TABLE_NAME}')`\n            })\n            .join(\" OR \")\n        const columnsSql =\n            `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE ` +\n            columnsCondition\n\n        const primaryKeySql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` WHERE \\`CONSTRAINT_NAME\\` = 'PRIMARY' AND (${columnsCondition})`\n\n        const collationsSql = `SELECT \\`SCHEMA_NAME\\`, \\`DEFAULT_CHARACTER_SET_NAME\\` as \\`CHARSET\\`, \\`DEFAULT_COLLATION_NAME\\` AS \\`COLLATION\\` FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\``\n\n        const indicesCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n                return `(\\`s\\`.\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`s\\`.\\`TABLE_NAME\\` = '${TABLE_NAME}')`\n            })\n            .join(\" OR \")\n        const indicesSql =\n            `SELECT \\`s\\`.* FROM \\`INFORMATION_SCHEMA\\`.\\`STATISTICS\\` \\`s\\` ` +\n            `LEFT JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`s\\`.\\`INDEX_NAME\\` = \\`rc\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE (${indicesCondition}) AND \\`s\\`.\\`INDEX_NAME\\` != 'PRIMARY' AND \\`rc\\`.\\`CONSTRAINT_NAME\\` IS NULL`\n\n        const foreignKeysCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n                return `(\\`kcu\\`.\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`kcu\\`.\\`TABLE_NAME\\` = '${TABLE_NAME}')`\n            })\n            .join(\" OR \")\n        const foreignKeysSql =\n            `SELECT \\`kcu\\`.\\`TABLE_SCHEMA\\`, \\`kcu\\`.\\`TABLE_NAME\\`, \\`kcu\\`.\\`CONSTRAINT_NAME\\`, \\`kcu\\`.\\`COLUMN_NAME\\`, \\`kcu\\`.\\`REFERENCED_TABLE_SCHEMA\\`, ` +\n            `\\`kcu\\`.\\`REFERENCED_TABLE_NAME\\`, \\`kcu\\`.\\`REFERENCED_COLUMN_NAME\\`, \\`rc\\`.\\`DELETE_RULE\\` \\`ON_DELETE\\`, \\`rc\\`.\\`UPDATE_RULE\\` \\`ON_UPDATE\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`kcu\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`rc\\`.\\`constraint_name\\` = \\`kcu\\`.\\`constraint_name\\` ` +\n            `WHERE ` +\n            foreignKeysCondition\n        const [\n            dbColumns,\n            dbPrimaryKeys,\n            dbCollations,\n            dbIndices,\n            dbForeignKeys,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(primaryKeySql),\n            this.query(collationsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ])\n\n        // create tables for loaded tables\n        return Promise.all(\n            dbTables.map(async (dbTable) => {\n                const table = new Table()\n\n                const dbCollation = dbCollations.find(\n                    (coll) => coll[\"SCHEMA_NAME\"] === dbTable[\"TABLE_SCHEMA\"],\n                )!\n                const defaultCollation = dbCollation[\"COLLATION\"]\n                const defaultCharset = dbCollation[\"CHARSET\"]\n\n                // We do not need to join database name, when database is by default.\n                const db =\n                    dbTable[\"TABLE_SCHEMA\"] === currentDatabase\n                        ? undefined\n                        : dbTable[\"TABLE_SCHEMA\"]\n                table.database = dbTable[\"TABLE_SCHEMA\"]\n                table.name = this.driver.buildTableName(\n                    dbTable[\"TABLE_NAME\"],\n                    undefined,\n                    db,\n                )\n\n                // create columns from the loaded columns\n                table.columns = dbColumns\n                    .filter(\n                        (dbColumn) =>\n                            dbColumn[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbColumn[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"],\n                    )\n                    .map((dbColumn) => {\n                        const columnUniqueIndices = dbIndices.filter(\n                            (dbIndex) => {\n                                return (\n                                    dbIndex[\"TABLE_NAME\"] ===\n                                        dbTable[\"TABLE_NAME\"] &&\n                                    dbIndex[\"TABLE_SCHEMA\"] ===\n                                        dbTable[\"TABLE_SCHEMA\"] &&\n                                    dbIndex[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"] &&\n                                    parseInt(dbIndex[\"NON_UNIQUE\"], 10) === 0\n                                )\n                            },\n                        )\n\n                        const tableMetadata =\n                            this.connection.entityMetadatas.find(\n                                (metadata) =>\n                                    this.getTablePath(table) ===\n                                    this.getTablePath(metadata),\n                            )\n                        const hasIgnoredIndex =\n                            columnUniqueIndices.length > 0 &&\n                            tableMetadata &&\n                            tableMetadata.indices.some((index) => {\n                                return columnUniqueIndices.some(\n                                    (uniqueIndex) => {\n                                        return (\n                                            index.name ===\n                                                uniqueIndex[\"INDEX_NAME\"] &&\n                                            index.synchronize === false\n                                        )\n                                    },\n                                )\n                            })\n\n                        const isConstraintComposite = columnUniqueIndices.every(\n                            (uniqueIndex) => {\n                                return dbIndices.some(\n                                    (dbIndex) =>\n                                        dbIndex[\"INDEX_NAME\"] ===\n                                            uniqueIndex[\"INDEX_NAME\"] &&\n                                        dbIndex[\"COLUMN_NAME\"] !==\n                                            dbColumn[\"COLUMN_NAME\"],\n                                )\n                            },\n                        )\n\n                        const tableColumn = new TableColumn()\n                        tableColumn.name = dbColumn[\"COLUMN_NAME\"]\n                        tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase()\n\n                        // Unsigned columns are handled differently when it comes to width.\n                        // Hence, we need to set the unsigned attribute before we check the width.\n                        tableColumn.unsigned = tableColumn.zerofill\n                            ? true\n                            : dbColumn[\"COLUMN_TYPE\"].indexOf(\"unsigned\") !== -1\n\n                        if (\n                            this.driver.withWidthColumnTypes.indexOf(\n                                tableColumn.type as ColumnType,\n                            ) !== -1\n                        ) {\n                            const width = dbColumn[\"COLUMN_TYPE\"].substring(\n                                dbColumn[\"COLUMN_TYPE\"].indexOf(\"(\") + 1,\n                                dbColumn[\"COLUMN_TYPE\"].indexOf(\")\"),\n                            )\n                            tableColumn.width =\n                                width &&\n                                !this.isDefaultColumnWidth(\n                                    table,\n                                    tableColumn,\n                                    parseInt(width),\n                                )\n                                    ? parseInt(width)\n                                    : undefined\n                        }\n\n                        if (\n                            dbColumn[\"COLUMN_DEFAULT\"] === null ||\n                            dbColumn[\"COLUMN_DEFAULT\"] === undefined\n                        ) {\n                            tableColumn.default = undefined\n                        } else {\n                            tableColumn.default =\n                                dbColumn[\"COLUMN_DEFAULT\"] ===\n                                \"CURRENT_TIMESTAMP\"\n                                    ? dbColumn[\"COLUMN_DEFAULT\"]\n                                    : `'${dbColumn[\"COLUMN_DEFAULT\"]}'`\n                        }\n\n                        if (dbColumn[\"EXTRA\"].indexOf(\"on update\") !== -1) {\n                            tableColumn.onUpdate = dbColumn[\"EXTRA\"].substring(\n                                dbColumn[\"EXTRA\"].indexOf(\"on update\") + 10,\n                            )\n                        }\n\n                        if (dbColumn[\"GENERATION_EXPRESSION\"]) {\n                            tableColumn.asExpression =\n                                dbColumn[\"GENERATION_EXPRESSION\"]\n                            tableColumn.generatedType =\n                                dbColumn[\"EXTRA\"].indexOf(\"VIRTUAL\") !== -1\n                                    ? \"VIRTUAL\"\n                                    : \"STORED\"\n                        }\n\n                        tableColumn.isUnique =\n                            columnUniqueIndices.length > 0 &&\n                            !hasIgnoredIndex &&\n                            !isConstraintComposite\n                        tableColumn.isNullable =\n                            dbColumn[\"IS_NULLABLE\"] === \"YES\"\n                        tableColumn.isPrimary = dbPrimaryKeys.some(\n                            (dbPrimaryKey) => {\n                                return (\n                                    dbPrimaryKey[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    dbPrimaryKey[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    dbPrimaryKey[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"]\n                                )\n                            },\n                        )\n                        tableColumn.zerofill =\n                            dbColumn[\"COLUMN_TYPE\"].indexOf(\"zerofill\") !== -1\n                        tableColumn.isGenerated =\n                            dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1\n                        if (tableColumn.isGenerated)\n                            tableColumn.generationStrategy = \"increment\"\n\n                        tableColumn.comment =\n                            typeof dbColumn[\"COLUMN_COMMENT\"] === \"string\" &&\n                            dbColumn[\"COLUMN_COMMENT\"].length === 0\n                                ? undefined\n                                : dbColumn[\"COLUMN_COMMENT\"]\n                        if (dbColumn[\"CHARACTER_SET_NAME\"])\n                            tableColumn.charset =\n                                dbColumn[\"CHARACTER_SET_NAME\"] ===\n                                defaultCharset\n                                    ? undefined\n                                    : dbColumn[\"CHARACTER_SET_NAME\"]\n                        if (dbColumn[\"COLLATION_NAME\"])\n                            tableColumn.collation =\n                                dbColumn[\"COLLATION_NAME\"] === defaultCollation\n                                    ? undefined\n                                    : dbColumn[\"COLLATION_NAME\"]\n\n                        // check only columns that have length property\n                        if (\n                            this.driver.withLengthColumnTypes.indexOf(\n                                tableColumn.type as ColumnType,\n                            ) !== -1 &&\n                            dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]\n                        ) {\n                            const length =\n                                dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString()\n                            tableColumn.length = !this.isDefaultColumnLength(\n                                table,\n                                tableColumn,\n                                length,\n                            )\n                                ? length\n                                : \"\"\n                        }\n\n                        if (\n                            tableColumn.type === \"decimal\" ||\n                            tableColumn.type === \"double\" ||\n                            tableColumn.type === \"float\"\n                        ) {\n                            if (\n                                dbColumn[\"NUMERIC_PRECISION\"] !== null &&\n                                !this.isDefaultColumnPrecision(\n                                    table,\n                                    tableColumn,\n                                    dbColumn[\"NUMERIC_PRECISION\"],\n                                )\n                            )\n                                tableColumn.precision = parseInt(\n                                    dbColumn[\"NUMERIC_PRECISION\"],\n                                )\n                            if (\n                                dbColumn[\"NUMERIC_SCALE\"] !== null &&\n                                !this.isDefaultColumnScale(\n                                    table,\n                                    tableColumn,\n                                    dbColumn[\"NUMERIC_SCALE\"],\n                                )\n                            )\n                                tableColumn.scale = parseInt(\n                                    dbColumn[\"NUMERIC_SCALE\"],\n                                )\n                        }\n\n                        if (\n                            tableColumn.type === \"enum\" ||\n                            tableColumn.type === \"simple-enum\" ||\n                            tableColumn.type === \"set\"\n                        ) {\n                            const colType = dbColumn[\"COLUMN_TYPE\"]\n                            const items = colType\n                                .substring(\n                                    colType.indexOf(\"(\") + 1,\n                                    colType.lastIndexOf(\")\"),\n                                )\n                                .split(\",\")\n                            tableColumn.enum = (items as string[]).map(\n                                (item) => {\n                                    return item.substring(1, item.length - 1)\n                                },\n                            )\n                            tableColumn.length = \"\"\n                        }\n\n                        if (\n                            (tableColumn.type === \"datetime\" ||\n                                tableColumn.type === \"time\" ||\n                                tableColumn.type === \"timestamp\") &&\n                            dbColumn[\"DATETIME_PRECISION\"] !== null &&\n                            dbColumn[\"DATETIME_PRECISION\"] !== undefined &&\n                            !this.isDefaultColumnPrecision(\n                                table,\n                                tableColumn,\n                                parseInt(dbColumn[\"DATETIME_PRECISION\"]),\n                            )\n                        ) {\n                            tableColumn.precision = parseInt(\n                                dbColumn[\"DATETIME_PRECISION\"],\n                            )\n                        }\n\n                        return tableColumn\n                    })\n\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n                const tableForeignKeyConstraints = OrmUtils.uniq(\n                    dbForeignKeys.filter((dbForeignKey) => {\n                        return (\n                            dbForeignKey[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbForeignKey[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"]\n                        )\n                    }),\n                    (dbForeignKey) => dbForeignKey[\"CONSTRAINT_NAME\"],\n                )\n\n                table.foreignKeys = tableForeignKeyConstraints.map(\n                    (dbForeignKey) => {\n                        const foreignKeys = dbForeignKeys.filter(\n                            (dbFk) =>\n                                dbFk[\"CONSTRAINT_NAME\"] ===\n                                dbForeignKey[\"CONSTRAINT_NAME\"],\n                        )\n\n                        // if referenced table located in currently used db, we don't need to concat db name to table name.\n                        const database =\n                            dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"] ===\n                            currentDatabase\n                                ? undefined\n                                : dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"]\n                        const referencedTableName = this.driver.buildTableName(\n                            dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                            undefined,\n                            database,\n                        )\n\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                            columnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"COLUMN_NAME\"],\n                            ),\n                            referencedDatabase:\n                                dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"],\n                            referencedTableName: referencedTableName,\n                            referencedColumnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"REFERENCED_COLUMN_NAME\"],\n                            ),\n                            onDelete: dbForeignKey[\"ON_DELETE\"],\n                            onUpdate: dbForeignKey[\"ON_UPDATE\"],\n                        })\n                    },\n                )\n\n                // find index constraints of table, group them by constraint name and build TableIndex.\n                const tableIndexConstraints = OrmUtils.uniq(\n                    dbIndices.filter((dbIndex) => {\n                        return (\n                            dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbIndex[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"]\n                        )\n                    }),\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\n                )\n\n                table.indices = tableIndexConstraints.map((constraint) => {\n                    const indices = dbIndices.filter((index) => {\n                        return (\n                            index[\"TABLE_SCHEMA\"] ===\n                                constraint[\"TABLE_SCHEMA\"] &&\n                            index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                            index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\n                        )\n                    })\n\n                    const nonUnique = parseInt(constraint[\"NON_UNIQUE\"], 10)\n\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: constraint[\"INDEX_NAME\"],\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                        isUnique: nonUnique === 0,\n                        isSpatial: constraint[\"INDEX_TYPE\"] === \"SPATIAL\",\n                        isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\",\n                    })\n                })\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds create table sql\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column, true))\n            .join(\", \")\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\n\n        // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueIndexExist = table.indices.some((index) => {\n                    return (\n                        index.columnNames.length === 1 &&\n                        !!index.isUnique &&\n                        index.columnNames.indexOf(column.name) !== -1\n                    )\n                })\n                const isUniqueConstraintExist = table.uniques.some((unique) => {\n                    return (\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames.indexOf(column.name) !== -1\n                    )\n                })\n                if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                    table.indices.push(\n                        new TableIndex({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                            isUnique: true,\n                        }),\n                    )\n            })\n\n        // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach((unique) => {\n                const uniqueExist = table.indices.some(\n                    (index) => index.name === unique.name,\n                )\n                if (!uniqueExist) {\n                    table.indices.push(\n                        new TableIndex({\n                            name: unique.name,\n                            columnNames: unique.columnNames,\n                            isUnique: true,\n                        }),\n                    )\n                }\n            })\n        }\n\n        if (table.indices.length > 0) {\n            const indicesSql = table.indices\n                .map((index) => {\n                    const columnNames = index.columnNames\n                        .map((columnName) => `\\`${columnName}\\``)\n                        .join(\", \")\n                    if (!index.name)\n                        index.name = this.connection.namingStrategy.indexName(\n                            table,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    let indexType = \"\"\n                    if (index.isUnique) indexType += \"UNIQUE \"\n                    if (index.isSpatial) indexType += \"SPATIAL \"\n                    if (index.isFulltext) indexType += \"FULLTEXT \"\n                    return `${indexType}INDEX \\`${index.name}\\` (${columnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${indicesSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\\`${columnName}\\``)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table,\n                            fk.columnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\\`${columnName}\\``)\n                        .join(\", \")\n\n                    let constraint = `CONSTRAINT \\`${\n                        fk.name\n                    }\\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\n                        this.getTablePath(fk),\n                    )} (${referencedColumnNames})`\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\n\n                    return constraint\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        if (table.primaryColumns.length > 0) {\n            const columnNames = table.primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \")\n            sql += `, PRIMARY KEY (${columnNames})`\n        }\n\n        sql += `) ENGINE=${table.engine || \"InnoDB\"}`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql\n     */\n    protected dropTableSql(tableOrName: Table | string): Query {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrName)}`)\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(\n                `CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`,\n            )\n        } else {\n            return new Query(\n                `CREATE VIEW ${this.escapePath(view)} AS ${view\n                    .expression(this.connection)\n                    .getQuery()}`,\n            )\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentDatabase = await this.getCurrentDatabase()\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            schema: currentDatabase,\n            name: view.name,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View | string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`)\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(\n        viewOrPath: View | string,\n    ): Promise<Query> {\n        const currentDatabase = await this.getCurrentDatabase()\n        const viewName = InstanceChecker.isView(viewOrPath)\n            ? viewOrPath.name\n            : viewOrPath\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            schema: currentDatabase,\n            name: viewName,\n        })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \")\n        let indexType = \"\"\n        if (index.isUnique) indexType += \"UNIQUE \"\n        if (index.isSpatial) indexType += \"SPATIAL \"\n        if (index.isFulltext) indexType += \"FULLTEXT \"\n        return new Query(\n            `CREATE ${indexType}INDEX \\`${index.name}\\` ON ${this.escapePath(\n                table,\n            )} (${columns})`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(\n        table: Table,\n        indexOrName: TableIndex | string,\n    ): Query {\n        const indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName\n        return new Query(\n            `DROP INDEX \\`${indexName}\\` ON ${this.escapePath(table)}`,\n        )\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const columnNamesString = columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} ADD PRIMARY KEY (${columnNamesString})`,\n        )\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`,\n        )\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey,\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\\`${column}\\``)\n            .join(\", \")\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\\`${column}\\``)\n            .join(\",\")\n        let sql =\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${\n                foreignKey.name\n            }\\` FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(\n                this.getTablePath(foreignKey),\n            )}(${referencedColumnNames})`\n        if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`\n        if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Query {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\n            foreignKeyOrName,\n        )\n            ? foreignKeyOrName.name\n            : foreignKeyOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP FOREIGN KEY \\`${foreignKeyName}\\``,\n        )\n    }\n\n    /**\n     * Escapes a given comment so it's safe to include in a query.\n     */\n    protected escapeComment(comment?: string) {\n        if (!comment || comment.length === 0) {\n            return `''`\n        }\n\n        comment = comment\n            .replace(/\\\\/g, \"\\\\\\\\\") // MySQL allows escaping characters via backslashes\n            .replace(/'/g, \"''\")\n            .replace(/\\u0000/g, \"\") // Null bytes aren't allowed in comments\n\n        return `'${comment}'`\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table | View | string): string {\n        const { database, tableName } = this.driver.parseTableName(target)\n\n        if (database && database !== this.driver.database) {\n            return `\\`${database}\\`.\\`${tableName}\\``\n        }\n\n        return `\\`${tableName}\\``\n    }\n\n    /**\n     * Builds a part of query to create/change a column.\n     */\n    protected buildCreateColumnSql(\n        column: TableColumn,\n        skipPrimary: boolean,\n        skipName: boolean = false,\n    ) {\n        let c = \"\"\n        if (skipName) {\n            c = this.connection.driver.createFullType(column)\n        } else {\n            c = `\\`${column.name}\\` ${this.connection.driver.createFullType(\n                column,\n            )}`\n        }\n        if (column.asExpression)\n            c += ` AS (${column.asExpression}) ${\n                column.generatedType ? column.generatedType : \"VIRTUAL\"\n            }`\n\n        // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.\n        if (column.zerofill) {\n            c += \" ZEROFILL\"\n        } else if (column.unsigned) {\n            c += \" UNSIGNED\"\n        }\n        if (column.enum)\n            c += ` (${column.enum\n                .map((value) => \"'\" + value + \"'\")\n                .join(\", \")})`\n        if (column.charset) c += ` CHARACTER SET \"${column.charset}\"`\n        if (column.collation) c += ` COLLATE \"${column.collation}\"`\n        if (!column.isNullable) c += \" NOT NULL\"\n        if (column.isNullable) c += \" NULL\"\n        if (column.isPrimary && !skipPrimary) c += \" PRIMARY KEY\"\n        if (column.isGenerated && column.generationStrategy === \"increment\")\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTO_INCREMENT\"\n        if (column.comment)\n            c += ` COMMENT ${this.escapeComment(column.comment)}`\n        if (column.default !== undefined && column.default !== null)\n            c += ` DEFAULT ${column.default}`\n        if (column.onUpdate) c += ` ON UPDATE ${column.onUpdate}`\n\n        return c\n    }\n\n    /**\n     * Checks if column display width is by default.\n     */\n    protected isDefaultColumnWidth(\n        table: Table,\n        column: TableColumn,\n        width: number,\n    ): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name)\n            const columnMetadata = metadata.findColumnWithDatabaseName(\n                column.name,\n            )\n            if (columnMetadata && columnMetadata.width) return false\n        }\n\n        const defaultWidthForType =\n            this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].width\n\n        if (defaultWidthForType) {\n            // In MariaDB & MySQL 5.7, the default widths of certain numeric types are 1 less than\n            // the usual defaults when the column is unsigned.\n            // This also applies to Aurora MySQL.\n            const typesWithReducedUnsignedDefault = [\n                \"int\",\n                \"tinyint\",\n                \"smallint\",\n                \"mediumint\",\n            ]\n            const needsAdjustment =\n                typesWithReducedUnsignedDefault.indexOf(column.type) !== -1\n            if (column.unsigned && needsAdjustment) {\n                return defaultWidthForType - 1 === width\n            } else {\n                return defaultWidthForType === width\n            }\n        }\n\n        return false\n    }\n\n    /**\n     * Change table comment.\n     */\n    changeTableComment(\n        tableOrName: Table | string,\n        comment?: string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `aurora-mysql driver does not support change table comment.`,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8879, "column": 0}, "map": {"version":3,"file":"AuroraMysqlDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/aurora-mysql/AuroraMysqlDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { AuroraMysqlQueryRunner } from \"./AuroraMysqlQueryRunner\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { AuroraMysqlConnectionOptions } from \"./AuroraMysqlConnectionOptions\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { AuroraMysqlConnectionCredentialsOptions } from \"./AuroraMysqlConnectionCredentialsOptions\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { TypeORMError } from \"../../error\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\n\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class AuroraMysqlDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    connection: DataSource\n\n    /**\n     * Aurora Data API underlying library.\n     */\n    DataApiDriver: any\n\n    client: any\n\n    /**\n     * Connection pool.\n     * Used in non-replication mode.\n     */\n    pool: any\n\n    /**\n     * Pool cluster used in replication mode.\n     */\n    poolCluster: any\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: AuroraMysqlConnectionOptions\n\n    /**\n     * Database name used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Schema name used to perform all write queries.\n     */\n    schema?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"nested\" as const\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n     * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        // numeric types\n        \"bit\",\n        \"int\",\n        \"integer\", // synonym for int\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"bigint\",\n        \"float\",\n        \"double\",\n        \"double precision\", // synonym for double\n        \"real\", // synonym for double\n        \"decimal\",\n        \"dec\", // synonym for decimal\n        \"numeric\", // synonym for decimal\n        \"fixed\", // synonym for decimal\n        \"bool\", // synonym for tinyint\n        \"boolean\", // synonym for tinyint\n        // date and time types\n        \"date\",\n        \"datetime\",\n        \"timestamp\",\n        \"time\",\n        \"year\",\n        // string types\n        \"char\",\n        \"nchar\", // synonym for national char\n        \"national char\",\n        \"varchar\",\n        \"nvarchar\", // synonym for national varchar\n        \"national varchar\",\n        \"blob\",\n        \"text\",\n        \"tinyblob\",\n        \"tinytext\",\n        \"mediumblob\",\n        \"mediumtext\",\n        \"longblob\",\n        \"longtext\",\n        \"enum\",\n        \"set\",\n        \"binary\",\n        \"varbinary\",\n        // json data type\n        \"json\",\n        // spatial data types\n        \"geometry\",\n        \"point\",\n        \"linestring\",\n        \"polygon\",\n        \"multipoint\",\n        \"multilinestring\",\n        \"multipolygon\",\n        \"geometrycollection\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = [\"on-duplicate-key-update\"]\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\n        \"geometry\",\n        \"point\",\n        \"linestring\",\n        \"polygon\",\n        \"multipoint\",\n        \"multilinestring\",\n        \"multipolygon\",\n        \"geometrycollection\",\n    ]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"char\",\n        \"varchar\",\n        \"nvarchar\",\n        \"binary\",\n        \"varbinary\",\n    ]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withWidthColumnTypes: ColumnType[] = [\n        \"bit\",\n        \"tinyint\",\n        \"smallint\",\n        \"mediumint\",\n        \"int\",\n        \"integer\",\n        \"bigint\",\n    ]\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\",\n        \"time\",\n        \"datetime\",\n        \"timestamp\",\n    ]\n\n    /**\n     * Gets list of column data types that supports scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\",\n    ]\n\n    /**\n     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\n     */\n    unsignedAndZerofillTypes: ColumnType[] = [\n        \"int\",\n        \"integer\",\n        \"smallint\",\n        \"tinyint\",\n        \"mediumint\",\n        \"bigint\",\n        \"decimal\",\n        \"dec\",\n        \"numeric\",\n        \"fixed\",\n        \"float\",\n        \"double\",\n        \"double precision\",\n        \"real\",\n    ]\n\n    /**\n     * ORM has special columns and we need to know what database column types should be for those columns.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime\",\n        createDatePrecision: 6,\n        createDateDefault: \"CURRENT_TIMESTAMP(6)\",\n        updateDate: \"datetime\",\n        updateDatePrecision: 6,\n        updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\n        deleteDate: \"datetime\",\n        deleteDatePrecision: 6,\n        deleteDateNullable: true,\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationId: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"int\",\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"int\",\n        cacheQuery: \"text\",\n        cacheResult: \"text\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"text\",\n    }\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        varchar: { length: 255 },\n        nvarchar: { length: 255 },\n        \"national varchar\": { length: 255 },\n        char: { length: 1 },\n        binary: { length: 1 },\n        varbinary: { length: 255 },\n        decimal: { precision: 10, scale: 0 },\n        dec: { precision: 10, scale: 0 },\n        numeric: { precision: 10, scale: 0 },\n        fixed: { precision: 10, scale: 0 },\n        float: { precision: 12 },\n        double: { precision: 22 },\n        time: { precision: 0 },\n        datetime: { precision: 0 },\n        timestamp: { precision: 0 },\n        bit: { width: 1 },\n        int: { width: 11 },\n        integer: { width: 11 },\n        tinyint: { width: 4 },\n        smallint: { width: 6 },\n        mediumint: { width: 9 },\n        bigint: { width: 20 },\n    }\n\n    /**\n     * Max length allowed by MySQL for aliases.\n     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n     */\n    maxAliasLength = 63\n\n    cteCapabilities: CteCapabilities = {\n        enabled: false,\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as AuroraMysqlConnectionOptions\n\n        // load mysql package\n        this.loadDependencies()\n\n        this.client = new this.DataApiDriver(\n            this.options.region,\n            this.options.secretArn,\n            this.options.resourceArn,\n            this.options.database,\n            (query: string, parameters?: any[]) =>\n                this.connection.logger.logQuery(query, parameters),\n            this.options.serviceConfigOptions,\n            this.options.formatOptions,\n        )\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\n        // todo: provide options to auto-create a database if it does not exist yet\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        if (!this.database) {\n            const queryRunner = this.createQueryRunner(\"master\")\n\n            this.database = await queryRunner.getCurrentDatabase()\n\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {}\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new AuroraMysqlQueryRunner(\n            this,\n            new this.DataApiDriver(\n                this.options.region,\n                this.options.secretArn,\n                this.options.resourceArn,\n                this.options.database,\n                (query: string, parameters?: any[]) =>\n                    this.connection.logger.logQuery(query, parameters),\n                this.options.serviceConfigOptions,\n                this.options.formatOptions,\n            ),\n        )\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => nativeParameters[key],\n        )\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                const value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                }\n\n                escapedParameters.push(value)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"`\" + columnName + \"`\"\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(\n        tableName: string,\n        schema?: string,\n        database?: string,\n    ): string {\n        const tablePath = [tableName]\n\n        if (database) {\n            tablePath.unshift(database)\n        }\n\n        return tablePath.join(\".\")\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = undefined\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name)\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        return {\n            database:\n                (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\n            schema: driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (\n            !this.options.formatOptions ||\n            this.options.formatOptions.castParameters !== false\n        ) {\n            return this.client.preparePersistentValue(value, columnMetadata)\n        }\n\n        if (value === null || value === undefined) return value\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value)\n        } else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value)\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date\n        ) {\n            return DateUtils.mixedDateToDate(value)\n        } else if (\n            columnMetadata.type === \"simple-array\" ||\n            columnMetadata.type === \"set\"\n        ) {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value)\n        } else if (\n            columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\"\n        ) {\n            return \"\" + value\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (\n            !this.options.formatOptions ||\n            this.options.formatOptions.castParameters !== false\n        ) {\n            return this.client.prepareHydratedValue(value, columnMetadata)\n        }\n\n        if (\n            columnMetadata.type === Boolean ||\n            columnMetadata.type === \"bool\" ||\n            columnMetadata.type === \"boolean\"\n        ) {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date\n        ) {\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"json\") {\n            value = typeof value === \"string\" ? JSON.parse(value) : value\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (\n            columnMetadata.type === \"simple-array\" ||\n            columnMetadata.type === \"set\"\n        ) {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (\n            (columnMetadata.type === \"enum\" ||\n                columnMetadata.type === \"simple-enum\") &&\n            columnMetadata.enum &&\n            !isNaN(value) &&\n            columnMetadata.enum.indexOf(parseInt(value)) >= 0\n        ) {\n            // convert to number if that exists in possible enum options\n            value = parseInt(value)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\"\n        } else if (column.type === String) {\n            return \"varchar\"\n        } else if (column.type === Date) {\n            return \"datetime\"\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\"\n        } else if (column.type === Boolean) {\n            return \"tinyint\"\n        } else if (column.type === \"uuid\") {\n            return \"varchar\"\n        } else if (\n            column.type === \"simple-array\" ||\n            column.type === \"simple-json\"\n        ) {\n            return \"text\"\n        } else if (column.type === \"simple-enum\") {\n            return \"enum\"\n        } else if (\n            column.type === \"double precision\" ||\n            column.type === \"real\"\n        ) {\n            return \"double\"\n        } else if (\n            column.type === \"dec\" ||\n            column.type === \"numeric\" ||\n            column.type === \"fixed\"\n        ) {\n            return \"decimal\"\n        } else if (column.type === \"bool\" || column.type === \"boolean\") {\n            return \"tinyint\"\n        } else if (\n            column.type === \"nvarchar\" ||\n            column.type === \"national varchar\"\n        ) {\n            return \"varchar\"\n        } else if (column.type === \"nchar\" || column.type === \"national char\") {\n            return \"char\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (defaultValue === null) {\n            return undefined\n        }\n\n        if (\n            (columnMetadata.type === \"enum\" ||\n                columnMetadata.type === \"simple-enum\") &&\n            defaultValue !== undefined\n        ) {\n            return `'${defaultValue}'`\n        }\n\n        if (columnMetadata.type === \"set\" && defaultValue !== undefined) {\n            return `'${DateUtils.simpleArrayToString(defaultValue)}'`\n        }\n\n        if (typeof defaultValue === \"number\") {\n            return `${defaultValue}`\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            return defaultValue()\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === undefined) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(\n            (idx) =>\n                idx.isUnique &&\n                idx.columns.length === 1 &&\n                idx.columns[0] === column,\n        )\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString()\n\n        /**\n         * fix https://github.com/typeorm/typeorm/issues/1139\n         */\n        if (column.generationStrategy === \"uuid\") return \"36\"\n\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"national varchar\":\n                return \"255\"\n            case \"varbinary\":\n                return \"255\"\n            default:\n                return \"\"\n        }\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type\n\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`\n        } else if (column.width) {\n            type += `(${column.width})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += `(${column.precision},${column.scale})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += `(${column.precision})`\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return new Promise<any>((ok, fail) => {\n            if (this.poolCluster) {\n                this.poolCluster.getConnection(\n                    \"MASTER\",\n                    (err: any, dbConnection: any) => {\n                        err\n                            ? fail(err)\n                            : ok(this.prepareDbConnection(dbConnection))\n                    },\n                )\n            } else if (this.pool) {\n                this.pool.getConnection((err: any, dbConnection: any) => {\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection))\n                })\n            } else {\n                fail(\n                    new TypeORMError(\n                        `Connection is not established with mysql database`,\n                    ),\n                )\n            }\n        })\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.poolCluster) return this.obtainMasterConnection()\n\n        return new Promise<any>((ok, fail) => {\n            this.poolCluster.getConnection(\n                \"SLAVE*\",\n                (err: any, dbConnection: any) => {\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection))\n                },\n            )\n        })\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(\n        metadata: EntityMetadata,\n        insertResult: any,\n        entityIndex: number,\n    ) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                let value: any\n                if (\n                    generatedColumn.generationStrategy === \"increment\" &&\n                    insertResult.insertId\n                ) {\n                    // NOTE: When multiple rows is inserted by a single INSERT statement,\n                    // `insertId` is the value generated for the first inserted row only.\n                    value = insertResult.insertId + entityIndex\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                    //     value = generatedColumn.getEntityValue(uuidMap);\n                }\n\n                return OrmUtils.mergeDeep(\n                    map,\n                    generatedColumn.createValueMap(value),\n                )\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\n            // console.log(\"comment:\", tableColumn.comment, this.escapeComment(columnMetadata.comment));\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            let columnMetadataLength = columnMetadata.length\n            if (\n                !columnMetadataLength &&\n                columnMetadata.generationStrategy === \"uuid\"\n            ) {\n                // fixing #3374\n                columnMetadataLength = this.getColumnLength(columnMetadata)\n            }\n\n            return (\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadataLength ||\n                tableColumn.width !== columnMetadata.width ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                tableColumn.zerofill !== columnMetadata.zerofill ||\n                tableColumn.unsigned !== columnMetadata.unsigned ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.comment !==\n                    this.escapeComment(columnMetadata.comment) ||\n                !this.compareDefaultValues(\n                    this.normalizeDefault(columnMetadata),\n                    tableColumn.default,\n                ) ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(\n                        tableColumn.enum,\n                        columnMetadata.enum.map((val) => val + \"\"),\n                    )) ||\n                tableColumn.onUpdate !== columnMetadata.onUpdate ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n            )\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\"\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        const DataApiDriver =\n            this.options.driver ||\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\")\n        this.DataApiDriver = DataApiDriver\n\n        // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack\n        // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787\n        this.DataApiDriver = this.DataApiDriver.default || this.DataApiDriver\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected createConnectionOptions(\n        options: AuroraMysqlConnectionOptions,\n        credentials: AuroraMysqlConnectionCredentialsOptions,\n    ): Promise<any> {\n        credentials = Object.assign(\n            {},\n            credentials,\n            DriverUtils.buildDriverOptions(credentials),\n        ) // todo: do it better way\n\n        // build connection options for the driver\n        return Object.assign(\n            {},\n            {\n                resourceArn: options.resourceArn,\n                secretArn: options.secretArn,\n                database: options.database,\n                region: options.region,\n                type: options.type,\n            },\n            {\n                host: credentials.host,\n                user: credentials.username,\n                password: credentials.password,\n                database: credentials.database,\n                port: credentials.port,\n                ssl: options.ssl,\n            },\n\n            options.extra || {},\n        )\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected async createPool(connectionOptions: any): Promise<any> {\n        return {}\n    }\n\n    /**\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\n     */\n    private prepareDbConnection(connection: any): any {\n        const { logger } = this.connection\n        /**\n         * Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\n         * cause the hosting app to crash.\n         */\n        if (connection.listeners(\"error\").length === 0) {\n            connection.on(\"error\", (error: any) =>\n                logger.log(\n                    \"warn\",\n                    `MySQL connection raised an error. ${error}`,\n                ),\n            )\n        }\n        return connection\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    protected compareDefaultValues(\n        columnMetadataValue: string | undefined,\n        databaseValue: string | undefined,\n    ): boolean {\n        if (\n            typeof columnMetadataValue === \"string\" &&\n            typeof databaseValue === \"string\"\n        ) {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\")\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\")\n        }\n\n        return columnMetadataValue === databaseValue\n    }\n\n    /**\n     * Escapes a given comment.\n     */\n    protected escapeComment(comment?: string) {\n        if (!comment) return comment\n\n        comment = comment.replace(/\\u0000/g, \"\") // Null bytes aren't allowed in comments\n\n        return comment\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9637, "column": 0}, "map": {"version":3,"file":"AuroraPostgresQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/aurora-postgres/AuroraPostgresQueryRunner.ts"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { AuroraPostgresDriver } from \"./AuroraPostgresDriver\"\nimport { PostgresQueryRunner } from \"../postgres/PostgresQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TypeORMError } from \"../../error\"\n\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\n    driver: any\n\n    constructor(driver: any, mode: ReplicationMode) {\n        super(driver, mode)\n    }\n}\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class AuroraPostgresQueryRunner\n    extends PostgresQueryRunnerWrapper\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: AuroraPostgresDriver\n\n    protected client: any\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        driver: AuroraPostgresDriver,\n        client: any,\n        mode: ReplicationMode,\n    ) {\n        super(driver, mode)\n\n        this.client = client\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection)\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise\n\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver\n                .obtainSlaveConnection()\n                .then(([connection, release]: any[]) => {\n                    this.driver.connectedQueryRunners.push(this)\n                    this.databaseConnection = connection\n                    this.releaseCallback = release\n                    return this.databaseConnection\n                })\n        } else {\n            // master\n            this.databaseConnectionPromise = this.driver\n                .obtainMasterConnection()\n                .then(([connection, release]: any[]) => {\n                    this.driver.connectedQueryRunners.push(this)\n                    this.databaseConnection = connection\n                    this.releaseCallback = release\n                    return this.databaseConnection\n                })\n        }\n\n        return this.databaseConnectionPromise\n    }\n\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n\n        if (this.transactionDepth === 0) {\n            await this.client.startTransaction()\n        } else {\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth}`)\n        }\n        this.transactionDepth += 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `RELEASE SAVEPOINT typeorm_${this.transactionDepth - 1}`,\n            )\n        } else {\n            await this.client.commitTransaction()\n            this.isTransactionActive = false\n        }\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth - 1}`,\n            )\n        } else {\n            await this.client.rollbackTransaction()\n            this.isTransactionActive = false\n        }\n        this.transactionDepth -= 1\n\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const raw = await this.client.query(query, parameters)\n\n        const result = new QueryResult()\n\n        result.raw = raw\n\n        if (raw?.hasOwnProperty(\"records\") && Array.isArray(raw.records)) {\n            result.records = raw.records\n        }\n\n        if (raw?.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n            result.affected = raw.numberOfRecordsUpdated\n        }\n\n        if (!useStructuredResult) {\n            return result.raw\n        }\n\n        return result\n    }\n\n    /**\n     * Change table comment.\n     */\n    changeTableComment(\n        tableOrName: Table | string,\n        comment?: string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `aurora-postgres driver does not support change comment.`,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9767, "column": 0}, "map": {"version":3,"file":"AuroraPostgresDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/aurora-postgres/AuroraPostgresDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { PostgresDriver } from \"../postgres/PostgresDriver\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { AuroraPostgresConnectionOptions } from \"./AuroraPostgresConnectionOptions\"\nimport { AuroraPostgresQueryRunner } from \"./AuroraPostgresQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { DriverUtils } from \"../DriverUtils\"\n\nabstract class PostgresWrapper extends PostgresDriver {\n    options: any\n\n    abstract createQueryRunner(mode: ReplicationMode): any\n}\n\nexport class AuroraPostgresDriver extends PostgresWrapper implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Aurora Data API underlying library.\n     */\n    DataApiDriver: any\n\n    client: any\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"nested\" as const\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: AuroraPostgresConnectionOptions\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super()\n        this.connection = connection\n        this.options = connection.options as AuroraPostgresConnectionOptions\n        this.isReplicated = false\n\n        // load data-api package\n        this.loadDependencies()\n\n        this.client = new this.DataApiDriver(\n            this.options.region,\n            this.options.secretArn,\n            this.options.resourceArn,\n            this.options.database,\n            (query: string, parameters?: any[]) =>\n                this.connection.logger.logQuery(query, parameters),\n            this.options.serviceConfigOptions,\n            this.options.formatOptions,\n        )\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {}\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {}\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new AuroraPostgresQueryRunner(\n            this,\n            new this.DataApiDriver(\n                this.options.region,\n                this.options.secretArn,\n                this.options.resourceArn,\n                this.options.database,\n                (query: string, parameters?: any[]) =>\n                    this.connection.logger.logQuery(query, parameters),\n                this.options.serviceConfigOptions,\n                this.options.formatOptions,\n            ),\n            mode,\n        )\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (\n            this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false\n        ) {\n            return super.preparePersistentValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return this.client.preparePersistentValue(value, columnMetadata)\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (\n            this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false\n        ) {\n            return super.prepareHydratedValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return this.client.prepareHydratedValue(value, columnMetadata)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        const driver =\n            this.options.driver ||\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\")\n        const { pg } = driver\n\n        this.DataApiDriver = pg\n    }\n\n    /**\n     * Executes given query.\n     */\n    protected executeQuery(connection: any, query: string) {\n        return this.connection.query(query)\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect(): Promise<void> {\n        const extensionsMetadata = await this.checkMetadataForExtensions()\n\n        if (extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, this.connection)\n        }\n\n        return Promise.resolve()\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9861, "column": 0}, "map": {"version":3,"file":"BetterSqlite3QueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/better-sqlite3/BetterSqlite3QueryRunner.ts"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BetterSqlite3Driver } from \"./BetterSqlite3Driver\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\n\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nexport class BetterSqlite3QueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: BetterSqlite3Driver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: BetterSqlite3Driver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n        if (typeof this.driver.options.statementCacheSize === \"number\") {\n            this.cacheSize = this.driver.options.statementCacheSize\n        } else {\n            this.cacheSize = 100\n        }\n    }\n\n    private cacheSize: number\n    private stmtCache = new Map<string, any>()\n\n    private async getStmt(query: string) {\n        if (this.cacheSize > 0) {\n            let stmt = this.stmtCache.get(query)\n            if (!stmt) {\n                const databaseConnection = await this.connect()\n                stmt = databaseConnection.prepare(query)\n                this.stmtCache.set(query, stmt)\n                while (this.stmtCache.size > this.cacheSize) {\n                    // since es6 map keeps the insertion order,\n                    // it comes to be FIFO cache\n                    const key = this.stmtCache.keys().next().value!\n                    this.stmtCache.delete(key)\n                }\n            }\n            return stmt\n        } else {\n            const databaseConnection = await this.connect()\n            return databaseConnection.prepare(query)\n        }\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const connection = this.driver.connection\n\n        const broadcasterResult = new BroadcasterResult()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        this.broadcaster.broadcastBeforeQueryEvent(\n            broadcasterResult,\n            query,\n            parameters,\n        )\n        const queryStartTime = Date.now()\n\n        const stmt = await this.getStmt(query)\n\n        try {\n            const result = new QueryResult()\n\n            if (stmt.reader) {\n                const raw = stmt.all.apply(stmt, parameters)\n\n                result.raw = raw\n\n                if (Array.isArray(raw)) {\n                    result.records = raw\n                }\n            } else {\n                const raw = stmt.run.apply(stmt, parameters)\n                result.affected = raw.changes\n                result.raw = raw.lastInsertRowid\n            }\n\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime =\n                this.driver.options.maxQueryExecutionTime\n            const queryEndTime = Date.now()\n            const queryExecutionTime = queryEndTime - queryStartTime\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            )\n                connection.logger.logQuerySlow(\n                    queryExecutionTime,\n                    query,\n                    parameters,\n                    this,\n                )\n\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                true,\n                queryExecutionTime,\n                result.raw,\n                undefined,\n            )\n\n            if (!useStructuredResult) {\n                return result.raw\n            }\n\n            return result\n        } catch (err) {\n            connection.logger.logQueryError(err, query, parameters, this)\n            throw new QueryFailedError(query, parameters, err)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadTableRecords(\n        tablePath: string,\n        tableOrIndex: \"table\" | \"index\",\n    ) {\n        const [database, tableName] = this.splitTablePath(tablePath)\n        const res = await this.query(\n            `SELECT ${\n                database ? `'${database}'` : null\n            } as database, * FROM ${this.escapePath(\n                `${database ? `${database}.` : \"\"}sqlite_master`,\n            )} WHERE \"type\" = '${tableOrIndex}' AND \"${\n                tableOrIndex === \"table\" ? \"name\" : \"tbl_name\"\n            }\" IN ('${tableName}')`,\n        )\n        return res\n    }\n    protected async loadPragmaRecords(tablePath: string, pragma: string) {\n        const [database, tableName] = this.splitTablePath(tablePath)\n        const res = await this.query(\n            `PRAGMA ${\n                database ? `\"${database}\".` : \"\"\n            }${pragma}(\"${tableName}\")`,\n        )\n        return res\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9981, "column": 0}, "map": {"version":3,"file":"BetterSqlite3Driver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/better-sqlite3/BetterSqlite3Driver.ts"],"sourcesContent":["import fs from \"fs/promises\"\nimport path from \"path\"\nimport { DriverPackageNotInstalledError } from \"../../error\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { BetterSqlite3ConnectionOptions } from \"./BetterSqlite3ConnectionOptions\"\nimport { BetterSqlite3QueryRunner } from \"./BetterSqlite3QueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { filepathToName, isAbsolute } from \"../../util/PathUtils\"\n\n/**\n * Organizes communication with sqlite DBMS.\n */\nexport class BetterSqlite3Driver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: BetterSqlite3ConnectionOptions\n\n    /**\n     * SQLite underlying library.\n     */\n    sqlite: any\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.connection = connection\n        this.options = connection.options as BetterSqlite3ConnectionOptions\n        this.database = this.options.database\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n        this.databaseConnection.close()\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new BetterSqlite3QueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\"\n        }\n\n        return super.normalizeType(column)\n    }\n\n    async afterConnect(): Promise<void> {\n        return this.attachDatabases()\n    }\n\n    /**\n     * For SQLite, the database may be added in the decorator metadata. It will be a filepath to a database file.\n     */\n    buildTableName(\n        tableName: string,\n        _schema?: string,\n        database?: string,\n    ): string {\n        if (!database) return tableName\n        if (this.getAttachedDatabaseHandleByRelativePath(database))\n            return `${this.getAttachedDatabaseHandleByRelativePath(\n                database,\n            )}.${tableName}`\n\n        if (database === this.options.database) return tableName\n\n        // we use the decorated name as supplied when deriving attach handle (ideally without non-portable absolute path)\n        const identifierHash = filepathToName(database)\n        // decorated name will be assumed relative to main database file when non absolute. Paths supplied as absolute won't be portable\n        const absFilepath = isAbsolute(database)\n            ? database\n            : path.join(this.getMainDatabasePath(), database)\n\n        this.attachedDatabases[database] = {\n            attachFilepathAbsolute: absFilepath,\n            attachFilepathRelative: database,\n            attachHandle: identifierHash,\n        }\n\n        return `${identifierHash}.${tableName}`\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        // not to create database directory if is in memory\n        if (this.options.database !== \":memory:\")\n            await this.createDatabaseDirectory(\n                path.dirname(this.options.database),\n            )\n\n        const {\n            database,\n            readonly = false,\n            fileMustExist = false,\n            timeout = 5000,\n            verbose = null,\n            nativeBinding = null,\n            prepareDatabase,\n        } = this.options\n        const databaseConnection = this.sqlite(database, {\n            readonly,\n            fileMustExist,\n            timeout,\n            verbose,\n            nativeBinding,\n        })\n        // in the options, if encryption key for SQLCipher is setted.\n        // Must invoke key pragma before trying to do any other interaction with the database.\n        if (this.options.key) {\n            databaseConnection.exec(\n                `PRAGMA key = ${JSON.stringify(this.options.key)}`,\n            )\n        }\n\n        // function to run before a database is used in typeorm.\n        if (typeof prepareDatabase === \"function\") {\n            prepareDatabase(databaseConnection)\n        }\n\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        databaseConnection.exec(`PRAGMA foreign_keys = ON`)\n\n        // turn on WAL mode to enhance performance\n        if (this.options.enableWAL) {\n            databaseConnection.exec(`PRAGMA journal_mode = WAL`)\n        }\n\n        return databaseConnection\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const sqlite =\n                this.options.driver || PlatformTools.load(\"better-sqlite3\")\n            this.sqlite = sqlite\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"better-sqlite3\")\n        }\n    }\n\n    /**\n     * Auto creates database directory if it does not exist.\n     */\n    protected async createDatabaseDirectory(dbPath: string): Promise<void> {\n        await fs.mkdir(dbPath, { recursive: true })\n    }\n\n    /**\n     * Performs the attaching of the database files. The attachedDatabase should have been populated during calls to #buildTableName\n     * during EntityMetadata production (see EntityMetadata#buildTablePath)\n     *\n     * https://sqlite.org/lang_attach.html\n     */\n    protected async attachDatabases() {\n        // @todo - possibly check number of databases (but unqueriable at runtime sadly) - https://www.sqlite.org/limits.html#max_attached\n        for await (const {\n            attachHandle,\n            attachFilepathAbsolute,\n        } of Object.values(this.attachedDatabases)) {\n            await this.createDatabaseDirectory(\n                path.dirname(attachFilepathAbsolute),\n            )\n            await this.connection.query(\n                `ATTACH \"${attachFilepathAbsolute}\" AS \"${attachHandle}\"`,\n            )\n        }\n    }\n\n    protected getMainDatabasePath(): string {\n        const optionsDb = this.options.database\n        return path.dirname(\n            isAbsolute(optionsDb)\n                ? optionsDb\n                : path.join(this.options.baseDirectory!, optionsDb),\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10123, "column": 0}, "map": {"version":3,"file":"CapacitorQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/capacitor/CapacitorQueryRunner.ts"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { CapacitorDriver } from \"./CapacitorDriver\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: CapacitorDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: CapacitorDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    async executeSet(set: { statement: string; values?: any[] }[]) {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = await this.connect()\n\n        return databaseConnection.executeSet(set, false)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = await this.connect()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n\n        const command = query.substring(\n            0,\n            query.indexOf(\" \") !== -1 ? query.indexOf(\" \") : undefined,\n        )\n\n        try {\n            let raw: any\n\n            if (\n                [\n                    \"BEGIN\",\n                    \"ROLLBACK\",\n                    \"COMMIT\",\n                    \"CREATE\",\n                    \"ALTER\",\n                    \"DROP\",\n                ].indexOf(command) !== -1\n            ) {\n                raw = await databaseConnection.execute(query, false)\n            } else if ([\"INSERT\", \"UPDATE\", \"DELETE\"].indexOf(command) !== -1) {\n                raw = await databaseConnection.run(query, parameters, false)\n            } else {\n                raw = await databaseConnection.query(query, parameters || [])\n            }\n\n            const result = new QueryResult()\n\n            if (raw?.hasOwnProperty(\"values\")) {\n                result.raw = raw.values\n                result.records = raw.values\n            }\n\n            if (raw?.hasOwnProperty(\"changes\")) {\n                result.affected = raw.changes.changes\n                result.raw = raw.changes.lastId || raw.changes.changes\n            }\n\n            if (!useStructuredResult) {\n                return result.raw\n            }\n\n            return result\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n\n            throw new QueryFailedError(query, parameters, err)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map((key) => `\"${key}\"` + \"=?\")\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10220, "column": 0}, "map": {"version":3,"file":"CapacitorDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/capacitor/CapacitorDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { CapacitorConnectionOptions } from \"./CapacitorConnectionOptions\"\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\nexport class CapacitorDriver extends AbstractSqliteDriver {\n    driver: any\n    options: CapacitorConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.database = this.options.database\n        this.driver = this.options.driver\n\n        // load sqlite package\n        this.sqlite = this.options.driver\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = this.createDatabaseConnection()\n        await this.databaseConnection\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n        const databaseConnection = await this.databaseConnection\n        return databaseConnection.close().then(() => {\n            this.databaseConnection = undefined\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new CapacitorQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const databaseMode = this.options.mode || \"no-encryption\"\n        const isDatabaseEncryted = databaseMode !== \"no-encryption\"\n        const databaseVersion =\n            typeof this.options.version === \"undefined\"\n                ? 1\n                : this.options.version\n        const connection = await this.sqlite.createConnection(\n            this.options.database,\n            isDatabaseEncryted,\n            databaseMode,\n            databaseVersion,\n        )\n        await connection.open()\n\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await connection.execute(`PRAGMA foreign_keys = ON`)\n\n        if (\n            this.options.journalMode &&\n            [\"DELETE\", \"TRUNCATE\", \"PERSIST\", \"MEMORY\", \"WAL\", \"OFF\"].indexOf(\n                this.options.journalMode,\n            ) !== -1\n        ) {\n            await connection.execute(\n                `PRAGMA journal_mode = ${this.options.journalMode}`,\n            )\n        }\n\n        return connection\n    }\n\n    protected loadDependencies(): void {\n        this.sqlite = this.driver\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\n                \"Capacitor\",\n                \"@capacitor-community/sqlite\",\n            )\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10302, "column": 0}, "map": {"version":3,"file":"SpannerQueryRunner.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/spanner/SpannerQueryRunner.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { TypeORMError } from \"../../error\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Query } from \"../Query\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { SpannerDriver } from \"./SpannerDriver\"\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class SpannerQueryRunner extends BaseQueryRunner implements QueryRunner {\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SpannerDriver\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected session?: any\n\n    /**\n     * Transaction currently executed by this session.\n     */\n    protected sessionTransaction?: any\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SpannerDriver, mode: ReplicationMode) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.mode = mode\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect(): Promise<any> {\n        if (this.session) {\n            return Promise.resolve(this.session)\n        }\n\n        const [session] = await this.driver.instanceDatabase.createSession({})\n        this.session = session\n        this.sessionTransaction = await session.transaction()\n        return this.session\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    async release(): Promise<void> {\n        this.isReleased = true\n        if (this.session) {\n            await this.session.delete()\n        }\n        this.session = undefined\n        return Promise.resolve()\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n\n        await this.connect()\n        await this.sessionTransaction.begin()\n        this.connection.logger.logQuery(\"START TRANSACTION\")\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive || !this.sessionTransaction)\n            throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        await this.sessionTransaction.commit()\n        this.connection.logger.logQuery(\"COMMIT\")\n        this.isTransactionActive = false\n\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive || !this.sessionTransaction)\n            throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        await this.sessionTransaction.rollback()\n        this.connection.logger.logQuery(\"ROLLBACK\")\n        this.isTransactionActive = false\n\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult: boolean = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        await this.connect()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        await this.broadcaster.broadcast(\"BeforeQuery\", query, parameters)\n\n        const broadcasterResult = new BroadcasterResult()\n\n        try {\n            const queryStartTime = Date.now()\n            let rawResult:\n                | [\n                      any[],\n                      {\n                          queryPlan: null\n                          queryStats: null\n                          rowCountExact: string\n                          rowCount: string\n                      },\n                      { rowType: { fields: [] }; transaction: null },\n                  ]\n                | undefined = undefined\n            const isSelect = query.startsWith(\"SELECT\")\n            const executor =\n                isSelect && !this.isTransactionActive\n                    ? this.driver.instanceDatabase\n                    : this.sessionTransaction\n\n            if (!this.isTransactionActive && !isSelect) {\n                await this.sessionTransaction.begin()\n            }\n\n            try {\n                rawResult = await executor.run({\n                    sql: query,\n                    params: parameters\n                        ? parameters.reduce((params, value, index) => {\n                              params[\"param\" + index] = value\n                              return params\n                          }, {} as ObjectLiteral)\n                        : undefined,\n                    json: true,\n                })\n                if (!this.isTransactionActive && !isSelect) {\n                    await this.sessionTransaction.commit()\n                }\n            } catch (error) {\n                try {\n                    // we throw original error even if rollback thrown an error\n                    if (!this.isTransactionActive && !isSelect)\n                        await this.sessionTransaction.rollback()\n                } catch (rollbackError) {}\n                throw error\n            }\n\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime =\n                this.driver.options.maxQueryExecutionTime\n            const queryEndTime = Date.now()\n            const queryExecutionTime = queryEndTime - queryStartTime\n\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                true,\n                queryExecutionTime,\n                rawResult,\n                undefined,\n            )\n\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            )\n                this.driver.connection.logger.logQuerySlow(\n                    queryExecutionTime,\n                    query,\n                    parameters,\n                    this,\n                )\n\n            const result = new QueryResult()\n\n            result.raw = rawResult\n            result.records = rawResult ? rawResult[0] : []\n            if (rawResult && rawResult[1] && rawResult[1].rowCountExact) {\n                result.affected = parseInt(rawResult[1].rowCountExact)\n            }\n\n            if (!useStructuredResult) {\n                return result.records\n            }\n\n            return result\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            this.broadcaster.broadcastAfterQueryEvent(\n                broadcasterResult,\n                query,\n                parameters,\n                false,\n                undefined,\n                undefined,\n                err,\n            )\n            throw new QueryFailedError(query, parameters, err)\n        } finally {\n            await broadcasterResult.wait()\n        }\n    }\n\n    /**\n     * Update database schema.\n     * Used for creating/altering/dropping tables, columns, indexes, etc.\n     *\n     * DDL changing queries should be executed by `updateSchema()` method.\n     */\n    async updateDDL(query: string, parameters?: any[]): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        try {\n            const queryStartTime = Date.now()\n            const [operation] = await this.driver.instanceDatabase.updateSchema(\n                query,\n            )\n            await operation.promise()\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime =\n                this.driver.options.maxQueryExecutionTime\n            const queryEndTime = Date.now()\n            const queryExecutionTime = queryEndTime - queryStartTime\n            if (\n                maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime\n            )\n                this.driver.connection.logger.logQuerySlow(\n                    queryExecutionTime,\n                    query,\n                    parameters,\n                    this,\n                )\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            throw new QueryFailedError(query, parameters, err)\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        try {\n            this.driver.connection.logger.logQuery(query, parameters, this)\n            const request = {\n                sql: query,\n                params: parameters\n                    ? parameters.reduce((params, value, index) => {\n                          params[\"param\" + index] = value\n                          return params\n                      }, {} as ObjectLiteral)\n                    : undefined,\n                json: true,\n            }\n            const stream = this.driver.instanceDatabase.runStream(request)\n\n            if (onEnd) {\n                stream.on(\"end\", onEnd)\n            }\n\n            if (onError) {\n                stream.on(\"error\", onError)\n            }\n\n            return stream\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            throw new QueryFailedError(query, parameters, err)\n        }\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([])\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        throw new TypeORMError(\n            `Check database queries are not supported by Spanner driver.`,\n        )\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        throw new TypeORMError(\n            `Check database queries are not supported by Spanner driver.`,\n        )\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`,\n        )\n        return result.length ? true : false\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        throw new TypeORMError(\n            `Check schema queries are not supported by Spanner driver.`,\n        )\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const tableName =\n            tableOrName instanceof Table ? tableOrName.name : tableOrName\n        const sql =\n            `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE' ` +\n            `AND \\`TABLE_NAME\\` = '${tableName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        const tableName =\n            tableOrName instanceof Table ? tableOrName.name : tableOrName\n        const sql =\n            `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' ` +\n            `AND \\`TABLE_NAME\\` = '${tableName}' AND \\`COLUMN_NAME\\` = '${columnName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Creates a new database.\n     * Note: Spanner does not support database creation inside a transaction block.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const databaseAlreadyExists = await this.hasDatabase(database)\n\n            if (databaseAlreadyExists) return Promise.resolve()\n        }\n\n        const up = `CREATE DATABASE \"${database}\"`\n        const down = `DROP DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Drops database.\n     * Note: Spanner does not support database dropping inside a transaction block.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist\n            ? `DROP DATABASE IF EXISTS \"${database}\"`\n            : `DROP DATABASE \"${database}\"`\n        const down = `CREATE DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(\n        schemaPath: string,\n        ifExist?: boolean,\n        isCascade?: boolean,\n    ): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table,\n                        index.columnNames,\n                        index.where,\n                    )\n                upQueries.push(this.createIndexSql(table, index))\n                downQueries.push(this.dropIndexSql(table, index))\n            })\n        }\n\n        // if table has column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        target: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true,\n    ): Promise<void> {\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const tablePath = this.getTablePath(target)\n        const table = await this.getCachedTable(tablePath)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(table, index))\n                downQueries.push(this.createIndexSql(table, index))\n            })\n        }\n\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        upQueries.push(this.dropTableSql(table))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        upQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        downQueries.push(await this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(await this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Rename table queries are not supported by Spanner driver.`,\n        )\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(column)}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} DROP COLUMN ${this.driver.escape(column.name)}`,\n            ),\n        )\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex))\n            downQueries.push(this.dropIndexSql(table, columnIndex))\n        } else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table, [\n                    column.name,\n                ]),\n                columnNames: [column.name],\n                isUnique: true,\n            })\n            clonedTable.indices.push(uniqueIndex)\n            clonedTable.uniques.push(\n                new TableUnique({\n                    name: uniqueIndex.name,\n                    columnNames: uniqueIndex.columnNames,\n                }),\n            )\n\n            upQueries.push(this.createIndexSql(table, uniqueIndex))\n            downQueries.push(this.dropIndexSql(table, uniqueIndex))\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.addColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n        const oldColumn =\n            oldTableColumnOrName instanceof TableColumn\n                ? oldTableColumnOrName\n                : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        let newColumn\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        return this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n        let clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        const oldColumn =\n            oldTableColumnOrName instanceof TableColumn\n                ? oldTableColumnOrName\n                : table.columns.find(\n                      (column) => column.name === oldTableColumnOrName,\n                  )\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        if (\n            oldColumn.name !== newColumn.name ||\n            oldColumn.type !== newColumn.type ||\n            oldColumn.length !== newColumn.length ||\n            oldColumn.isArray !== newColumn.isArray ||\n            oldColumn.generatedType !== newColumn.generatedType ||\n            oldColumn.asExpression !== newColumn.asExpression\n        ) {\n            // To avoid data conversion, we just recreate column\n            await this.dropColumn(table, oldColumn)\n            await this.addColumn(table, newColumn)\n\n            // update cloned table\n            clonedTable = table.clone()\n        } else {\n            if (\n                newColumn.precision !== oldColumn.precision ||\n                newColumn.scale !== oldColumn.scale\n            ) {\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\n                            newColumn.name\n                        }\" TYPE ${this.driver.createFullType(newColumn)}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\n                            newColumn.name\n                        }\" TYPE ${this.driver.createFullType(oldColumn)}`,\n                    ),\n                )\n            }\n\n            if (oldColumn.isNullable !== newColumn.isNullable) {\n                if (newColumn.isNullable) {\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`,\n                        ),\n                    )\n                } else {\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`,\n                        ),\n                    )\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table, [\n                            newColumn.name,\n                        ]),\n                        columnNames: [newColumn.name],\n                        isUnique: true,\n                    })\n                    clonedTable.indices.push(uniqueIndex)\n                    clonedTable.uniques.push(\n                        new TableUnique({\n                            name: uniqueIndex.name,\n                            columnNames: uniqueIndex.columnNames,\n                        }),\n                    )\n\n                    upQueries.push(this.createIndexSql(table, uniqueIndex))\n                    downQueries.push(this.dropIndexSql(table, uniqueIndex))\n                } else {\n                    const uniqueIndex = clonedTable.indices.find((index) => {\n                        return (\n                            index.columnNames.length === 1 &&\n                            index.isUnique === true &&\n                            !!index.columnNames.find(\n                                (columnName) => columnName === newColumn.name,\n                            )\n                        )\n                    })\n                    clonedTable.indices.splice(\n                        clonedTable.indices.indexOf(uniqueIndex!),\n                        1,\n                    )\n\n                    const tableUnique = clonedTable.uniques.find(\n                        (unique) => unique.name === uniqueIndex!.name,\n                    )\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(tableUnique!),\n                        1,\n                    )\n\n                    upQueries.push(this.dropIndexSql(table, uniqueIndex!))\n                    downQueries.push(this.createIndexSql(table, uniqueIndex!))\n                }\n            }\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n        const column =\n            columnOrName instanceof TableColumn\n                ? columnOrName\n                : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\n            )\n\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1,\n            )\n            upQueries.push(this.dropIndexSql(table, columnIndex))\n            downQueries.push(this.createIndexSql(table, columnIndex))\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(\n            (check) =>\n                !!check.columnNames &&\n                check.columnNames.length === 1 &&\n                check.columnNames[0] === column.name,\n        )\n        if (columnCheck) {\n            clonedTable.checks.splice(\n                clonedTable.checks.indexOf(columnCheck),\n                1,\n            )\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} DROP COLUMN ${this.driver.escape(column.name)}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(column)}`,\n            ),\n        )\n\n        if (column.generatedType && column.asExpression) {\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n            const insertQuery = this.insertTypeormMetadataSql({\n                table: table.name,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.removeColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     *\n     * Not supported in Spanner.\n     * @see https://cloud.google.com/spanner/docs/schema-and-data-model#notes_about_key_columns\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): Promise<void> {\n        throw new Error(\n            \"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\",\n        )\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        throw new Error(\n            \"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\",\n        )\n    }\n\n    /**\n     * Creates a new primary key.\n     *\n     * Not supported in Spanner.\n     * @see https://cloud.google.com/spanner/docs/schema-and-data-model#notes_about_key_columns\n     */\n    async dropPrimaryKey(tableOrName: Table | string): Promise<void> {\n        throw new Error(\n            \"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\",\n        )\n    }\n\n    /**\n     * Creates new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Spanner does not support unique constraints. Use unique index instead.`,\n        )\n    }\n\n    /**\n     * Creates new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Spanner does not support unique constraints. Use unique index instead.`,\n        )\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Spanner does not support unique constraints. Use unique index instead.`,\n        )\n    }\n\n    /**\n     * Drops unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Spanner does not support unique constraints. Use unique index instead.`,\n        )\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n\n        // new check constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    checkConstraint.expression!,\n                )\n\n        const up = this.createCheckConstraintSql(table, checkConstraint)\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.addCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.createCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n        const checkConstraint =\n            checkOrName instanceof TableCheck\n                ? checkOrName\n                : table.checks.find((c) => c.name === checkOrName)\n        if (!checkConstraint)\n            throw new TypeORMError(\n                `Supplied check constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\n        const down = this.createCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.removeCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.dropCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Spanner does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Spanner does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Spanner does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `Spanner does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table,\n                foreignKey.columnNames,\n                this.getTablePath(foreignKey),\n                foreignKey.referencedColumnNames,\n            )\n\n        const up = this.createForeignKeySql(table, foreignKey)\n        const down = this.dropForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.addForeignKey(foreignKey)\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        for (const foreignKey of foreignKeys) {\n            await this.createForeignKey(tableOrName, foreignKey)\n        }\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n        const foreignKey =\n            foreignKeyOrName instanceof TableForeignKey\n                ? foreignKeyOrName\n                : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        const up = this.dropForeignKeySql(table, foreignKey)\n        const down = this.createForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.removeForeignKey(foreignKey)\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        for (const foreignKey of foreignKeys) {\n            await this.dropForeignKey(tableOrName, foreignKey)\n        }\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.addIndex(index)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        for (const index of indices) {\n            await this.createIndex(tableOrName, index)\n        }\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName)\n        const index =\n            indexOrName instanceof TableIndex\n                ? indexOrName\n                : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index ${indexOrName} was not found in table ${table.name}`,\n            )\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(table, index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        for (const index of indices) {\n            await this.dropIndex(tableOrName, index)\n        }\n    }\n\n    /**\n     * Clears all table contents.\n     * Spanner does not support TRUNCATE TABLE statement, so we use DELETE FROM.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`DELETE FROM ${this.escapePath(tableName)} WHERE true`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        // drop index queries\n        const selectIndexDropsQuery =\n            `SELECT concat('DROP INDEX \\`', INDEX_NAME, '\\`') AS \\`query\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`INDEXES\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`INDEX_TYPE\\` = 'INDEX' AND \\`SPANNER_IS_MANAGED\\` = false`\n        const dropIndexQueries: ObjectLiteral[] = await this.query(\n            selectIndexDropsQuery,\n        )\n\n        // drop foreign key queries\n        const selectFKDropsQuery =\n            `SELECT concat('ALTER TABLE \\`', TABLE_NAME, '\\`', ' DROP CONSTRAINT \\`', CONSTRAINT_NAME, '\\`') AS \\`query\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`CONSTRAINT_TYPE\\` = 'FOREIGN KEY'`\n        const dropFKQueries: ObjectLiteral[] = await this.query(\n            selectFKDropsQuery,\n        )\n\n        // drop view queries\n        // const selectViewDropsQuery = `SELECT concat('DROP VIEW \\`', TABLE_NAME, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\``\n        // const dropViewQueries: ObjectLiteral[] = await this.query(\n        //     selectViewDropsQuery,\n        // )\n\n        // drop table queries\n        const dropTablesQuery =\n            `SELECT concat('DROP TABLE \\`', TABLE_NAME, '\\`') AS \\`query\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE'`\n        const dropTableQueries: ObjectLiteral[] = await this.query(\n            dropTablesQuery,\n        )\n\n        if (\n            !dropIndexQueries.length &&\n            !dropFKQueries.length &&\n            // !dropViewQueries.length &&\n            !dropTableQueries.length\n        )\n            return\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            for (const query of dropIndexQueries) {\n                await this.updateDDL(query[\"query\"])\n            }\n            for (const query of dropFKQueries) {\n                await this.updateDDL(query[\"query\"])\n            }\n\n            // for (let query of dropViewQueries) {\n            //     await this.updateDDL(query[\"query\"])\n            // }\n\n            for (const query of dropTableQueries) {\n                await this.updateDDL(query[\"query\"])\n            }\n\n            await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Override Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql(): Promise<void> {\n        for (const { query, parameters } of this.sqlInMemory.upQueries) {\n            if (this.isDMLQuery(query)) {\n                await this.query(query, parameters)\n            } else {\n                await this.updateDDL(query, parameters)\n            }\n        }\n    }\n\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql(): Promise<void> {\n        for (const {\n            query,\n            parameters,\n        } of this.sqlInMemory.downQueries.reverse()) {\n            if (this.isDMLQuery(query)) {\n                await this.query(query, parameters)\n            } else {\n                await this.updateDDL(query, parameters)\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames?: string[]): Promise<View[]> {\n        // const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        // if (!hasTable) {\n        //     return []\n        // }\n        //\n        // if (!viewNames) {\n        //     viewNames = []\n        // }\n        //\n        // const escapedViewNames = viewNames\n        //     .map((viewName) => `'${viewName}'`)\n        //     .join(\", \")\n        //\n        // const query =\n        //     `SELECT \\`T\\`.*, \\`V\\`.\\`VIEW_DEFINITION\\` FROM ${this.escapePath(\n        //         this.getTypeormMetadataTableName(),\n        //     )} \\`T\\` ` +\n        //     `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\` \\`V\\` ON \\`V\\`.\\`TABLE_NAME\\` = \\`T\\`.\\`NAME\\` ` +\n        //     `WHERE \\`T\\`.\\`TYPE\\` = '${MetadataTableType.VIEW}' ${\n        //         viewNames.length\n        //             ? ` AND \\`T\\`.\\`NAME\\` IN (${escapedViewNames})`\n        //             : \"\"\n        //     }`\n        // const dbViews = await this.query(query)\n        // return dbViews.map((dbView: any) => {\n        //     const view = new View()\n        //     view.database = dbView[\"NAME\"]\n        //     view.name = this.driver.buildTableName(dbView[\"NAME\"])\n        //     view.expression = dbView[\"NAME\"]\n        //     return view\n        // })\n\n        return Promise.resolve([])\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        const dbTables: { TABLE_NAME: string }[] = []\n\n        if (!tableNames || !tableNames.length) {\n            // Since we don't have any of this data we have to do a scan\n            const tablesSql =\n                `SELECT \\`TABLE_NAME\\` ` +\n                `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\n                `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE'`\n            dbTables.push(...(await this.query(tablesSql)))\n        } else {\n            const tablesSql =\n                `SELECT \\`TABLE_NAME\\` ` +\n                `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\n                `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE' ` +\n                `AND \\`TABLE_NAME\\` IN (${tableNames\n                    .map((tableName) => `'${tableName}'`)\n                    .join(\", \")})`\n\n            dbTables.push(...(await this.query(tablesSql)))\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length) return []\n\n        const loadedTableNames = dbTables\n            .map((dbTable) => `'${dbTable.TABLE_NAME}'`)\n            .join(\", \")\n\n        const columnsSql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_NAME\\` IN (${loadedTableNames})`\n\n        const primaryKeySql =\n            `SELECT \\`KCU\\`.\\`TABLE_NAME\\`, \\`KCU\\`.\\`COLUMN_NAME\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`KCU\\` ON \\`KCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'PRIMARY KEY' ` +\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames})`\n\n        const indicesSql =\n            `SELECT \\`I\\`.\\`TABLE_NAME\\`, \\`I\\`.\\`INDEX_NAME\\`, \\`I\\`.\\`IS_UNIQUE\\`, \\`I\\`.\\`IS_NULL_FILTERED\\`, \\`IC\\`.\\`COLUMN_NAME\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`INDEXES\\` \\`I\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`INDEX_COLUMNS\\` \\`IC\\` ON \\`IC\\`.\\`INDEX_NAME\\` = \\`I\\`.\\`INDEX_NAME\\` ` +\n            `AND \\`IC\\`.\\`TABLE_NAME\\` = \\`I\\`.\\`TABLE_NAME\\` ` +\n            `WHERE \\`I\\`.\\`TABLE_CATALOG\\` = '' AND \\`I\\`.\\`TABLE_SCHEMA\\` = '' AND \\`I\\`.\\`TABLE_NAME\\` IN (${loadedTableNames}) ` +\n            `AND \\`I\\`.\\`INDEX_TYPE\\` = 'INDEX' AND \\`I\\`.\\`SPANNER_IS_MANAGED\\` = false`\n\n        const checksSql =\n            `SELECT \\`TC\\`.\\`TABLE_NAME\\`, \\`TC\\`.\\`CONSTRAINT_NAME\\`, \\`CC\\`.\\`CHECK_CLAUSE\\`, \\`CCU\\`.\\`COLUMN_NAME\\`` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_COLUMN_USAGE\\` \\`CCU\\` ON \\`CCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CHECK_CONSTRAINTS\\` \\`CC\\` ON \\`CC\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'CHECK' ` +\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames}) AND \\`TC\\`.\\`CONSTRAINT_NAME\\` NOT LIKE 'CK_IS_NOT_NULL%'`\n\n        const foreignKeysSql =\n            `SELECT \\`TC\\`.\\`TABLE_NAME\\`, \\`TC\\`.\\`CONSTRAINT_NAME\\`, \\`KCU\\`.\\`COLUMN_NAME\\`, ` +\n            `\\`CTU\\`.\\`TABLE_NAME\\` AS \\`REFERENCED_TABLE_NAME\\`, \\`CCU\\`.\\`COLUMN_NAME\\` AS \\`REFERENCED_COLUMN_NAME\\`, ` +\n            `\\`RC\\`.\\`UPDATE_RULE\\`, \\`RC\\`.\\`DELETE_RULE\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`KCU\\` ON \\`KCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_TABLE_USAGE\\` \\`CTU\\` ON \\`CTU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`RC\\` ON \\`RC\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_COLUMN_USAGE\\` \\`CCU\\` ON \\`CCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'FOREIGN KEY' ` +\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames})`\n\n        const [\n            dbColumns,\n            dbPrimaryKeys,\n            dbIndices,\n            dbChecks,\n            dbForeignKeys,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(primaryKeySql),\n            this.query(indicesSql),\n            this.query(checksSql),\n            this.query(foreignKeysSql),\n        ])\n\n        // create tables for loaded tables\n        return Promise.all(\n            dbTables.map(async (dbTable) => {\n                const table = new Table()\n\n                table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"])\n\n                // create columns from the loaded columns\n                table.columns = await Promise.all(\n                    dbColumns\n                        .filter(\n                            (dbColumn) =>\n                                dbColumn[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"],\n                        )\n                        .map(async (dbColumn) => {\n                            const columnUniqueIndices = dbIndices.filter(\n                                (dbIndex) => {\n                                    return (\n                                        dbIndex[\"TABLE_NAME\"] ===\n                                            dbTable[\"TABLE_NAME\"] &&\n                                        dbIndex[\"COLUMN_NAME\"] ===\n                                            dbColumn[\"COLUMN_NAME\"] &&\n                                        dbIndex[\"IS_UNIQUE\"] === true\n                                    )\n                                },\n                            )\n\n                            const tableMetadata =\n                                this.connection.entityMetadatas.find(\n                                    (metadata) =>\n                                        this.getTablePath(table) ===\n                                        this.getTablePath(metadata),\n                                )\n                            const hasIgnoredIndex =\n                                columnUniqueIndices.length > 0 &&\n                                tableMetadata &&\n                                tableMetadata.indices.some((index) => {\n                                    return columnUniqueIndices.some(\n                                        (uniqueIndex) => {\n                                            return (\n                                                index.name ===\n                                                    uniqueIndex[\"INDEX_NAME\"] &&\n                                                index.synchronize === false\n                                            )\n                                        },\n                                    )\n                                })\n\n                            const isConstraintComposite =\n                                columnUniqueIndices.every((uniqueIndex) => {\n                                    return dbIndices.some(\n                                        (dbIndex) =>\n                                            dbIndex[\"INDEX_NAME\"] ===\n                                                uniqueIndex[\"INDEX_NAME\"] &&\n                                            dbIndex[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"],\n                                    )\n                                })\n\n                            const tableColumn = new TableColumn()\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\n\n                            let fullType =\n                                dbColumn[\"SPANNER_TYPE\"].toLowerCase()\n                            if (fullType.indexOf(\"array\") !== -1) {\n                                tableColumn.isArray = true\n                                fullType = fullType.substring(\n                                    fullType.indexOf(\"<\") + 1,\n                                    fullType.indexOf(\">\"),\n                                )\n                            }\n\n                            if (fullType.indexOf(\"(\") !== -1) {\n                                tableColumn.type = fullType.substring(\n                                    0,\n                                    fullType.indexOf(\"(\"),\n                                )\n                            } else {\n                                tableColumn.type = fullType\n                            }\n\n                            if (\n                                this.driver.withLengthColumnTypes.indexOf(\n                                    tableColumn.type as ColumnType,\n                                ) !== -1\n                            ) {\n                                tableColumn.length = fullType.substring(\n                                    fullType.indexOf(\"(\") + 1,\n                                    fullType.indexOf(\")\"),\n                                )\n                            }\n\n                            if (dbColumn[\"IS_GENERATED\"] === \"ALWAYS\") {\n                                tableColumn.asExpression =\n                                    dbColumn[\"GENERATION_EXPRESSION\"]\n                                tableColumn.generatedType = \"STORED\"\n\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\n                                const asExpressionQuery =\n                                    this.selectTypeormMetadataSql({\n                                        table: dbTable[\"TABLE_NAME\"],\n                                        type: MetadataTableType.GENERATED_COLUMN,\n                                        name: tableColumn.name,\n                                    })\n\n                                const results = await this.query(\n                                    asExpressionQuery.query,\n                                    asExpressionQuery.parameters,\n                                )\n\n                                if (results[0] && results[0].value) {\n                                    tableColumn.asExpression = results[0].value\n                                } else {\n                                    tableColumn.asExpression = \"\"\n                                }\n                            }\n\n                            tableColumn.isUnique =\n                                columnUniqueIndices.length > 0 &&\n                                !hasIgnoredIndex &&\n                                !isConstraintComposite\n                            tableColumn.isNullable =\n                                dbColumn[\"IS_NULLABLE\"] === \"YES\"\n                            tableColumn.isPrimary = dbPrimaryKeys.some(\n                                (dbPrimaryKey) => {\n                                    return (\n                                        dbPrimaryKey[\"TABLE_NAME\"] ===\n                                            dbColumn[\"TABLE_NAME\"] &&\n                                        dbPrimaryKey[\"COLUMN_NAME\"] ===\n                                            dbColumn[\"COLUMN_NAME\"]\n                                    )\n                                },\n                            )\n\n                            return tableColumn\n                        }),\n                )\n\n                const tableForeignKeys = dbForeignKeys.filter(\n                    (dbForeignKey) => {\n                        return (\n                            dbForeignKey[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"]\n                        )\n                    },\n                )\n\n                table.foreignKeys = OrmUtils.uniq(\n                    tableForeignKeys,\n                    (dbForeignKey) => dbForeignKey[\"CONSTRAINT_NAME\"],\n                ).map((dbForeignKey) => {\n                    const foreignKeys = tableForeignKeys.filter(\n                        (dbFk) =>\n                            dbFk[\"CONSTRAINT_NAME\"] ===\n                            dbForeignKey[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableForeignKey({\n                        name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                        columnNames: OrmUtils.uniq(\n                            foreignKeys.map((dbFk) => dbFk[\"COLUMN_NAME\"]),\n                        ),\n                        referencedDatabase:\n                            dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"],\n                        referencedTableName:\n                            dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                        referencedColumnNames: OrmUtils.uniq(\n                            foreignKeys.map(\n                                (dbFk) => dbFk[\"REFERENCED_COLUMN_NAME\"],\n                            ),\n                        ),\n                        onDelete: dbForeignKey[\"DELETE_RULE\"],\n                        onUpdate: dbForeignKey[\"UPDATE_RULE\"],\n                    })\n                })\n\n                const tableIndices = dbIndices.filter(\n                    (dbIndex) =>\n                        dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"],\n                )\n\n                table.indices = OrmUtils.uniq(\n                    tableIndices,\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\n                ).map((constraint) => {\n                    const indices = tableIndices.filter((index) => {\n                        return index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\n                    })\n\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: constraint[\"INDEX_NAME\"],\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                        isUnique: constraint[\"IS_UNIQUE\"],\n                        isNullFiltered: constraint[\"IS_NULL_FILTERED\"],\n                    })\n                })\n\n                const tableChecks = dbChecks.filter(\n                    (dbCheck) =>\n                        dbCheck[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"],\n                )\n\n                table.checks = OrmUtils.uniq(\n                    tableChecks,\n                    (dbIndex) => dbIndex[\"CONSTRAINT_NAME\"],\n                ).map((constraint) => {\n                    const checks = tableChecks.filter(\n                        (dbC) =>\n                            dbC[\"CONSTRAINT_NAME\"] ===\n                            constraint[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableCheck({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                        expression: constraint[\"CHECK_CLAUSE\"],\n                    })\n                })\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds create table sql.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column))\n            .join(\", \")\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\n\n        // we create unique indexes instead of unique constraints, because Spanner does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueIndexExist = table.indices.some((index) => {\n                    return (\n                        index.columnNames.length === 1 &&\n                        !!index.isUnique &&\n                        index.columnNames.indexOf(column.name) !== -1\n                    )\n                })\n                const isUniqueConstraintExist = table.uniques.some((unique) => {\n                    return (\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames.indexOf(column.name) !== -1\n                    )\n                })\n                if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                    table.indices.push(\n                        new TableIndex({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                            isUnique: true,\n                        }),\n                    )\n            })\n\n        // as Spanner does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach((unique) => {\n                const uniqueExist = table.indices.some(\n                    (index) => index.name === unique.name,\n                )\n                if (!uniqueExist) {\n                    table.indices.push(\n                        new TableIndex({\n                            name: unique.name,\n                            columnNames: unique.columnNames,\n                            isUnique: true,\n                        }),\n                    )\n                }\n            })\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              table,\n                              check.expression!,\n                          )\n                    return `CONSTRAINT \\`${checkName}\\` CHECK (${check.expression})`\n                })\n                .join(\", \")\n\n            sql += `, ${checksSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\\`${columnName}\\``)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table,\n                            fk.columnNames,\n                            this.getTablePath(fk),\n                            fk.referencedColumnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\\`${columnName}\\``)\n                        .join(\", \")\n\n                    return `CONSTRAINT \\`${\n                        fk.name\n                    }\\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\n                        this.getTablePath(fk),\n                    )} (${referencedColumnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        sql += `)`\n\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary,\n        )\n        if (primaryColumns.length > 0) {\n            const columnNames = primaryColumns\n                .map((column) => this.driver.escape(column.name))\n                .join(\", \")\n            sql += ` PRIMARY KEY (${columnNames})`\n        }\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrPath: Table | string): Query {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`)\n    }\n\n    protected createViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\"\n        const viewName = this.escapePath(view)\n\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression\n                : view.expression(this.connection).getQuery()\n        return new Query(\n            `CREATE ${materializedClause}VIEW ${viewName} SQL SECURITY INVOKER AS ${expression}`,\n        )\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const { schema, tableName: name } = this.driver.parseTableName(view)\n\n        const type = view.materialized\n            ? MetadataTableType.MATERIALIZED_VIEW\n            : MetadataTableType.VIEW\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        return this.insertTypeormMetadataSql({\n            type,\n            schema,\n            name,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\"\n        return new Query(\n            `DROP ${materializedClause}VIEW ${this.escapePath(view)}`,\n        )\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(view: View): Promise<Query> {\n        const { schema, tableName: name } = this.driver.parseTableName(view)\n\n        const type = view.materialized\n            ? MetadataTableType.MATERIALIZED_VIEW\n            : MetadataTableType.VIEW\n        return this.deleteTypeormMetadataSql({ type, schema, name })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => this.driver.escape(columnName))\n            .join(\", \")\n        let indexType = \"\"\n        if (index.isUnique) indexType += \"UNIQUE \"\n        if (index.isNullFiltered) indexType += \"NULL_FILTERED \"\n\n        return new Query(\n            `CREATE ${indexType}INDEX \\`${index.name}\\` ON ${this.escapePath(\n                table,\n            )} (${columns})`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(\n        table: Table,\n        indexOrName: TableIndex | string,\n    ): Query {\n        const indexName =\n            indexOrName instanceof TableIndex ? indexOrName.name : indexOrName\n        return new Query(`DROP INDEX \\`${indexName}\\``)\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(\n        table: Table,\n        checkConstraint: TableCheck,\n    ): Query {\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${\n                checkConstraint.name\n            }\\` CHECK (${checkConstraint.expression})`,\n        )\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(\n        table: Table,\n        checkOrName: TableCheck | string,\n    ): Query {\n        const checkName =\n            checkOrName instanceof TableCheck ? checkOrName.name : checkOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \\`${checkName}\\``,\n        )\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey,\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => this.driver.escape(column))\n            .join(\", \")\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => this.driver.escape(column))\n            .join(\",\")\n        const sql =\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${\n                foreignKey.name\n            }\\` FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(\n                this.getTablePath(foreignKey),\n            )} (${referencedColumnNames})`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Query {\n        const foreignKeyName =\n            foreignKeyOrName instanceof TableForeignKey\n                ? foreignKeyOrName.name\n                : foreignKeyOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \\`${foreignKeyName}\\``,\n        )\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table | View | string): string {\n        const { tableName } = this.driver.parseTableName(target)\n        return `\\`${tableName}\\``\n    }\n\n    /**\n     * Builds a part of query to create/change a column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c = `${this.driver.escape(\n            column.name,\n        )} ${this.connection.driver.createFullType(column)}`\n\n        // Spanner supports only STORED generated column type\n        if (column.generatedType === \"STORED\" && column.asExpression) {\n            c += ` AS (${column.asExpression}) STORED`\n        } else {\n            if (!column.isNullable) c += \" NOT NULL\"\n        }\n\n        return c\n    }\n\n    /**\n     * Executes sql used special for schema build.\n     */\n    protected async executeQueries(\n        upQueries: Query | Query[],\n        downQueries: Query | Query[],\n    ): Promise<void> {\n        if (upQueries instanceof Query) upQueries = [upQueries]\n        if (downQueries instanceof Query) downQueries = [downQueries]\n\n        this.sqlInMemory.upQueries.push(...upQueries)\n        this.sqlInMemory.downQueries.push(...downQueries)\n\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve() as Promise<any>\n\n        for (const { query, parameters } of upQueries) {\n            if (this.isDMLQuery(query)) {\n                await this.query(query, parameters)\n            } else {\n                await this.updateDDL(query, parameters)\n            }\n        }\n    }\n\n    protected isDMLQuery(query: string): boolean {\n        return (\n            query.startsWith(\"INSERT\") ||\n            query.startsWith(\"UPDATE\") ||\n            query.startsWith(\"DELETE\")\n        )\n    }\n\n    /**\n     * Change table comment.\n     */\n    changeTableComment(\n        tableOrName: Table | string,\n        comment?: string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `spanner driver does not support change table comment.`,\n        )\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11493, "column": 0}, "map": {"version":3,"file":"SpannerDriver.js","sourceRoot":"../..","sources":["file:///home/user/studio/node_modules/typeorm/src/driver/spanner/SpannerDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { SpannerQueryRunner } from \"./SpannerQueryRunner\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { Connection } from \"../../connection/Connection\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { SpannerConnectionOptions } from \"./SpannerConnectionOptions\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { UpsertType } from \"../types/UpsertType\"\n\n/**\n * Organizes communication with Spanner DBMS.\n */\nexport class SpannerDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection\n\n    /**\n     * Cloud Spanner underlying library.\n     */\n    spanner: any\n\n    /**\n     * Cloud Spanner instance.\n     */\n    instance: any\n\n    /**\n     * Cloud Spanner database.\n     */\n    instanceDatabase: any\n\n    /**\n     * Database name.\n     */\n    database?: string\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SpannerConnectionOptions\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"none\" as const\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://cloud.google.com/spanner/docs/reference/standard-sql/data-types\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"bool\",\n        \"int64\",\n        \"float64\",\n        \"numeric\",\n        \"string\",\n        \"json\",\n        \"bytes\",\n        \"date\",\n        \"timestamp\",\n        \"array\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = []\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\"string\", \"bytes\"]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withWidthColumnTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = []\n\n    /**\n     * Gets list of column data types that supports scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = []\n\n    /**\n     * ORM has special columns and we need to know what database column types should be for those columns.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"int64\",\n        treeLevel: \"int64\",\n        migrationId: \"int64\",\n        migrationName: \"string\",\n        migrationTimestamp: \"int64\",\n        cacheId: \"string\",\n        cacheIdentifier: \"string\",\n        cacheTime: \"int64\",\n        cacheDuration: \"int64\",\n        cacheQuery: \"string\",\n        cacheResult: \"string\",\n        metadataType: \"string\",\n        metadataDatabase: \"string\",\n        metadataSchema: \"string\",\n        metadataTable: \"string\",\n        metadataName: \"string\",\n        metadataValue: \"string\",\n    }\n\n    /**\n     * The prefix used for the parameters\n     */\n    parametersPrefix: string = \"@param\"\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {}\n\n    /**\n     * Max length allowed by MySQL for aliases.\n     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n     */\n    maxAliasLength = 63\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection\n        this.options = connection.options as SpannerConnectionOptions\n        this.isReplicated = this.options.replication ? true : false\n\n        // load mysql package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.instance = this.spanner.instance(this.options.instanceId)\n        this.instanceDatabase = this.instance.database(this.options.databaseId)\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        this.instanceDatabase.close()\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SpannerQueryRunner(this, mode)\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => nativeParameters[key],\n        )\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        const parameterIndexMap = new Map<string, number>()\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                if (parameterIndexMap.has(key)) {\n                    return this.parametersPrefix + parameterIndexMap.get(key)\n                }\n\n                const value: any = parameters[key]\n\n                if (value === null) {\n                    return full\n                }\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (value instanceof Function) {\n                    return value()\n                }\n\n                escapedParameters.push(value)\n                parameterIndexMap.set(key, escapedParameters.length - 1)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n\n        sql = sql.replace(\n            /([ ]+)?=([ ]+)?:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (\n                full,\n                emptySpaceBefore: string,\n                emptySpaceAfter: string,\n                isArray: string,\n                key: string,\n            ): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                const value: any = parameters[key]\n                if (value === null) {\n                    return \" IS NULL\"\n                }\n\n                return full\n            },\n        )\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\\`${columnName}\\``\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(\n        tableName: string,\n        schema?: string,\n        database?: string,\n    ): string {\n        const tablePath = [tableName]\n\n        if (database) {\n            tablePath.unshift(database)\n        }\n\n        return tablePath.join(\".\")\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema: any = undefined\n\n        if (target instanceof Table || target instanceof View) {\n            const parsed = this.parseTableName(target.name)\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (target instanceof TableForeignKey) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (target instanceof EntityMetadata) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        return {\n            database:\n                (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\n            schema: driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (columnMetadata.type === \"numeric\") {\n            const lib = this.options.driver || PlatformTools.load(\"spanner\")\n            return lib.Spanner.numeric(value.toString())\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"json\") {\n            return value\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === Date\n        ) {\n            return DateUtils.mixedDateToDate(value)\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"bool\") {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === Date\n        ) {\n            value = new Date(value)\n        } else if (columnMetadata.type === \"numeric\") {\n            value = value.value\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"json\") {\n            value = typeof value === \"string\" ? JSON.parse(value) : value\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number) {\n            return \"int64\"\n        } else if (column.type === String || column.type === \"uuid\") {\n            return \"string\"\n        } else if (column.type === Date) {\n            return \"timestamp\"\n        } else if ((column.type as any) === Buffer) {\n            return \"bytes\"\n        } else if (column.type === Boolean) {\n            return \"bool\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     *\n     * Spanner does not support default values.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        return columnMetadata.default === \"\"\n            ? `\"${columnMetadata.default}\"`\n            : `${columnMetadata.default}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(\n            (idx) =>\n                idx.isUnique &&\n                idx.columns.length === 1 &&\n                idx.columns[0] === column,\n        )\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString()\n        if (column.generationStrategy === \"uuid\") return \"36\"\n\n        switch (column.type) {\n            case String:\n            case \"string\":\n            case \"bytes\":\n                return \"max\"\n            default:\n                return \"\"\n        }\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type\n\n        // used 'getColumnLength()' method, because Spanner requires column length for `string` and `bytes` data types\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`\n        } else if (column.width) {\n            type += `(${column.width})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += `(${column.precision},${column.scale})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += `(${column.precision})`\n        }\n\n        if (column.isArray) type = `array<${type}>`\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return this.instanceDatabase\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return this.instanceDatabase\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(\n        metadata: EntityMetadata,\n        insertResult: any,\n        entityIndex: number,\n    ) {\n        if (!insertResult) {\n            return undefined\n        }\n\n        if (insertResult.insertId === undefined) {\n            return Object.keys(insertResult).reduce((map, key) => {\n                const column = metadata.findColumnWithDatabaseName(key)\n                if (column) {\n                    OrmUtils.mergeDeep(\n                        map,\n                        column.createValueMap(insertResult[key]),\n                    )\n                    // OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column))); // TODO: probably should be like there, but fails on enums, fix later\n                }\n                return map\n            }, {} as ObjectLiteral)\n        }\n\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                let value: any\n                if (\n                    generatedColumn.generationStrategy === \"increment\" &&\n                    insertResult.insertId\n                ) {\n                    // NOTE: When multiple rows is inserted by a single INSERT statement,\n                    // `insertId` is the value generated for the first inserted row only.\n                    value = insertResult.insertId + entityIndex\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                    //     value = generatedColumn.getEntityValue(uuidMap);\n                }\n\n                return OrmUtils.mergeDeep(\n                    map,\n                    generatedColumn.createValueMap(value),\n                )\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            const isColumnChanged =\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== this.getColumnLength(columnMetadata) ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                !this.compareNullableValues(columnMetadata, tableColumn) ||\n                tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n\n            // DEBUG SECTION\n            // if (isColumnChanged) {\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\n            //     console.log(\n            //         \"name:\",\n            //         tableColumn.name,\n            //         columnMetadata.databaseName,\n            //     )\n            //     console.log(\n            //         \"type:\",\n            //         tableColumn.type,\n            //         this.normalizeType(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"length:\",\n            //         tableColumn.length,\n            //         this.getColumnLength(columnMetadata),\n            //     )\n            //     console.log(\n            //         \"asExpression:\",\n            //         tableColumn.asExpression,\n            //         columnMetadata.asExpression,\n            //     )\n            //     console.log(\n            //         \"generatedType:\",\n            //         tableColumn.generatedType,\n            //         columnMetadata.generatedType,\n            //     )\n            //     console.log(\n            //         \"isPrimary:\",\n            //         tableColumn.isPrimary,\n            //         columnMetadata.isPrimary,\n            //     )\n            //     console.log(\n            //         \"isNullable:\",\n            //         tableColumn.isNullable,\n            //         columnMetadata.isNullable,\n            //     )\n            //     console.log(\n            //         \"isUnique:\",\n            //         tableColumn.isUnique,\n            //         this.normalizeIsUnique(columnMetadata),\n            //     )\n            //     console.log(\"==========================================\")\n            // }\n\n            return isColumnChanged\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return this.parametersPrefix + index\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            const lib = this.options.driver || PlatformTools.load(\"spanner\")\n            this.spanner = new lib.Spanner({\n                projectId: this.options.projectId,\n            })\n        } catch (e) {\n            console.error(e)\n            throw new DriverPackageNotInstalledError(\n                \"Spanner\",\n                \"@google-cloud/spanner\",\n            )\n        }\n    }\n\n    compareNullableValues(\n        columnMetadata: ColumnMetadata,\n        tableColumn: TableColumn,\n    ): boolean {\n        // Spanner does not support NULL/NOT NULL expressions for generated columns\n        if (columnMetadata.generatedType) {\n            return true\n        }\n\n        return columnMetadata.isNullable === tableColumn.isNullable\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    protected compareDefaultValues(\n        columnMetadataValue: string | undefined,\n        databaseValue: string | undefined,\n    ): boolean {\n        if (\n            typeof columnMetadataValue === \"string\" &&\n            typeof databaseValue === \"string\"\n        ) {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\")\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\")\n        }\n\n        return columnMetadataValue === databaseValue\n    }\n\n    /**\n     * If parameter is a datetime function, e.g. \"CURRENT_TIMESTAMP\", normalizes it.\n     * Otherwise returns original input.\n     */\n    protected normalizeDatetimeFunction(value?: string) {\n        if (!value) return value\n\n        // check if input is datetime function\n        const isDatetimeFunction =\n            value.toUpperCase().indexOf(\"CURRENT_TIMESTAMP\") !== -1 ||\n            value.toUpperCase().indexOf(\"NOW\") !== -1\n\n        if (isDatetimeFunction) {\n            // extract precision, e.g. \"(3)\"\n            const precision = value.match(/\\(\\d+\\)/)\n            return precision\n                ? `CURRENT_TIMESTAMP${precision[0]}`\n                : \"CURRENT_TIMESTAMP\"\n        } else {\n            return value\n        }\n    }\n\n    /**\n     * Escapes a given comment.\n     */\n    protected escapeComment(comment?: string) {\n        if (!comment) return comment\n\n        comment = comment.replace(/\\u0000/g, \"\") // Null bytes aren't allowed in comments\n\n        return comment\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12022, "column": 0}, "map": {"version":3,"file":"DriverFactory.js","sourceRoot":"..","sources":["file:///home/user/studio/node_modules/src/driver/DriverFactory.ts"],"sourcesContent":["import { MissingDriverError } from \"../error/MissingDriverError\"\nimport { CockroachDriver } from \"./cockroachdb/CockroachDriver\"\nimport { MongoDriver } from \"./mongodb/MongoDriver\"\nimport { SqlServerDriver } from \"./sqlserver/SqlServerDriver\"\nimport { OracleDriver } from \"./oracle/OracleDriver\"\nimport { SqliteDriver } from \"./sqlite/SqliteDriver\"\nimport { CordovaDriver } from \"./cordova/CordovaDriver\"\nimport { ReactNativeDriver } from \"./react-native/ReactNativeDriver\"\nimport { NativescriptDriver } from \"./nativescript/NativescriptDriver\"\nimport { SqljsDriver } from \"./sqljs/SqljsDriver\"\nimport { MysqlDriver } from \"./mysql/MysqlDriver\"\nimport { PostgresDriver } from \"./postgres/PostgresDriver\"\nimport { ExpoDriverFactory } from \"./expo/ExpoDriverFactory\"\nimport { AuroraMysqlDriver } from \"./aurora-mysql/AuroraMysqlDriver\"\nimport { AuroraPostgresDriver } from \"./aurora-postgres/AuroraPostgresDriver\"\nimport { Driver } from \"./Driver\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { SapDriver } from \"./sap/SapDriver\"\nimport { BetterSqlite3Driver } from \"./better-sqlite3/BetterSqlite3Driver\"\nimport { CapacitorDriver } from \"./capacitor/CapacitorDriver\"\nimport { SpannerDriver } from \"./spanner/SpannerDriver\"\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection: DataSource): Driver {\n        const { type } = connection.options\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection)\n            case \"postgres\":\n                return new PostgresDriver(connection)\n            case \"cockroachdb\":\n                return new CockroachDriver(connection)\n            case \"sap\":\n                return new SapDriver(connection)\n            case \"mariadb\":\n                return new MysqlDriver(connection)\n            case \"sqlite\":\n                return new SqliteDriver(connection)\n            case \"better-sqlite3\":\n                return new BetterSqlite3Driver(connection)\n            case \"cordova\":\n                return new CordovaDriver(connection)\n            case \"nativescript\":\n                return new NativescriptDriver(connection)\n            case \"react-native\":\n                return new ReactNativeDriver(connection)\n            case \"sqljs\":\n                return new SqljsDriver(connection)\n            case \"oracle\":\n                return new OracleDriver(connection)\n            case \"mssql\":\n                return new SqlServerDriver(connection)\n            case \"mongodb\":\n                return new MongoDriver(connection)\n            case \"expo\":\n                return new ExpoDriverFactory(connection).create()\n            case \"aurora-mysql\":\n                return new AuroraMysqlDriver(connection)\n            case \"aurora-postgres\":\n                return new AuroraPostgresDriver(connection)\n            case \"capacitor\":\n                return new CapacitorDriver(connection)\n            case \"spanner\":\n                return new SpannerDriver(connection)\n            default:\n                throw new MissingDriverError(type, [\n                    \"aurora-mysql\",\n                    \"aurora-postgres\",\n                    \"better-sqlite3\",\n                    \"capacitor\",\n                    \"cockroachdb\",\n                    \"cordova\",\n                    \"expo\",\n                    \"mariadb\",\n                    \"mongodb\",\n                    \"mssql\",\n                    \"mysql\",\n                    \"nativescript\",\n                    \"oracle\",\n                    \"postgres\",\n                    \"react-native\",\n                    \"sap\",\n                    \"sqlite\",\n                    \"sqljs\",\n                    \"spanner\",\n                ])\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}