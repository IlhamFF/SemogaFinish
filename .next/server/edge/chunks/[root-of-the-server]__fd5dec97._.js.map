{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { Pool } from \"pg\";\nimport PostgresAdapter from \"@auth/pg-adapter\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\"; // Will need to install bcryptjs: npm install bcryptjs @types/bcryptjs\n\nconst pool = new Pool({\n  connectionString: process.env.POSTGRES_URL,\n  // You might want to add SSL configuration here for production\n  // ssl: {\n  //   rejectUnauthorized: false, // Adjust as per your DB's SSL requirements\n  // },\n});\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: PostgresAdapter(pool),\n  providers: [\n    Credentials({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const email = credentials.email as string;\n        const password = credentials.password as string;\n\n        try {\n          // 1. Find user by email in the 'users' table (managed by Auth.js adapter)\n          const userResult = await pool.query('SELECT * FROM users WHERE email = $1', [email]);\n          if (userResult.rows.length === 0) {\n            console.log(\"No user found with this email.\");\n            return null; // User not found\n          }\n          const user = userResult.rows[0];\n\n          // 2. Check if a password is stored (users table might not store password directly if using OAuth)\n          // For credentials, we expect a password. In our custom registration, we'll store a hashed password.\n          // The 'accounts' table might store provider-specific info, not hashed passwords for Credentials.\n          // We need to ensure our registration logic stores hashed passwords in a way we can access here.\n          // Let's assume we add a 'hashedPassword' column to our 'users' table, or a linked 'credentials' table.\n          // For simplicity in this step, let's assume 'user.hashedPassword' exists, which we'll handle in registration.\n          \n          // TEMP: For now, if 'user.hashedPassword' doesn't exist, we try to fetch it from accounts if structure allows\n          // This part is tricky with pg-adapter's default schema.\n          // A common approach is to have a custom `hashed_password` field on the `users` table,\n          // or handle password verification within a custom API endpoint if not extending the adapter's user model directly.\n\n          // For this iteration, let's assume a `hashedPassword` column on the `users` table.\n          // You'll need to add this column manually or ensure your registration creates it.\n          // Example: ALTER TABLE users ADD COLUMN \"hashedPassword\" TEXT;\n          if (!user.hashedPassword) {\n            console.log(\"User does not have a stored password for Credentials login.\");\n            return null; \n          }\n          \n          const passwordMatch = await bcrypt.compare(password, user.hashedPassword);\n\n          if (!passwordMatch) {\n            console.log(\"Password does not match.\");\n            return null; // Password incorrect\n          }\n\n          // 3. Fetch role from 'profiles' table\n          const profileResult = await pool.query('SELECT role FROM profiles WHERE \"userId\" = $1', [user.id]);\n          const role = profileResult.rows.length > 0 ? profileResult.rows[0].role : 'siswa'; // Default role\n\n          console.log(\"User authorized:\", user.id, role);\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            image: user.image,\n            role: role,\n            emailVerified: user.emailVerified,\n          };\n        } catch (error) {\n          console.error(\"Authorize error:\", error);\n          return null;\n        }\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    async jwt({ token, user, trigger, session }) {\n      if (user) { // On sign-in\n        token.id = user.id;\n        token.role = user.role;\n        token.emailVerified = user.emailVerified instanceof Date ? user.emailVerified : null;\n      }\n      // If session is updated (e.g. user role changed by admin and session re-fetched)\n      if (trigger === \"update\" && session?.user?.role) {\n        token.role = session.user.role;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n        session.user.role = token.role;\n        // session.user.emailVerified = token.emailVerified; // If you need this on client session\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/login',\n    // error: '/auth/error', // Optional: custom error page\n    // verifyRequest: '/auth/verify-request', // Optional: for Email provider\n  },\n  // Enable debug messages in development\n  debug: process.env.NODE_ENV === 'development',\n});\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/constants.ts"],"sourcesContent":["import type { Role } from '@/types';\nimport { LayoutDashboard, Users, BarChart3, Bell, Settings, UserPlus, LogOut, ShieldCheck, VerifiedIcon } from 'lucide-react';\n\nexport const APP_NAME = 'EduCentral';\n\nexport const ROLES: Record<Role, string> = {\n  admin: 'Admin',\n  guru: 'Guru',\n  siswa: 'Siswa',\n  pimpinan: 'Pimpinan',\n  superadmin: 'Super Admin',\n};\n\nexport const ROUTES = {\n  HOME: '/',\n  LOGIN: '/login',\n  REGISTER: '/register',\n  VERIFY_EMAIL: '/verify-email',\n  ADMIN_DASHBOARD: '/admin/dashboard',\n  ADMIN_USERS: '/admin/users',\n  GURU_DASHBOARD: '/guru/dashboard',\n  SISWA_DASHBOARD: '/siswa/dashboard',\n  PIMPINAN_DASHBOARD: '/pimpinan/dashboard',\n  DATA_VISUALIZATION: '/data-visualization',\n  NOTIFICATIONS: '/notifications', // Placeholder for a dedicated notifications page\n  SETTINGS: '/settings', // Placeholder\n};\n\nexport const NAV_LINKS_CONFIG = [\n  { href: ROUTES.ADMIN_DASHBOARD, label: 'Dashboard', icon: LayoutDashboard, roles: ['admin', 'superadmin'] as Role[] },\n  { href: ROUTES.GURU_DASHBOARD, label: 'Dashboard', icon: LayoutDashboard, roles: ['guru'] as Role[] },\n  { href: ROUTES.SISWA_DASHBOARD, label: 'Dashboard', icon: LayoutDashboard, roles: ['siswa'] as Role[] },\n  { href: ROUTES.PIMPINAN_DASHBOARD, label: 'Dashboard', icon: LayoutDashboard, roles: ['pimpinan'] as Role[] },\n  \n  { href: ROUTES.ADMIN_USERS, label: 'User Management', icon: Users, roles: ['admin', 'superadmin'] as Role[] },\n  { href: ROUTES.DATA_VISUALIZATION, label: 'Data Visualization', icon: BarChart3, roles: ['admin', 'guru', 'siswa', 'pimpinan', 'superadmin'] as Role[] },\n  // { href: ROUTES.NOTIFICATIONS, label: 'Notifications', icon: Bell, roles: ['admin', 'guru', 'siswa', 'pimpinan', 'superadmin'] as Role[] },\n  // { href: ROUTES.SETTINGS, label: 'Settings', icon: Settings, roles: ['admin', 'guru', 'siswa', 'pimpinan', 'superadmin'] as Role[] },\n];\n\nexport const USER_NAV_ITEMS = [\n    // { href: ROUTES.SETTINGS, label: 'Settings', icon: Settings },\n    { href: ROUTES.LOGIN, label: 'Logout', icon: LogOut, action: 'logout' },\n];\n\nexport const DEFAULT_USERS_STORAGE_KEY = 'educentral_users';\nexport const AUTH_USER_STORAGE_KEY = 'educentral_auth_user';\n"],"names":[],"mappings":";;;;;;;;;AACA;AAAA;AAAA;AAAA;;AAEO,MAAM,WAAW;AAEjB,MAAM,QAA8B;IACzC,OAAO;IACP,MAAM;IACN,OAAO;IACP,UAAU;IACV,YAAY;AACd;AAEO,MAAM,SAAS;IACpB,MAAM;IACN,OAAO;IACP,UAAU;IACV,cAAc;IACd,iBAAiB;IACjB,aAAa;IACb,gBAAgB;IAChB,iBAAiB;IACjB,oBAAoB;IACpB,oBAAoB;IACpB,eAAe;IACf,UAAU;AACZ;AAEO,MAAM,mBAAmB;IAC9B;QAAE,MAAM,OAAO,eAAe;QAAE,OAAO;QAAa,MAAM,oOAAA,CAAA,kBAAe;QAAE,OAAO;YAAC;YAAS;SAAa;IAAW;IACpH;QAAE,MAAM,OAAO,cAAc;QAAE,OAAO;QAAa,MAAM,oOAAA,CAAA,kBAAe;QAAE,OAAO;YAAC;SAAO;IAAW;IACpG;QAAE,MAAM,OAAO,eAAe;QAAE,OAAO;QAAa,MAAM,oOAAA,CAAA,kBAAe;QAAE,OAAO;YAAC;SAAQ;IAAW;IACtG;QAAE,MAAM,OAAO,kBAAkB;QAAE,OAAO;QAAa,MAAM,oOAAA,CAAA,kBAAe;QAAE,OAAO;YAAC;SAAW;IAAW;IAE5G;QAAE,MAAM,OAAO,WAAW;QAAE,OAAO;QAAmB,MAAM,4MAAA,CAAA,QAAK;QAAE,OAAO;YAAC;YAAS;SAAa;IAAW;IAC5G;QAAE,MAAM,OAAO,kBAAkB;QAAE,OAAO;QAAsB,MAAM,0NAAA,CAAA,YAAS;QAAE,OAAO;YAAC;YAAS;YAAQ;YAAS;YAAY;SAAa;IAAW;CAGxJ;AAEM,MAAM,iBAAiB;IAC1B,gEAAgE;IAChE;QAAE,MAAM,OAAO,KAAK;QAAE,OAAO;QAAU,MAAM,kNAAA,CAAA,SAAM;QAAE,QAAQ;IAAS;CACzE;AAEM,MAAM,4BAA4B;AAClC,MAAM,wBAAwB"}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { auth } from '@/auth'; // Assuming auth is configured here\nimport { ROUTES } from '@/lib/constants'; // Assuming ROUTES are defined here\n\nconst protectedRoutes = [\n  ROUTES.ADMIN_DASHBOARD,\n  ROUTES.ADMIN_USERS,\n  ROUTES.GURU_DASHBOARD,\n  ROUTES.SISWA_DASHBOARD,\n  ROUTES.PIMPINAN_DASHBOARD,\n  ROUTES.DATA_VISUALIZATION,\n  // Add any other routes that require authentication\n];\n\nconst authRoutes = [ROUTES.LOGIN, ROUTES.REGISTER, ROUTES.VERIFY_EMAIL]; // Routes for unauthenticated users\n\nexport default auth((req) => {\n  const { nextUrl } = req;\n  const session = req.auth; // Session object from Auth.js\n  const isAuthenticated = !!session;\n\n  const isProtectedRoute = protectedRoutes.some(route => nextUrl.pathname.startsWith(route));\n  const isAuthRoute = authRoutes.some(route => nextUrl.pathname.startsWith(route));\n\n  if (isProtectedRoute && !isAuthenticated) {\n    // Redirect unauthenticated users trying to access protected routes to login\n    const loginUrl = new URL(ROUTES.LOGIN, nextUrl.origin);\n    loginUrl.searchParams.set('callbackUrl', nextUrl.pathname); // Persist intended destination\n    return NextResponse.redirect(loginUrl);\n  }\n\n  if (isAuthRoute && isAuthenticated) {\n    // Redirect authenticated users trying to access login/register to their dashboard\n    let dashboardUrl = ROUTES.HOME; // Default redirect\n    if (session?.user?.role) {\n        switch (session.user.role) {\n            case 'admin': dashboardUrl = ROUTES.ADMIN_DASHBOARD; break;\n            case 'superadmin': dashboardUrl = ROUTES.ADMIN_DASHBOARD; break;\n            case 'guru': dashboardUrl = ROUTES.GURU_DASHBOARD; break;\n            case 'siswa': dashboardUrl = ROUTES.SISWA_DASHBOARD; break;\n            case 'pimpinan': dashboardUrl = ROUTES.PIMPINAN_DASHBOARD; break;\n        }\n    }\n    return NextResponse.redirect(new URL(dashboardUrl, nextUrl.origin));\n  }\n\n  // Special handling for root page based on authentication status\n  if (nextUrl.pathname === ROUTES.HOME) {\n    if (isAuthenticated) {\n        let dashboardUrl = ROUTES.SISWA_DASHBOARD; // Default for safety\n        if (session?.user?.role) {\n            switch (session.user.role) {\n                case 'admin': dashboardUrl = ROUTES.ADMIN_DASHBOARD; break;\n                case 'superadmin': dashboardUrl = ROUTES.ADMIN_DASHBOARD; break;\n                case 'guru': dashboardUrl = ROUTES.GURU_DASHBOARD; break;\n                case 'siswa': dashboardUrl = ROUTES.SISWA_DASHBOARD; break;\n                case 'pimpinan': dashboardUrl = ROUTES.PIMPINAN_DASHBOARD; break;\n            }\n        }\n        return NextResponse.redirect(new URL(dashboardUrl, nextUrl.origin));\n    } else {\n        // If on home and not authenticated, redirect to login\n        return NextResponse.redirect(new URL(ROUTES.LOGIN, nextUrl.origin));\n    }\n  }\n\n\n  // Allow request to proceed\n  return NextResponse.next();\n});\n\n// Optionally, specify paths for the middleware to run on\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - files in public folder\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|.*\\\\..*).*)',\n  ],\n};\n"],"names":[],"mappings":"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"}}]
}