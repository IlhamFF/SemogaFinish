{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/entities/account.entity.ts"],"sourcesContent":["\nimport { Entity, PrimaryColumn, Column, ManyToOne, JoinColumn } from \"typeorm\";\nimport type { AdapterAccount } from \"@auth/core/adapters\";\nimport { UserEntity } from \"./user.entity\"; // Correctly import UserEntity\n\n@Entity({ name: \"accounts\" })\nexport class AccountEntity implements AdapterAccount {\n  @PrimaryColumn({ type: \"uuid\", default: () => \"uuid_generate_v4()\" }) // Or let TypeORM handle it if not using uuid extension manually\n  id!: string;\n\n  @Column({ type: \"uuid\" })\n  userId!: string;\n\n  @Column()\n  type!: string; // \"oauth\", \"email\", \"credentials\", etc.\n\n  @Column()\n  provider!: string;\n\n  @Column()\n  providerAccountId!: string;\n\n  @Column({ type: \"varchar\", nullable: true })\n  refresh_token?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  access_token?: string | null;\n\n  @Column({ type: \"bigint\", nullable: true })\n  expires_at?: number | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  token_type?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  scope?: string | null;\n\n  @Column({ type: \"text\", nullable: true })\n  id_token?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  session_state?: string | null;\n\n  // Foreign key to UserEntity\n  @ManyToOne(() => UserEntity, (user) => user.accounts, {\n    onDelete: \"CASCADE\", // If user is deleted, delete their accounts\n  })\n  @JoinColumn({ name: \"userId\" }) // Specify the foreign key column name\n  user!: UserEntity;\n}\n"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iPAA4C,8BAA8B;;;;;IAG7D;IADZ,CAAA,GAAA,2KAAA,CAAA,SAAM,AAAD,EAAE;QAAE,MAAM;IAAW;;IACpB,MAAM;;;;IA2Cb;;WA3Ca;;YACX;;;oBAAC,CAAA,GAAA,mLAAA,CAAA,gBAAa,AAAD,EAAE;wBAAE,MAAM;wBAAQ,SAAS,IAAM;oBAAqB,GAAG,gEAAgE;;qBACtI;;YAAW;YAEX;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;oBAAO;;qBACvB;;YAAe;YAEf;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD;;qBACN;;YAAa,EAAE,wCAAwC;;YAEvD;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD;;qBACN;;YAAiB;YAEjB;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD;;qBACN;;YAA0B;YAE1B;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;wBAAW,UAAU;oBAAK;;qBAC1C;;YAA6B;YAE7B;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;wBAAW,UAAU;oBAAK;;qBAC1C;;YAA4B;YAE5B;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;wBAAU,UAAU;oBAAK;;qBACzC;;YAA0B;YAE1B;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;wBAAW,UAAU;oBAAK;;qBAC1C;;YAA0B;YAE1B;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;wBAAW,UAAU;oBAAK;;qBAC1C;;YAAqB;YAErB;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;wBAAQ,UAAU;oBAAK;;qBACvC;;YAAwB;YAExB;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;wBAAW,UAAU;oBAAK;;qBAC1C;;YAA6B;YAE7B,4BAA4B;YAC5B;;;oBAAC,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD,EAAE,IAAM,yIAAA,CAAA,aAAU,EAAE,CAAC,OAAS,KAAK,QAAQ,EAAE;wBACpD,UAAU;oBACZ;oBACC,CAAA,GAAA,kLAAA,CAAA,aAAU,AAAD,EAAE;wBAAE,MAAM;oBAAS,GAAG,sCAAsC;;qBACtE;;YAAiB"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/entities/session.entity.ts"],"sourcesContent":["\nimport { Entity, PrimaryColumn, Column, ManyToOne, JoinColumn, Index } from \"typeorm\";\nimport type { AdapterSession } from \"@auth/core/adapters\";\nimport { UserEntity } from \"./user.entity\";\n\n@Entity({ name: \"sessions\" })\nexport class SessionEntity implements AdapterSession {\n  @PrimaryColumn({ type: \"uuid\", default: () => \"uuid_generate_v4()\" })\n  id!: string;\n\n  @Column()\n  sessionToken!: string;\n\n  @Column({ type: \"uuid\" })\n  userId!: string;\n\n  @Column({ type: \"timestamp\" })\n  expires!: Date;\n\n  @ManyToOne(() => UserEntity, { onDelete: \"CASCADE\" })\n  @JoinColumn({ name: \"userId\" })\n  user!: UserEntity;\n}\n"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;IAGa;IADZ,CAAA,GAAA,2KAAA,CAAA,SAAM,AAAD,EAAE;QAAE,MAAM;IAAW;;IACpB,MAAM;;;;IAgBb;;WAhBa;;YACX;;;oBAAC,CAAA,GAAA,mLAAA,CAAA,gBAAa,AAAD,EAAE;wBAAE,MAAM;wBAAQ,SAAS,IAAM;oBAAqB;;qBACnE;;YAAW;YAEX;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD;;qBACN;;YAAqB;YAErB;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;oBAAO;;qBACvB;;YAAe;YAEf;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;oBAAY;;qBAC5B;;YAAc;YAEd;;;oBAAC,CAAA,GAAA,iLAAA,CAAA,YAAS,AAAD,EAAE,IAAM,yIAAA,CAAA,aAAU,EAAE;wBAAE,UAAU;oBAAU;oBAClD,CAAA,GAAA,kLAAA,CAAA,aAAU,AAAD,EAAE;wBAAE,MAAM;oBAAS;;qBAC7B;;YAAiB"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/entities/user.entity.ts"],"sourcesContent":["\nimport type { AdapterUser } from \"@auth/core/adapters\";\nimport { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, OneToMany } from \"typeorm\";\nimport type { Role } from \"@/types\";\nimport { AccountEntity } from \"./account.entity\";\nimport { SessionEntity } from \"./session.entity\"; // Added for completeness if needed for user relations\n\n@Entity({ name: \"users\" })\nexport class UserEntity implements AdapterUser {\n  @PrimaryGeneratedColumn(\"uuid\")\n  id!: string;\n\n  @Column({ type: \"varchar\", nullable: true })\n  name?: string | null; \n\n  @Column({ type: \"varchar\", unique: true })\n  email!: string;\n\n  @Column({ type: \"timestamp\", nullable: true })\n  emailVerified?: Date | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  image?: string | null; \n\n  @Column({ type: \"varchar\", nullable: true }) // For storing hashed password\n  passwordHash?: string | null;\n\n  @Column({\n    type: \"enum\",\n    enum: ['admin', 'guru', 'siswa', 'pimpinan', 'superadmin'],\n    default: 'siswa'\n  })\n  role!: Role;\n\n  @Column({ type: \"boolean\", default: false })\n  isVerified!: boolean; \n\n  @Column({ type: \"varchar\", nullable: true })\n  fullName?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  phone?: string | null;\n\n  @Column({ type: \"text\", nullable: true })\n  address?: string | null;\n\n  @Column({ type: \"date\", nullable: true })\n  birthDate?: string | null; \n\n  @Column({ type: \"text\", nullable: true })\n  bio?: string | null;\n\n  @Column({ type: \"varchar\", nullable: true })\n  nis?: string | null; \n\n  @Column({ type: \"varchar\", nullable: true })\n  nip?: string | null; \n\n  @Column({ type: \"date\", nullable: true })\n  joinDate?: string | null; \n\n  @Column({ type: \"varchar\", nullable: true })\n  kelasId?: string | null; \n\n  @Column(\"simple-array\", { nullable: true })\n  mataPelajaran?: string[] | null; \n\n  @CreateDateColumn({ type: \"timestamp with time zone\" })\n  createdAt!: Date;\n\n  @UpdateDateColumn({ type: \"timestamp with time zone\" })\n  updatedAt!: Date;\n\n  @OneToMany(() => AccountEntity, (account) => account.user)\n  accounts?: AccountEntity[];\n\n  @OneToMany(() => SessionEntity, (session) => session.user)\n  sessions?: SessionEntity[];\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/entities/verification-token.entity.ts"],"sourcesContent":["\nimport { Entity, PrimaryColumn, Column } from \"typeorm\";\nimport type { VerificationToken } from \"@auth/core/adapters\";\n\n@Entity({ name: \"verification_tokens\" })\nexport class VerificationTokenEntity implements VerificationToken {\n  @PrimaryColumn() // identifier + token is a composite primary key\n  identifier!: string;\n\n  @PrimaryColumn()\n  token!: string;\n\n  @Column({ type: \"timestamp\" })\n  expires!: Date;\n}\n"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;;;;IAIa;IADZ,CAAA,GAAA,2KAAA,CAAA,SAAM,AAAD,EAAE;QAAE,MAAM;IAAsB;;IAC/B,MAAM;;;;IASb;;WATa;;YACX;;;oBAAC,CAAA,GAAA,mLAAA,CAAA,gBAAa,AAAD,IAAI,gDAAgD;;qBACjE;;YAAmB;YAEnB;;;oBAAC,CAAA,GAAA,mLAAA,CAAA,gBAAa,AAAD;;qBACb;;YAAc;YAEd;;;oBAAC,CAAA,GAAA,4KAAA,CAAA,SAAM,AAAD,EAAE;wBAAE,MAAM;oBAAY;;qBAC5B;;YAAc"}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/data-source.ts"],"sourcesContent":["\nimport \"reflect-metadata\";\nimport { DataSource, type DataSourceOptions } from \"typeorm\";\nimport { UserEntity } from \"@/entities/user.entity\";\nimport { AccountEntity } from \"@/entities/account.entity\";\nimport { SessionEntity } from \"@/entities/session.entity\";\nimport { VerificationTokenEntity } from \"@/entities/verification-token.entity\";\n// Import other application-specific entities here as they are created\n// e.g., import { MataPelajaranEntity } from \"@/entities/mata-pelajaran.entity\";\n\nconst dataSourceOptions: DataSourceOptions = {\n  type: \"postgres\",\n  host: process.env.POSTGRES_HOST || \"localhost\",\n  port: Number(process.env.POSTGRES_PORT) || 5432,\n  username: process.env.POSTGRES_USER || \"postgres\",\n  password: process.env.POSTGRES_PASSWORD || \"password\",\n  database: process.env.POSTGRES_DB || \"educentral\",\n  synchronize: process.env.NODE_ENV === \"development\", // true for dev, false for prod (use migrations)\n  logging: process.env.NODE_ENV === \"development\" ? [\"query\", \"error\"] : [\"error\"],\n  entities: [\n    UserEntity,\n    AccountEntity,\n    SessionEntity,\n    VerificationTokenEntity,\n    // Add other entities here:\n    // MataPelajaranEntity,\n  ],\n  migrations: [], // Add path to migration files for production\n  subscribers: [],\n};\n\nexport const AppDataSource = new DataSource(dataSourceOptions);\n\n// Initialize DataSource\n// It's often better to initialize it once and export the initialized instance\n// or handle initialization carefully at the application's entry point.\n// For Next.js API routes, you might need to ensure it's initialized before use.\n\nlet_isDataSourceInitialized = false;\n\nexport async function getInitializedDataSource(): Promise<DataSource> {\n  if (!AppDataSource.isInitialized && !_isDataSourceInitialized) {\n    try {\n      await AppDataSource.initialize();\n      _isDataSourceInitialized = true;\n      console.log(\"DataSource has been initialized successfully.\");\n    } catch (err) {\n      console.error(\"Error during DataSource initialization:\", err);\n      throw err; // Re-throw error to handle it further up the call stack if needed\n    }\n  }\n  return AppDataSource;\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;AACA,sEAAsE;AACtE,gFAAgF;AAEhF,MAAM,oBAAuC;IAC3C,MAAM;IACN,MAAM,QAAQ,GAAG,CAAC,aAAa,IAAI;IACnC,MAAM,OAAO,QAAQ,GAAG,CAAC,aAAa,KAAK;IAC3C,UAAU,QAAQ,GAAG,CAAC,aAAa,IAAI;IACvC,UAAU,QAAQ,GAAG,CAAC,iBAAiB,IAAI;IAC3C,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,aAAa,oDAAyB;IACtC,SAAS,uCAAyC;QAAC;QAAS;KAAQ;IACpE,UAAU;QACR,yIAAA,CAAA,aAAU;QACV,4IAAA,CAAA,gBAAa;QACb,4IAAA,CAAA,gBAAa;QACb,0JAAA,CAAA,0BAAuB;KAGxB;IACD,YAAY,EAAE;IACd,aAAa,EAAE;AACjB;AAEO,MAAM,gBAAgB,IAAI,0KAAA,CAAA,aAAU,CAAC;AAE5C,wBAAwB;AACxB,8EAA8E;AAC9E,uEAAuE;AACvE,gFAAgF;AAEhF,8BAA8B;AAEvB,eAAe;IACpB,IAAI,CAAC,cAAc,aAAa,IAAI,CAAC,0BAA0B;QAC7D,IAAI;YACF,MAAM,cAAc,UAAU;YAC9B,2BAA2B;YAC3B,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,2CAA2C;YACzD,MAAM,KAAK,kEAAkE;QAC/E;IACF;IACA,OAAO;AACT"}},
    {"offset": {"line": 687, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["\nimport NextAuth, { type NextAuthOptions, type User as NextAuthUser } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { TypeORMAdapter } from \"@auth/typeorm-adapter\";\nimport { AppDataSource, getInitializedDataSource } from \"@/lib/data-source\";\nimport { UserEntity } from \"@/entities/user.entity\";\nimport bcrypt from \"bcryptjs\";\nimport type { Role } from \"@/types\";\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      id: string;\n      role: Role;\n      isVerified: boolean;\n      fullName?: string | null;\n      // name and email are already part of NextAuthUser\n    } & NextAuthUser; \n  }\n\n  interface User extends NextAuthUser {\n    role: Role;\n    isVerified: boolean;\n    fullName?: string | null;\n    passwordHash?: string | null; \n  }\n}\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    id: string;\n    role: Role;\n    isVerified: boolean;\n    picture?: string | null; // Corresponds to image in User\n    name?: string | null;\n    fullName?: string | null;\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  adapter: TypeORMAdapter(AppDataSource),\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\", placeholder: \"jsmith@example.com\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials, req) {\n        if (!credentials?.email || !credentials.password) {\n          console.log(\"Authorize: Missing credentials\");\n          return null;\n        }\n        \n        const dataSource = await getInitializedDataSource();\n        const userRepo = dataSource.getRepository(UserEntity);\n        \n        console.log(\"Authorize: Attempting to find user by email:\", credentials.email);\n        const user = await userRepo.findOne({ where: { email: credentials.email } });\n\n        if (!user) {\n          console.log(\"Authorize: No user found with email:\", credentials.email);\n          return null;\n        }\n\n        if (!user.passwordHash) {\n          console.log(\"Authorize: User found but has no passwordHash:\", user.email);\n          return null; \n        }\n        \n        console.log(\"Authorize: User found, comparing password for:\", user.email);\n        const isValidPassword = await bcrypt.compare(credentials.password, user.passwordHash);\n\n        if (!isValidPassword) {\n          console.log(\"Authorize: Invalid password for user:\", user.email);\n          return null;\n        }\n        \n        console.log(\"Authorize: Credentials valid for user:\", user.email);\n        // Return the user object that NextAuth expects, including custom fields\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name, \n          image: user.image,\n          role: user.role,\n          isVerified: user.isVerified,\n          fullName: user.fullName,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    async jwt({ token, user, trigger, session: newSessionData }) { // Renamed session to newSessionData to avoid conflict\n      // On initial sign in\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n        token.isVerified = user.isVerified;\n        token.name = user.name;\n        token.picture = user.image;\n        token.fullName = user.fullName;\n      }\n      // If session is updated (e.g., profile update)\n      if (trigger === \"update\" && newSessionData?.user) {\n        token.name = newSessionData.user.name;\n        token.picture = newSessionData.user.image;\n        // Potentially update other fields if they can be changed and you want them in the token\n        if (newSessionData.user.fullName) token.fullName = newSessionData.user.fullName;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n        session.user.role = token.role;\n        session.user.isVerified = token.isVerified;\n        session.user.name = token.name;\n        session.user.image = token.picture;\n        session.user.fullName = token.fullName;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n    // signOut: '/auth/signout',\n    // error: '/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/auth/verify-request', // (UNUSED) Used for email/passwordless login\n    // newUser: '/auth/new-user' // New users will be directed here on first sign in (leave an empty string to disable)\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  // debug: process.env.NODE_ENV === \"development\",\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 811, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["\nimport NextAuth from 'next-auth';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\n\n// export default NextAuth(authOptions).auth;\n// The above line can cause issues if authOptions has providers like Credentials that are not edge-compatible.\n// For a simpler middleware just handling session protection, we can use a more direct approach\n// or ensure authOptions are edge-compatible.\n\n// A more direct way to get the middleware if only session checking is needed,\n// or ensure your authOptions are fully edge-compatible if using the above.\n// For now, to ensure it works without deep diving into edge compatibility of TypeORM adapter:\n// We will use the recommended way to export the auth property from NextAuth instance.\n// If this still causes edge runtime issues, `authOptions` might need an edge-compatible version.\n\nconst { auth } = NextAuth(authOptions);\nexport default auth;\n\n\n// Apply middleware to all routes except /api, /_next/static, /_next/image, /favicon.ico, /login, /register\n// and any other public static assets or pages.\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - logo.png (public assets example)\n     * - login (login page)\n     * - register (register page)\n     * - forgot-password (forgot password page)\n     * - reset-password (reset password page)\n     * - verify-email (verify email page)\n     * - / (root page, which redirects or is public)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|logo.png|login|register|forgot-password|reset-password|verify-email|^/$).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;;;AAEA,6CAA6C;AAC7C,8GAA8G;AAC9G,+FAA+F;AAC/F,6CAA6C;AAE7C,8EAA8E;AAC9E,2EAA2E;AAC3E,8FAA8F;AAC9F,sFAAsF;AACtF,iGAAiG;AAEjG,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,6JAAA,CAAA,UAAQ,AAAD,EAAE,gKAAA,CAAA,cAAW;uCACtB;AAKR,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;;;;;;;KAaC,GACD;KACD;AACH"}}]
}